/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Maestro Orchestration API
 * API for managing and orchestrating Maestro runs, pipelines, and related resources.
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse } from 'axios';

export interface Run {
  /** Unique ID of the run */
  id: string;
  /** Name of the pipeline executed */
  pipeline: string;
  /** Current status of the run (e.g., Queued, Running, Succeeded, Failed) */
  status: string;
  /** Duration of the run in milliseconds */
  durationMs?: number;
  /** Cost incurred by the run in USD */
  cost?: number;
  /** Timestamp when the run was created */
  createdAt?: string;
  /**
   * OpenTelemetry Trace ID associated with the run
   * @nullable
   */
  traceId?: string | null;
}

export interface CreateRunRequest {
  /** ID of the pipeline to run */
  pipelineId: string;
  /** Estimated cost of the run for budget checks */
  estimatedCost: number;
}

export interface Pipeline {
  /** Unique ID of the pipeline */
  id: string;
  /** Name of the pipeline */
  name: string;
  /** Version of the pipeline */
  version?: string;
  /** Owner of the pipeline */
  owner?: string;
}

export interface Budget {
  /** Tenant ID */
  tenant: string;
  /** Monthly budget in USD */
  monthlyUsd: number;
  /** Current spend for the month in USD */
  currentSpend?: number;
  policy?: BudgetPolicy;
}

/**
 * Type of budget enforcement
 */
export type BudgetPolicyType = (typeof BudgetPolicyType)[keyof typeof BudgetPolicyType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BudgetPolicyType = {
  hard: 'hard',
  soft: 'soft',
} as const;

export interface BudgetPolicy {
  /** Type of budget enforcement */
  type: BudgetPolicyType;
  /** Budget limit in USD */
  limit: number;
  /** Grace percentage for soft caps (0.0 - 1.0) */
  grace?: number;
}

/**
 * Additional metadata related to the alert
 */
export type AlertEventMeta = { [key: string]: unknown };

export interface AlertEvent {
  /** Unique ID of the alert event */
  id: string;
  /** Type of alert (e.g., billing, supply-chain, slo) */
  type: string;
  /** Severity of the alert (e.g., critical, warning, info) */
  severity: string;
  /** Short summary of the alert */
  title: string;
  /** Detailed description of the alert */
  body?: string;
  /** Timestamp of the alert event in milliseconds (epoch) */
  ts: number;
  /** Additional metadata related to the alert */
  meta?: AlertEventMeta;
}

export type GetTenantBudgetParams = {
  /**
   * Tenant ID
   */
  tenant: string;
};

export const getMaestroOrchestrationAPI = () => {
  /**
   * @summary List all Maestro runs
   */
  const listRuns = <TData = AxiosResponse<Run[]>>(options?: AxiosRequestConfig): Promise<TData> => {
    return axios.get(`/runs`, options);
  };

  /**
   * @summary Create a new Maestro run
   */
  const createRun = <TData = AxiosResponse<Run>>(
    createRunRequest: CreateRunRequest,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.post(`/runs`, createRunRequest, options);
  };

  /**
   * @summary Get a Maestro run by ID
   */
  const getRunById = <TData = AxiosResponse<Run>>(
    runId: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.get(`/runs/${runId}`, options);
  };

  /**
   * This endpoint is deprecated and will be removed in future versions. Please use /runs instead.
   * @deprecated
   * @summary Get a list of deprecated runs (DEPRECATED)
   */
  const getDeprecatedRuns = <TData = AxiosResponse<Run[]>>(
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.get(`/runs/deprecated-endpoint`, options);
  };

  /**
   * @summary List all Maestro pipelines
   */
  const listPipelines = <TData = AxiosResponse<Pipeline[]>>(
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.get(`/pipelines`, options);
  };

  /**
   * @summary Get a tenant's budget details
   */
  const getTenantBudget = <TData = AxiosResponse<Budget>>(
    params: GetTenantBudgetParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.get(`/budgets/tenant`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  /**
   * @summary List all alert events
   */
  const listAlertEvents = <TData = AxiosResponse<AlertEvent[]>>(
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.get(`/alertcenter/events`, options);
  };

  return {
    listRuns,
    createRun,
    getRunById,
    getDeprecatedRuns,
    listPipelines,
    getTenantBudget,
    listAlertEvents,
  };
};
export type ListRunsResult = AxiosResponse<Run[]>;
export type CreateRunResult = AxiosResponse<Run>;
export type GetRunByIdResult = AxiosResponse<Run>;
export type GetDeprecatedRunsResult = AxiosResponse<Run[]>;
export type ListPipelinesResult = AxiosResponse<Pipeline[]>;
export type GetTenantBudgetResult = AxiosResponse<Budget>;
export type ListAlertEventsResult = AxiosResponse<AlertEvent[]>;
