"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMaestroOrchestrationAPI = exports.BudgetPolicyType = void 0;
/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Maestro Orchestration API
 * API for managing and orchestrating Maestro runs, pipelines, and related resources.
 * OpenAPI spec version: 1.0.0
 */
const axios_1 = __importDefault(require("axios"));
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.BudgetPolicyType = {
    hard: 'hard',
    soft: 'soft',
};
const getMaestroOrchestrationAPI = () => {
    /**
     * @summary List all Maestro runs
     */
    const listRuns = (options) => {
        return axios_1.default.get(`/runs`, options);
    };
    /**
     * @summary Create a new Maestro run
     */
    const createRun = (createRunRequest, options) => {
        return axios_1.default.post(`/runs`, createRunRequest, options);
    };
    /**
     * @summary Get a Maestro run by ID
     */
    const getRunById = (runId, options) => {
        return axios_1.default.get(`/runs/${runId}`, options);
    };
    /**
     * This endpoint is deprecated and will be removed in future versions. Please use /runs instead.
     * @deprecated
     * @summary Get a list of deprecated runs (DEPRECATED)
     */
    const getDeprecatedRuns = (options) => {
        return axios_1.default.get(`/runs/deprecated-endpoint`, options);
    };
    /**
     * @summary List all Maestro pipelines
     */
    const listPipelines = (options) => {
        return axios_1.default.get(`/pipelines`, options);
    };
    /**
     * @summary Get a tenant's budget details
     */
    const getTenantBudget = (params, options) => {
        return axios_1.default.get(`/budgets/tenant`, {
            ...options,
            params: { ...params, ...options?.params },
        });
    };
    /**
     * @summary List all alert events
     */
    const listAlertEvents = (options) => {
        return axios_1.default.get(`/alertcenter/events`, options);
    };
    return {
        listRuns,
        createRun,
        getRunById,
        getDeprecatedRuns,
        listPipelines,
        getTenantBudget,
        listAlertEvents,
    };
};
exports.getMaestroOrchestrationAPI = getMaestroOrchestrationAPI;
