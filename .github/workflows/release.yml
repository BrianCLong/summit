name: Release Pipeline - Build & Deploy

on:
  push:
    tags: ['v*.*.*', '*-rc*']
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options: ['patch', 'minor', 'major', 'rc']
      force_rebuild:
        description: 'Force rebuild all images'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write
  security-events: write
  id-token: write
  attestations: write

env:
  REGISTRY: ${{ vars.CONTAINER_REGISTRY || 'ghcr.io' }}
  NODE_VERSION: '20'
  PNPM_VERSION: '9'

jobs:
  release-metadata:
    name: Generate Release Metadata
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
      build_timestamp: ${{ steps.metadata.outputs.build_timestamp }}
      git_sha: ${{ steps.metadata.outputs.git_sha }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install pnpm
      uses: pnpm/action-setup@v3
      with:
        version: 9

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'pnpm'

    - name: Generate version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          case "${{ github.event.inputs.release_type }}" in
            "major") NEW_VERSION=$(echo $CURRENT_VERSION | sed 's/v\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\).*/v\1.\2.\3/' | awk -F. '{printf "v%d.%d.%d", $1+1, 0, 0}' | sed 's/v/v/');;
            "minor") NEW_VERSION=$(echo $CURRENT_VERSION | sed 's/v\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\).*/v\1.\2.\3/' | awk -F. '{printf "v%d.%d.%d", $1, $2+1, 0}' | sed 's/vv/v/');;
            "patch") NEW_VERSION=$(echo $CURRENT_VERSION | sed 's/v\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\).*/v\1.\2.\3/' | awk -F. '{printf "v%d.%d.%d", $1, $2, $3+1}' | sed 's/vv/v/');;
            "rc") NEW_VERSION="${CURRENT_VERSION}-rc.$(date +%Y%m%d%H%M)";;
          esac
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=${{ github.event.inputs.release_type == 'rc' && 'true' || 'false' }}" >> $GITHUB_OUTPUT
        else
          echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          echo "is_prerelease=${{ contains(github.ref_name, 'rc') && 'true' || 'false' }}" >> $GITHUB_OUTPUT
        fi

    - name: Generate build metadata
      id: metadata
      run: |
        echo "build_timestamp=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
        echo "git_sha=${GITHUB_SHA}" >> $GITHUB_OUTPUT

  build-containers:
    name: Build Multi-Arch Containers
    runs-on: ubuntu-latest
    needs: release-metadata
    strategy:
      matrix:
        component: [api, client, gateway]
    outputs:
      api-digest: ${{ steps.build-api.outputs.digest }}
      client-digest: ${{ steps.build-client.outputs.digest }}
      gateway-digest: ${{ steps.build-gateway.outputs.digest }}
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: network=host

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.component }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ needs.release-metadata.outputs.version }}
          type=sha,prefix={{branch}}-

    - name: Build and push container
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./services/${{ matrix.component }}/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=${{ matrix.component }}
        cache-to: type=gha,mode=max,scope=${{ matrix.component }}
        provenance: true
        sbom: true
        outputs: type=image,name=${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.component }},push=true

    - name: Set component-specific output
      id: build-${{ matrix.component }}
      run: |
        echo "digest=${{ steps.build.outputs.digest }}" >> $GITHUB_OUTPUT

  generate-sbom:
    name: Generate SBOM & Security Scan
    runs-on: ubuntu-latest
    needs: [release-metadata, build-containers]
    strategy:
      matrix:
        component: [api, client, gateway]
    steps:
    - uses: actions/checkout@v4

    - name: Setup Syft
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

    - name: Setup Trivy
      run: |
        sudo apt-get update
        sudo apt-get install -y wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install -y trivy

    - name: Generate SBOM
      run: |
        IMAGE="${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.component }}:${{ needs.release-metadata.outputs.version }}"
        echo "üîç Generating SBOM for $IMAGE"

        syft $IMAGE -o spdx-json=sbom-${{ matrix.component }}.spdx.json
        syft $IMAGE -o cyclonedx-json=sbom-${{ matrix.component }}.cyclonedx.json

        # Validate SBOM
        if [ -f "sbom-${{ matrix.component }}.spdx.json" ]; then
          PACKAGES=$(jq '.packages | length' sbom-${{ matrix.component }}.spdx.json)
          echo "‚úÖ SBOM generated: $PACKAGES packages found"
        fi

    - name: Security vulnerability scan
      run: |
        IMAGE="${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.component }}:${{ needs.release-metadata.outputs.version }}"
        echo "üîç Scanning $IMAGE for vulnerabilities"

        trivy image $IMAGE --format json --output trivy-${{ matrix.component }}.json
        trivy image $IMAGE --format sarif --output trivy-${{ matrix.component }}.sarif

        # Count vulnerabilities
        CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-${{ matrix.component }}.json 2>/dev/null || echo "0")
        HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' trivy-${{ matrix.component }}.json 2>/dev/null || echo "0")

        echo "üìä Vulnerability scan (${{ matrix.component }}):"
        echo "  Critical: $CRITICAL"
        echo "  High: $HIGH"

        # Policy enforcement
        if [ "${{ vars.ENABLE_POLICY_ENFORCE || 'false' }}" = "true" ] && [ "$CRITICAL" -gt 0 ]; then
          echo "üö® Critical vulnerabilities found - failing build"
          exit 1
        fi

    - name: Upload security artifacts
      uses: actions/upload-artifact@v4
      with:
        name: security-${{ matrix.component }}-${{ needs.release-metadata.outputs.version }}
        path: |
          sbom-${{ matrix.component }}.*
          trivy-${{ matrix.component }}.*

  sign-containers:
    name: Sign Container Images
    runs-on: ubuntu-latest
    needs: [release-metadata, build-containers, generate-sbom]
    strategy:
      matrix:
        component: [api, client, gateway]
    steps:
    - name: Install Cosign
      uses: sigstore/cosign-installer@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Sign container image
      env:
        COSIGN_EXPERIMENTAL: 1
      run: |
        IMAGE="${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.component }}:${{ needs.release-metadata.outputs.version }}"
        echo "üîê Signing $IMAGE"

        cosign sign --yes $IMAGE

        # Generate attestation
        cosign attest --yes --predicate <(echo '{"buildType":"https://github.com/actions/runner","builder":{"id":"https://github.com/actions/runner"},"metadata":{"buildInvocationId":"${{ github.run_id }}","completeness":{"parameters":true,"environment":false,"materials":false},"reproducible":false},"materials":[{"uri":"git+https://github.com/${{ github.repository }}@${{ github.sha }}","digest":{"sha1":"${{ github.sha }}"}}]}') $IMAGE

        echo "‚úÖ Image signed and attested"

  generate-evidence-bundle:
    name: Generate Evidence Bundle
    runs-on: ubuntu-latest
    needs: [release-metadata, build-containers, generate-sbom, sign-containers]
    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Generate evidence bundle
      run: |
        echo "üìã Generating evidence bundle..."

        # Create evidence directory structure
        mkdir -p evidence-bundle/{security,sbom,signing,charts,policies,attestations}

        # Collect security artifacts
        find . -name "trivy-*.json" -exec cp {} evidence-bundle/security/ \;
        find . -name "trivy-*.sarif" -exec cp {} evidence-bundle/security/ \;

        # Collect SBOMs
        find . -name "sbom-*" -exec cp {} evidence-bundle/sbom/ \;

        # Generate manifest
        cp EVIDENCE_BUNDLE.manifest.json evidence-bundle/

        # Replace template variables in manifest
        sed -i "s/{{ .Release.GitCommit }}/${{ github.sha }}/g" evidence-bundle/EVIDENCE_BUNDLE.manifest.json
        sed -i "s/{{ .Release.BuildTime }}/${{ needs.release-metadata.outputs.build_timestamp }}/g" evidence-bundle/EVIDENCE_BUNDLE.manifest.json
        sed -i "s/{{ .Release.Pipeline }}/${{ github.run_id }}/g" evidence-bundle/EVIDENCE_BUNDLE.manifest.json

        # Create tarball
        tar -czf evidence-bundle-${{ needs.release-metadata.outputs.version }}.tar.gz evidence-bundle/

        # Generate checksums
        sha256sum evidence-bundle-${{ needs.release-metadata.outputs.version }}.tar.gz > evidence-bundle-${{ needs.release-metadata.outputs.version }}.sha256

        echo "‚úÖ Evidence bundle generated"

    - name: Upload evidence bundle
      uses: actions/upload-artifact@v4
      with:
        name: evidence-bundle-${{ needs.release-metadata.outputs.version }}
        path: |
          evidence-bundle-${{ needs.release-metadata.outputs.version }}.tar.gz
          evidence-bundle-${{ needs.release-metadata.outputs.version }}.sha256

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [release-metadata, build-containers, generate-sbom, sign-containers, generate-evidence-bundle]
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

<<<<<<< HEAD
    - name: Download evidence bundle
      uses: actions/download-artifact@v4
      with:
        name: evidence-bundle-${{ needs.release-metadata.outputs.version }}
=======
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
>>>>>>> hotfix/workflow-pnpm-only

    - name: Generate release notes
      id: release_notes
      run: |
        echo "üöÄ **IntelGraph Maestro ${{ needs.release-metadata.outputs.version }}**" > release_notes.md
        echo "" >> release_notes.md
        echo "**Build Information:**" >> release_notes.md
        echo "- Git SHA: \`${{ needs.release-metadata.outputs.git_sha }}\`" >> release_notes.md
        echo "- Build Timestamp: ${{ needs.release-metadata.outputs.build_timestamp }}" >> release_notes.md
        echo "- Pipeline: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> release_notes.md
        echo "" >> release_notes.md
        echo "**Security & Compliance:**" >> release_notes.md
        echo "- ‚úÖ SLSA Level 3 provenance attestation" >> release_notes.md
        echo "- ‚úÖ Container images signed with Cosign keyless OIDC" >> release_notes.md
        echo "- ‚úÖ SBOM generated (SPDX 2.3 format)" >> release_notes.md
        echo "- ‚úÖ Vulnerability scanning completed" >> release_notes.md
        echo "" >> release_notes.md
        echo "**Container Images:**" >> release_notes.md
        echo "- \`${{ env.REGISTRY }}/${{ github.repository }}/api:${{ needs.release-metadata.outputs.version }}\`" >> release_notes.md
        echo "- \`${{ env.REGISTRY }}/${{ github.repository }}/client:${{ needs.release-metadata.outputs.version }}\`" >> release_notes.md
        echo "- \`${{ env.REGISTRY }}/${{ github.repository }}/gateway:${{ needs.release-metadata.outputs.version }}\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "**Evidence Bundle:**" >> release_notes.md
        echo "Complete attestation and security evidence bundle attached as \`evidence-bundle-${{ needs.release-metadata.outputs.version }}.tar.gz\`" >> release_notes.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.release-metadata.outputs.version }}
        name: "IntelGraph Maestro ${{ needs.release-metadata.outputs.version }}"
        body_path: release_notes.md
        draft: false
        prerelease: ${{ needs.release-metadata.outputs.is_prerelease }}
        files: |
          evidence-bundle-${{ needs.release-metadata.outputs.version }}.tar.gz
          evidence-bundle-${{ needs.release-metadata.outputs.version }}.sha256
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deployment-trigger:
    name: Trigger Deployment
    runs-on: ubuntu-latest
    needs: [release-metadata, create-release]
    if: github.ref_type == 'tag' && !contains(github.ref_name, 'rc')
    steps:
    - name: Trigger deployment workflow
      run: |
        echo "üöÄ Triggering deployment for ${{ needs.release-metadata.outputs.version }}"

<<<<<<< HEAD
        curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "${{ github.api_url }}/repos/${{ github.repository }}/actions/workflows/deploy.yml/dispatches" \
          -d '{"ref":"${{ github.ref_name }}","inputs":{"version":"${{ needs.release-metadata.outputs.version }}","environment":"production"}}'
=======
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Trigger downstream workflows
        run: |
          echo "üîÑ Triggering downstream workflows..."

          # Trigger deployment workflow
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/deploy.yml/dispatches" \
            -d '{"ref":"main","inputs":{"environment":"production","version":"${{ needs.create-release.outputs.release_tag }}"}}'

      - name: Create GitHub issue for post-release tasks
        run: |
          echo "üìã Creating post-release tracking issue..."

          cat > post-release-issue.md << EOF
          # Post-Release Tasks for ${{ needs.create-release.outputs.release_tag }}

          This issue tracks post-release activities for release ${{ needs.create-release.outputs.release_tag }}.

          ## Checklist

          - [ ] Verify deployment to production environment
          - [ ] Update documentation if needed
          - [ ] Notify stakeholders of release
          - [ ] Monitor for any issues in production
          - [ ] Update project roadmap if applicable

          ## Release Information

          - **Tag**: ${{ needs.create-release.outputs.release_tag }}
          - **Release URL**: ${{ needs.create-release.outputs.release_url }}
          - **Triggered by**: ${{ github.actor }}
          - **Release date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")

          ## Automated Actions

          - ‚úÖ Release created
          - ‚úÖ Artifacts uploaded
          - ‚úÖ Deployment triggered
          - üîÑ Monitoring production deployment

          ---
          *This issue was automatically created by the release workflow.*
          EOF

          gh issue create \
            --title "Post-release tasks for ${{ needs.create-release.outputs.release_tag }}" \
            --body-file post-release-issue.md \
            --label "release,automation" \
            --assignee "${{ github.actor }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate release summary
        run: |
          echo "## üöÄ Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Release Tag | \`${{ needs.create-release.outputs.release_tag }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Release URL | [${{ needs.create-release.outputs.release_tag }}](${{ needs.create-release.outputs.release_url }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| Triggered By | ${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Commit | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- üöÄ Production deployment triggered" >> $GITHUB_STEP_SUMMARY
          echo "- üìã Post-release tracking issue created" >> $GITHUB_STEP_SUMMARY
          echo "- üì¶ Release artifacts available for download" >> $GITHUB_STEP_SUMMARY
>>>>>>> hotfix/workflow-pnpm-only
