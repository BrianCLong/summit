name: release

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'
      - '.editorconfig'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'auto'
        type: choice
        options:
          - auto
          - patch
          - minor
          - major
          - prerelease
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write
  actions: read
  checks: read
  pull-requests: write
  issues: write
  id-token: write

jobs:
  pre-release-checks:
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    outputs:
      should_release: ${{ steps.check-release.outputs.should_release }}
      next_version: ${{ steps.semantic-release.outputs.next_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        if: ${{ !inputs.skip_tests }}
        run: |
          echo "🧪 Running test suite..."
          pnpm dlx turbo run test --cache-dir .turbo
        env:
          TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
          TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

      - name: Run linting and type checking
        if: ${{ !inputs.skip_tests }}
        run: |
          echo "🔍 Running linting and type checking..."
          pnpm dlx turbo run lint typecheck --cache-dir .turbo
        env:
          TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
          TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

      - name: Build application
        run: |
          echo "🏗️  Building application..."
          pnpm dlx turbo run build --cache-dir .turbo
        env:
          TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
          TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

      - name: Check for breaking changes
        id: breaking-changes
        run: |
          echo "🔍 Checking for breaking changes..."

          # Check if this is a breaking change based on commit messages
          breaking_change=false
          if git log --format="%s" HEAD~10..HEAD | grep -E "(BREAKING CHANGE|!:)" >/dev/null; then
            breaking_change=true
            echo "⚠️  Breaking changes detected in recent commits"
          fi

          echo "breaking_change=$breaking_change" >> $GITHUB_OUTPUT

      - name: Dry run semantic release
        id: semantic-release
        run: |
          echo "🔍 Running semantic-release dry run..."

          # Install semantic-release if not already available
          if ! command -v semantic-release &> /dev/null; then
            pnpm add -D semantic-release
          fi

          # Run semantic-release in dry-run mode to get next version
          next_version=$(npx semantic-release --dry-run --no-ci | grep "The next release version is" | awk '{print $NF}' || echo "")

          if [ -n "$next_version" ]; then
            echo "next_version=$next_version" >> $GITHUB_OUTPUT
            echo "✅ Next version would be: $next_version"
          else
            echo "next_version=" >> $GITHUB_OUTPUT
            echo "ℹ️  No release needed based on conventional commits"
          fi

      - name: Check release conditions
        id: check-release
        run: |
          should_release=false

          # Manual release trigger
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            should_release=true
            echo "✅ Manual release triggered"
          # Automatic release based on semantic-release
          elif [ -n "${{ steps.semantic-release.outputs.next_version }}" ]; then
            should_release=true
            echo "✅ Automatic release triggered by conventional commits"
          else
            echo "ℹ️  No release conditions met"
          fi

          echo "should_release=$should_release" >> $GITHUB_OUTPUT

  create-release:
    needs: pre-release-checks
    if: needs.pre-release-checks.outputs.should_release == 'true'
    runs-on: ubuntu-22.04
    timeout-minutes: 45
    outputs:
      release_tag: ${{ steps.release.outputs.tag }}
      release_url: ${{ steps.release.outputs.url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Build release artifacts
        run: |
          echo "🏗️  Building release artifacts..."
          pnpm dlx turbo run build --cache-dir .turbo
        env:
          TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
          TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

      - name: Generate changelog
        run: |
          echo "📝 Generating changelog..."

          # Create release notes
          cat > RELEASE_NOTES.md << EOF
          # Release Notes

          ## What's Changed

          ### Features
          $(git log --pretty=format:"- %s" --grep="feat:" HEAD~20..HEAD || echo "- No new features")

          ### Bug Fixes
          $(git log --pretty=format:"- %s" --grep="fix:" HEAD~20..HEAD || echo "- No bug fixes")

          ### Documentation
          $(git log --pretty=format:"- %s" --grep="docs:" HEAD~20..HEAD || echo "- No documentation changes")

          ### Other Changes
          $(git log --pretty=format:"- %s" --grep="chore:\|refactor:\|perf:\|style:" HEAD~20..HEAD || echo "- No other changes")

          ## Contributors
          $(git log --pretty=format:"- @%an" HEAD~20..HEAD | sort -u || echo "- GitHub Actions")

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/v$(git describe --tags --abbrev=0)...HEAD
          EOF

      - name: Package release artifacts
        run: |
          echo "📦 Packaging release artifacts..."

          # Create release directory
          mkdir -p release-artifacts

          # Package source code
          git archive --format=tar.gz --prefix=intelgraph-${{ needs.pre-release-checks.outputs.next_version }}/ HEAD > release-artifacts/intelgraph-${{ needs.pre-release-checks.outputs.next_version }}-source.tar.gz

          # Package built artifacts
          tar -czf release-artifacts/intelgraph-${{ needs.pre-release-checks.outputs.next_version }}-dist.tar.gz dist/ build/ || echo "No dist/build directories found"

          # Copy important files
          cp README.md release-artifacts/ || true
          cp CHANGELOG.md release-artifacts/ || true
          cp LICENSE release-artifacts/ || true

          ls -la release-artifacts/

      - name: Run semantic release
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "🚀 Running semantic-release..."

          # Configure semantic-release for manual release type if specified
          if [ "${{ inputs.release_type }}" != "auto" ] && [ "${{ inputs.release_type }}" != "" ]; then
            echo "Manual release type: ${{ inputs.release_type }}"
            # Force the release type by creating appropriate commit
            case "${{ inputs.release_type }}" in
              "major")
                git commit --allow-empty -m "feat!: manual major release

                BREAKING CHANGE: Manual major version bump"
                ;;
              "minor")
                git commit --allow-empty -m "feat: manual minor release"
                ;;
              "patch")
                git commit --allow-empty -m "fix: manual patch release"
                ;;
              "prerelease")
                git commit --allow-empty -m "feat: manual prerelease"
                ;;
            esac
          fi

          # Run semantic-release
          npx semantic-release

          # Get the created tag
          tag=$(git describe --tags --exact-match HEAD 2>/dev/null || echo "")
          if [ -n "$tag" ]; then
            echo "tag=$tag" >> $GITHUB_OUTPUT
            echo "url=https://github.com/${{ github.repository }}/releases/tag/$tag" >> $GITHUB_OUTPUT
          fi

      - name: Upload release artifacts
        if: steps.release.outputs.tag != ''
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ steps.release.outputs.tag }}
          path: |
            release-artifacts/
            RELEASE_NOTES.md
          retention-days: 90

      - name: Attach artifacts to release
        if: steps.release.outputs.tag != ''
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release.outputs.tag }}
          body_path: RELEASE_NOTES.md
          files: |
            release-artifacts/*
          draft: false
          prerelease: ${{ contains(steps.release.outputs.tag, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload SBOMs
        uses: softprops/action-gh-release@v2
        with:
          files: |
            SECURITY/sbom/${{ github.ref_name }}/*.spdx.json
            SECURITY/sbom/${{ github.ref_name }}/*.cdx.json

  post-release:
    needs: [pre-release-checks, create-release]
    if: needs.create-release.outputs.release_tag != ''
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Trigger downstream workflows
        run: |
          echo "🔄 Triggering downstream workflows..."

          # Trigger deployment workflow
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/deploy.yml/dispatches" \
            -d '{"ref":"main","inputs":{"environment":"production","version":"${{ needs.create-release.outputs.release_tag }}"}}'

      - name: Create GitHub issue for post-release tasks
        run: |
          echo "📋 Creating post-release tracking issue..."

          cat > post-release-issue.md << EOF
          # Post-Release Tasks for ${{ needs.create-release.outputs.release_tag }}

          This issue tracks post-release activities for release ${{ needs.create-release.outputs.release_tag }}.

          ## Checklist

          - [ ] Verify deployment to production environment
          - [ ] Update documentation if needed
          - [ ] Notify stakeholders of release
          - [ ] Monitor for any issues in production
          - [ ] Update project roadmap if applicable

          ## Release Information

          - **Tag**: ${{ needs.create-release.outputs.release_tag }}
          - **Release URL**: ${{ needs.create-release.outputs.release_url }}
          - **Triggered by**: ${{ github.actor }}
          - **Release date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")

          ## Automated Actions

          - ✅ Release created
          - ✅ Artifacts uploaded
          - ✅ Deployment triggered
          - 🔄 Monitoring production deployment

          ---
          *This issue was automatically created by the release workflow.*
          EOF

          gh issue create \
            --title "Post-release tasks for ${{ needs.create-release.outputs.release_tag }}" \
            --body-file post-release-issue.md \
            --label "release,automation" \
            --assignee "${{ github.actor }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate release summary
        run: |
          echo "## 🚀 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Release Tag | \`${{ needs.create-release.outputs.release_tag }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Release URL | [${{ needs.create-release.outputs.release_tag }}](${{ needs.create-release.outputs.release_url }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| Triggered By | ${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Commit | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 Production deployment triggered" >> $GITHUB_STEP_SUMMARY
          echo "- 📋 Post-release tracking issue created" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 Release artifacts available for download" >> $GITHUB_STEP_SUMMARY