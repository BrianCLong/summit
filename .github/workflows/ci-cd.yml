name: IntelGraph CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GCP_PROJECT_ID: your-gcp-project-id # <<< REPLACE THIS WITH YOUR GCP PROJECT ID
  GCR_HOSTNAME: gcr.io
  IMAGE_PREFIX: intelgraph

jobs:
  test-and-scan:
    name: Test & Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Client Dependencies & Lint & Test
        run: |
          cd client
          npm install
          npm run lint
          npm run test

      - name: Install Server Dependencies & Lint & Test
        run: |
          cd server
          npm install
          npm run lint
          npm run test
      
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
        working-directory: client

      - name: Run Playwright E2E Tests
        run: npx playwright test
        working-directory: client

      - name: Setup Trivy
        uses: aquasecurity/trivy-action@master
        with:
          install-type: 'binary'
          version: '0.50.1'

      - name: Scan for filesystem vulnerabilities
        run: trivy fs --severity HIGH,CRITICAL --exit-code 1 .

  build-and-push:
    name: Build & Push Docker Images
    needs: test-and-scan
    if: github.ref == 'refs/heads/main' # Only run on merge to main
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          # <<< REPLACE THIS WITH YOUR GCP PROJECT NUMBER AND WORKLOAD IDENTITY POOL/PROVIDER DETAILS
          # Format: projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL_ID/providers/PROVIDER_ID
          workload_identity_provider: 'projects/YOUR_GCP_PROJECT_NUMBER/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
          # <<< REPLACE THIS WITH YOUR GCP PROJECT ID AND SERVICE ACCOUNT NAME
          service_account: 'deploy-sa@YOUR_GCP_PROJECT_ID.iam.gserviceaccount.com'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Client Image
        uses: docker/build-push-action@v5
        with:
          context: ./client
          file: ./client/Dockerfile.prod
          push: true
          tags: ${{ env.GCR_HOSTNAME }}/${{ env.GCP_PROJECT_ID }}/${{ env.IMAGE_PREFIX }}/client:${{ github.sha }}

      - name: Build and Push Server Image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags: ${{ env.GCR_HOSTNAME }}/${{ env.GCP_PROJECT_ID }}/${{ env.IMAGE_PREFIX }}/server:${{ github.sha }}

  deploy-staging:
    name: Deploy to Staging
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get GKE credentials
      uses: google-github-actions/get-gke-credentials@v2
      with:
        # <<< REPLACE THIS WITH YOUR STAGING CLUSTER NAME
        cluster_name: intelgraph-staging-cluster 
        # <<< REPLACE THIS WITH YOUR STAGING CLUSTER LOCATION
        location: us-central1 

    - name: Deploy with Helm
      run: |
        helm upgrade --install intelgraph-staging ./helm/intelgraph \
          --namespace staging \
          --create-namespace \
          --set client.image.tag=${{ github.sha }} \
          --set server.image.tag=${{ github.sha }} \
          --wait

  deploy-production:
    name: Deploy to Production (Canary)
    needs: deploy-staging
    environment:
      name: production
      # <<< REPLACE THIS WITH YOUR PRODUCTION APPLICATION URL
      url: https://intelgraph.yourdomain.com 
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get GKE credentials
      uses: google-github-actions/get-gke-credentials@v2
      with:
        # <<< REPLACE THIS WITH YOUR PRODUCTION CLUSTER NAME
        cluster_name: intelgraph-prod-cluster 
        # <<< REPLACE THIS WITH YOUR PRODUCTION CLUSTER LOCATION
        location: us-central1 

    - name: Update Production Helm Chart
      run: |
        helm upgrade --install intelgraph-prod ./helm/intelgraph \
          --namespace production \
          --set client.image.tag=${{ github.sha }} \
          --set server.image.tag=${{ github.sha }}
        # Flagger will handle the progressive rollout from here