name: Build & Push (Stable)

on:
  push:
    tags: ['v*']
    branches: [main, develop, ops/ci-stabilize-*]
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force build even if tests fail'
        required: false
        default: 'false'
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: intelgraph
  NODE_VERSION: "20.13.1"
  PYTHON_VERSION: "3.11"

jobs:
  build-context:
    name: Build Context Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
      build_tag: ${{ steps.check.outputs.build_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Check build conditions
        id: check
        run: |
          # Default to build
          SHOULD_BUILD="true"
          BUILD_TAG="latest"
          
          # Set tag based on ref
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            BUILD_TAG="${{ github.ref_name }}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            BUILD_TAG="main"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            BUILD_TAG="develop"
          else
            BUILD_TAG="${{ github.ref_name }}"
          fi
          
          echo "should_build=$SHOULD_BUILD" >> $GITHUB_OUTPUT
          echo "build_tag=$BUILD_TAG" >> $GITHUB_OUTPUT
          
          echo "Will build: $SHOULD_BUILD"
          echo "Build tag: $BUILD_TAG"

  pre-build-tests:
    name: Pre-build Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build-context
    if: needs.build-context.outputs.should_build == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit
          
      - name: Build check
        run: |
          echo "Testing build process..."
          npm run build || {
            echo "❌ Build failed - cannot proceed with container build"
            exit 1
          }
          
      - name: Quick tests
        run: |
          echo "Running quick validation tests..."
          npm run test:smoke || {
            if [[ "${{ inputs.force_build }}" == "true" ]]; then
              echo "⚠️ Tests failed but force_build is enabled"
              exit 0
            else
              echo "❌ Tests failed - use force_build input to override"
              exit 1
            fi
          }

  build-push:
    name: Build & Push Container
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [build-context, pre-build-tests]
    if: needs.build-context.outputs.should_build == 'true'
    permissions:
      contents: read
      packages: write
    outputs:
      image_digest: ${{ steps.build.outputs.digest }}
      image_tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
          
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=${{ needs.build-context.outputs.build_tag }}
            type=sha,prefix={{branch}}-
            
      - name: Build and push
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_VERSION=${{ env.NODE_VERSION }}
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}
            
      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-context.outputs.build_tag }}
          format: spdx-json
          output-file: sbom.spdx.json
          
      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ github.sha }}
          path: sbom.spdx.json
          retention-days: 30

  security-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build-context, build-push]
    if: needs.build-context.outputs.should_build == 'true'
    permissions:
      security-events: write
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-context.outputs.build_tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Check for critical vulnerabilities
        run: |
          # Parse SARIF and check for critical/high issues
          if command -v jq >/dev/null 2>&1; then
            CRITICAL_COUNT=$(jq '.runs[0].results | map(select(.level == "error")) | length' trivy-results.sarif 2>/dev/null || echo "0")
            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              echo "❌ Found $CRITICAL_COUNT critical vulnerabilities in container image"
              echo "Please review the security scan results and update base images or dependencies"
              exit 1
            else
              echo "✅ No critical vulnerabilities found in container image"
            fi
          else
            echo "⚠️ jq not available, skipping vulnerability count check"
          fi

  provenance:
    name: Generate Provenance
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [build-context, build-push, security-scan]
    if: needs.build-context.outputs.should_build == 'true' && github.event_name == 'push'
    permissions:
      id-token: write
      contents: read
      packages: write
    steps:
      - name: Generate provenance attestation
        uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.0.0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          digest: ${{ needs.build-push.outputs.image_digest }}
          registry-username: ${{ github.actor }}
        secrets:
          registry-password: ${{ secrets.GITHUB_TOKEN }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build-context, build-push, security-scan]
    if: needs.build-context.outputs.should_build == 'true' && github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Deploy to staging environment
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-context.outputs.build_tag }}"
          
          # Add staging deployment logic here
          # Example: kubectl, helm, or other deployment tools
          
          echo "✅ Staging deployment completed"

  notification:
    name: Notify Build Result
    runs-on: ubuntu-latest
    needs: [build-context, build-push, security-scan]
    if: always() && needs.build-context.outputs.should_build == 'true'
    steps:
      - name: Build summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Build & Push | ${{ needs.build-push.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.build-push.result }}" == "success" ]]; then
            echo "✅ **SUCCESS**: Container image built and pushed successfully"
            echo "📦 **Image**: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-context.outputs.build_tag }}"
          else
            echo "❌ **FAILED**: Container build failed"
          fi
          
          if [[ "${{ needs.security-scan.result }}" == "failure" ]]; then
            echo "🚨 **SECURITY**: Critical vulnerabilities found - review required"
          fi