name: Auto-resolve conflicts

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: write
  pull-requests: write

jobs:
  resolve:
    runs-on: ubuntu-latest
    env:
      IS_SAME_REPO: ${{ github.event.pull_request.head.repo.full_name == github.repository }}

    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Check for lockfile conflicts
        id: check_conflicts
        run: |
          git fetch origin main

          # Check if there are merge conflicts
          if git merge-tree $(git merge-base HEAD origin/main) HEAD origin/main | grep -q '^changed in both'; then
            echo "conflicts_found=true" >> $GITHUB_OUTPUT

            # Check specifically for lockfile conflicts
            if git merge-tree $(git merge-base HEAD origin/main) HEAD origin/main | grep -q 'package-lock.json\|pnpm-lock.yaml'; then
              echo "lockfile_conflict=true" >> $GITHUB_OUTPUT
            else
              echo "lockfile_conflict=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "conflicts_found=false" >> $GITHUB_OUTPUT
            echo "lockfile_conflict=false" >> $GITHUB_OUTPUT
          fi

      - name: Auto-resolve lockfile conflicts
        if: steps.check_conflicts.outputs.lockfile_conflict == 'true' && env.IS_SAME_REPO == 'true'
        run: |
          echo "Attempting to auto-resolve lockfile conflicts..."

          # Merge main into current branch
          git merge origin/main --no-commit --no-ff || true

          # Check if lockfile is conflicted
          if git status | grep -q 'package-lock.json\|pnpm-lock.yaml'; then
            echo "Regenerating lockfiles..."

            # Remove conflicted lockfiles
            git checkout --theirs package-lock.json 2>/dev/null || true
            git checkout --theirs pnpm-lock.yaml 2>/dev/null || true

            # Regenerate based on package.json
            if [ -f "pnpm-lock.yaml" ]; then
              pnpm install --lockfile-only
              git add pnpm-lock.yaml
            elif [ -f "package-lock.json" ]; then
              npm install --package-lock-only
              git add package-lock.json
            fi

            # Commit the resolution
            git commit -m "chore: auto-resolve lockfile conflicts

Generated by auto-resolve-conflicts workflow.
Regenerated lockfile from package.json to resolve merge conflicts." || true

            # Push the resolution
            git push || {
              echo "‚ö†Ô∏è Failed to push auto-resolved conflicts"
              exit 1
            }

            echo "‚úÖ Lockfile conflicts auto-resolved and pushed"
          else
            echo "No lockfile conflicts found to resolve"
            git merge --abort || true
          fi

      - name: Skip auto-resolve for fork PRs
        if: steps.check_conflicts.outputs.lockfile_conflict == 'true' && env.IS_SAME_REPO != 'true'
        run: |
          echo "Lockfile conflicts detected but PR originates from a fork; skipping auto-resolve step."

      - name: Comment on PR
        if: steps.check_conflicts.outputs.lockfile_conflict == 'true' && env.IS_SAME_REPO == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚úÖ **Auto-resolved lockfile conflicts**\n\nThe lockfile has been regenerated from `package.json` to resolve merge conflicts.\n\nPlease verify the changes and ensure CI passes before merging.\n\n---\nü§ñ *Automated by auto-resolve-conflicts workflow*'
            })
