name: Error Budget Monitoring

on:
  # Disabled scheduled trigger until production environment is configured
  # schedule:
  #   # Every 15 minutes during business hours
  #   - cron: '*/15 8-18 * * 1-5'
  workflow_dispatch:

permissions:
  contents: read
  issues: write

env:
  GRAFANA_URL: ${{ secrets.GRAFANA_URL }}
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  error-budget-check:
    if: false  # Belt-and-suspenders guard during stabilization
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.11.x'

      - name: Check GraphQL P95 Budget
        id: graphql-budget
        run: |
          # Query Prometheus for GraphQL p95 latency
          P95_THRESHOLD="1.5"  # 1.5 seconds
          ERROR_RATE_THRESHOLD="0.5"  # 0.5%

          # Simulate metrics check (replace with actual Prometheus query)
          CURRENT_P95="1.2"
          CURRENT_ERROR_RATE="0.3"

          echo "graphql-p95=${CURRENT_P95}" >> $GITHUB_OUTPUT
          echo "graphql-error-rate=${CURRENT_ERROR_RATE}" >> $GITHUB_OUTPUT

          if (( $(echo "${CURRENT_P95} > ${P95_THRESHOLD}" | bc -l) )); then
            echo "graphql-budget-exceeded=true" >> $GITHUB_OUTPUT
            echo "‚ùå GraphQL P95 budget exceeded: ${CURRENT_P95}s > ${P95_THRESHOLD}s"
          else
            echo "graphql-budget-exceeded=false" >> $GITHUB_OUTPUT
            echo "‚úÖ GraphQL P95 within budget: ${CURRENT_P95}s ‚â§ ${P95_THRESHOLD}s"
          fi

      - name: Check Ingest E2E Budget
        id: ingest-budget
        run: |
          # Check ingest pipeline performance
          INGEST_THRESHOLD="300"  # 5 minutes for 10k docs
          DLQ_THRESHOLD="0.1"     # 0.1% DLQ rate

          # Simulate metrics (replace with actual monitoring)
          CURRENT_INGEST_TIME="240"
          CURRENT_DLQ_RATE="0.05"

          echo "ingest-time=${CURRENT_INGEST_TIME}" >> $GITHUB_OUTPUT
          echo "dlq-rate=${CURRENT_DLQ_RATE}" >> $GITHUB_OUTPUT

          if [ "${CURRENT_INGEST_TIME}" -gt "${INGEST_THRESHOLD}" ]; then
            echo "ingest-budget-exceeded=true" >> $GITHUB_OUTPUT
            echo "‚ùå Ingest E2E budget exceeded: ${CURRENT_INGEST_TIME}s > ${INGEST_THRESHOLD}s"
          else
            echo "ingest-budget-exceeded=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Ingest E2E within budget: ${CURRENT_INGEST_TIME}s ‚â§ ${INGEST_THRESHOLD}s"
          fi

      - name: Check Worker Failure Budget
        id: worker-budget
        run: |
          # Check worker failure rates
          WORKER_FAIL_THRESHOLD="1"  # 1% failure rate

          # Simulate worker metrics
          CURRENT_FAIL_RATE="0.3"

          echo "worker-fail-rate=${CURRENT_FAIL_RATE}" >> $GITHUB_OUTPUT

          if (( $(echo "${CURRENT_FAIL_RATE} > ${WORKER_FAIL_THRESHOLD}" | bc -l) )); then
            echo "worker-budget-exceeded=true" >> $GITHUB_OUTPUT
            echo "‚ùå Worker failure budget exceeded: ${CURRENT_FAIL_RATE}% > ${WORKER_FAIL_THRESHOLD}%"
          else
            echo "worker-budget-exceeded=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Worker failure rate within budget: ${CURRENT_FAIL_RATE}% ‚â§ ${WORKER_FAIL_THRESHOLD}%"
          fi

      - name: Check CI Performance Budget
        id: ci-budget
        run: |
          # Check CI performance
          CI_PASS_THRESHOLD="95"   # 95% pass rate
          CI_TIME_THRESHOLD="25"   # 25 minutes mean PR to green

          # Query GitHub API for recent CI stats
          REPO="${{ github.repository }}"

          # Simulate CI metrics
          CURRENT_PASS_RATE="97"
          CURRENT_MEAN_TIME="22"

          echo "ci-pass-rate=${CURRENT_PASS_RATE}" >> $GITHUB_OUTPUT
          echo "ci-mean-time=${CURRENT_MEAN_TIME}" >> $GITHUB_OUTPUT

          if [ "${CURRENT_PASS_RATE}" -lt "${CI_PASS_THRESHOLD}" ]; then
            echo "ci-budget-exceeded=true" >> $GITHUB_OUTPUT
            echo "‚ùå CI pass rate budget exceeded: ${CURRENT_PASS_RATE}% < ${CI_PASS_THRESHOLD}%"
          else
            echo "ci-budget-exceeded=false" >> $GITHUB_OUTPUT
            echo "‚úÖ CI pass rate within budget: ${CURRENT_PASS_RATE}% ‚â• ${CI_PASS_THRESHOLD}%"
          fi

      - name: Generate Error Budget Report
        id: report
        run: |
          cat > error-budget-report.md << EOF
          # üìä Error Budget Status Report

          **Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")

          ## Service Level Objectives (SLOs)

          | Metric | Current | Budget | Status |
          |--------|---------|---------|---------|
          | GraphQL P95 | ${{ steps.graphql-budget.outputs.graphql-p95 }}s | ‚â§ 1.5s | ${{ steps.graphql-budget.outputs.graphql-budget-exceeded == 'true' && '‚ùå EXCEEDED' || '‚úÖ OK' }} |
          | GraphQL Error Rate | ${{ steps.graphql-budget.outputs.graphql-error-rate }}% | < 0.5% | ${{ steps.graphql-budget.outputs.graphql-budget-exceeded == 'true' && '‚ùå EXCEEDED' || '‚úÖ OK' }} |
          | Ingest E2E (10k docs) | ${{ steps.ingest-budget.outputs.ingest-time }}s | < 300s | ${{ steps.ingest-budget.outputs.ingest-budget-exceeded == 'true' && '‚ùå EXCEEDED' || '‚úÖ OK' }} |
          | DLQ Rate | ${{ steps.ingest-budget.outputs.dlq-rate }}% | < 0.1% | ‚úÖ OK |
          | Worker Fail Rate | ${{ steps.worker-budget.outputs.worker-fail-rate }}% | < 1% | ${{ steps.worker-budget.outputs.worker-budget-exceeded == 'true' && '‚ùå EXCEEDED' || '‚úÖ OK' }} |
          | CI Pass Rate | ${{ steps.ci-budget.outputs.ci-pass-rate }}% | > 95% | ${{ steps.ci-budget.outputs.ci-budget-exceeded == 'true' && '‚ùå EXCEEDED' || '‚úÖ OK' }} |
          | CI Mean Time | ${{ steps.ci-budget.outputs.ci-mean-time }}m | < 25m | ‚úÖ OK |

          ## Budget Burn Rate
          - **GraphQL**: Normal burn rate
          - **Ingest**: Low burn rate
          - **Workers**: Minimal burn rate
          - **CI**: Normal burn rate

          ## Actions Required
          ${{ steps.graphql-budget.outputs.graphql-budget-exceeded == 'true' && 'üö® **IMMEDIATE**: GraphQL latency exceeding budget - investigate slow resolvers' || '' }}
          ${{ steps.ingest-budget.outputs.ingest-budget-exceeded == 'true' && 'üö® **IMMEDIATE**: Ingest pipeline degraded - check worker scaling' || '' }}
          ${{ steps.worker-budget.outputs.worker-budget-exceeded == 'true' && 'üö® **IMMEDIATE**: Worker failure rate high - check DLQ and error logs' || '' }}
          ${{ steps.ci-budget.outputs.ci-budget-exceeded == 'true' && '‚ö†Ô∏è **MONITOR**: CI reliability declining - review flaky tests' || '' }}

          EOF

          # Check if any budgets exceeded
          ALERT_NEEDED="false"
          if [ "${{ steps.graphql-budget.outputs.graphql-budget-exceeded }}" = "true" ] || \
             [ "${{ steps.ingest-budget.outputs.ingest-budget-exceeded }}" = "true" ] || \
             [ "${{ steps.worker-budget.outputs.worker-budget-exceeded }}" = "true" ] || \
             [ "${{ steps.ci-budget.outputs.ci-budget-exceeded }}" = "true" ]; then
            ALERT_NEEDED="true"
          fi

          echo "alert-needed=${ALERT_NEEDED}" >> $GITHUB_OUTPUT

      - name: Create or Update Issue
        if: steps.report.outputs.alert-needed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('error-budget-report.md', 'utf8');

            // Look for existing error budget issue
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['error-budget', 'slo-violation'],
              state: 'open'
            });

            if (issues.data.length > 0) {
              // Update existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                body: `## Updated Error Budget Report\n\n${report}`
              });
            } else {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'üö® Error Budget Violation Detected',
                body: report,
                labels: ['error-budget', 'slo-violation', 'P0']
              });
            }

      - name: Notify Slack
        if: steps.report.outputs.alert-needed == 'true'
        run: |
          curl -X POST "${{ env.SLACK_WEBHOOK }}" \
            -H 'Content-type: application/json' \
            --data '{
              "text": "üö® IntelGraph Error Budget Violation",
              "attachments": [
                {
                  "color": "danger",
                  "title": "SLO Violation Detected",
                  "fields": [
                    {
                      "title": "GraphQL P95",
                      "value": "${{ steps.graphql-budget.outputs.graphql-p95 }}s",
                      "short": true
                    },
                    {
                      "title": "Worker Failures",
                      "value": "${{ steps.worker-budget.outputs.worker-fail-rate }}%",
                      "short": true
                    },
                    {
                      "title": "Action Required",
                      "value": "Check error budget dashboard and recent deployments",
                      "short": false
                    }
                  ]
                }
              ]
            }'

      - name: Upload Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: error-budget-report-${{ github.run_number }}
          path: error-budget-report.md
          retention-days: 30