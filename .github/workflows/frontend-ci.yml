name: Frontend CI

on:
  pull_request:
    branches:
      - 'feat/**'
      - 'feature/**'
    paths:
      - 'client/**'
      - '.github/workflows/frontend-ci.yml'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'pnpm-workspace.yaml'
      - 'pnpm-lock.yaml.rehydrated'
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read

env:
  PNPM_VERSION: 9.12.0

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.11.0
          cache: 'pnpm'

      - name: Enable Corepack
        run: corepack enable

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install dependencies
        run: pnpm install --filter intelgraph-client... --config.shared-workspace-lockfile=false --no-frozen-lockfile

      - name: Run ESLint
        run: pnpm --filter intelgraph-client lint

  test:
    name: Unit Tests
    needs: lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.11.0
          cache: 'pnpm'

      - name: Enable Corepack
        run: corepack enable

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install dependencies
        run: pnpm install --filter intelgraph-client... --config.shared-workspace-lockfile=false --no-frozen-lockfile

      - name: Run Jest
        env:
          JEST_JUNIT_OUTPUT_DIR: client/test-results/junit
          JEST_JUNIT_OUTPUT_NAME: junit.xml
        run: pnpm --filter intelgraph-client test:ci

      - name: Upload JUnit Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: client-junit
          path: client/test-results/junit
          if-no-files-found: ignore

      - name: Upload Coverage Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: client-coverage
          path: client/coverage
          if-no-files-found: ignore

  build:
    name: Build Artifact
    needs: test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.11.0
          cache: 'pnpm'

      - name: Enable Corepack
        run: corepack enable

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install dependencies
        run: pnpm install --filter intelgraph-client... --config.shared-workspace-lockfile=false --no-frozen-lockfile

      - name: Build Frontend
        run: pnpm --filter intelgraph-client build

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: client-build
          path: client/dist

  sonarqube:
    name: SonarQube Scan
    needs: test
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.11.0

      - name: Enable Corepack
        run: corepack enable

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install dependencies
        run: pnpm install --filter intelgraph-client... --config.shared-workspace-lockfile=false --no-frozen-lockfile

      - name: Download Coverage Artifact
        uses: actions/download-artifact@v4
        with:
          name: client-coverage
          path: client/coverage

      - name: Run SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          projectBaseDir: client

      - name: Upload SonarQube Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sonarqube-report
          path: client/.scannerwork
          if-no-files-found: ignore
