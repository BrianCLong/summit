name: Auto Update PRs (safe)
on:
  schedule: [{ cron: "13,43 * * * *" }]  # jittered from :11,:41
  workflow_dispatch: {}

concurrency:
  group: auto-update-prs-${{ github.ref }}
  cancel-in-progress: true

env:
  ACTIONS_QUEUE_THRESHOLD: ${{ vars.ACTIONS_QUEUE_THRESHOLD || '15' }}
  START_JITTER_MAX_SEC: ${{ vars.START_JITTER_MAX_SEC || '240' }}

permissions:
  contents: write
  pull-requests: read
  actions: read

jobs:
  guard:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    outputs:
      saturated: ${{ steps.guard.outputs.saturated }}
    steps:
      - uses: actions/checkout@v4
      - id: guard
        uses: ./.github/actions/backlog-guard

      - name: Summarize guard decision
        if: steps.guard.outputs.saturated == 'true'
        run: |
          echo "⚠️ **Backlog Guard Active**" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "Queue depth exceeded threshold (${{ env.ACTIONS_QUEUE_THRESHOLD }}). Skipping scheduled run to preserve runner capacity." >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "Run \`gh workflow run auto-update-prs.yml\` to trigger manually (bypasses guard)." >> "$GITHUB_STEP_SUMMARY"

  update:
    if: github.event_name != 'schedule' || needs.guard.outputs.saturated != 'true'
    needs: [guard]
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 2
    steps:
      - name: Start jitter
        if: github.event_name == 'schedule'
        run: sleep $((RANDOM%${START_JITTER_MAX_SEC:-240}+30))
      - name: List out-of-date PRs
        id: list
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr list --state open --json number,updateBranch --jq '
            [.[] | select(.updateBranch == true) | .number] | @tsv' | tr '\t' '\n' > prs.txt || true
          echo "prs=$(cat prs.txt | tr '\n' ' ')" >> $GITHUB_OUTPUT

      - name: Update branches (safe server-side)
        if: steps.list.outputs.prs != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for pr in ${{ steps.list.outputs.prs }}; do
            echo "🔄 Updating PR #$pr"
            gh pr update "$pr" --update-branch || true
          done
