name: Load Testing Pipeline

permissions:
  contents: read

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run full load tests nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of load test to run'
        required: true
        default: 'smoke'
        type: choice
        options:
          - smoke
          - load
          - soak
          - capacity
      duration:
        description: 'Test duration (for load tests)'
        required: false
        default: '300s'
      vus:
        description: 'Virtual users (for load tests)'
        required: false
        default: '50'

jobs:
  smoke-test:
    name: Smoke Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && inputs.test_type == 'smoke')
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: test-password
          POSTGRES_USER: test-user
          POSTGRES_DB: maestro_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: server/pnpm-lock.yaml
      
      - name: Install dependencies
        run: |
          cd server
          pnpm install --frozen-lockfile
      
      - name: Start Maestro server
        run: |
          cd server
          pnpm run build
          DATABASE_URL="postgresql://test-user:test-password@localhost:5432/maestro_test" \
          REDIS_URL="redis://localhost:6379" \
          NODE_ENV=test \
          pnpm start &
          
          # Wait for server to be ready
          timeout 60 bash -c 'until curl -f http://localhost:4000/health; do sleep 2; done'
        env:
          JWT_SECRET: test-secret-key-for-ci
          CONDUCTOR_ENABLED: 'false'
      
      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
      
      - name: Run smoke test
        run: |
          cd tests/load
          k6 run --vus 1 --duration 30s maestro-load-test.js
        env:
          BASE_URL: http://localhost:4000

  load-test:
    name: Load Test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && inputs.test_type == 'load')
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: test-password
          POSTGRES_USER: test-user
          POSTGRES_DB: maestro_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: server/pnpm-lock.yaml
      
      - name: Install dependencies
        run: |
          cd server
          pnpm install --frozen-lockfile
      
      - name: Start Maestro server
        run: |
          cd server
          pnpm run build
          DATABASE_URL="postgresql://test-user:test-password@localhost:5432/maestro_test" \
          REDIS_URL="redis://localhost:6379" \
          NODE_ENV=test \
          pnpm start &
          
          timeout 60 bash -c 'until curl -f http://localhost:4000/health; do sleep 2; done'
        env:
          JWT_SECRET: test-secret-key-for-ci
          CONDUCTOR_ENABLED: 'false'
      
      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
      
      - name: Run load test
        run: |
          cd tests/load
          VUS="${{ inputs.vus || '50' }}"
          DURATION="${{ inputs.duration || '300s' }}"
          k6 run --vus "$VUS" --duration "$DURATION" maestro-load-test.js
        env:
          BASE_URL: http://localhost:4000
      
      - name: Upload load test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: load-test-results
          path: |
            tests/load/results.json
            tests/load/summary.html
          retention-days: 30

  capacity-test:
    name: Capacity Planning Test
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && inputs.test_type == 'capacity')
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: test-password
          POSTGRES_USER: test-user
          POSTGRES_DB: maestro_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: server/pnpm-lock.yaml
      
      - name: Install dependencies
        run: |
          cd server
          pnpm install --frozen-lockfile
      
      - name: Start Maestro server
        run: |
          cd server
          pnpm run build
          DATABASE_URL="postgresql://test-user:test-password@localhost:5432/maestro_test" \
          REDIS_URL="redis://localhost:6379" \
          NODE_ENV=test \
          pnpm start &
          
          timeout 60 bash -c 'until curl -f http://localhost:4000/health; do sleep 2; done'
        env:
          JWT_SECRET: test-secret-key-for-ci
          CONDUCTOR_ENABLED: 'false'
      
      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
      
      - name: Run capacity planning test
        run: |
          cd tests/load
          k6 run capacity-planning.js --out json=capacity-results.json
        env:
          BASE_URL: http://localhost:4000
      
      - name: Upload capacity test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: capacity-test-results
          path: |
            tests/load/capacity-results.json
          retention-days: 90
      
      - name: Generate capacity report
        run: |
          cd tests/load
          echo "# Capacity Planning Report - $(date)" > capacity-report.md
          echo "" >> capacity-report.md
          echo "Generated from nightly capacity test run." >> capacity-report.md
          echo "" >> capacity-report.md
          echo "## Key Metrics" >> capacity-report.md
          echo "- Test Date: $(date)" >> capacity-report.md
          echo "- Test Duration: Progressive load up to 300 VUs" >> capacity-report.md
          echo "- Environment: GitHub Actions CI" >> capacity-report.md
          echo "" >> capacity-report.md
          echo "## Results Analysis" >> capacity-report.md
          echo "Review the uploaded capacity-results.json for detailed metrics." >> capacity-report.md
      
      - name: Upload capacity report
        uses: actions/upload-artifact@v4
        with:
          name: capacity-planning-report
          path: tests/load/capacity-report.md
          retention-days: 90

  soak-test:
    name: Soak Test (4 hours)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && inputs.test_type == 'soak'
    timeout-minutes: 300  # 5 hours to account for setup/teardown
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: test-password
          POSTGRES_USER: test-user
          POSTGRES_DB: maestro_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: server/pnpm-lock.yaml
      
      - name: Install dependencies
        run: |
          cd server
          pnpm install --frozen-lockfile
      
      - name: Start Maestro server with monitoring
        run: |
          cd server
          npm run build
          
          # Start with memory monitoring
          DATABASE_URL="postgresql://test-user:test-password@localhost:5432/maestro_test" \
          REDIS_URL="redis://localhost:6379" \
          NODE_ENV=test \
          npm start &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          
          timeout 60 bash -c 'until curl -f http://localhost:4000/health; do sleep 2; done'
          
          # Start memory monitoring in background
          (while true; do
            echo "$(date): Memory usage:"
            ps -p $SERVER_PID -o pid,vsz,rss,pcpu --no-headers || break
            sleep 300  # Every 5 minutes
          done) > memory-monitor.log &
        env:
          JWT_SECRET: test-secret-key-for-ci
          CONDUCTOR_ENABLED: 'false'
      
      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
      
      - name: Run soak test (4 hours)
        run: |
          cd tests/load
          k6 run --duration 14400s soak-test.js --out json=soak-results.json
        env:
          BASE_URL: http://localhost:4000
      
      - name: Generate soak test report
        run: |
          cd tests/load
          echo "# 4-Hour Soak Test Report - $(date)" > soak-report.md
          echo "" >> soak-report.md
          echo "## Test Summary" >> soak-report.md
          echo "- Duration: 4 hours (14,400 seconds)" >> soak-report.md
          echo "- Load: 50 sustained virtual users" >> soak-report.md
          echo "- Environment: GitHub Actions CI" >> soak-report.md
          echo "" >> soak-report.md
          echo "## Memory Monitoring" >> soak-report.md
          if [ -f ../memory-monitor.log ]; then
            echo "Memory usage during test:" >> soak-report.md
            echo '```' >> soak-report.md
            tail -20 ../memory-monitor.log >> soak-report.md
            echo '```' >> soak-report.md
          fi
      
      - name: Upload soak test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: soak-test-results
          path: |
            tests/load/soak-results.json
            tests/load/soak-report.md
            memory-monitor.log
          retention-days: 90