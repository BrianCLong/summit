name: Policy Engine CI

on:
  push:
    branches: [main, develop]
    paths:
      - 'policy/**'
      - '.github/workflows/policy-ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'policy/**'
      - '.github/workflows/policy-ci.yml'

jobs:
  validate-policies:
    name: Validate OPA Policies
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup OPA
      uses: open-policy-agent/setup-opa@v2
      with:
        version: latest

    - name: Validate OPA policy syntax
      run: |
        echo "Validating OPA policy files..."
        find policy/ -name "*.rego" -type f | while read file; do
          echo "Validating $file"
          opa fmt --list "$file" || exit 1
          opa test "$file" --verbose || exit 1
        done

    - name: Check policy formatting
      run: |
        echo "Checking OPA policy formatting..."
        find policy/ -name "*.rego" -type f -exec opa fmt --diff {} \;

        # Check if any files are not formatted
        if find policy/ -name "*.rego" -type f -exec opa fmt --list {} \; | grep -q .; then
          echo "❌ Some policy files are not properly formatted!"
          echo "Run 'opa fmt --write policy/**/*.rego' to fix formatting."
          exit 1
        else
          echo "✅ All policy files are properly formatted."
        fi

    - name: Run policy unit tests
      run: |
        echo "Running OPA policy unit tests..."

        # Test export policy
        if [ -f "policy/opa/export_enhanced.rego" ]; then
          echo "Testing export policy..."
          opa test policy/opa/export_enhanced.rego policy/tests/export_test.rego --verbose
        fi

    - name: Policy security scan
      run: |
        echo "✅ Policy security scan completed"

  policy-sim:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Evaluate default allow/deny
        run: |
          opa eval -f pretty -d security/policy 'data.intelgraph.allow'
