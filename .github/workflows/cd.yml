name: CD Pipeline
on:
  workflow_run:
    workflows: ['release-signoff']
    types: [completed]
  workflow_dispatch:
    inputs:
      no_op:
        description: 'No-op run (skip cluster changes)'
        required: false
        default: 'false'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  id-token: write
  packages: read

jobs:
  build-maestro:
    name: Build Maestro Control Plane
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      digest: ${{ steps.out.outputs.digest }}
      immutable_ref: ${{ steps.out.outputs.immutable_ref }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Build and push maestro-control-plane image
        env:
          IMG: ghcr.io/brianclong/maestro-control-plane:sha-${{ github.sha }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.IMG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Install crane
        run: |
          curl -sSfL https://github.com/google/go-containerregistry/releases/download/v0.19.2/crane_0.19.2_Linux_x86_64.tar.gz \
            | sudo tar -xz -C /usr/local/bin crane

      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      - name: Cosign sign image (keyless)
        env:
          COSIGN_EXPERIMENTAL: '1'
          IMG: ghcr.io/brianclong/maestro-control-plane:sha-${{ github.sha }}
        run: |
          cosign sign --yes "$IMG"

      - name: Output digest
        id: out
        env:
          IMG: ghcr.io/brianclong/maestro-control-plane:sha-${{ github.sha }}
        run: |
          set -euo pipefail
          DIGEST=$(crane digest "$IMG")
          echo "digest=${DIGEST}" >> $GITHUB_OUTPUT
          echo "immutable_ref=ghcr.io/brianclong/maestro-control-plane@${DIGEST}" >> $GITHUB_OUTPUT
  # Release and build images for tags
  release:
    name: Release & Build
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    permissions:
      contents: write
      packages: write
    outputs:
      version: ${{ steps.version.outputs.version }}
    strategy:
      matrix:
        service:
          - api-gateway
          - analytics-service
          - ml-engine
          - graph-analytics
          - feed-processor
          - search-engine
          - workflow-engine
          - mobile-interface
    steps:
      - name: Checkout code
        uses: actions/checkout@c9ef52556095b32f140b0c7d74474f53696d9000 # v4

      - name: Extract version
        id: version
        run: echo "version=${{ github.event.workflow_run.head_commit.id }}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@94ab11c4e8a0292eaf4d3e5b44313865b0473544 # v3

      - name: Log in to Container Registry
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c # v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@573961664f784b8d022460d516eda0a0959374ac # v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=raw,value=${{ github.event.workflow_run.head_commit.id }}
            type=raw,value=latest

      - name: Build and push image
        uses: docker/build-push-action@2568b8024053d353f34a2ca2d4de679415494351 # v5
        with:
          context: .
          file: ./apps/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Create GitHub Release
        if: matrix.service == 'api-gateway'
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: IntelGraph MLFP v${{ steps.version.outputs.version }}
          body: |
            ## 🚀 IntelGraph MLFP Release v${{ steps.version.outputs.version }}

            ### Docker Images
            - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api-gateway:v${{ steps.version.outputs.version }}`
            - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/analytics-service:v${{ steps.version.outputs.version }}`
            - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ml-engine:v${{ steps.version.outputs.version }}`
            - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/graph-analytics:v${{ steps.version.outputs.version }}`
            - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/feed-processor:v${{ steps.version.outputs.version }}`
            - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/search-engine:v${{ steps.version.outputs.version }}`
            - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/workflow-engine:v${{ steps.version.outputs.version }}`
            - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/mobile-interface:v${{ steps.version.outputs.version }}`

            ### Deployment
            ```bash
            helm upgrade --install intelgraph ./deploy/helm/intelgraph \
              -f ./deploy/helm/intelgraph/values.yaml \
              -f ./deploy/helm/intelgraph/values-prod.yaml \
              --set global.tag=v${{ steps.version.outputs.version }}
            ```
          draft: false
          prerelease: false

  # Deploy to staging environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    needs: [release, build-maestro]
    environment:
      name: staging
      url: https://staging.intelgraph.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@c9ef52556095b32f140b0c7d74474f53696d9000 # v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e0715726ac04ae4 # v4
        with:
          role-to-assume: ${{ secrets.AWS_STAGING_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@a8293405358683a03b7f843855a6ab12cf159a6a # v4
        with:
          version: 'v1.30.0'

      - name: Setup Helm
        uses: azure/setup-helm@fe362624587c032501648691abc1165b615b2e6f # v3
        with:
          version: '3.14.0'

      - name: Update kubeconfig
        if: ${{ !(github.event_name == 'workflow_dispatch' && inputs.no_op == 'true') }}
        run: |
          aws eks update-kubeconfig \
            --region ${{ secrets.AWS_REGION }}
            --name ${{ secrets.EKS_STAGING_CLUSTER }}

      - name: Deploy Maestro (Helm overlay) to staging
        if: ${{ !(github.event_name == 'workflow_dispatch' && inputs.no_op == 'true') }}
        env:
          HOST: ${{ vars.MAESTRO_HOST_STAGING }}
          IMAGE_TAG: sha-${{ github.sha }}
        run: |
          set -euo pipefail
          : "${HOST:=maestro.staging.intelgraph.local}"
          bash scripts/deploy-maestro-helm.sh

      - name: Install kubectl-argo-rollouts plugin
        run: |
          set -euo pipefail
          VERSION=v1.6.2
          curl -sL -o kubectl-argo-rollouts https://github.com/argoproj/argo-rollouts/releases/download/${VERSION}/kubectl-argo-rollouts-linux-amd64
          sudo install -m 0755 kubectl-argo-rollouts /usr/local/bin/kubectl-argo-rollouts
          kubectl-argo-rollouts version || true

      - name: Apply Gatekeeper constraints (digest, limits)
        if: ${{ !(github.event_name == 'workflow_dispatch' && inputs.no_op == 'true') }}
        run: |
          make gatekeeper-apply || true

      - name: Render Rollout manifest with envsubst (staging)
        if: ${{ !(github.event_name == 'workflow_dispatch' && inputs.no_op == 'true') }}
        env:
          PROM_ADDRESS: ${{ vars.PROM_ADDRESS_STAGING || 'http://kube-prometheus-stack-prometheus.monitoring.svc:9090' }}
        run: |
          set -euo pipefail
          envsubst < deploy/argo/rollout-maestro.tmpl.yaml > deploy/argo/rollout-maestro.yaml

      - name: Render and apply OIDC auth (staging)
        if: ${{ !(github.event_name == 'workflow_dispatch' && inputs.no_op == 'true') }}
        env:
          OIDC_ISSUER: ${{ secrets.OIDC_ISSUER_STAGING }}
          OIDC_CLIENT_ID: ${{ secrets.OIDC_CLIENT_ID_STAGING }}
          OIDC_CLIENT_SECRET_B64: ${{ secrets.OIDC_CLIENT_SECRET_B64_STAGING }}
          JWT_SECRET_B64: ${{ secrets.JWT_SECRET_B64_STAGING }}
          SESSION_KEY_B64: ${{ secrets.SESSION_KEY_B64_STAGING }}
          HOST: ${{ vars.MAESTRO_HOST_STAGING || 'maestro.staging.intelgraph.local' }}
          COOKIE_DOMAIN: ${{ vars.MAESTRO_COOKIE_DOMAIN_STAGING || '.intelgraph.io' }}
          REDIRECT_URL: https://${{ vars.MAESTRO_HOST_STAGING || 'maestro.staging.intelgraph.local' }}/oauth2/callback
          POST_LOGOUT_URL: https://${{ vars.MAESTRO_HOST_STAGING || 'maestro.staging.intelgraph.local' }}/conductor
        run: |
          set -euo pipefail
          envsubst < infra/k8s/auth/oidc-auth.tmpl.yaml > /tmp/oidc-auth.yaml
          kubectl apply -f /tmp/oidc-auth.yaml

      - name: Verify image signature (cosign)
        if: ${{ always() }}
        env:
          COSIGN_EXPERIMENTAL: '1'
          IMMUTABLE_REF: ${{ needs.build-maestro.outputs.immutable_ref }}
        run: |
          set -euo pipefail
          cosign verify --certificate-oidc-issuer https://token.actions.githubusercontent.com "$IMMUTABLE_REF"

      - name: Deploy Rollout and pin image (staging)
        if: ${{ !(github.event_name == 'workflow_dispatch' && inputs.no_op == 'true') }}
        env:
          IMMUTABLE_REF: ${{ needs.build-maestro.outputs.immutable_ref }}
        run: |
          set -euo pipefail
          kubectl apply -f deploy/argo/namespace.yaml
          kubectl -n maestro apply -f deploy/argo/services.yaml
          kubectl -n maestro apply -f deploy/argo/ingress.yaml
          make rollout-apply NS=maestro
          make rollout-pin NS=maestro IMMUTABLE_REF="${IMMUTABLE_REF}"

      - name: Promote rollout if SLO burn < 0.5 (staging)
        if: ${{ !(github.event_name == 'workflow_dispatch' && inputs.no_op == 'true') }}
        env:
          SLO_GATE_BASE: ${{ vars.SLO_GATE_BASE_STAGING || 'https://staging.intelgraph.example.com' }}
        run: |
          node tools/ci/slo_gate.js --runbook conductor --maxBurn 0.5

      - name: Wait for rollout to be Healthy (staging)
        if: ${{ !(github.event_name == 'workflow_dispatch' && inputs.no_op == 'true') }}
        run: |
          kubectl-argo-rollouts -n maestro status rollout/maestro-server-rollout --watch --timeout 15m

      - name: Run witness (staging)
        if: ${{ !(github.event_name == 'workflow_dispatch' && inputs.no_op == 'true') }}
        run: |
          make witness NS=maestro
          ls -la artifacts || true

      - name: Upload witness bundle (staging)
        if: ${{ !(github.event_name == 'workflow_dispatch' && inputs.no_op == 'true') }}
        uses: actions/upload-artifact@v4
        with:
          name: witness-staging
          path: artifacts/witness_*.tar.gz
          if-no-files-found: ignore

      - name: Ensure witness artifact present (staging)
        if: ${{ !(github.event_name == 'workflow_dispatch' && inputs.no_op == 'true') }}
        run: |
          test -n "$(ls -1 artifacts/witness_*.tar.gz 2>/dev/null)" || { echo "witness artifact missing"; exit 1; }

      - name: Deploy to staging
        if: ${{ !(github.event_name == 'workflow_dispatch' && inputs.no_op == 'true') }}
        run: |
          helm upgrade --install intelgraph ./deploy/helm/intelgraph \
            --namespace intelgraph-staging \
            --create-namespace \
            --values ./deploy/helm/intelgraph/values.yaml \
            --values ./deploy/helm/intelgraph/values-staging.yaml \
            --set global.tag=v${{ needs.release.outputs.version }} \
            --set global.ingress.host=staging.intelgraph.example.com \
            --timeout 600s \
            --wait

      - name: Run smoke tests
        run: |
          kubectl wait --for=condition=ready pod \
            --selector=app.kubernetes.io/part-of=intelgraph \
            --namespace=intelgraph-staging \
            --timeout=300s

          # Basic health check
          curl -f https://staging.intelgraph.example.com/health

      - name: Notify Slack on success
        if: success()
        uses: 8398a7/action-slack@3745974f033374bab12f69056103df500c412b74 # v3
        with:
          status: success
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: '🚀 IntelGraph staging deployment successful!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: failure()
        uses: 8398a7/action-slack@3745974f033374bab12f69056103df500c412b74 # v3
        with:
          status: failure
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: '❌ IntelGraph staging deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Run E2E tests against staging
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    steps:
      - name: Checkout code
        uses: actions/checkout@c9ef52556095b32f140b0c7d74474f53696d9000 # v4

      - name: Setup Node.js
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Playwright
        run: |
          npm ci
          npx playwright install --with-deps

      - name: Run E2E tests
        run: |
          npx playwright test
        env:
          BASE_URL: https://staging.intelgraph.example.com
          E2E_USER: ${{ secrets.E2E_TEST_USER }}
          E2E_PASS: ${{ secrets.E2E_TEST_PASS }}

      - name: Upload test results
        uses: actions/upload-artifact@0b7f8f6 # v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Load testing
  load-tests:
    name: Load Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    steps:
      - name: Checkout code
        uses: actions/checkout@c9ef52556095b32f140b0c7d74474f53696d9000 # v4

      - name: Setup k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run load tests
        run: |
          k6 run deploy/k6/graph_queries.js \
            --env GRAPHQL_URL=https://staging.intelgraph.example.com/graphql \
            --env K6_TOKEN=${{ secrets.K6_TEST_TOKEN }}

      - name: Upload load test results
        uses: actions/upload-artifact@0b7f8f6 # v4
        if: always()
        with:
          name: load-test-results
          path: summary.json
          retention-days: 30

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    steps:
      - name: Checkout code
        uses: actions/checkout@c9ef52556095b32f140b0c7d74474f53696d9000 # v4

      - name: ZAP baseline scan
        uses: zaproxy/action-baseline@bf6310e89f3a7513423e01893a33c184df27b38d # v0.12.0
        with:
          target: 'https://staging.intelgraph.example.com'
          rules_file_name: './deploy/zap/baseline.conf'
          cmd_options: '-a'

      - name: Upload ZAP results
        uses: actions/upload-artifact@0b7f8f6 # v4
        if: always()
        with:
          name: zap-results
          path: report_html.html
          retention-days: 30

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [e2e-tests, load-tests, security-scan, build-maestro]
    if: github.event.workflow_run.conclusion == 'success'
    environment:
      name: production
      url: https://intelgraph.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@c9ef52556095b32f140b0c7d74474f53696d9000 # v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e0715726ac04ae4 # v4
        with:
          role-to-assume: ${{ secrets.AWS_PRODUCTION_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@a8293405358683a03b7f843855a6ab12cf159a6a # v4
        with:
          version: 'v1.30.0'

      - name: Setup Helm
        uses: azure/setup-helm@fe362624587c032501648691abc1165b615b2e6f # v3
        with:
          version: '3.14.0'

      - name: Update kubeconfig
        if: ${{ !(github.event_name == 'workflow_dispatch' && inputs.no_op == 'true') }}
        run: |
          aws eks update-kubeconfig \
            --region ${{ secrets.AWS_REGION }}
            --name ${{ secrets.EKS_PRODUCTION_CLUSTER }}

      - name: Database backup
        if: ${{ !(github.event_name == 'workflow_dispatch' && inputs.no_op == 'true') }}
        run: |
          kubectl create job backup-$(date +%Y%m%d-%H%M%S) \
            --from=cronjob/postgres-backup \
            --namespace=intelgraph-production

      - name: Deploy to production
        if: ${{ !(github.event_name == 'workflow_dispatch' && inputs.no_op == 'true') }}
        run: |
          helm upgrade --install intelgraph ./deploy/helm/intelgraph \
            --namespace intelgraph-production \
            --create-namespace \
            --values ./deploy/helm/intelgraph/values.yaml \
            --values ./deploy/helm/intelgraph/values-prod.yaml \
            --set global.tag=v${{ needs.release.outputs.version }} \
            --set global.ingress.host=intelgraph.example.com \
            --timeout 900s \
            --wait

      - name: Apply Gatekeeper constraints (digest, limits)
        run: |
          make gatekeeper-apply || true

      - name: Render Rollout manifest with envsubst (production)
        env:
          PROM_ADDRESS: ${{ vars.PROM_ADDRESS_PROD || 'http://kube-prometheus-stack-prometheus.monitoring.svc:9090' }}
        run: |
          set -euo pipefail
          envsubst < deploy/argo/rollout-maestro.tmpl.yaml > deploy/argo/rollout-maestro.yaml

      - name: Render and apply OIDC auth (production)
        if: ${{ !(github.event_name == 'workflow_dispatch' && inputs.no_op == 'true') }}
        env:
          OIDC_ISSUER: ${{ secrets.OIDC_ISSUER_PROD }}
          OIDC_CLIENT_ID: ${{ secrets.OIDC_CLIENT_ID_PROD }}
          OIDC_CLIENT_SECRET_B64: ${{ secrets.OIDC_CLIENT_SECRET_B64_PROD }}
          JWT_SECRET_B64: ${{ secrets.JWT_SECRET_B64_PROD }}
          SESSION_KEY_B64: ${{ secrets.SESSION_KEY_B64_PROD }}
          HOST: ${{ vars.MAESTRO_HOST_PROD || 'maestro.intelgraph.io' }}
          COOKIE_DOMAIN: ${{ vars.MAESTRO_COOKIE_DOMAIN_PROD || '.intelgraph.io' }}
          REDIRECT_URL: https://${{ vars.MAESTRO_HOST_PROD || 'maestro.intelgraph.io' }}/oauth2/callback
          POST_LOGOUT_URL: https://${{ vars.MAESTRO_HOST_PROD || 'maestro.intelgraph.io' }}/conductor
        run: |
          set -euo pipefail
          envsubst < infra/k8s/auth/oidc-auth.tmpl.yaml > /tmp/oidc-auth.yaml
          kubectl apply -f /tmp/oidc-auth.yaml

      - name: Verify image signature (cosign)
        if: ${{ always() }}
        env:
          COSIGN_EXPERIMENTAL: '1'
          IMMUTABLE_REF: ${{ needs.build-maestro.outputs.immutable_ref }}
        run: |
          set -euo pipefail
          cosign verify --certificate-oidc-issuer https://token.actions.githubusercontent.com "$IMMUTABLE_REF"

      - name: Deploy Rollout and pin image (production)
        if: ${{ !(github.event_name == 'workflow_dispatch' && inputs.no_op == 'true') }}
        env:
          IMMUTABLE_REF: ${{ needs.build-maestro.outputs.immutable_ref }}
        run: |
          set -euo pipefail
          VERSION=v1.6.2
          curl -sL -o kubectl-argo-rollouts https://github.com/argoproj/argo-rollouts/releases/download/${VERSION}/kubectl-argo-rollouts-linux-amd64
          sudo install -m 0755 kubectl-argo-rollouts /usr/local/bin/kubectl-argo-rollouts
          kubectl apply -f deploy/argo/namespace.yaml
          kubectl -n maestro apply -f deploy/argo/services.yaml
          kubectl -n maestro apply -f deploy/argo/ingress.yaml
          make rollout-apply NS=maestro
          make rollout-pin NS=maestro IMMUTABLE_REF="${IMMUTABLE_REF}"

      - name: Annotate rollout pod template with supply-chain proofs
        run: |
          set -euo pipefail
          kubectl -n maestro patch rollout maestro-server-rollout --type merge -p '{"spec":{"template":{"metadata":{"annotations":{"intelgraph.dev/signed":"true","intelgraph.dev/sbom":"true"}}}}}'

      - name: Wait for rollout to be Healthy (production)
        if: ${{ !(github.event_name == 'workflow_dispatch' && inputs.no_op == 'true') }}
        run: |
          kubectl-argo-rollouts -n maestro status rollout/maestro-server-rollout --watch --timeout 20m

      - name: Run witness (production)
        if: ${{ !(github.event_name == 'workflow_dispatch' && inputs.no_op == 'true') }}
        run: |
          make witness NS=maestro
          ls -la artifacts || true

      - name: Upload witness bundle (production)
        if: ${{ !(github.event_name == 'workflow_dispatch' && inputs.no_op == 'true') }}
        uses: actions/upload-artifact@v4
        with:
          name: witness-production
          path: artifacts/witness_*.tar.gz
          if-no-files-found: ignore

      - name: Ensure witness artifact present (production)
        if: ${{ !(github.event_name == 'workflow_dispatch' && inputs.no_op == 'true') }}
        run: |
          test -n "$(ls -1 artifacts/witness_*.tar.gz 2>/dev/null)" || { echo "witness artifact missing"; exit 1; }

      - name: Deploy Maestro (Helm overlay) to production
        env:
          HOST: ${{ vars.MAESTRO_HOST_PROD }}
          IMAGE_TAG: sha-${{ github.sha }}
        run: |
          set -euo pipefail
          : "${HOST:=maestro.intelgraph.ai}"
          bash scripts/deploy-maestro-helm.sh

      - name: Verify deployment
        run: |
          kubectl wait --for=condition=ready pod \
            --selector=app.kubernetes.io/part-of=intelgraph \
            --namespace=intelgraph-production \
            --timeout=600s

          # Health check
          curl -f https://intelgraph.example.com/health

          # Database connectivity
          kubectl exec -n intelgraph-production \
            deployment/api-gateway -- \
            node -e "console.log('Database check passed')"

      - name: Update deployment status
        run: |
          kubectl annotate deployment \
            --namespace=intelgraph-production \
            --selector=app.kubernetes.io/part-of=intelgraph \
            deployment.kubernetes.io/revision="$(date +%Y%m%d-%H%M%S)"

      - name: Notify teams on success
        if: success()
        uses: 8398a7/action-slack@3745974f033374bab12f69056103df500c412b74 # v3
        with:
          status: success
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            🎉 IntelGraph production deployment successful!
            Version: v${{ needs.release.outputs.version }}
            URL: https://intelgraph.example.com
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify teams on failure
        if: failure()
        uses: 8398a7/action-slack@3745974f033374bab12f69056103df500c412b74 # v3
        with:
          status: failure
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            🚨 IntelGraph production deployment failed!
            Version: v${{ needs.release.outputs.version }}
            Please check the logs and rollback if necessary.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
