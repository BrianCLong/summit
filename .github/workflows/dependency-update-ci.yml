name: Dependency Update Validation

on:
  pull_request:
    types: [opened, reopened, synchronize, labeled]
    paths:
      - '**/package.json'
      - '**/package-lock.json'
      - '**/pnpm-lock.yaml'
      - '**/yarn.lock'
      - '**/requirements*.txt'
      - '**/requirements*.in'
      - 'helm/**/Chart.yaml'
      - 'helm/**/Chart.lock'
      - 'helm/**/values.yaml'
      - 'helm/**/values*.yaml'
      - 'helm/**/requirements.yaml'
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read

jobs:
  detect:
    if: >-
      github.event_name == 'workflow_dispatch' ||
      (
        github.event_name == 'pull_request' &&
        (
          contains(toJson(github.event.pull_request.labels), 'dependencies') ||
          startsWith(github.head_ref, 'dependabot/') ||
          startsWith(github.head_ref, 'renovate/')
        )
      )
    runs-on: ubuntu-latest
    outputs:
      node: ${{ steps.filter.outputs.node }}
      python: ${{ steps.filter.outputs.python }}
      helm: ${{ steps.filter.outputs.helm }}
      node_files: ${{ steps.filter.outputs.node_files }}
      python_files: ${{ steps.filter.outputs.python_files }}
      helm_files: ${{ steps.filter.outputs.helm_files }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - id: filter
        name: Detect dependency changes
        uses: dorny/paths-filter@v3
        with:
          list-files: shell
          filters: |
            node:
              - '**/package.json'
              - '**/package-lock.json'
              - '**/pnpm-lock.yaml'
              - '**/yarn.lock'
            python:
              - '**/requirements*.txt'
              - '**/requirements*.in'
              - '**/pyproject.toml'
              - '**/poetry.lock'
            helm:
              - 'helm/**/Chart.yaml'
              - 'helm/**/Chart.lock'
              - 'helm/**/values.yaml'
              - 'helm/**/values*.yaml'
              - 'helm/**/requirements.yaml'

  node-tests:
    name: Run Jest suite
    needs: detect
    if: needs.detect.outputs.node == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Jest
        env:
          CI: 'true'
        run: npm test -- --runInBand

  python-tests:
    name: Run pytest suite
    needs: detect
    if: needs.detect.outputs.python == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.in

      - name: Run pytest
        run: pytest python/tests -q

  helm-lint:
    name: Lint Helm charts
    needs: detect
    if: needs.detect.outputs.helm == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Helm
        uses: azure/setup-helm@v4

      - name: Lint changed charts
        env:
          CHANGED_FILES: ${{ needs.detect.outputs.helm_files }}
        run: |
          set -euo pipefail
          if [ -z "${CHANGED_FILES}" ]; then
            echo "No Helm files detected; skipping."
            exit 0
          fi

          mapfile -t charts < <(
            printf '%s\n' "${CHANGED_FILES}" | sed '/^$/d' | while read -r file; do
              chart_dir="$(dirname "$file")"
              while [ "$chart_dir" != "." ] && [ ! -f "$chart_dir/Chart.yaml" ]; do
                chart_dir="$(dirname "$chart_dir")"
              done
              if [ -f "$chart_dir/Chart.yaml" ]; then
                realpath "$chart_dir"
              fi
            done | sort -u
          )

          if [ "${#charts[@]}" -eq 0 ]; then
            echo "No Helm charts to lint."
            exit 0
          fi

          for chart_dir in "${charts[@]}"; do
            echo "Linting chart $chart_dir"
            helm dependency build "$chart_dir"
            helm lint "$chart_dir"
          done

  trivy:
    name: Trivy security scan
    needs: detect
    if: needs.detect.outputs.node == 'true' || needs.detect.outputs.python == 'true' || needs.detect.outputs.helm == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache Trivy database
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ runner.os }}

      - name: Setup Trivy
        uses: aquasecurity/setup-trivy@v0

      - name: Scan repository
        run: trivy fs --scanners vuln --severity HIGH,CRITICAL --exit-code 1 --skip-dirs .git .
