name: sbom
on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  syft-sbom:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Repository SBOM
        uses: anchore/sbom-action@v0.17.1
        with:
          format: cyclonedx-json
          output-file: sbom-repo.cdx.json
          path: .

      - name: Generate Server SBOM
        uses: anchore/sbom-action@v0.17.1
        with:
          format: cyclonedx-json
          output-file: sbom-server.cdx.json
          path: ./server

      - name: Generate Client SBOM
        uses: anchore/sbom-action@v0.17.1
        with:
          format: cyclonedx-json
          output-file: sbom-client.cdx.json
          path: ./client
        continue-on-error: true

      - name: Generate SPDX SBOM (for compliance)
        uses: anchore/sbom-action@v0.17.1
        with:
          format: spdx-json
          output-file: sbom-spdx.json
          path: .

      - name: Scan SBOM for vulnerabilities
        uses: anchore/scan-action@v4
        with:
          sbom: sbom-repo.cdx.json
          output-format: sarif
          fail-build: false

      - name: Upload SBOM scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: results.sarif
          category: sbom-vulnerabilities

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ github.run_number }}
          path: |
            sbom-*.json
            sbom-*.cdx.json
          retention-days: 90
          if-no-files-found: error

      - name: Upload SBOM to release (on tags)
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          # Create consolidated SBOM for release
          echo "Creating release SBOM package..."
          tar -czf sbom-${{ github.ref_name }}.tar.gz sbom-*.json sbom-*.cdx.json

          # Upload to release if tag exists
          gh release upload ${{ github.ref_name }} sbom-${{ github.ref_name }}.tar.gz --clobber || {
            echo "No release found for tag, creating SBOM artifact only"
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate SBOM summary
        if: always()
        run: |
          echo "# SBOM Generation Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Format | Status | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|--------|------|" >> $GITHUB_STEP_SUMMARY

          for sbom in sbom-*.json sbom-*.cdx.json; do
            if [ -f "$sbom" ]; then
              size=$(du -h "$sbom" | cut -f1)
              format=$(echo "$sbom" | sed 's/.*\.//')
              component=$(echo "$sbom" | sed 's/sbom-//' | sed 's/\..*//')
              echo "| $component | $format | âœ… Generated | $size |" >> $GITHUB_STEP_SUMMARY
            fi
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "SBOM generation completed at $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Security Note**: SBOMs have been scanned for vulnerabilities and uploaded to GitHub Security tab." >> $GITHUB_STEP_SUMMARY