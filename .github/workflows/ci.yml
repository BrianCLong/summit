name: CI Pipeline - Pull Request Validation

on:
  pull_request:
    branches: [main, 'release/*']
    paths-ignore: ['docs/**', '*.md']
  workflow_dispatch:

permissions:
  contents: read
  packages: read
  security-events: write

env:
  REGISTRY: ${{ vars.CONTAINER_REGISTRY || 'ghcr.io' }}
  NODE_VERSION: '20'
  PNPM_VERSION: '9'
jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.changes.outputs.services }}
      charts: ${{ steps.changes.outputs.charts }}
      terraform: ${{ steps.changes.outputs.terraform }}
      policies: ${{ steps.changes.outputs.policies }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          services:
            - 'services/**'
            - 'server/**'
            - 'client/**'
            - 'packages/**'
            - 'maestro/**'
            - 'package.json'
            - 'pnpm-lock.yaml'
          charts:
            - 'charts/**'
            - 'k8s/**'
          terraform:
            - 'terraform/**'
            - '*.tf'
          policies:
            - 'policy/**'

  pr-validate:
    name: Code Validation & Testing
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    needs: changes
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: |
            pnpm-lock.yaml
            **/pnpm-lock.yaml

      - uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint + Typecheck + Unit (changed only)
        run: pnpm dlx turbo run lint typecheck test --filter=...[HEAD^1] --cache-dir .turbo

      - name: Integration tests (docker-compose)
        run: |
          if [ -f tests/integration/docker-compose.yml ]; then
            docker compose -f tests/integration/docker-compose.yml up -d --wait
            pnpm run itest || (docker compose -f tests/integration/docker-compose.yml logs && false)
            docker compose -f tests/integration/docker-compose.yml down -v
          else
            echo "No integration harness yet — skipping"
          fi

      - name: Build applications
        run: |
          if npm run build --if-present; then
            echo "✅ Build completed"
          else
            echo "ℹ️ No build script found, skipping"
          fi

      - name: Playwright smoke tests
        working-directory: packages/e2e-shared
        env:
          BASE_URL: ${{ vars.STAGE_URL || 'http://localhost:3000' }}
        run: |
          npx playwright install --with-deps
          pnpm run e2e:smoke

      - name: k6 performance tests
        env:
          BASE_URL: ${{ vars.STAGE_URL || 'http://localhost:3000' }}
        run: |
          npm i -g k6
          k6 run maestro/tests/k6/smoke.js -e BASE_URL="$BASE_URL" -e STAGE="pr" -e COMMIT="${{ github.sha }}"

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pr-artifacts-${{ github.sha }}
          path: |
            **/junit*.xml
            **/playwright-report/**
            **/coverage/**
            k6-summary.json

  policy-validation:
    name: Policy-as-Code Validation
    runs-on: ubuntu-latest
    needs: changes
    if: |
      needs.changes.outputs.services == 'true' ||
      needs.changes.outputs.charts == 'true' ||
      needs.changes.outputs.terraform == 'true' ||
      needs.changes.outputs.policies == 'true'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Conftest
      run: |
        curl -L -o conftest.tar.gz https://github.com/open-policy-agent/conftest/releases/latest/download/conftest_Linux_x86_64.tar.gz
        tar xzf conftest.tar.gz
        sudo mv conftest /usr/local/bin/conftest
        conftest --version

    - name: Setup OPA
      run: |
        curl -L -o opa https://openpolicyagent.org/downloads/v0.57.0/opa_linux_amd64_static
        chmod +x opa
        sudo mv opa /usr/local/bin/
        opa version

    - name: Validate policy bundle
      run: |
        if [ -d "policy/" ]; then
          echo "🔍 Validating policy bundle..."
          opa fmt --diff policy/ || echo "⚠️ Policy formatting issues found"
          opa test policy/ || echo "⚠️ Policy tests failed"
        else
          echo "ℹ️ No policy directory found, creating stub"
          mkdir -p policy
          echo 'package main; default allow = false' > policy/stub.rego
        fi

    - name: Run Dockerfile policy checks
      run: |
        echo "🐳 Running Dockerfile policy checks..."
        DOCKERFILES=$(find . -name "Dockerfile*" -type f || echo "")

        if [ -n "$DOCKERFILES" ] && [ -d "policy/" ]; then
          echo "Found Dockerfiles: $DOCKERFILES"
          POLICY_ENFORCE="${{ vars.ENABLE_POLICY_ENFORCE || 'false' }}"

          for dockerfile in $DOCKERFILES; do
            echo "Checking $dockerfile..."
            if [ "$POLICY_ENFORCE" = "true" ]; then
              conftest verify --policy policy/ "$dockerfile" || exit 1
            else
              conftest verify --policy policy/ "$dockerfile" || echo "⚠️ Policy violation (warn mode)"
            fi
          done
        else
          echo "ℹ️ No Dockerfiles or policies found"
        fi

    - name: Upload policy artifacts
      uses: actions/upload-artifact@v4
      with:
        name: policy-report-${{ github.sha }}
        path: policy/

  security-scanning:
    name: Security & Supply Chain Scanning
    runs-on: ubuntu-latest
    needs: [changes, pr-validate]
    if: needs.changes.outputs.services == 'true'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Trivy
      run: |
        sudo apt-get update
        sudo apt-get install -y wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install -y trivy

    - name: Setup Syft
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

    - name: Scan repository for vulnerabilities
      run: |
        echo "🔍 Scanning repository for vulnerabilities..."
        trivy fs . --format json --output trivy-repo-scan.json || echo "⚠️ Vulnerability scan completed with findings"

        # Count critical/high vulnerabilities
        CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-repo-scan.json 2>/dev/null || echo "0")
        HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' trivy-repo-scan.json 2>/dev/null || echo "0")

        echo "📊 Vulnerability scan results:"
        echo "  Critical: $CRITICAL"
        echo "  High: $HIGH"

        # Check if we should fail on vulnerabilities
        POLICY_ENFORCE="${{ vars.ENABLE_POLICY_ENFORCE || 'false' }}"
        if [ "$POLICY_ENFORCE" = "true" ] && [ "$CRITICAL" -gt 0 ]; then
          echo "🚨 Critical vulnerabilities found - failing build"
          exit 1
        elif [ "$CRITICAL" -gt 0 ]; then
          echo "⚠️ Critical vulnerabilities found (warn mode)"
        fi

    - name: Generate SBOM
      run: |
        echo "📋 Generating Software Bill of Materials..."
        syft . -o spdx-json=sbom.spdx.json

        if [ -f "sbom.spdx.json" ]; then
          COMPONENTS=$(jq '.packages | length' sbom.spdx.json)
          echo "✅ SBOM generated with $COMPONENTS components"
        fi

    - name: Upload security artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-artifacts-${{ github.sha }}
        path: |
          trivy-repo-scan.json
          sbom.spdx.json

  cost-guard:
    name: CI Cost Guard
    runs-on: ubuntu-latest
    needs: [pr-validate, policy-validation, security-scanning]
    if: always()
    steps:
    - name: Calculate and check CI costs
      run: |
        # Calculate CI duration and cost estimate
        CI_DURATION_SECONDS=$(( $(date +%s) - $(date -d "${{ github.event.pull_request.created_at || github.run_started_at }}" +%s) ))
        CI_COST_ESTIMATE=$(echo "scale=4; $CI_DURATION_SECONDS * 0.008 / 60" | bc -l || echo "0.1")

        echo "📊 CI Cost Analysis:"
        echo "  Duration: ${CI_DURATION_SECONDS}s"
        echo "  Estimated Cost: \$${CI_COST_ESTIMATE}"

        # Mock monthly calculation
        DAILY_RUNS=50
        MONTHLY_COST=$(echo "scale=2; $DAILY_RUNS * $CI_COST_ESTIMATE * 30" | bc -l || echo "150")
        DEV_BUDGET=1000
        BURN_RATE=$(echo "scale=1; $MONTHLY_COST / $DEV_BUDGET * 100" | bc -l || echo "15")

        echo "  Projected Monthly: \$${MONTHLY_COST}"
        echo "  Budget Burn Rate: ${BURN_RATE}%"

        if (( $(echo "$BURN_RATE > 80" | bc -l 2>/dev/null || echo "0") )); then
          echo "🚨 CI cost burn rate exceeds 80% threshold!"
        else
          echo "✅ CI costs within budget"
        fi

    - name: Emit OpenTelemetry metrics
      if: vars.OTEL_ENDPOINT
      run: |
        CI_DURATION=$(( $(date +%s) - $(date -d "${{ github.run_started_at }}" +%s) ))

        # Emit to OTel endpoint if configured
        curl -X POST "${{ vars.OTEL_ENDPOINT }}/v1/metrics" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.OTEL_TOKEN }}" \
          -d '{
            "resourceMetrics": [{
              "resource": {
                "attributes": [
                  {"key": "service.name", "value": {"stringValue": "intelgraph-ci"}},
                  {"key": "ci.provider", "value": {"stringValue": "github-actions"}},
                  {"key": "repository", "value": {"stringValue": "${{ github.repository }}"}}
                ]
              },
              "scopeMetrics": [{
                "metrics": [
                  {
                    "name": "ci_duration_seconds",
                    "gauge": {"dataPoints": [{"asDouble": '$CI_DURATION', "timeUnixNano": "'$(date +%s%N)'"}]}
                  }
                ]
              }]
            }]
          }' || echo "⚠️ Failed to emit OTel metrics"

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [changes, pr-validate, policy-validation, security-scanning, cost-guard]
    if: always()
    steps:
    - name: Generate CI summary
      run: |
        echo "## 🚀 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Job Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Code Validation**: ${{ needs.pr-validate.result == 'success' && '✅' || '❌' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Policy Validation**: ${{ needs.policy-validation.result == 'success' && '✅' || '❌' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Security Scanning**: ${{ needs.security-scanning.result == 'success' && '✅' || '❌' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Cost Guard**: ${{ needs.cost-guard.result == 'success' && '✅' || '❌' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔗 **Artifacts**: Check the Actions tab for security scan results and SBOM" >> $GITHUB_STEP_SUMMARY
