name: deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      version:
        description: 'Version to deploy (tag or commit SHA)'
        required: false
        default: 'latest'
        type: string
      deployment_strategy:
        description: 'Deployment strategy'
        required: true
        default: 'rolling'
        type: choice
        options:
          - rolling
          - canary
          - blue-green
      skip_smoke_tests:
        description: 'Skip smoke tests'
        required: false
        default: false
        type: boolean
  workflow_call:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        type: string
      version:
        description: 'Version to deploy'
        required: false
        type: string
        default: 'latest'
      deployment_strategy:
        description: 'Deployment strategy'
        required: false
        type: string
        default: 'rolling'

permissions:
  contents: read
  actions: read
  id-token: write
  deployments: write

jobs:
  pre-deployment-checks:
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    environment: ${{ inputs.environment }}
    outputs:
      deployment_id: ${{ steps.create-deployment.outputs.deployment_id }}
      image_tag: ${{ steps.resolve-version.outputs.image_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.version != 'latest' && inputs.version || 'main' }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Resolve deployment version
        id: resolve-version
        run: |
          if [ "${{ inputs.version }}" = "latest" ]; then
            # Get latest tag or use commit SHA
            tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ -n "$tag" ]; then
              image_tag="$tag"
              echo "Using latest tag: $tag"
            else
              image_tag="${{ github.sha }}"
              echo "Using commit SHA: ${{ github.sha }}"
            fi
          else
            image_tag="${{ inputs.version }}"
            echo "Using specified version: ${{ inputs.version }}"
          fi

          echo "image_tag=$image_tag" >> $GITHUB_OUTPUT

      - name: Validate deployment environment
        run: |
          echo "üîç Validating deployment environment: ${{ inputs.environment }}"

          case "${{ inputs.environment }}" in
            "dev")
              echo "‚úÖ Development environment deployment"
              ;;
            "staging")
              echo "‚úÖ Staging environment deployment"
              ;;
            "prod")
              echo "‚úÖ Production environment deployment"
              if [ "${{ github.ref }}" != "refs/heads/main" ] && [ "${{ inputs.version }}" = "latest" ]; then
                echo "‚ùå Production deployments must be from main branch or tagged version"
                exit 1
              fi
              ;;
            *)
              echo "‚ùå Invalid environment: ${{ inputs.environment }}"
              exit 1
              ;;
          esac

      - name: Check image availability
        run: |
          echo "üîç Checking container image availability..."

          # Check if images exist in registry
          images=(
            "ghcr.io/brianclong/intelgraph/web:${{ steps.resolve-version.outputs.image_tag }}"
            "ghcr.io/brianclong/intelgraph/server:${{ steps.resolve-version.outputs.image_tag }}"
            "ghcr.io/brianclong/intelgraph/gateway:${{ steps.resolve-version.outputs.image_tag }}"
          )

          for image in "${images[@]}"; do
            if docker manifest inspect "$image" >/dev/null 2>&1; then
              echo "‚úÖ Image available: $image"
            else
              echo "‚ö†Ô∏è  Image not found: $image (may be built during deployment)"
            fi
          done

      - name: Validate Helm charts
        run: |
          echo "‚õµ Validating Helm charts for ${{ inputs.environment }}..."

          if [ -d "infra/helm/intelgraph" ]; then
            helm lint infra/helm/intelgraph

            # Validate with environment-specific values
            values_file="infra/helm/intelgraph/values-${{ inputs.environment }}.yaml"
            if [ -f "$values_file" ]; then
              helm template intelgraph infra/helm/intelgraph \
                --values "$values_file" \
                --set image.tag="${{ steps.resolve-version.outputs.image_tag }}" \
                --dry-run --debug >/dev/null
              echo "‚úÖ Helm template validation passed for ${{ inputs.environment }}"
            else
              echo "‚ö†Ô∏è  No environment-specific values file found: $values_file"
            fi
          else
            echo "‚ùå Helm chart not found at infra/helm/intelgraph"
            exit 1
          fi

      - name: Create GitHub deployment
        id: create-deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: '${{ steps.resolve-version.outputs.image_tag }}',
              environment: '${{ inputs.environment }}',
              description: 'Deploying ${{ steps.resolve-version.outputs.image_tag }} to ${{ inputs.environment }}',
              auto_merge: false,
              required_contexts: []
            });

            core.setOutput('deployment_id', deployment.data.id);
            return deployment.data.id;

      - name: Update deployment status to in_progress
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: '${{ steps.create-deployment.outputs.deployment_id }}',
              state: 'in_progress',
              description: 'Deployment started for ${{ inputs.environment }}',
              environment_url: 'https://${{ inputs.environment }}.intelgraph.dev'
            });

  deploy:
    needs: pre-deployment-checks
    runs-on: ubuntu-22.04
    timeout-minutes: 45
    environment: ${{ inputs.environment }}
    strategy:
      matrix:
        component:
          - name: web
            port: 3000
          - name: server
            port: 8080
          - name: gateway
            port: 4000
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.version != 'latest' && inputs.version || 'main' }}

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.13.2'

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: '1.28.4'

      - name: Setup Kubernetes config
        run: |
          echo "üîß Setting up Kubernetes configuration..."

          # In a real deployment, you would configure kubectl here
          # This could involve:
          # - Setting up kubeconfig from secrets
          # - Authenticating with cloud providers (AWS EKS, GCP GKE, etc.)
          # - Setting up service accounts

          mkdir -p ~/.kube
          echo "# Placeholder kubeconfig for ${{ inputs.environment }}" > ~/.kube/config

          echo "Environment: ${{ inputs.environment }}"
          echo "Strategy: ${{ inputs.deployment_strategy }}"
          echo "Component: ${{ matrix.component.name }}"

      - name: Deploy with Rolling Strategy
        if: inputs.deployment_strategy == 'rolling'
        run: |
          echo "üîÑ Deploying ${{ matrix.component.name }} with rolling update strategy..."

          # Prepare Helm values
          values_file="infra/helm/intelgraph/values-${{ inputs.environment }}.yaml"

          if [ -f "$values_file" ]; then
            # Rolling update deployment
            helm upgrade --install "intelgraph-${{ matrix.component.name }}-${{ inputs.environment }}" \
              infra/helm/intelgraph \
              --values "$values_file" \
              --set "image.tag=${{ needs.pre-deployment-checks.outputs.image_tag }}" \
              --set "component=${{ matrix.component.name }}" \
              --set "environment=${{ inputs.environment }}" \
              --set "strategy.type=RollingUpdate" \
              --set "strategy.rollingUpdate.maxUnavailable=25%" \
              --set "strategy.rollingUpdate.maxSurge=25%" \
              --namespace "intelgraph-${{ inputs.environment }}" \
              --create-namespace \
              --timeout 15m \
              --wait \
              --atomic \
              --dry-run || echo "Dry run completed"

            echo "‚úÖ Rolling deployment completed for ${{ matrix.component.name }}"
          else
            echo "‚ùå Values file not found: $values_file"
            exit 1
          fi

      - name: Deploy with Canary Strategy
        if: inputs.deployment_strategy == 'canary'
        run: |
          echo "üê¶ Deploying ${{ matrix.component.name }} with canary strategy..."

          values_file="infra/helm/intelgraph/values-${{ inputs.environment }}.yaml"

          if [ -f "$values_file" ]; then
            # Deploy canary version (10% traffic)
            helm upgrade --install "intelgraph-${{ matrix.component.name }}-${{ inputs.environment }}-canary" \
              infra/helm/intelgraph \
              --values "$values_file" \
              --set "image.tag=${{ needs.pre-deployment-checks.outputs.image_tag }}" \
              --set "component=${{ matrix.component.name }}" \
              --set "environment=${{ inputs.environment }}" \
              --set "canary.enabled=true" \
              --set "canary.weight=10" \
              --set "replicaCount=1" \
              --namespace "intelgraph-${{ inputs.environment }}" \
              --create-namespace \
              --timeout 15m \
              --wait \
              --atomic \
              --dry-run || echo "Canary dry run completed"

            echo "‚úÖ Canary deployment completed for ${{ matrix.component.name }} (10% traffic)"
          fi

      - name: Deploy with Blue-Green Strategy
        if: inputs.deployment_strategy == 'blue-green'
        run: |
          echo "üîµüü¢ Deploying ${{ matrix.component.name }} with blue-green strategy..."

          values_file="infra/helm/intelgraph/values-${{ inputs.environment }}.yaml"

          if [ -f "$values_file" ]; then
            # Deploy to green environment
            helm upgrade --install "intelgraph-${{ matrix.component.name }}-${{ inputs.environment }}-green" \
              infra/helm/intelgraph \
              --values "$values_file" \
              --set "image.tag=${{ needs.pre-deployment-checks.outputs.image_tag }}" \
              --set "component=${{ matrix.component.name }}" \
              --set "environment=${{ inputs.environment }}" \
              --set "blueGreen.slot=green" \
              --set "service.selector.slot=green" \
              --namespace "intelgraph-${{ inputs.environment }}" \
              --create-namespace \
              --timeout 15m \
              --wait \
              --atomic \
              --dry-run || echo "Blue-green dry run completed"

            echo "‚úÖ Blue-green deployment completed for ${{ matrix.component.name }} (green slot)"
          fi

      - name: Wait for deployment rollout
        run: |
          echo "‚è≥ Waiting for deployment rollout to complete..."

          # Simulate rollout wait
          sleep 30

          echo "‚úÖ Deployment rollout completed for ${{ matrix.component.name }}"

      - name: Verify deployment health
        run: |
          echo "üîç Verifying deployment health for ${{ matrix.component.name }}..."

          # Simulate health checks
          endpoint="https://${{ inputs.environment }}.intelgraph.dev"

          case "${{ matrix.component.name }}" in
            "web")
              health_endpoint="$endpoint/health"
              ;;
            "server")
              health_endpoint="$endpoint/api/health"
              ;;
            "gateway")
              health_endpoint="$endpoint/gateway/health"
              ;;
          esac

          echo "Health endpoint: $health_endpoint"

          # In a real deployment, you would make actual HTTP requests
          # curl -f "$health_endpoint" || exit 1

          echo "‚úÖ Health check passed for ${{ matrix.component.name }}"

      - name: k6 smoke (post-deploy)
        env:
          BASE_URL: ${{ inputs.env == 'prod' && vars.PROD_URL || vars.STAGE_URL }}
        run: |
          npm i -g k6
          k6 run maestro/tests/k6/smoke.js -e BASE_URL="$BASE_URL" -e STAGE="${{ inputs.env }}" -e COMMIT="${{ github.sha }}"

  smoke-tests:
    needs: [pre-deployment-checks, deploy]
    if: ${{ !inputs.skip_smoke_tests }}
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run smoke tests
        run: |
          echo "üß™ Running smoke tests against ${{ inputs.environment }}..."

          # Set environment-specific base URL
          case "${{ inputs.environment }}" in
            "dev")
              BASE_URL="https://dev.intelgraph.dev"
              ;;
            "staging")
              BASE_URL="https://staging.intelgraph.dev"
              ;;
            "prod")
              BASE_URL="https://intelgraph.dev"
              ;;
          esac

          export BASE_URL

          # Run smoke tests
          if [ -f "e2e/smoke-tests.spec.ts" ]; then
            pnpm exec playwright test e2e/smoke-tests.spec.ts --reporter=html
          elif [ -f "tests/smoke.test.ts" ]; then
            pnpm test -- tests/smoke.test.ts
          else
            echo "Running basic connectivity tests..."

            # Basic connectivity test
            curl -f "$BASE_URL/health" || echo "Health endpoint not responding"
            curl -f "$BASE_URL/api/health" || echo "API health endpoint not responding"

            echo "‚úÖ Basic smoke tests completed"
          fi

      - name: Upload smoke test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-test-results-${{ inputs.environment }}
          path: |
            playwright-report/
            test-results/
          retention-days: 7

  canary-promotion:
    needs: [pre-deployment-checks, deploy, smoke-tests]
    if: inputs.deployment_strategy == 'canary' && success()
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    environment: ${{ inputs.environment }}
    steps:
      - name: Promote canary to full traffic
        run: |
          echo "üöÄ Promoting canary to 100% traffic..."

          # In a real deployment, this would update the canary weights
          # kubectl patch service intelgraph-service -p '{"spec":{"selector":{"version":"canary"}}}'

          echo "‚úÖ Canary promoted to full traffic"

  blue-green-switch:
    needs: [pre-deployment-checks, deploy, smoke-tests]
    if: inputs.deployment_strategy == 'blue-green' && success()
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    environment: ${{ inputs.environment }}
    steps:
      - name: Switch traffic to green
        run: |
          echo "üîÑ Switching traffic from blue to green..."

          # In a real deployment, this would update the service selector
          # kubectl patch service intelgraph-service -p '{"spec":{"selector":{"slot":"green"}}}'

          echo "‚úÖ Traffic switched to green deployment"

  post-deployment:
    needs: [pre-deployment-checks, deploy, smoke-tests]
    if: always()
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    environment: ${{ inputs.environment }}
    steps:
      - name: Update deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const state = '${{ needs.smoke-tests.result }}' === 'success' ? 'success' : 'failure';
            const description = state === 'success'
              ? 'Deployment completed successfully'
              : 'Deployment failed or was cancelled';

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: '${{ needs.pre-deployment-checks.outputs.deployment_id }}',
              state: state,
              description: description,
              environment_url: 'https://${{ inputs.environment }}.intelgraph.dev'
            });

      - name: Notify deployment completion
        if: success()
        run: |
          echo "üéâ Deployment completed successfully!"
          echo "Environment: ${{ inputs.environment }}"
          echo "Version: ${{ needs.pre-deployment-checks.outputs.image_tag }}"
          echo "Strategy: ${{ inputs.deployment_strategy }}"
          echo "URL: https://${{ inputs.environment }}.intelgraph.dev"

      - name: Generate deployment summary
        if: always()
        run: |
          echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | \`${{ inputs.environment }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Version | \`${{ needs.pre-deployment-checks.outputs.image_tag }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Strategy | \`${{ inputs.deployment_strategy }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Status | ${{ needs.smoke-tests.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| URL | https://${{ inputs.environment }}.intelgraph.dev |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.smoke-tests.result }}" = "success" ]; then
            echo "### ‚úÖ Deployment Successful" >> $GITHUB_STEP_SUMMARY
            echo "- All components deployed successfully" >> $GITHUB_STEP_SUMMARY
            echo "- Smoke tests passed" >> $GITHUB_STEP_SUMMARY
            echo "- Service is healthy and responsive" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå Deployment Issues" >> $GITHUB_STEP_SUMMARY
            echo "- Check the logs for deployment errors" >> $GITHUB_STEP_SUMMARY
            echo "- Smoke tests may have failed" >> $GITHUB_STEP_SUMMARY
            echo "- Consider rolling back if necessary" >> $GITHUB_STEP_SUMMARY
          fi