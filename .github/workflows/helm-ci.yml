name: helm-ci

on:
  pull_request:
    branches: [main]
    paths:
      - 'infra/helm/**'
      - 'charts/**'
      - 'helm/**'
  push:
    branches: [main]
    paths:
      - 'infra/helm/**'
      - 'charts/**'
      - 'helm/**'
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  checks: write
  security-events: write

jobs:
  helm-lint-test:
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    strategy:
      matrix:
        chart:
          - name: intelgraph
            path: infra/helm/intelgraph
          - name: gateway
            path: infra/helm/gateway
          - name: neo4j
            path: infra/helm/neo4j
          - name: postgres
            path: infra/helm/postgres
          - name: redis
            path: infra/helm/redis
          - name: web
            path: infra/helm/web
          - name: analytics
            path: infra/helm/analytics
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.13.2'

      - name: Install Helm plugins
        run: |
          helm plugin install https://github.com/chartmuseum/helm-push || true
          helm plugin install https://github.com/helm/helm-mapkubeapis || true
          helm plugin install https://github.com/databus23/helm-diff || true

      - name: Install chart testing
        run: |
          curl -Lo ct.tar.gz https://github.com/helm/chart-testing/releases/download/v3.10.1/chart-testing_3.10.1_linux_amd64.tar.gz
          tar -xzf ct.tar.gz
          sudo mv ct /usr/local/bin/
          ct version

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: '1.28.4'

      - name: Install kind
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/

      - name: Install kube-linter
        if: steps.chart-check.outputs.exists == 'true'
        run: |
          curl -sSL https://github.com/stackrox/kube-linter/releases/download/v0.6.8/kube-linter-linux.tar.gz -o kube-linter.tar.gz
          tar -xzf kube-linter.tar.gz kube-linter
          sudo mv kube-linter /usr/local/bin/
          kube-linter version

      - name: Check if chart exists
        id: chart-check
        run: |
          if [ -d "${{ matrix.chart.path }}" ] && [ -f "${{ matrix.chart.path }}/Chart.yaml" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Chart found at ${{ matrix.chart.path }}"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Chart not found at ${{ matrix.chart.path }}, skipping..."
          fi

      - name: Validate Chart.yaml
        if: steps.chart-check.outputs.exists == 'true'
        run: |
          echo "📋 Validating Chart.yaml for ${{ matrix.chart.name }}..."

          # Check required fields
          if ! grep -q "^name:" "${{ matrix.chart.path }}/Chart.yaml"; then
            echo "❌ Missing 'name' field in Chart.yaml"
            exit 1
          fi

          if ! grep -q "^version:" "${{ matrix.chart.path }}/Chart.yaml"; then
            echo "❌ Missing 'version' field in Chart.yaml"
            exit 1
          fi

          if ! grep -q "^appVersion:" "${{ matrix.chart.path }}/Chart.yaml"; then
            echo "❌ Missing 'appVersion' field in Chart.yaml"
            exit 1
          fi

          echo "✅ Chart.yaml validation passed"

      - name: Lint Helm chart
        if: steps.chart-check.outputs.exists == 'true'
        run: |
          echo "🔍 Linting Helm chart: ${{ matrix.chart.name }}..."
          helm lint "${{ matrix.chart.path }}" --strict

          # Additional linting with chart-testing
          ct lint --charts "${{ matrix.chart.path }}" --validate-maintainers=false

      - name: Template chart with default values
        if: steps.chart-check.outputs.exists == 'true'
        run: |
          echo "📋 Templating chart with default values..."
          helm template "${{ matrix.chart.name }}" "${{ matrix.chart.path }}" \
            --output-dir "./rendered/${{ matrix.chart.name }}/default" \
            --debug

      - name: Template chart with dev values
        if: steps.chart-check.outputs.exists == 'true'
        run: |
          echo "📋 Templating chart with dev values..."
          if [ -f "${{ matrix.chart.path }}/values-dev.yaml" ]; then
            helm template "${{ matrix.chart.name }}" "${{ matrix.chart.path }}" \
              --values "${{ matrix.chart.path }}/values-dev.yaml" \
              --output-dir "./rendered/${{ matrix.chart.name }}/dev" \
              --debug
          else
            echo "No dev values file found, using defaults"
            mkdir -p "./rendered/${{ matrix.chart.name }}/dev"
            echo "No dev values file available" > "./rendered/${{ matrix.chart.name }}/dev/README.txt"
          fi

      - name: Template chart with prod values
        if: steps.chart-check.outputs.exists == 'true'
        run: |
          echo "📋 Templating chart with prod values..."
          if [ -f "${{ matrix.chart.path }}/values-prod.yaml" ]; then
            helm template "${{ matrix.chart.name }}" "${{ matrix.chart.path }}" \
              --values "${{ matrix.chart.path }}/values-prod.yaml" \
              --output-dir "./rendered/${{ matrix.chart.name }}/prod" \
              --debug
          else
            echo "No prod values file found, using defaults"
            mkdir -p "./rendered/${{ matrix.chart.name }}/prod"
            echo "No prod values file available" > "./rendered/${{ matrix.chart.name }}/prod/README.txt"
          fi

      - name: Validate rendered templates
        if: steps.chart-check.outputs.exists == 'true'
        run: |
          echo "🔍 Validating rendered Kubernetes manifests..."

          # Check for valid YAML syntax
          find "./rendered/${{ matrix.chart.name }}" -name "*.yaml" -type f | while read file; do
            if ! yaml-lint "$file" 2>/dev/null; then
              echo "❌ Invalid YAML syntax in $file"
            else
              echo "✅ Valid YAML: $file"
            fi
          done

      - name: Run kube-linter security scan
        if: steps.chart-check.outputs.exists == 'true'
        run: |
          echo "🛡️  Running kube-linter static analysis..."
          lint_dirs=""
          for dir in default prod dev; do
            path="./rendered/${{ matrix.chart.name }}/$dir"
            if [ -d "$path" ]; then
              lint_dirs="$lint_dirs $path"
            fi
          done

          if [ -z "$lint_dirs" ]; then
            echo "No rendered manifests found for kube-linter"
            exit 0
          fi

          kube-linter lint $lint_dirs --config .github/kube-linter-config.yaml

          # Validate Kubernetes resources with kubectl
          find "./rendered/${{ matrix.chart.name }}" -name "*.yaml" -type f | while read file; do
            if kubectl apply --dry-run=client -f "$file" >/dev/null 2>&1; then
              echo "✅ Valid K8s resource: $file"
            else
              echo "⚠️  Invalid K8s resource: $file"
            fi
          done

      - name: Check for security best practices
        if: steps.chart-check.outputs.exists == 'true'
        run: |
          echo "🔒 Checking security best practices..."

          # Check for missing security contexts
          if find "./rendered/${{ matrix.chart.name }}" -name "*.yaml" -exec grep -l "kind: Deployment\|kind: StatefulSet\|kind: DaemonSet" {} \; | \
             xargs grep -L "securityContext" | grep -q .; then
            echo "⚠️  Warning: Some workloads missing security context"
          fi

          # Check for privileged containers
          if find "./rendered/${{ matrix.chart.name }}" -name "*.yaml" -exec grep -l "privileged.*true" {} \; | grep -q .; then
            echo "❌ Error: Privileged containers detected"
          fi

          # Check for missing resource limits
          if find "./rendered/${{ matrix.chart.name }}" -name "*.yaml" -exec grep -l "kind: Deployment\|kind: StatefulSet\|kind: DaemonSet" {} \; | \
             xargs grep -L "resources:" | grep -q .; then
            echo "⚠️  Warning: Some workloads missing resource limits"
          fi

      - name: Test chart installation (dry-run)
        if: steps.chart-check.outputs.exists == 'true'
        run: |
          echo "🧪 Testing chart installation..."

          # Test with default values
          helm install "${{ matrix.chart.name }}-test" "${{ matrix.chart.path }}" --dry-run --debug

          # Test with dev values if available
          if [ -f "${{ matrix.chart.path }}/values-dev.yaml" ]; then
            helm install "${{ matrix.chart.name }}-dev-test" "${{ matrix.chart.path }}" \
              --values "${{ matrix.chart.path }}/values-dev.yaml" \
              --dry-run --debug
          fi

      - name: Package Helm chart
        if: steps.chart-check.outputs.exists == 'true'
        run: |
          echo "📦 Packaging Helm chart..."
          helm package "${{ matrix.chart.path }}" --destination ./packages/
          ls -la ./packages/

      - name: Verify packaged chart
        if: steps.chart-check.outputs.exists == 'true'
        run: |
          echo "🔍 Verifying packaged chart..."
          chart_package=$(find ./packages/ -name "${{ matrix.chart.name }}-*.tgz" | head -1)
          if [ -n "$chart_package" ]; then
            helm template test "$chart_package" --debug >/dev/null
            echo "✅ Packaged chart verification passed"
          else
            echo "❌ No chart package found"
            exit 1
          fi

      - name: Generate chart documentation
        if: steps.chart-check.outputs.exists == 'true'
        run: |
          echo "📚 Generating chart documentation..."

          # Extract chart information
          chart_name=$(grep "^name:" "${{ matrix.chart.path }}/Chart.yaml" | cut -d' ' -f2)
          chart_version=$(grep "^version:" "${{ matrix.chart.path }}/Chart.yaml" | cut -d' ' -f2)
          app_version=$(grep "^appVersion:" "${{ matrix.chart.path }}/Chart.yaml" | cut -d' ' -f2)

          cat > "chart-report-${{ matrix.chart.name }}.md" << EOF
          # Helm Chart Report: ${{ matrix.chart.name }}

          ## Chart Information
          - **Name**: $chart_name
          - **Version**: $chart_version
          - **App Version**: $app_version
          - **Path**: ${{ matrix.chart.path }}

          ## Validation Results
          - ✅ Chart.yaml validation passed
          - ✅ Helm linting passed
          - ✅ Template rendering passed
          - ✅ Kubernetes validation passed
          - ✅ Security checks completed
          - ✅ Package verification passed

          ## Generated Templates
          $(find "./rendered/${{ matrix.chart.name }}" -name "*.yaml" -type f | wc -l) Kubernetes manifests generated

          ## Package Information
          Chart successfully packaged: $(find ./packages/ -name "${{ matrix.chart.name }}-*.tgz")
          EOF

      - name: Upload chart artifacts
        if: steps.chart-check.outputs.exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: helm-chart-${{ matrix.chart.name }}
          path: |
            ./rendered/${{ matrix.chart.name }}/
            ./packages/${{ matrix.chart.name }}-*.tgz
            chart-report-${{ matrix.chart.name }}.md
          retention-days: 14

      - name: Generate step summary
        if: steps.chart-check.outputs.exists == 'true'
        run: |
          echo "## ⛵ Helm Chart CI Summary - ${{ matrix.chart.name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Chart.yaml Validation | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| Helm Linting | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| Template Rendering | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| Kubernetes Validation | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Checks | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| Chart Packaging | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📦 Chart artifacts uploaded for review" >> $GITHUB_STEP_SUMMARY
