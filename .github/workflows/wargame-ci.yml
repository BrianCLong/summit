# .github/workflows/wargame-ci.yml
# WAR-GAMED SIMULATION - FOR DECISION SUPPORT ONLY
# Ethics Compliance: This CI/CD workflow is for hypothetical scenario simulation development.

name: WarGame Dashboard CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Ensure this matches project's engine requirement

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Ensure this matches project's requirement

      - name: Install Docker Compose
        uses: docker/setup-buildx-action@v3 # This action includes docker compose

      - name: Start Docker Compose services (Neo4j, Redis, Python API)
        run: |
          docker-compose -f docker-compose.dev.yml up -d --build neo4j redis api
          # Wait for services to be healthy
          echo "Waiting for Neo4j, Redis, and Python API to be ready..."
          sleep 30 # Adjust as needed, or use a proper health check wait utility

      - name: Install Server dependencies and build
        working-directory: ./server
        run: |
          npm install
          npm run build

      - name: Run Server Unit Tests
        working-directory: ./server
        run: npm test

      - name: Install Client dependencies and build
        working-directory: ./client
        run: |
          npm install
          npm run build

      - name: Run Client Unit Tests
        working-directory: ./client
        run: npm test

      - name: Install Python API dependencies
        working-directory: ./api
        run: |
          pip install -r requirements.txt
          python -m spacy download en_core_web_sm # Download spaCy model

      - name: Run Python API Tests (Placeholder)
        working-directory: ./api
        run: echo "No Python API tests defined yet." # Replace with actual test command if you add tests

      - name: Run Playwright E2E Tests
        working-directory: ./client
        run: |
          npx playwright install --with-deps
          npm run test:e2e
        env:
          # Ensure these match your docker-compose setup for E2E tests
          # Playwright will access the client via its exposed port
          # The client will access the server via its exposed port
          # The server will access the API via its exposed port (or internal Docker network name)
          # For E2E, Playwright runs outside the Docker network, so it needs exposed ports.
          # If client is also in docker, it needs to access server via internal network.
          # For simplicity, assuming client is run directly on host for E2E.
          # If client is also containerized, adjust `page.goto` in wargame.spec.ts
          # to point to the client service's exposed port.
          # For this setup, the client is assumed to be running on localhost:3000
          # and the server on localhost:4000, and api on localhost:8000
          # as per the docs/DASHBOARD.md
          # The docker-compose services are started for the server and client to connect to.
          # The client's `npm run dev` will connect to localhost:4000 for GraphQL.
          # The server's `axios` calls will connect to http://api:8000 (internal docker network)
          # or localhost:8000 if server is also on host.
          # For this CI, the server and client are run on the host (ubuntu-latest runner)
          # and connect to the docker-compose services.
          # So, the server needs to know the exposed port of the API.
          # And the client needs to know the exposed port of the server.
          # And playwright needs to know the exposed port of the client.
          # This is why the docker-compose up -d is for neo4j, redis, api.
          # The server and client are built and tested on the runner directly.
          # The server will need PYTHON_API_URL set to localhost:8000
          PYTHON_API_URL: http://localhost:8000 # For server's axios calls
          # The client will connect to localhost:4000 for GraphQL
          # Playwright will connect to localhost:3000 for the client app

      - name: Validate GraphQL Schema Compatibility
        working-directory: ./server
        run: |
          # This step assumes you have a way to compare the generated schema
          # with a reference schema or perform a linting/validation check.
          # For example, if you have a 'schema.graphql' file that's the source of truth:
          # npm run codegen # to generate types from schema-unified.ts
          # npx graphql-schema-linter --schema src/graphql/schema-unified.ts
          # Or, if you want to compare against a baseline SDL:
          # npx graphql-codegen --config codegen.yml --require-graphql-schema-from src/graphql/schema-unified.ts --output-sdl schema.generated.graphql
          # diff schema.baseline.graphql schema.generated.graphql
          echo "GraphQL schema compatibility validation placeholder."
          echo "Consider adding a step to generate SDL and compare against a baseline or lint."

      - name: Stop Docker Compose services
        if: always() # Ensure services are stopped even if previous steps fail
        run: docker-compose -f docker-compose.dev.yml down

  deploy-staging:
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: staging # Define a staging environment in GitHub
    if: github.ref == 'refs/heads/main' # Only deploy from main branch
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to Staging (Placeholder)
        run: |
          echo "Deploying WarGame Dashboard to staging environment..."
          # Add your actual deployment commands here.
          # This might involve:
          # - Building Docker images (docker-compose build)
          # - Pushing images to a container registry (e.g., ECR, GCR, Docker Hub)
          # - Updating Kubernetes manifests or Helm charts
          # - Running Ansible playbooks or Terraform apply
          echo "Deployment steps go here."
