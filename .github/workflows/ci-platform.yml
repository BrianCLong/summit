name: IntelGraph Platform CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: brianlong/summit

jobs:
  lint-and-test:
    name: Lint & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile
          # Install Python dependencies for ML services
          pip install -r services/graph-xai/requirements.txt || echo "No requirements.txt yet"
          pip install -r services/predictive-suite/requirements.txt || echo "No requirements.txt yet"

      - name: Lint
        run: |
          pnpm run lint || echo "Linting not configured yet"

      - name: TypeScript Check
        run: |
          pnpm run typecheck || echo "TypeScript check not configured yet"

      - name: Unit Tests
        run: |
          pnpm run test || echo "Tests not configured yet"

  build-services:
    name: Build Services
    runs-on: ubuntu-latest
    needs: lint-and-test
    strategy:
      matrix:
        service:
          - api-gateway
          - graph-xai
          - prov-ledger
          - agent-runtime
          - predictive-suite
          - feed-processor
          - license-registry
          - conductor-api
          - sync-broker
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./services/${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-apps:
    name: Build Apps
    runs-on: ubuntu-latest
    needs: lint-and-test
    strategy:
      matrix:
        app:
          - web
          - offline-kit
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.app }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./apps/${{ matrix.app }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  helm-lint:
    name: Helm Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.14.0'

      - name: Add Helm repos
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update

      - name: Lint Helm chart
        run: |
          helm dependency update charts/ig-platform
          helm lint charts/ig-platform

      - name: Template Helm chart
        run: |
          helm template test-release charts/ig-platform \
            --values charts/ig-platform/values-dev.yaml \
            --output-dir /tmp/helm-output

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-services, build-apps]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start test environment
        run: |
          # Use dev compose for faster startup
          docker compose -f deploy/compose/docker-compose.dev.yml up -d --wait
        env:
          DOCKER_BUILDKIT: 1
          COMPOSE_DOCKER_CLI_BUILD: 1

      - name: Wait for services
        run: |
          # Wait for critical services to be healthy
          timeout 300 bash -c 'until curl -f http://localhost:4000/health; do sleep 5; done'
          timeout 300 bash -c 'until curl -f http://localhost:4010/health; do sleep 5; done'
          timeout 300 bash -c 'until curl -f http://localhost:4011/health; do sleep 5; done'

      - name: Run integration tests
        run: |
          # TODO: Add Playwright/API integration tests
          echo "Integration tests would run here"

      - name: Cleanup
        if: always()
        run: |
          docker compose -f deploy/compose/docker-compose.dev.yml down -v

  policy-check:
    name: Policy Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install conftest
        run: |
          CONFTEST_VERSION=0.46.0
          wget https://github.com/open-policy-agent/conftest/releases/download/v${CONFTEST_VERSION}/conftest_${CONFTEST_VERSION}_Linux_x86_64.tar.gz
          tar xzf conftest_${CONFTEST_VERSION}_Linux_x86_64.tar.gz
          sudo mv conftest /usr/local/bin

      - name: Validate Helm templates against policies
        run: |
          helm template test-release charts/ig-platform \
            --values charts/ig-platform/values-prod.yaml \
            --output-dir /tmp/helm-manifests

          # TODO: Add OPA policies and run conftest
          echo "Policy validation would run here"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
