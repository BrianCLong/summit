name: Comprehensive CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 8 * * 1' # Weekly runs on Monday at 8 AM UTC

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_ENV: test
  CI: true

jobs:
  # Lint and format checks
  lint-and-format:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@a5ac7e51b4109f5124f9564e9f05e504dfbe8c05 # v4.1.7

      - name: Setup Node.js
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check Prettier formatting
        run: npx prettier --check .

      - name: TypeScript type checking
        run: npm run typecheck

      - name: Commitlint check (PR only)
        if: github.event_name == 'pull_request'
        run: |
          npx commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --verbose

  # Security scanning
  security:
    name: Security Scans
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@a5ac7e51b4109f5124f9564e9f05e504dfbe8c05 # v4.1.7

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@cb7149a9c1b9d4ad6edc78ac5b5b5d8a3a44d5c8 # v2.3.6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Initialize CodeQL
        uses: github/codeql-action/init@4f3212b61783c3c68e8309a0f18a699764811cda # v3.25.15
        with:
          languages: 'javascript-typescript,python'
          queries: security-extended
          config-file: ./.github/codeql/codeql-config.yml

      - name: Setup Node.js for CodeQL
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies for CodeQL
        run: npm ci

      - name: Autobuild
        uses: github/codeql-action/autobuild@4f3212b61783c3c68e8309a0f18a699764811cda # v3.25.15

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@4f3212b61783c3c68e8309a0f18a699764811cda # v3.25.15

  # Test with coverage
  test:
    name: Test & Coverage
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['18', '20']
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: intelgraph_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      neo4j:
        image: neo4j:5-community
        env:
          NEO4J_AUTH: neo4j/test_password
          NEO4J_PLUGINS: '["apoc"]'
          NEO4J_apoc_export_file_enabled: 'true'
          NEO4J_apoc_import_file_enabled: 'true'
          NEO4J_dbms_security_procedures_unrestricted: 'apoc.*'
        options: >-
          --health-cmd "cypher-shell -u neo4j -p test_password 'RETURN 1'"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 10
        ports:
          - 7474:7474
          - 7687:7687

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@a5ac7e51b4109f5124f9564e9f05e504dfbe8c05 # v4.1.7

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install root dependencies
        run: npm ci

      - name: Install server dependencies
        working-directory: ./server
        run: npm ci

      - name: Install client dependencies
        working-directory: ./client
        run: npm ci

      - name: Wait for services
        run: |
          sleep 30
          # Verify services are healthy
          pg_isready -h localhost -p 5432 -U test_user -d intelgraph_test
          timeout 60s bash -c 'until echo > /dev/tcp/localhost/7687; do sleep 1; done'
          redis-cli -h localhost -p 6379 ping

      - name: Setup test databases
        run: |
          # PostgreSQL setup
          PGPASSWORD=test_password psql -h localhost -U test_user -d intelgraph_test -c "CREATE EXTENSION IF NOT EXISTS vector;" || true
          
          # Neo4j setup
          cypher-shell -a bolt://localhost:7687 -u neo4j -p test_password -c "CREATE CONSTRAINT entity_id IF NOT EXISTS FOR (e:Entity) REQUIRE e.id IS UNIQUE;" || true

      - name: Run server tests with coverage
        working-directory: ./server
        run: npm run test:coverage
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/intelgraph_test
          NEO4J_URI: bolt://localhost:7687
          NEO4J_USERNAME: neo4j
          NEO4J_PASSWORD: test_password
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret_at_least_32_characters_long
          JWT_REFRESH_SECRET: test_refresh_secret_different_from_jwt

      - name: Run client tests with coverage
        working-directory: ./client
        run: npm run test -- --coverage --watchAll=false

      - name: Upload server coverage to Codecov
        uses: codecov/codecov-action@e28ff129e5465c2c0dcc6f003fc735cb6ae0c673 # v4.5.0
        with:
          directory: ./server/coverage
          flags: server
          name: server-coverage
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload client coverage to Codecov
        uses: codecov/codecov-action@e28ff129e5465c2c0dcc6f003fc735cb6ae0c673 # v4.5.0
        with:
          directory: ./client/coverage
          flags: client
          name: client-coverage
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  # Performance testing with k6
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: intelgraph_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      neo4j:
        image: neo4j:5-community
        env:
          NEO4J_AUTH: neo4j/test_password
          NEO4J_PLUGINS: '["apoc"]'
        options: >-
          --health-cmd "cypher-shell -u neo4j -p test_password 'RETURN 1'"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 10
        ports:
          - 7474:7474
          - 7687:7687

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@a5ac7e51b4109f5124f9564e9f05e504dfbe8c05 # v4.1.7

      - name: Setup Node.js
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Install dependencies
        run: npm ci

      - name: Install server dependencies
        working-directory: ./server
        run: npm ci

      - name: Wait for services
        run: |
          sleep 30
          pg_isready -h localhost -p 5432 -U test_user -d intelgraph_test
          timeout 60s bash -c 'until echo > /dev/tcp/localhost/7687; do sleep 1; done'
          redis-cli -h localhost -p 6379 ping

      - name: Start server in background
        working-directory: ./server
        run: |
          npm run build
          nohup npm start &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          # Wait for server to be ready
          timeout 60s bash -c 'until curl -s http://localhost:4000/health >/dev/null; do sleep 2; done'
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/intelgraph_test
          NEO4J_URI: bolt://localhost:7687
          NEO4J_USERNAME: neo4j
          NEO4J_PASSWORD: test_password
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret_at_least_32_characters_long
          PORT: 4000

      - name: Run k6 performance tests
        run: |
          k6 run tests/performance/k6-smoke.js \
            --env API_URL=http://localhost:4000 \
            --env WS_URL=ws://localhost:4000 \
            --env FRONTEND_URL=http://localhost:3000 \
            --summary-trend-stats="avg,min,med,max,p(90),p(95),p(99)" \
            --out json=k6-results.json
        env:
          K6_BROWSER_ENABLED: false

      - name: Upload k6 results
        if: always()
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        with:
          name: k6-performance-results
          path: k6-results.json

      - name: Stop server
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            kill $SERVER_PID || true
          fi

  # End-to-end tests
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@a5ac7e51b4109f5124f9564e9f05e504dfbe8c05 # v4.1.7

      - name: Setup Node.js
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        working-directory: ./client
        run: npx playwright install --with-deps

      - name: Start Docker services
        run: |
          docker-compose -f docker-compose.dev.yml up -d
          # Wait for services to be ready
          timeout 120s bash -c 'until curl -s http://localhost:4000/health >/dev/null; do sleep 5; done'
          timeout 120s bash -c 'until curl -s http://localhost:3000 >/dev/null; do sleep 5; done'

      - name: Run E2E tests
        working-directory: ./client
        run: npm run test:e2e

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        with:
          name: e2e-test-results
          path: |
            client/test-results/
            client/playwright-report/

      - name: Stop Docker services
        if: always()
        run: docker-compose -f docker-compose.dev.yml down

  # Build verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@a5ac7e51b4109f5124f9564e9f05e504dfbe8c05 # v4.1.7

      - name: Setup Node.js
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build server
        working-directory: ./server
        run: npm run build

      - name: Build client
        working-directory: ./client
        run: npm run build

      - name: Verify build artifacts
        run: |
          test -f server/dist/index.js
          test -d client/dist

  # Dependency validation
  dependencies:
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@a5ac7e51b4109f5124f9564e9f05e504dfbe8c05 # v4.1.7

      - name: Setup Node.js
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Audit dependencies
        run: |
          npm audit --audit-level=high
          cd server && npm audit --audit-level=high
          cd ../client && npm audit --audit-level=high

      - name: Check for lockfile sync
        run: |
          npm ci --dry-run
          cd server && npm ci --dry-run
          cd ../client && npm ci --dry-run

  # Smoke tests
  smoke:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, build]
    steps:
      - name: Checkout code
        uses: actions/checkout@a5ac7e51b4109f5124f9564e9f05e504dfbe8c05 # v4.1.7

      - name: Setup Node.js
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start Docker services
        run: |
          docker-compose -f docker-compose.dev.yml up -d
          # Wait for services to be ready
          timeout 180s bash -c 'until curl -s http://localhost:4000/health >/dev/null; do sleep 5; done'

      - name: Run smoke tests
        run: node scripts/smoke-test.js
        env:
          API_URL: http://localhost:4000/graphql
          FRONTEND_URL: http://localhost:3000
          NEO4J_URL: http://localhost:7474
          ADMIN_URL: http://localhost:8080

      - name: Stop Docker services
        if: always()
        run: docker-compose -f docker-compose.dev.yml down

  # Status check for merge queue
  all-checks-passed:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [lint-and-format, security, test, performance, e2e, build, dependencies, smoke]
    if: always()
    steps:
      - name: Check all job results
        run: |
          echo "lint-and-format: ${{ needs.lint-and-format.result }}"
          echo "security: ${{ needs.security.result }}"
          echo "test: ${{ needs.test.result }}"
          echo "performance: ${{ needs.performance.result }}"
          echo "e2e: ${{ needs.e2e.result }}"
          echo "build: ${{ needs.build.result }}"
          echo "dependencies: ${{ needs.dependencies.result }}"
          echo "smoke: ${{ needs.smoke.result }}"
          
          if [[ "${{ needs.lint-and-format.result }}" == "success" && \
                "${{ needs.security.result }}" == "success" && \
                "${{ needs.test.result }}" == "success" && \
                "${{ needs.performance.result }}" == "success" && \
                "${{ needs.e2e.result }}" == "success" && \
                "${{ needs.build.result }}" == "success" && \
                "${{ needs.dependencies.result }}" == "success" && \
                "${{ needs.smoke.result }}" == "success" ]]; then
            echo "✅ All checks passed!"
            exit 0
          else
            echo "❌ Some checks failed!"
            exit 1
          fi