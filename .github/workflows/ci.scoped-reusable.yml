name: ci.scoped-reusable

on:
  workflow_call:
    inputs:
      filter_name:
        description: Name of the scoped lane (used for summaries)
        required: true
        type: string
      include_globs:
        description: Newline separated glob patterns that trigger the scoped lane
        required: true
        type: string
      exclude_globs:
        description: Patterns to ignore (newline separated)
        required: false
        default: ''
        type: string
      node_version:
        description: Node.js version to install when the scoped lane runs
        required: false
        default: '20'
        type: string
      preflight_vitest:
        description: Run vitest preflight checks
        required: false
        default: false
        type: boolean
      preflight_paths:
        description: Paths to verify for vitest preflight (newline separated)
        required: false
        default: ''
        type: string
      setup_cmd:
        description: Command(s) to install dependencies
        required: false
        default: ''
        type: string
      lint_cmd:
        description: Command(s) to lint the project
        required: false
        default: ''
        type: string
      test_cmd:
        description: Command(s) to run tests
        required: false
        default: ''
        type: string

jobs:
  detect-paths:
    name: Detect scoped changes
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.detect.outputs.should_run }}
      matched: ${{ steps.detect.outputs.matched }}
      summary: ${{ steps.detect.outputs.summary }}
      base_ref: ${{ steps.gather.outputs.base_ref }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compute change set
        id: gather
        env:
          INCLUDE_GLOBS: ${{ inputs.include_globs }}
          EXCLUDE_GLOBS: ${{ inputs.exclude_globs }}
        run: |
          set -euo pipefail
          BASE_REF="${GITHUB_BASE_REF:-main}"
          git fetch origin "$BASE_REF"
          git diff --name-only "origin/$BASE_REF"...HEAD > changed.txt
          printf '%s\n' "${INCLUDE_GLOBS}" > include_globs.txt
          printf '%s\n' "${EXCLUDE_GLOBS}" > exclude_globs.txt
          echo "base_ref=$BASE_REF" >> "$GITHUB_OUTPUT"

      - name: Detect scoped impact
        id: detect
        env:
          FILTER_NAME: ${{ inputs.filter_name }}
        run: |
          python <<'PY'
import json
from pathlib import Path

with open("changed.txt", "r", encoding="utf-8") as fh:
    files = [line.strip() for line in fh if line.strip()]


def read_globs(filename):
    with open(filename, "r", encoding="utf-8") as fh:
        return [line.strip().strip('"').strip("'") for line in fh if line.strip()]

includes = read_globs("include_globs.txt")
excludes = read_globs("exclude_globs.txt")
matched = []

for file in files:
    path = Path(file)
    if excludes and any(path.match(pattern) for pattern in excludes):
        continue
    if includes and any(path.match(pattern) for pattern in includes):
        matched.append(file)

should_run = bool(matched)
summary = {
    "filter": "${FILTER_NAME}",
    "total_changed": len(files),
    "matched_count": len(matched),
    "matched": matched,
}
with open("$GITHUB_OUTPUT", "a", encoding="utf-8") as fh:
    fh.write(f"should_run={'true' if should_run else 'false'}\n")
    fh.write(f"matched={json.dumps(matched)}\n")
    fh.write(f"summary={json.dumps(summary)}\n")
PY

      - name: Publish detection summary
        run: |
          echo "### Scoped change detection" >> "$GITHUB_STEP_SUMMARY"
          echo "**Filter:** ${{ inputs.filter_name }}" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo '```json' >> "$GITHUB_STEP_SUMMARY"
          echo "${{ steps.detect.outputs.summary }}" >> "$GITHUB_STEP_SUMMARY"
          echo '```' >> "$GITHUB_STEP_SUMMARY"

  scoped-ci:
    name: Scoped CI
    runs-on: ubuntu-latest
    needs: detect-paths
    env:
      SHOULD_RUN: ${{ needs.detect-paths.outputs.should_run }}
      MATCHED: ${{ needs.detect-paths.outputs.matched }}
      FILTER_NAME: ${{ inputs.filter_name }}
      BASE_REF: ${{ needs.detect-paths.outputs.base_ref }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Scoped decision summary
        run: |
          if [[ "$SHOULD_RUN" == "true" ]]; then
            echo "### Scoped lane enabled" >> "$GITHUB_STEP_SUMMARY"
            echo "Filter **$FILTER_NAME** triggered for the following files:" >> "$GITHUB_STEP_SUMMARY"
            echo '```json' >> "$GITHUB_STEP_SUMMARY"
            echo "$MATCHED" >> "$GITHUB_STEP_SUMMARY"
            echo '```' >> "$GITHUB_STEP_SUMMARY"
          else
            echo "### Scoped lane skipped" >> "$GITHUB_STEP_SUMMARY"
            echo "Filter **$FILTER_NAME** saw no matching files. Running baseline policy/secrets checks." >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Sanitize working tree
        run: bash scripts/pr_sanitize.sh --check

      - name: Baseline security + policy scan
        if: env.SHOULD_RUN != 'true'
        run: |
          set -euo pipefail
          BASE_REF="${BASE_REF:-main}"
          git fetch origin "$BASE_REF"
          git diff --name-only "origin/$BASE_REF"...HEAD > changed.txt
          if [[ ! -s changed.txt ]]; then
            echo "No files changed versus $BASE_REF" >> "$GITHUB_STEP_SUMMARY"
            exit 0
          fi
          echo "üîê Running secrets/policy baseline on changed files"
          mapfile -t files < changed.txt
          bash scripts/security/custom-secrets-check.sh "${files[@]}"
          echo "‚úÖ Baseline security checks passed" >> "$GITHUB_STEP_SUMMARY"

      - name: Setup Node
        if: env.SHOULD_RUN == 'true' && inputs.node_version != ''
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: 'pnpm'
          cache-dependency-path: |
            **/pnpm-lock.yaml
            **/package-lock.json

      - name: Run setup command
        if: env.SHOULD_RUN == 'true' && inputs.setup_cmd != ''
        shell: bash
        run: ${{ inputs.setup_cmd }}

      - name: Vitest preflight
        if: env.SHOULD_RUN == 'true' && inputs.preflight_vitest == true
        shell: bash
        run: |
          set -euo pipefail
          missing=0
          while IFS= read -r path; do
            [[ -z "$path" ]] && continue
            if [[ ! -d "$path" ]]; then
              echo "::warning::Preflight path $path missing"
              missing=1
            fi
          done < <(printf '%s\n' "${{ inputs.preflight_paths }}")
          if (( missing == 0 )); then
            echo "Vitest preflight directories present"
          else
            echo "::notice::Vitest preflight completed with warnings"
          fi

      - name: Run lint command
        if: env.SHOULD_RUN == 'true' && inputs.lint_cmd != ''
        shell: bash
        run: ${{ inputs.lint_cmd }}

      - name: Run test command
        if: env.SHOULD_RUN == 'true' && inputs.test_cmd != ''
        shell: bash
        run: ${{ inputs.test_cmd }}
