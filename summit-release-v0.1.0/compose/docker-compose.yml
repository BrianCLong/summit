version: "3.9"
name: ${COMPOSE_PROJECT_NAME:-summit}
services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 3s
      retries: 10
    volumes:
      - pgdata:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    command: ["redis-server","--requirepass","${REDIS_PASSWORD}"]
    ports: ["6379:6379"]
    healthcheck:
      test: ["CMD","redis-cli","-a","${REDIS_PASSWORD}","ping"]
      interval: 10s
      timeout: 3s
      retries: 10

  neo4j:
    image: neo4j:5.24-community
    environment:
      NEO4J_AUTH: ${NEO4J_AUTH}
      NEO4JLABS_PLUGINS: ${NEO4JLABS_PLUGINS}
      NEO4J_apoc_export_file_enabled: ${NEO4J_apoc_export_file_enabled}
      NEO4J_apoc_import_file_enabled: ${NEO4J_apoc_import_file_enabled}
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4jdata:/data
      - neo4jlogs:/logs
    healthcheck:
      test: ["CMD-SHELL","cypher-shell -u neo4j -p neo4jpass -a bolt://localhost:7687 'RETURN 1' || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 20

  adminer:
    image: adminer:4
    ports: ["8080:8080"]

  server:
    build:
      context: ../../
      dockerfile: docker/server.Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    environment:
      NODE_ENV: production
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USERNAME: neo4j
      NEO4J_PASSWORD: neo4jpass
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      CORS_ORIGIN: ${CORS_ORIGIN}
    ports: ["4000:4000"]
    healthcheck:
      test: ["CMD","/bin/sh","-c","curl -fsS http://localhost:4000/health || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 10

  client:
    build:
      context: ../../
      dockerfile: docker/client.Dockerfile
    depends_on:
      - server
    ports: ["3000:80"]

  nginx:
    build:
      context: ../../
      dockerfile: docker/nginx.Dockerfile
    depends_on:
      - client
      - server
    ports:
      - "${NGINX_PORT:-80}:80"

volumes:
  pgdata: {}
  neo4jdata: {}
  neo4jlogs: {}