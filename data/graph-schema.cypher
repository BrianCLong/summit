// Graph schema for Summit intelligence graph
// Generated by Data Architect Workstream 3

// --- Node Constraints ---
CREATE CONSTRAINT person_id_unique IF NOT EXISTS
FOR (p:Person)
REQUIRE p.person_id IS UNIQUE;

CREATE CONSTRAINT org_id_unique IF NOT EXISTS
FOR (o:Organization)
REQUIRE o.org_id IS UNIQUE;

CREATE CONSTRAINT account_id_unique IF NOT EXISTS
FOR (a:Account)
REQUIRE a.account_id IS UNIQUE;

CREATE CONSTRAINT event_id_unique IF NOT EXISTS
FOR (e:Event)
REQUIRE e.event_id IS UNIQUE;

CREATE CONSTRAINT asset_id_unique IF NOT EXISTS
FOR (d:DataAsset)
REQUIRE d.asset_id IS UNIQUE;

CREATE CONSTRAINT location_id_unique IF NOT EXISTS
FOR (l:Location)
REQUIRE l.location_id IS UNIQUE;

CREATE CONSTRAINT source_system_id_unique IF NOT EXISTS
FOR (s:SourceSystem)
REQUIRE s.source_system_id IS UNIQUE;

// --- Node Indexes ---
CREATE INDEX person_last_seen IF NOT EXISTS
FOR (p:Person)
ON (p.last_seen_at);

CREATE INDEX org_jurisdiction IF NOT EXISTS
FOR (o:Organization)
ON (o.jurisdiction);

CREATE INDEX account_platform_status IF NOT EXISTS
FOR (a:Account)
ON (a.platform, a.status);

CREATE INDEX event_type_time IF NOT EXISTS
FOR (e:Event)
ON (e.event_type, e.occurred_at);

CREATE INDEX dataasset_classification IF NOT EXISTS
FOR (d:DataAsset)
ON (d.classification);

CREATE INDEX location_geo IF NOT EXISTS
FOR (l:Location)
ON (l.region);

// --- Relationship Constraints ---
CREATE CONSTRAINT member_of_key IF NOT EXISTS
FOR ()-[r:MEMBER_OF]-()
REQUIRE (r.person_id, r.org_id, r.assigned_at) IS UNIQUE;

CREATE CONSTRAINT uses_key IF NOT EXISTS
FOR ()-[r:USES]-()
REQUIRE (r.person_id, r.account_id) IS UNIQUE;

CREATE CONSTRAINT account_of_key IF NOT EXISTS
FOR ()-[r:ACCOUNT_OF]-()
REQUIRE (r.account_id, r.org_id) IS UNIQUE;

CREATE CONSTRAINT triggered_key IF NOT EXISTS
FOR ()-[r:TRIGGERED]-()
REQUIRE (r.event_id, r.target_id, r.target_label) IS UNIQUE;

CREATE CONSTRAINT hosted_by_key IF NOT EXISTS
FOR ()-[r:HOSTED_BY]-()
REQUIRE (r.asset_id, r.org_id) IS UNIQUE;

CREATE CONSTRAINT occurred_at_key IF NOT EXISTS
FOR ()-[r:OCCURRED_AT]-()
REQUIRE (r.event_id, r.location_id) IS UNIQUE;

CREATE CONSTRAINT observed_on_key IF NOT EXISTS
FOR ()-[r:OBSERVED_ON]-()
REQUIRE (r.event_id, r.asset_id) IS UNIQUE;

CREATE CONSTRAINT owns_key IF NOT EXISTS
FOR ()-[r:OWNS]-()
REQUIRE (r.org_id, r.asset_id) IS UNIQUE;

CREATE CONSTRAINT emitted_event_key IF NOT EXISTS
FOR ()-[r:EMITTED_EVENT]-()
REQUIRE (r.source_system_id, r.event_id) IS UNIQUE;

// --- Reference Property Types (documentational) ---
// Person: {person_id: string, full_name: string, email: string, role: string,
//          purpose_tags: list<string>, last_seen_at: datetime,
//          pii_level: string, provenance_ref: string}
// Organization: {org_id: string, name: string, category: string,
//                jurisdiction: string, residency_zone: string,
//                purpose_tags: list<string>, provenance_ref: string}
// Account: {account_id: string, platform: string, status: string,
//           created_at: datetime, last_auth_at: datetime,
//           risk_score: float, pii_level: string,
//           purpose_tags: list<string>, provenance_ref: string}
// Event: {event_id: string, event_type: string, severity: string,
//         occurred_at: datetime, processed_at: datetime,
//         ingest_source: string, payload_hash: string,
//         purpose_tags: list<string>, provenance_ref: string}
// DataAsset: {asset_id: string, name: string, classification: string,
//             storage_type: string, residency_zone: string,
//             purpose_tags: list<string>, provenance_ref: string}
// Location: {location_id: string, name: string, region: string,
//            country: string, latitude: float, longitude: float}
// SourceSystem: {source_system_id: string, name: string,
//                connector_type: string, version: string,
//                provenance_ref: string}
