version: '3.8'

services:
  # API Service (Express + Apollo GraphQL)
  api:
    image: node:20-bullseye
    container_name: maestro-api
    working_dir: /workspace/server
    command: ["bash", "-lc", "if [ ! -d node_modules ]; then npm install; fi; npm run dev"]
    environment:
      NODE_ENV: development
      PORT: 4000
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: maestro
      POSTGRES_PASSWORD: dev_password
      POSTGRES_DB: maestro_dev
      POSTGRES_URL: postgres://maestro:dev_password@postgres:5432/maestro_dev
      REDIS_HOST: redis
      REDIS_PORT: 6379
      OPA_URL: http://opa:8181
      MOCK_SERVICE_URL: http://mock-services:4010
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_SERVICE_NAME: maestro-api
    volumes:
      - .:/workspace:cached
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      opa:
        condition: service_healthy
      otel-collector:
        condition: service_started
    healthcheck:
      test: ["CMD", "node", "/workspace/scripts/health-check.js", "http://localhost:4000/health"]
      interval: 10s
      timeout: 5s
      retries: 12

  # Frontend Service (nginx serving a tiny status page)
  frontend:
    image: nginx:alpine
    container_name: maestro-frontend
    volumes:
      - ./docker-ga-release/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker-ga-release/html:/usr/share/nginx/html:ro
    ports:
      - "3000:80"
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost"]
      interval: 10s
      timeout: 5s
      retries: 12

  # Ingest Service (Kafka API via Redpanda)
  ingest:
    image: redpandadata/redpanda:v23.3.10
    container_name: maestro-ingest
    command:
      - redpanda
      - start
      - --smp 1
      - --memory 1G
      - --reserve-memory 0M
      - --overprovisioned
      - --node-id 0
      - --check=false
    ports:
      - "9092:9092"
      - "9644:9644"
    volumes:
      - redpanda_data:/var/lib/redpanda/data
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health | grep -q 'Healthy:.*true'"]
      interval: 10s
      timeout: 5s
      retries: 30

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: maestro_dev
      POSTGRES_USER: maestro
      POSTGRES_PASSWORD: dev_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U maestro -d maestro_dev"]
      interval: 10s
      timeout: 5s
      retries: 30

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 30

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5.8
    container_name: neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    environment:
      NEO4J_AUTH: neo4j/dev_password
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_apoc_export_file_enabled: true
      NEO4J_apoc_import_file_enabled: true
      NEO4J_apoc_import_file_use__neo4j__config: true
      NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "dev_password", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 12

  # OPA (Open Policy Agent)
  opa:
    image: openpolicyagent/opa:0.65.0
    container_name: opa
    command:
      - run
      - --server
      - --watch
      - /policy
    ports:
      - "8181:8181"
    volumes:
      - ./docker-ga-release/opa:/policy:ro
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8181/health"]
      interval: 15s
      timeout: 5s
      retries: 12

  # Jaeger (Tracing)
  jaeger:
    image: jaegertracing/all-in-one:1.58
    container_name: jaeger
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
    ports:
      - "16686:16686"
      - "14250:14250"
      - "14268:14268"

  # OTEL Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.110.0
    container_name: otel-collector
    command: ["--config=/etc/otel-collector.yaml"]
    volumes:
      - ./docker-ga-release/otel-collector.yaml:/etc/otel-collector.yaml:ro
    ports:
      - "4317:4317"
      - "4318:4318"
      - "9464:9464"
    depends_on:
      - jaeger

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker-ga-release/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'

  # Grafana (Visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: dev_password
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker-ga-release/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker-ga-release/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
      - otel-collector

volumes:
  postgres_data:
  redis_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  redpanda_data:
  prometheus_data:
  grafana_data: