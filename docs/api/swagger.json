{
  "openapi": "3.1.0",
  "info": {
    "title": "Summit GraphQL API",
    "version": "1.24.0",
    "description": "Interactive documentation for the Summit GraphQL endpoint. All operations execute via POST /graphql with a JSON payload."
  },
  "servers": [
    {
      "url": "http://localhost:4000/graphql",
      "description": "Local development GraphQL endpoint."
    }
  ],
  "tags": [
    {
      "name": "Queries",
      "description": "GraphQL read operations."
    },
    {
      "name": "Mutations",
      "description": "GraphQL write operations."
    },
    {
      "name": "Subscriptions",
      "description": "GraphQL subscription operations."
    }
  ],
  "paths": {
    "/queries/health": {
      "post": {
        "tags": [
          "Queries"
        ],
        "summary": "Queries: health",
        "description": "Executes the query `health`.\n\n> Submit this GraphQL query via POST /graphql on the Summit API server.",
        "operationId": "queries_health",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "health",
                  "description": "Executes the query `health`.",
                  "value": {
                    "query": "query health {\n  health {\n    # Select fields from HealthStatus\n    __typename\n  }\n}",
                    "operationName": "health"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "query",
          "name": "health",
          "returnType": "HealthStatus!",
          "arguments": []
        }
      }
    },
    "/queries/entity": {
      "post": {
        "tags": [
          "Queries"
        ],
        "summary": "Queries: entity",
        "description": "Entity queries\n\n**Arguments**\n- `id` (*ID!*): No description provided.\n- `tenantId` (*String*): No description provided.\n\n> Submit this GraphQL query via POST /graphql on the Summit API server.",
        "operationId": "queries_entity",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "entity",
                  "description": "Entity queries\n\n**Arguments**\n- `id` (*ID!*): No description provided.\n- `tenantId` (*String*): No description provided.",
                  "value": {
                    "query": "query entity($id: ID!, $tenantId: String) {\n  entity(id: $id, tenantId: $tenantId) {\n    # Select fields from Entity\n    __typename\n  }\n}",
                    "variables": {
                      "id": "example-id",
                      "tenantId": "VALUE"
                    },
                    "operationName": "entity"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "query",
          "name": "entity",
          "returnType": "Entity",
          "arguments": [
            {
              "name": "id",
              "type": "ID!",
              "description": null,
              "defaultValue": null
            },
            {
              "name": "tenantId",
              "type": "String",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/queries/entities": {
      "post": {
        "tags": [
          "Queries"
        ],
        "summary": "Queries: entities",
        "description": "Executes the query `entities`.\n\n**Arguments**\n- `input` (*EntitySearchInput!*): No description provided.\n\n> Submit this GraphQL query via POST /graphql on the Summit API server.",
        "operationId": "queries_entities",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "entities",
                  "description": "Executes the query `entities`.\n\n**Arguments**\n- `input` (*EntitySearchInput!*): No description provided.",
                  "value": {
                    "query": "query entities($input: EntitySearchInput!) {\n  entities(input: $input) {\n    # Select fields from Entity\n    __typename\n  }\n}",
                    "variables": {
                      "input": "VALUE"
                    },
                    "operationName": "entities"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "query",
          "name": "entities",
          "returnType": "[Entity!]!",
          "arguments": [
            {
              "name": "input",
              "type": "EntitySearchInput!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/queries/relationship": {
      "post": {
        "tags": [
          "Queries"
        ],
        "summary": "Queries: relationship",
        "description": "Relationship queries\n\n**Arguments**\n- `id` (*ID!*): No description provided.\n- `tenantId` (*String*): No description provided.\n\n> Submit this GraphQL query via POST /graphql on the Summit API server.",
        "operationId": "queries_relationship",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "relationship",
                  "description": "Relationship queries\n\n**Arguments**\n- `id` (*ID!*): No description provided.\n- `tenantId` (*String*): No description provided.",
                  "value": {
                    "query": "query relationship($id: ID!, $tenantId: String) {\n  relationship(id: $id, tenantId: $tenantId) {\n    # Select fields from Relationship\n    __typename\n  }\n}",
                    "variables": {
                      "id": "example-id",
                      "tenantId": "VALUE"
                    },
                    "operationName": "relationship"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "query",
          "name": "relationship",
          "returnType": "Relationship",
          "arguments": [
            {
              "name": "id",
              "type": "ID!",
              "description": null,
              "defaultValue": null
            },
            {
              "name": "tenantId",
              "type": "String",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/queries/relationships": {
      "post": {
        "tags": [
          "Queries"
        ],
        "summary": "Queries: relationships",
        "description": "Executes the query `relationships`.\n\n**Arguments**\n- `input` (*RelationshipSearchInput!*): No description provided.\n\n> Submit this GraphQL query via POST /graphql on the Summit API server.",
        "operationId": "queries_relationships",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "relationships",
                  "description": "Executes the query `relationships`.\n\n**Arguments**\n- `input` (*RelationshipSearchInput!*): No description provided.",
                  "value": {
                    "query": "query relationships($input: RelationshipSearchInput!) {\n  relationships(input: $input) {\n    # Select fields from Relationship\n    __typename\n  }\n}",
                    "variables": {
                      "input": "VALUE"
                    },
                    "operationName": "relationships"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "query",
          "name": "relationships",
          "returnType": "[Relationship!]!",
          "arguments": [
            {
              "name": "input",
              "type": "RelationshipSearchInput!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/queries/investigation": {
      "post": {
        "tags": [
          "Queries"
        ],
        "summary": "Queries: investigation",
        "description": "Investigation queries\n\n**Arguments**\n- `id` (*ID!*): No description provided.\n- `tenantId` (*String*): No description provided.\n\n> Submit this GraphQL query via POST /graphql on the Summit API server.",
        "operationId": "queries_investigation",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "investigation",
                  "description": "Investigation queries\n\n**Arguments**\n- `id` (*ID!*): No description provided.\n- `tenantId` (*String*): No description provided.",
                  "value": {
                    "query": "query investigation($id: ID!, $tenantId: String) {\n  investigation(id: $id, tenantId: $tenantId) {\n    # Select fields from Investigation\n    __typename\n  }\n}",
                    "variables": {
                      "id": "example-id",
                      "tenantId": "VALUE"
                    },
                    "operationName": "investigation"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "query",
          "name": "investigation",
          "returnType": "Investigation",
          "arguments": [
            {
              "name": "id",
              "type": "ID!",
              "description": null,
              "defaultValue": null
            },
            {
              "name": "tenantId",
              "type": "String",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/queries/investigations": {
      "post": {
        "tags": [
          "Queries"
        ],
        "summary": "Queries: investigations",
        "description": "Executes the query `investigations`.\n\n**Arguments**\n- `tenantId` (*String!*): No description provided.\n- `limit` (*Int*): No description provided.\n- `offset` (*Int*): No description provided.\n\n> Submit this GraphQL query via POST /graphql on the Summit API server.",
        "operationId": "queries_investigations",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "investigations",
                  "description": "Executes the query `investigations`.\n\n**Arguments**\n- `tenantId` (*String!*): No description provided.\n- `limit` (*Int*): No description provided.\n- `offset` (*Int*): No description provided.",
                  "value": {
                    "query": "query investigations($tenantId: String!, $limit: Int, $offset: Int) {\n  investigations(tenantId: $tenantId, limit: $limit, offset: $offset) {\n    # Select fields from Investigation\n    __typename\n  }\n}",
                    "variables": {
                      "tenantId": "VALUE",
                      "limit": 1,
                      "offset": 1
                    },
                    "operationName": "investigations"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "query",
          "name": "investigations",
          "returnType": "[Investigation!]!",
          "arguments": [
            {
              "name": "tenantId",
              "type": "String!",
              "description": null,
              "defaultValue": null
            },
            {
              "name": "limit",
              "type": "Int",
              "description": null,
              "defaultValue": "50"
            },
            {
              "name": "offset",
              "type": "Int",
              "description": null,
              "defaultValue": "0"
            }
          ]
        }
      }
    },
    "/queries/graphNeighborhood": {
      "post": {
        "tags": [
          "Queries"
        ],
        "summary": "Queries: graphNeighborhood",
        "description": "Graph operations\n\n**Arguments**\n- `input` (*GraphTraversalInput!*): No description provided.\n\n> Submit this GraphQL query via POST /graphql on the Summit API server.",
        "operationId": "queries_graphNeighborhood",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "graphNeighborhood",
                  "description": "Graph operations\n\n**Arguments**\n- `input` (*GraphTraversalInput!*): No description provided.",
                  "value": {
                    "query": "query graphNeighborhood($input: GraphTraversalInput!) {\n  graphNeighborhood(input: $input) {\n    # Select fields from GraphNeighborhood\n    __typename\n  }\n}",
                    "variables": {
                      "input": "VALUE"
                    },
                    "operationName": "graphNeighborhood"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "query",
          "name": "graphNeighborhood",
          "returnType": "GraphNeighborhood!",
          "arguments": [
            {
              "name": "input",
              "type": "GraphTraversalInput!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/queries/searchEntities": {
      "post": {
        "tags": [
          "Queries"
        ],
        "summary": "Queries: searchEntities",
        "description": "Search across all entity types\n\n**Arguments**\n- `tenantId` (*String!*): No description provided.\n- `query` (*String!*): No description provided.\n- `kinds` (*[String!]*): No description provided.\n- `limit` (*Int*): No description provided.\n\n> Submit this GraphQL query via POST /graphql on the Summit API server.",
        "operationId": "queries_searchEntities",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "searchEntities",
                  "description": "Search across all entity types\n\n**Arguments**\n- `tenantId` (*String!*): No description provided.\n- `query` (*String!*): No description provided.\n- `kinds` (*[String!]*): No description provided.\n- `limit` (*Int*): No description provided.",
                  "value": {
                    "query": "query searchEntities($tenantId: String!, $query: String!, $kinds: [String!], $limit: Int) {\n  searchEntities(tenantId: $tenantId, query: $query, kinds: $kinds, limit: $limit) {\n    # Select fields from Entity\n    __typename\n  }\n}",
                    "variables": {
                      "tenantId": "VALUE",
                      "query": "VALUE",
                      "kinds": "VALUE",
                      "limit": 1
                    },
                    "operationName": "searchEntities"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "query",
          "name": "searchEntities",
          "returnType": "[Entity!]!",
          "arguments": [
            {
              "name": "tenantId",
              "type": "String!",
              "description": null,
              "defaultValue": null
            },
            {
              "name": "query",
              "type": "String!",
              "description": null,
              "defaultValue": null
            },
            {
              "name": "kinds",
              "type": "[String!]",
              "description": null,
              "defaultValue": null
            },
            {
              "name": "limit",
              "type": "Int",
              "description": null,
              "defaultValue": "50"
            }
          ]
        }
      }
    },
    "/queries/copilotRun": {
      "post": {
        "tags": [
          "Queries"
        ],
        "summary": "Queries: copilotRun",
        "description": "Get a specific run with full details\n\n**Arguments**\n- `id` (*ID!*): No description provided.\n\n> Submit this GraphQL query via POST /graphql on the Summit API server.",
        "operationId": "queries_copilotRun",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "copilotRun",
                  "description": "Get a specific run with full details\n\n**Arguments**\n- `id` (*ID!*): No description provided.",
                  "value": {
                    "query": "query copilotRun($id: ID!) {\n  copilotRun(id: $id) {\n    # Select fields from CopilotRun\n    __typename\n  }\n}",
                    "variables": {
                      "id": "example-id"
                    },
                    "operationName": "copilotRun"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "query",
          "name": "copilotRun",
          "returnType": "CopilotRun",
          "arguments": [
            {
              "name": "id",
              "type": "ID!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/queries/copilotRuns": {
      "post": {
        "tags": [
          "Queries"
        ],
        "summary": "Queries: copilotRuns",
        "description": "Get multiple runs with filtering\n\n**Arguments**\n- `investigationId` (*ID*): No description provided.\n- `status` (*CopilotRunStatus*): No description provided.\n- `limit` (*Int*): No description provided.\n\n> Submit this GraphQL query via POST /graphql on the Summit API server.",
        "operationId": "queries_copilotRuns",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "copilotRuns",
                  "description": "Get multiple runs with filtering\n\n**Arguments**\n- `investigationId` (*ID*): No description provided.\n- `status` (*CopilotRunStatus*): No description provided.\n- `limit` (*Int*): No description provided.",
                  "value": {
                    "query": "query copilotRuns($investigationId: ID, $status: CopilotRunStatus, $limit: Int) {\n  copilotRuns(investigationId: $investigationId, status: $status, limit: $limit) {\n    # Select fields from CopilotRun\n    __typename\n  }\n}",
                    "variables": {
                      "investigationId": "example-id",
                      "status": "VALUE",
                      "limit": 1
                    },
                    "operationName": "copilotRuns"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "query",
          "name": "copilotRuns",
          "returnType": "[CopilotRun!]!",
          "arguments": [
            {
              "name": "investigationId",
              "type": "ID",
              "description": null,
              "defaultValue": null
            },
            {
              "name": "status",
              "type": "CopilotRunStatus",
              "description": null,
              "defaultValue": null
            },
            {
              "name": "limit",
              "type": "Int",
              "description": null,
              "defaultValue": "20"
            }
          ]
        }
      }
    },
    "/queries/copilotEvents": {
      "post": {
        "tags": [
          "Queries"
        ],
        "summary": "Queries: copilotEvents",
        "description": "Get events for a run with pagination\n\n**Arguments**\n- `runId` (*ID!*): No description provided.\n- `afterId` (*ID*): No description provided.\n- `limit` (*Int*): No description provided.\n\n> Submit this GraphQL query via POST /graphql on the Summit API server.",
        "operationId": "queries_copilotEvents",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "copilotEvents",
                  "description": "Get events for a run with pagination\n\n**Arguments**\n- `runId` (*ID!*): No description provided.\n- `afterId` (*ID*): No description provided.\n- `limit` (*Int*): No description provided.",
                  "value": {
                    "query": "query copilotEvents($runId: ID!, $afterId: ID, $limit: Int) {\n  copilotEvents(runId: $runId, afterId: $afterId, limit: $limit) {\n    # Select fields from CopilotEvent\n    __typename\n  }\n}",
                    "variables": {
                      "runId": "example-id",
                      "afterId": "example-id",
                      "limit": 1
                    },
                    "operationName": "copilotEvents"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "query",
          "name": "copilotEvents",
          "returnType": "[CopilotEvent!]!",
          "arguments": [
            {
              "name": "runId",
              "type": "ID!",
              "description": null,
              "defaultValue": null
            },
            {
              "name": "afterId",
              "type": "ID",
              "description": null,
              "defaultValue": null
            },
            {
              "name": "limit",
              "type": "Int",
              "description": null,
              "defaultValue": "50"
            }
          ]
        }
      }
    },
    "/queries/copilotStats": {
      "post": {
        "tags": [
          "Queries"
        ],
        "summary": "Queries: copilotStats",
        "description": "Get statistics for monitoring\n\n**Arguments**\n- `timeRange` (*String*): No description provided.\n\n> Submit this GraphQL query via POST /graphql on the Summit API server.",
        "operationId": "queries_copilotStats",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "copilotStats",
                  "description": "Get statistics for monitoring\n\n**Arguments**\n- `timeRange` (*String*): No description provided.",
                  "value": {
                    "query": "query copilotStats($timeRange: String) {\n  copilotStats(timeRange: $timeRange) {\n    # Select fields from CopilotStats\n    __typename\n  }\n}",
                    "variables": {
                      "timeRange": "VALUE"
                    },
                    "operationName": "copilotStats"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "query",
          "name": "copilotStats",
          "returnType": "[CopilotStats!]!",
          "arguments": [
            {
              "name": "timeRange",
              "type": "String",
              "description": null,
              "defaultValue": "\"24 hours\""
            }
          ]
        }
      }
    },
    "/queries/suggestLinks": {
      "post": {
        "tags": [
          "Queries"
        ],
        "summary": "Queries: suggestLinks",
        "description": "Executes the query `suggestLinks`.\n\n**Arguments**\n- `entityId` (*ID!*): No description provided.\n- `limit` (*Int*): No description provided.\n\n> Submit this GraphQL query via POST /graphql on the Summit API server.",
        "operationId": "queries_suggestLinks",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "suggestLinks",
                  "description": "Executes the query `suggestLinks`.\n\n**Arguments**\n- `entityId` (*ID!*): No description provided.\n- `limit` (*Int*): No description provided.",
                  "value": {
                    "query": "query suggestLinks($entityId: ID!, $limit: Int) {\n  suggestLinks(entityId: $entityId, limit: $limit) {\n    # Select fields from AIRecommendation\n    __typename\n  }\n}",
                    "variables": {
                      "entityId": "example-id",
                      "limit": 1
                    },
                    "operationName": "suggestLinks"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "query",
          "name": "suggestLinks",
          "returnType": "[AIRecommendation!]!",
          "arguments": [
            {
              "name": "entityId",
              "type": "ID!",
              "description": null,
              "defaultValue": null
            },
            {
              "name": "limit",
              "type": "Int",
              "description": null,
              "defaultValue": "5"
            }
          ]
        }
      }
    },
    "/queries/detectAnomalies": {
      "post": {
        "tags": [
          "Queries"
        ],
        "summary": "Queries: detectAnomalies",
        "description": "Executes the query `detectAnomalies`.\n\n**Arguments**\n- `investigationId` (*ID*): No description provided.\n- `limit` (*Int*): No description provided.\n\n> Submit this GraphQL query via POST /graphql on the Summit API server.",
        "operationId": "queries_detectAnomalies",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "detectAnomalies",
                  "description": "Executes the query `detectAnomalies`.\n\n**Arguments**\n- `investigationId` (*ID*): No description provided.\n- `limit` (*Int*): No description provided.",
                  "value": {
                    "query": "query detectAnomalies($investigationId: ID, $limit: Int) {\n  detectAnomalies(investigationId: $investigationId, limit: $limit) {\n    # Select fields from AIAnomaly\n    __typename\n  }\n}",
                    "variables": {
                      "investigationId": "example-id",
                      "limit": 1
                    },
                    "operationName": "detectAnomalies"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "query",
          "name": "detectAnomalies",
          "returnType": "[AIAnomaly!]!",
          "arguments": [
            {
              "name": "investigationId",
              "type": "ID",
              "description": null,
              "defaultValue": null
            },
            {
              "name": "limit",
              "type": "Int",
              "description": null,
              "defaultValue": "10"
            }
          ]
        }
      }
    },
    "/queries/searchEntitiesHybrid": {
      "post": {
        "tags": [
          "Queries"
        ],
        "summary": "Queries: searchEntitiesHybrid",
        "description": "Executes the query `searchEntitiesHybrid`.\n\n**Arguments**\n- `q` (*String!*): No description provided.\n- `filters` (*JSON*): No description provided.\n- `limit` (*Int*): No description provided.\n\n> Submit this GraphQL query via POST /graphql on the Summit API server.",
        "operationId": "queries_searchEntitiesHybrid",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "searchEntitiesHybrid",
                  "description": "Executes the query `searchEntitiesHybrid`.\n\n**Arguments**\n- `q` (*String!*): No description provided.\n- `filters` (*JSON*): No description provided.\n- `limit` (*Int*): No description provided.",
                  "value": {
                    "query": "query searchEntitiesHybrid($q: String!, $filters: JSON, $limit: Int) {\n  searchEntitiesHybrid(q: $q, filters: $filters, limit: $limit) {\n    # Select fields from Entity\n    __typename\n  }\n}",
                    "variables": {
                      "q": "VALUE",
                      "filters": {},
                      "limit": 1
                    },
                    "operationName": "searchEntitiesHybrid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "query",
          "name": "searchEntitiesHybrid",
          "returnType": "[Entity!]!",
          "arguments": [
            {
              "name": "q",
              "type": "String!",
              "description": null,
              "defaultValue": null
            },
            {
              "name": "filters",
              "type": "JSON",
              "description": null,
              "defaultValue": null
            },
            {
              "name": "limit",
              "type": "Int",
              "description": null,
              "defaultValue": "25"
            }
          ]
        }
      }
    },
    "/queries/graphRAGQuery": {
      "post": {
        "tags": [
          "Queries"
        ],
        "summary": "Queries: graphRAGQuery",
        "description": "Query the knowledge graph using GraphRAG for intelligent responses\n\n**Arguments**\n- `input` (*GraphRAGQueryInput!*): No description provided.\n\n> Submit this GraphQL query via POST /graphql on the Summit API server.",
        "operationId": "queries_graphRAGQuery",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "graphRAGQuery",
                  "description": "Query the knowledge graph using GraphRAG for intelligent responses\n\n**Arguments**\n- `input` (*GraphRAGQueryInput!*): No description provided.",
                  "value": {
                    "query": "query graphRAGQuery($input: GraphRAGQueryInput!) {\n  graphRAGQuery(input: $input) {\n    # Select fields from GraphRAGResponse\n    __typename\n  }\n}",
                    "variables": {
                      "input": "VALUE"
                    },
                    "operationName": "graphRAGQuery"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "query",
          "name": "graphRAGQuery",
          "returnType": "GraphRAGResponse!",
          "arguments": [
            {
              "name": "input",
              "type": "GraphRAGQueryInput!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/queries/graphRAGHealth": {
      "post": {
        "tags": [
          "Queries"
        ],
        "summary": "Queries: graphRAGHealth",
        "description": "Get health status and metrics for GraphRAG services\n\n> Submit this GraphQL query via POST /graphql on the Summit API server.",
        "operationId": "queries_graphRAGHealth",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "graphRAGHealth",
                  "description": "Get health status and metrics for GraphRAG services",
                  "value": {
                    "query": "query graphRAGHealth {\n  graphRAGHealth {\n    # Select fields from GraphRAGHealthResponse\n    __typename\n  }\n}",
                    "operationName": "graphRAGHealth"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "query",
          "name": "graphRAGHealth",
          "returnType": "GraphRAGHealthResponse!",
          "arguments": []
        }
      }
    },
    "/queries/findSimilarEntities": {
      "post": {
        "tags": [
          "Queries"
        ],
        "summary": "Queries: findSimilarEntities",
        "description": "Find entities similar to a given entity using semantic embeddings\n\n**Arguments**\n- `input` (*FindSimilarEntitiesInput!*): No description provided.\n\n> Submit this GraphQL query via POST /graphql on the Summit API server.",
        "operationId": "queries_findSimilarEntities",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "findSimilarEntities",
                  "description": "Find entities similar to a given entity using semantic embeddings\n\n**Arguments**\n- `input` (*FindSimilarEntitiesInput!*): No description provided.",
                  "value": {
                    "query": "query findSimilarEntities($input: FindSimilarEntitiesInput!) {\n  findSimilarEntities(input: $input) {\n    # Select fields from SimilarEntitiesResponse\n    __typename\n  }\n}",
                    "variables": {
                      "input": "VALUE"
                    },
                    "operationName": "findSimilarEntities"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "query",
          "name": "findSimilarEntities",
          "returnType": "SimilarEntitiesResponse!",
          "arguments": [
            {
              "name": "input",
              "type": "FindSimilarEntitiesInput!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/queries/crystalSessions": {
      "post": {
        "tags": [
          "Queries"
        ],
        "summary": "Queries: crystalSessions",
        "description": "Executes the query `crystalSessions`.\n\n> Submit this GraphQL query via POST /graphql on the Summit API server.",
        "operationId": "queries_crystalSessions",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "crystalSessions",
                  "description": "Executes the query `crystalSessions`.",
                  "value": {
                    "query": "query crystalSessions {\n  crystalSessions {\n    # Select fields from CrystalSession\n    __typename\n  }\n}",
                    "operationName": "crystalSessions"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "query",
          "name": "crystalSessions",
          "returnType": "[CrystalSession!]!",
          "arguments": []
        }
      }
    },
    "/queries/crystalSession": {
      "post": {
        "tags": [
          "Queries"
        ],
        "summary": "Queries: crystalSession",
        "description": "Executes the query `crystalSession`.\n\n**Arguments**\n- `id` (*ID!*): No description provided.\n\n> Submit this GraphQL query via POST /graphql on the Summit API server.",
        "operationId": "queries_crystalSession",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "crystalSession",
                  "description": "Executes the query `crystalSession`.\n\n**Arguments**\n- `id` (*ID!*): No description provided.",
                  "value": {
                    "query": "query crystalSession($id: ID!) {\n  crystalSession(id: $id) {\n    # Select fields from CrystalSession\n    __typename\n  }\n}",
                    "variables": {
                      "id": "example-id"
                    },
                    "operationName": "crystalSession"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "query",
          "name": "crystalSession",
          "returnType": "CrystalSession",
          "arguments": [
            {
              "name": "id",
              "type": "ID!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/queries/crystalAdapters": {
      "post": {
        "tags": [
          "Queries"
        ],
        "summary": "Queries: crystalAdapters",
        "description": "Executes the query `crystalAdapters`.\n\n> Submit this GraphQL query via POST /graphql on the Summit API server.",
        "operationId": "queries_crystalAdapters",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "crystalAdapters",
                  "description": "Executes the query `crystalAdapters`.",
                  "value": {
                    "query": "query crystalAdapters {\n  crystalAdapters {\n    # Select fields from CrystalAdapter\n    __typename\n  }\n}",
                    "operationName": "crystalAdapters"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "query",
          "name": "crystalAdapters",
          "returnType": "[CrystalAdapter!]!",
          "arguments": []
        }
      }
    },
    "/queries/crystalBudgets": {
      "post": {
        "tags": [
          "Queries"
        ],
        "summary": "Queries: crystalBudgets",
        "description": "Executes the query `crystalBudgets`.\n\n> Submit this GraphQL query via POST /graphql on the Summit API server.",
        "operationId": "queries_crystalBudgets",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "crystalBudgets",
                  "description": "Executes the query `crystalBudgets`.",
                  "value": {
                    "query": "query crystalBudgets {\n  crystalBudgets {\n    # Select fields from CrystalBudgetSnapshot\n    __typename\n  }\n}",
                    "operationName": "crystalBudgets"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "query",
          "name": "crystalBudgets",
          "returnType": "[CrystalBudgetSnapshot!]!",
          "arguments": []
        }
      }
    },
    "/mutations/createEntity": {
      "post": {
        "tags": [
          "Mutations"
        ],
        "summary": "Mutations: createEntity",
        "description": "Entity mutations\n\n**Arguments**\n- `input` (*EntityInput!*): No description provided.\n\n> Submit this GraphQL mutation via POST /graphql on the Summit API server.",
        "operationId": "mutations_createEntity",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "createEntity",
                  "description": "Entity mutations\n\n**Arguments**\n- `input` (*EntityInput!*): No description provided.",
                  "value": {
                    "query": "mutation createEntity($input: EntityInput!) {\n  createEntity(input: $input) {\n    # Select fields from Entity\n    __typename\n  }\n}",
                    "variables": {
                      "input": "VALUE"
                    },
                    "operationName": "createEntity"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "mutation",
          "name": "createEntity",
          "returnType": "Entity!",
          "arguments": [
            {
              "name": "input",
              "type": "EntityInput!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/mutations/updateEntity": {
      "post": {
        "tags": [
          "Mutations"
        ],
        "summary": "Mutations: updateEntity",
        "description": "Executes the mutation `updateEntity`.\n\n**Arguments**\n- `input` (*EntityUpdateInput!*): No description provided.\n\n> Submit this GraphQL mutation via POST /graphql on the Summit API server.",
        "operationId": "mutations_updateEntity",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "updateEntity",
                  "description": "Executes the mutation `updateEntity`.\n\n**Arguments**\n- `input` (*EntityUpdateInput!*): No description provided.",
                  "value": {
                    "query": "mutation updateEntity($input: EntityUpdateInput!) {\n  updateEntity(input: $input) {\n    # Select fields from Entity\n    __typename\n  }\n}",
                    "variables": {
                      "input": "VALUE"
                    },
                    "operationName": "updateEntity"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "mutation",
          "name": "updateEntity",
          "returnType": "Entity",
          "arguments": [
            {
              "name": "input",
              "type": "EntityUpdateInput!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/mutations/deleteEntity": {
      "post": {
        "tags": [
          "Mutations"
        ],
        "summary": "Mutations: deleteEntity",
        "description": "Executes the mutation `deleteEntity`.\n\n**Arguments**\n- `id` (*ID!*): No description provided.\n- `tenantId` (*String!*): No description provided.\n\n> Submit this GraphQL mutation via POST /graphql on the Summit API server.",
        "operationId": "mutations_deleteEntity",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "deleteEntity",
                  "description": "Executes the mutation `deleteEntity`.\n\n**Arguments**\n- `id` (*ID!*): No description provided.\n- `tenantId` (*String!*): No description provided.",
                  "value": {
                    "query": "mutation deleteEntity($id: ID!, $tenantId: String!) {\n  deleteEntity(id: $id, tenantId: $tenantId)\n}",
                    "variables": {
                      "id": "example-id",
                      "tenantId": "VALUE"
                    },
                    "operationName": "deleteEntity"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "mutation",
          "name": "deleteEntity",
          "returnType": "Boolean!",
          "arguments": [
            {
              "name": "id",
              "type": "ID!",
              "description": null,
              "defaultValue": null
            },
            {
              "name": "tenantId",
              "type": "String!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/mutations/createRelationship": {
      "post": {
        "tags": [
          "Mutations"
        ],
        "summary": "Mutations: createRelationship",
        "description": "Relationship mutations\n\n**Arguments**\n- `input` (*RelationshipInput!*): No description provided.\n\n> Submit this GraphQL mutation via POST /graphql on the Summit API server.",
        "operationId": "mutations_createRelationship",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "createRelationship",
                  "description": "Relationship mutations\n\n**Arguments**\n- `input` (*RelationshipInput!*): No description provided.",
                  "value": {
                    "query": "mutation createRelationship($input: RelationshipInput!) {\n  createRelationship(input: $input) {\n    # Select fields from Relationship\n    __typename\n  }\n}",
                    "variables": {
                      "input": "VALUE"
                    },
                    "operationName": "createRelationship"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "mutation",
          "name": "createRelationship",
          "returnType": "Relationship!",
          "arguments": [
            {
              "name": "input",
              "type": "RelationshipInput!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/mutations/deleteRelationship": {
      "post": {
        "tags": [
          "Mutations"
        ],
        "summary": "Mutations: deleteRelationship",
        "description": "Executes the mutation `deleteRelationship`.\n\n**Arguments**\n- `id` (*ID!*): No description provided.\n- `tenantId` (*String!*): No description provided.\n\n> Submit this GraphQL mutation via POST /graphql on the Summit API server.",
        "operationId": "mutations_deleteRelationship",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "deleteRelationship",
                  "description": "Executes the mutation `deleteRelationship`.\n\n**Arguments**\n- `id` (*ID!*): No description provided.\n- `tenantId` (*String!*): No description provided.",
                  "value": {
                    "query": "mutation deleteRelationship($id: ID!, $tenantId: String!) {\n  deleteRelationship(id: $id, tenantId: $tenantId)\n}",
                    "variables": {
                      "id": "example-id",
                      "tenantId": "VALUE"
                    },
                    "operationName": "deleteRelationship"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "mutation",
          "name": "deleteRelationship",
          "returnType": "Boolean!",
          "arguments": [
            {
              "name": "id",
              "type": "ID!",
              "description": null,
              "defaultValue": null
            },
            {
              "name": "tenantId",
              "type": "String!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/mutations/createInvestigation": {
      "post": {
        "tags": [
          "Mutations"
        ],
        "summary": "Mutations: createInvestigation",
        "description": "Investigation mutations\n\n**Arguments**\n- `input` (*InvestigationInput!*): No description provided.\n\n> Submit this GraphQL mutation via POST /graphql on the Summit API server.",
        "operationId": "mutations_createInvestigation",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "createInvestigation",
                  "description": "Investigation mutations\n\n**Arguments**\n- `input` (*InvestigationInput!*): No description provided.",
                  "value": {
                    "query": "mutation createInvestigation($input: InvestigationInput!) {\n  createInvestigation(input: $input) {\n    # Select fields from Investigation\n    __typename\n  }\n}",
                    "variables": {
                      "input": "VALUE"
                    },
                    "operationName": "createInvestigation"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "mutation",
          "name": "createInvestigation",
          "returnType": "Investigation!",
          "arguments": [
            {
              "name": "input",
              "type": "InvestigationInput!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/mutations/updateInvestigation": {
      "post": {
        "tags": [
          "Mutations"
        ],
        "summary": "Mutations: updateInvestigation",
        "description": "Executes the mutation `updateInvestigation`.\n\n**Arguments**\n- `input` (*InvestigationUpdateInput!*): No description provided.\n\n> Submit this GraphQL mutation via POST /graphql on the Summit API server.",
        "operationId": "mutations_updateInvestigation",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "updateInvestigation",
                  "description": "Executes the mutation `updateInvestigation`.\n\n**Arguments**\n- `input` (*InvestigationUpdateInput!*): No description provided.",
                  "value": {
                    "query": "mutation updateInvestigation($input: InvestigationUpdateInput!) {\n  updateInvestigation(input: $input) {\n    # Select fields from Investigation\n    __typename\n  }\n}",
                    "variables": {
                      "input": "VALUE"
                    },
                    "operationName": "updateInvestigation"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "mutation",
          "name": "updateInvestigation",
          "returnType": "Investigation",
          "arguments": [
            {
              "name": "input",
              "type": "InvestigationUpdateInput!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/mutations/deleteInvestigation": {
      "post": {
        "tags": [
          "Mutations"
        ],
        "summary": "Mutations: deleteInvestigation",
        "description": "Executes the mutation `deleteInvestigation`.\n\n**Arguments**\n- `id` (*ID!*): No description provided.\n- `tenantId` (*String!*): No description provided.\n\n> Submit this GraphQL mutation via POST /graphql on the Summit API server.",
        "operationId": "mutations_deleteInvestigation",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "deleteInvestigation",
                  "description": "Executes the mutation `deleteInvestigation`.\n\n**Arguments**\n- `id` (*ID!*): No description provided.\n- `tenantId` (*String!*): No description provided.",
                  "value": {
                    "query": "mutation deleteInvestigation($id: ID!, $tenantId: String!) {\n  deleteInvestigation(id: $id, tenantId: $tenantId)\n}",
                    "variables": {
                      "id": "example-id",
                      "tenantId": "VALUE"
                    },
                    "operationName": "deleteInvestigation"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "mutation",
          "name": "deleteInvestigation",
          "returnType": "Boolean!",
          "arguments": [
            {
              "name": "id",
              "type": "ID!",
              "description": null,
              "defaultValue": null
            },
            {
              "name": "tenantId",
              "type": "String!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/mutations/createEntitiesBatch": {
      "post": {
        "tags": [
          "Mutations"
        ],
        "summary": "Mutations: createEntitiesBatch",
        "description": "Bulk operations\n\n**Arguments**\n- `inputs` (*[EntityInput!]!*): No description provided.\n- `tenantId` (*String!*): No description provided.\n\n> Submit this GraphQL mutation via POST /graphql on the Summit API server.",
        "operationId": "mutations_createEntitiesBatch",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "createEntitiesBatch",
                  "description": "Bulk operations\n\n**Arguments**\n- `inputs` (*[EntityInput!]!*): No description provided.\n- `tenantId` (*String!*): No description provided.",
                  "value": {
                    "query": "mutation createEntitiesBatch($inputs: [EntityInput!]!, $tenantId: String!) {\n  createEntitiesBatch(inputs: $inputs, tenantId: $tenantId) {\n    # Select fields from Entity\n    __typename\n  }\n}",
                    "variables": {
                      "inputs": "VALUE",
                      "tenantId": "VALUE"
                    },
                    "operationName": "createEntitiesBatch"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "mutation",
          "name": "createEntitiesBatch",
          "returnType": "[Entity!]!",
          "arguments": [
            {
              "name": "inputs",
              "type": "[EntityInput!]!",
              "description": null,
              "defaultValue": null
            },
            {
              "name": "tenantId",
              "type": "String!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/mutations/createRelationshipsBatch": {
      "post": {
        "tags": [
          "Mutations"
        ],
        "summary": "Mutations: createRelationshipsBatch",
        "description": "Executes the mutation `createRelationshipsBatch`.\n\n**Arguments**\n- `inputs` (*[RelationshipInput!]!*): No description provided.\n- `tenantId` (*String!*): No description provided.\n\n> Submit this GraphQL mutation via POST /graphql on the Summit API server.",
        "operationId": "mutations_createRelationshipsBatch",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "createRelationshipsBatch",
                  "description": "Executes the mutation `createRelationshipsBatch`.\n\n**Arguments**\n- `inputs` (*[RelationshipInput!]!*): No description provided.\n- `tenantId` (*String!*): No description provided.",
                  "value": {
                    "query": "mutation createRelationshipsBatch($inputs: [RelationshipInput!]!, $tenantId: String!) {\n  createRelationshipsBatch(inputs: $inputs, tenantId: $tenantId) {\n    # Select fields from Relationship\n    __typename\n  }\n}",
                    "variables": {
                      "inputs": "VALUE",
                      "tenantId": "VALUE"
                    },
                    "operationName": "createRelationshipsBatch"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "mutation",
          "name": "createRelationshipsBatch",
          "returnType": "[Relationship!]!",
          "arguments": [
            {
              "name": "inputs",
              "type": "[RelationshipInput!]!",
              "description": null,
              "defaultValue": null
            },
            {
              "name": "tenantId",
              "type": "String!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/mutations/startCopilotRun": {
      "post": {
        "tags": [
          "Mutations"
        ],
        "summary": "Mutations: startCopilotRun",
        "description": "Start a new run or resume existing\n\n**Arguments**\n- `goalId` (*ID*): No description provided.\n- `investigationId` (*ID*): No description provided.\n\n> Submit this GraphQL mutation via POST /graphql on the Summit API server.",
        "operationId": "mutations_startCopilotRun",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "startCopilotRun",
                  "description": "Start a new run or resume existing\n\n**Arguments**\n- `goalId` (*ID*): No description provided.\n- `investigationId` (*ID*): No description provided.",
                  "value": {
                    "query": "mutation startCopilotRun($goalId: ID, $investigationId: ID) {\n  startCopilotRun(goalId: $goalId, investigationId: $investigationId) {\n    # Select fields from CopilotRun\n    __typename\n  }\n}",
                    "variables": {
                      "goalId": "example-id",
                      "investigationId": "example-id"
                    },
                    "operationName": "startCopilotRun"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "mutation",
          "name": "startCopilotRun",
          "returnType": "CopilotRun!",
          "arguments": [
            {
              "name": "goalId",
              "type": "ID",
              "description": null,
              "defaultValue": null
            },
            {
              "name": "investigationId",
              "type": "ID",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/mutations/pauseCopilotRun": {
      "post": {
        "tags": [
          "Mutations"
        ],
        "summary": "Mutations: pauseCopilotRun",
        "description": "Control run execution\n\n**Arguments**\n- `runId` (*ID!*): No description provided.\n\n> Submit this GraphQL mutation via POST /graphql on the Summit API server.",
        "operationId": "mutations_pauseCopilotRun",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "pauseCopilotRun",
                  "description": "Control run execution\n\n**Arguments**\n- `runId` (*ID!*): No description provided.",
                  "value": {
                    "query": "mutation pauseCopilotRun($runId: ID!) {\n  pauseCopilotRun(runId: $runId) {\n    # Select fields from CopilotRun\n    __typename\n  }\n}",
                    "variables": {
                      "runId": "example-id"
                    },
                    "operationName": "pauseCopilotRun"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "mutation",
          "name": "pauseCopilotRun",
          "returnType": "CopilotRun!",
          "arguments": [
            {
              "name": "runId",
              "type": "ID!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/mutations/resumeCopilotRun": {
      "post": {
        "tags": [
          "Mutations"
        ],
        "summary": "Mutations: resumeCopilotRun",
        "description": "Executes the mutation `resumeCopilotRun`.\n\n**Arguments**\n- `runId` (*ID!*): No description provided.\n\n> Submit this GraphQL mutation via POST /graphql on the Summit API server.",
        "operationId": "mutations_resumeCopilotRun",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "resumeCopilotRun",
                  "description": "Executes the mutation `resumeCopilotRun`.\n\n**Arguments**\n- `runId` (*ID!*): No description provided.",
                  "value": {
                    "query": "mutation resumeCopilotRun($runId: ID!) {\n  resumeCopilotRun(runId: $runId) {\n    # Select fields from CopilotRun\n    __typename\n  }\n}",
                    "variables": {
                      "runId": "example-id"
                    },
                    "operationName": "resumeCopilotRun"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "mutation",
          "name": "resumeCopilotRun",
          "returnType": "CopilotRun!",
          "arguments": [
            {
              "name": "runId",
              "type": "ID!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/mutations/expandNeighbors": {
      "post": {
        "tags": [
          "Mutations"
        ],
        "summary": "Mutations: expandNeighbors",
        "description": "Expands neighbors around a given entity with role-based limits\n\n**Arguments**\n- `entityId` (*ID!*): No description provided.\n- `limit` (*Int*): No description provided.\n\n> Submit this GraphQL mutation via POST /graphql on the Summit API server.",
        "operationId": "mutations_expandNeighbors",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "expandNeighbors",
                  "description": "Expands neighbors around a given entity with role-based limits\n\n**Arguments**\n- `entityId` (*ID!*): No description provided.\n- `limit` (*Int*): No description provided.",
                  "value": {
                    "query": "mutation expandNeighbors($entityId: ID!, $limit: Int) {\n  expandNeighbors(entityId: $entityId, limit: $limit) {\n    # Select fields from Graph\n    __typename\n  }\n}",
                    "variables": {
                      "entityId": "example-id",
                      "limit": 1
                    },
                    "operationName": "expandNeighbors"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "mutation",
          "name": "expandNeighbors",
          "returnType": "Graph",
          "arguments": [
            {
              "name": "entityId",
              "type": "ID!",
              "description": null,
              "defaultValue": null
            },
            {
              "name": "limit",
              "type": "Int",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/mutations/expandNeighborhood": {
      "post": {
        "tags": [
          "Mutations"
        ],
        "summary": "Mutations: expandNeighborhood",
        "description": "Expands neighborhood for an entity within an investigation\n\n**Arguments**\n- `entityId` (*ID!*): No description provided.\n- `investigationId` (*ID!*): No description provided.\n- `radius` (*Int!*): No description provided.\n\n> Submit this GraphQL mutation via POST /graphql on the Summit API server.",
        "operationId": "mutations_expandNeighborhood",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "expandNeighborhood",
                  "description": "Expands neighborhood for an entity within an investigation\n\n**Arguments**\n- `entityId` (*ID!*): No description provided.\n- `investigationId` (*ID!*): No description provided.\n- `radius` (*Int!*): No description provided.",
                  "value": {
                    "query": "mutation expandNeighborhood($entityId: ID!, $investigationId: ID!, $radius: Int!) {\n  expandNeighborhood(entityId: $entityId, investigationId: $investigationId, radius: $radius) {\n    # Select fields from Graph\n    __typename\n  }\n}",
                    "variables": {
                      "entityId": "example-id",
                      "investigationId": "example-id",
                      "radius": 1
                    },
                    "operationName": "expandNeighborhood"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "mutation",
          "name": "expandNeighborhood",
          "returnType": "Graph",
          "arguments": [
            {
              "name": "entityId",
              "type": "ID!",
              "description": null,
              "defaultValue": null
            },
            {
              "name": "investigationId",
              "type": "ID!",
              "description": null,
              "defaultValue": null
            },
            {
              "name": "radius",
              "type": "Int!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/mutations/tagEntity": {
      "post": {
        "tags": [
          "Mutations"
        ],
        "summary": "Mutations: tagEntity",
        "description": "Tags an entity with a given string\n\n**Arguments**\n- `entityId` (*ID!*): No description provided.\n- `tag` (*String!*): No description provided.\n\n> Submit this GraphQL mutation via POST /graphql on the Summit API server.",
        "operationId": "mutations_tagEntity",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "tagEntity",
                  "description": "Tags an entity with a given string\n\n**Arguments**\n- `entityId` (*ID!*): No description provided.\n- `tag` (*String!*): No description provided.",
                  "value": {
                    "query": "mutation tagEntity($entityId: ID!, $tag: String!) {\n  tagEntity(entityId: $entityId, tag: $tag) {\n    # Select fields from Entity\n    __typename\n  }\n}",
                    "variables": {
                      "entityId": "example-id",
                      "tag": "VALUE"
                    },
                    "operationName": "tagEntity"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "mutation",
          "name": "tagEntity",
          "returnType": "Entity!",
          "arguments": [
            {
              "name": "entityId",
              "type": "ID!",
              "description": null,
              "defaultValue": null
            },
            {
              "name": "tag",
              "type": "String!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/mutations/deleteTag": {
      "post": {
        "tags": [
          "Mutations"
        ],
        "summary": "Mutations: deleteTag",
        "description": "Deletes a tag from an entity\n\n**Arguments**\n- `entityId` (*ID!*): No description provided.\n- `tag` (*String!*): No description provided.\n\n> Submit this GraphQL mutation via POST /graphql on the Summit API server.",
        "operationId": "mutations_deleteTag",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "deleteTag",
                  "description": "Deletes a tag from an entity\n\n**Arguments**\n- `entityId` (*ID!*): No description provided.\n- `tag` (*String!*): No description provided.",
                  "value": {
                    "query": "mutation deleteTag($entityId: ID!, $tag: String!) {\n  deleteTag(entityId: $entityId, tag: $tag) {\n    # Select fields from Entity\n    __typename\n  }\n}",
                    "variables": {
                      "entityId": "example-id",
                      "tag": "VALUE"
                    },
                    "operationName": "deleteTag"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "mutation",
          "name": "deleteTag",
          "returnType": "Entity!",
          "arguments": [
            {
              "name": "entityId",
              "type": "ID!",
              "description": null,
              "defaultValue": null
            },
            {
              "name": "tag",
              "type": "String!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/mutations/requestAIAnalysis": {
      "post": {
        "tags": [
          "Mutations"
        ],
        "summary": "Mutations: requestAIAnalysis",
        "description": "Enqueues a request for AI to analyze an entity\n\n**Arguments**\n- `entityId` (*ID!*): No description provided.\n\n> Submit this GraphQL mutation via POST /graphql on the Summit API server.",
        "operationId": "mutations_requestAIAnalysis",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "requestAIAnalysis",
                  "description": "Enqueues a request for AI to analyze an entity\n\n**Arguments**\n- `entityId` (*ID!*): No description provided.",
                  "value": {
                    "query": "mutation requestAIAnalysis($entityId: ID!) {\n  requestAIAnalysis(entityId: $entityId) {\n    # Select fields from AIRequestResult\n    __typename\n  }\n}",
                    "variables": {
                      "entityId": "example-id"
                    },
                    "operationName": "requestAIAnalysis"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "mutation",
          "name": "requestAIAnalysis",
          "returnType": "AIRequestResult!",
          "arguments": [
            {
              "name": "entityId",
              "type": "ID!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/mutations/recordAnomaly": {
      "post": {
        "tags": [
          "Mutations"
        ],
        "summary": "Mutations: recordAnomaly",
        "description": "Executes the mutation `recordAnomaly`.\n\n**Arguments**\n- `entityId` (*ID!*): No description provided.\n- `anomalyScore` (*Float!*): No description provided.\n- `reason` (*String*): No description provided.\n\n> Submit this GraphQL mutation via POST /graphql on the Summit API server.",
        "operationId": "mutations_recordAnomaly",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "recordAnomaly",
                  "description": "Executes the mutation `recordAnomaly`.\n\n**Arguments**\n- `entityId` (*ID!*): No description provided.\n- `anomalyScore` (*Float!*): No description provided.\n- `reason` (*String*): No description provided.",
                  "value": {
                    "query": "mutation recordAnomaly($entityId: ID!, $anomalyScore: Float!, $reason: String) {\n  recordAnomaly(entityId: $entityId, anomalyScore: $anomalyScore, reason: $reason) {\n    # Select fields from AIAnomaly\n    __typename\n  }\n}",
                    "variables": {
                      "entityId": "example-id",
                      "anomalyScore": 1,
                      "reason": "VALUE"
                    },
                    "operationName": "recordAnomaly"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "mutation",
          "name": "recordAnomaly",
          "returnType": "AIAnomaly!",
          "arguments": [
            {
              "name": "entityId",
              "type": "ID!",
              "description": null,
              "defaultValue": null
            },
            {
              "name": "anomalyScore",
              "type": "Float!",
              "description": null,
              "defaultValue": null
            },
            {
              "name": "reason",
              "type": "String",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/mutations/createEntityAnnotation": {
      "post": {
        "tags": [
          "Mutations"
        ],
        "summary": "Mutations: createEntityAnnotation",
        "description": "Executes the mutation `createEntityAnnotation`.\n\n**Arguments**\n- `entityId` (*ID!*): No description provided.\n- `input` (*AnnotationInput!*): No description provided.\n\n> Submit this GraphQL mutation via POST /graphql on the Summit API server.",
        "operationId": "mutations_createEntityAnnotation",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "createEntityAnnotation",
                  "description": "Executes the mutation `createEntityAnnotation`.\n\n**Arguments**\n- `entityId` (*ID!*): No description provided.\n- `input` (*AnnotationInput!*): No description provided.",
                  "value": {
                    "query": "mutation createEntityAnnotation($entityId: ID!, $input: AnnotationInput!) {\n  createEntityAnnotation(entityId: $entityId, input: $input) {\n    # Select fields from Annotation\n    __typename\n  }\n}",
                    "variables": {
                      "entityId": "example-id",
                      "input": "VALUE"
                    },
                    "operationName": "createEntityAnnotation"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "mutation",
          "name": "createEntityAnnotation",
          "returnType": "Annotation!",
          "arguments": [
            {
              "name": "entityId",
              "type": "ID!",
              "description": null,
              "defaultValue": null
            },
            {
              "name": "input",
              "type": "AnnotationInput!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/mutations/createEdgeAnnotation": {
      "post": {
        "tags": [
          "Mutations"
        ],
        "summary": "Mutations: createEdgeAnnotation",
        "description": "Executes the mutation `createEdgeAnnotation`.\n\n**Arguments**\n- `edgeId` (*ID!*): No description provided.\n- `input` (*AnnotationInput!*): No description provided.\n\n> Submit this GraphQL mutation via POST /graphql on the Summit API server.",
        "operationId": "mutations_createEdgeAnnotation",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "createEdgeAnnotation",
                  "description": "Executes the mutation `createEdgeAnnotation`.\n\n**Arguments**\n- `edgeId` (*ID!*): No description provided.\n- `input` (*AnnotationInput!*): No description provided.",
                  "value": {
                    "query": "mutation createEdgeAnnotation($edgeId: ID!, $input: AnnotationInput!) {\n  createEdgeAnnotation(edgeId: $edgeId, input: $input) {\n    # Select fields from Annotation\n    __typename\n  }\n}",
                    "variables": {
                      "edgeId": "example-id",
                      "input": "VALUE"
                    },
                    "operationName": "createEdgeAnnotation"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "mutation",
          "name": "createEdgeAnnotation",
          "returnType": "Annotation!",
          "arguments": [
            {
              "name": "edgeId",
              "type": "ID!",
              "description": null,
              "defaultValue": null
            },
            {
              "name": "input",
              "type": "AnnotationInput!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/mutations/updateAnnotation": {
      "post": {
        "tags": [
          "Mutations"
        ],
        "summary": "Mutations: updateAnnotation",
        "description": "Executes the mutation `updateAnnotation`.\n\n**Arguments**\n- `id` (*ID!*): No description provided.\n- `input` (*UpdateAnnotationInput!*): No description provided.\n\n> Submit this GraphQL mutation via POST /graphql on the Summit API server.",
        "operationId": "mutations_updateAnnotation",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "updateAnnotation",
                  "description": "Executes the mutation `updateAnnotation`.\n\n**Arguments**\n- `id` (*ID!*): No description provided.\n- `input` (*UpdateAnnotationInput!*): No description provided.",
                  "value": {
                    "query": "mutation updateAnnotation($id: ID!, $input: UpdateAnnotationInput!) {\n  updateAnnotation(id: $id, input: $input) {\n    # Select fields from Annotation\n    __typename\n  }\n}",
                    "variables": {
                      "id": "example-id",
                      "input": "VALUE"
                    },
                    "operationName": "updateAnnotation"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "mutation",
          "name": "updateAnnotation",
          "returnType": "Annotation!",
          "arguments": [
            {
              "name": "id",
              "type": "ID!",
              "description": null,
              "defaultValue": null
            },
            {
              "name": "input",
              "type": "UpdateAnnotationInput!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/mutations/deleteAnnotation": {
      "post": {
        "tags": [
          "Mutations"
        ],
        "summary": "Mutations: deleteAnnotation",
        "description": "Executes the mutation `deleteAnnotation`.\n\n**Arguments**\n- `id` (*ID!*): No description provided.\n\n> Submit this GraphQL mutation via POST /graphql on the Summit API server.",
        "operationId": "mutations_deleteAnnotation",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "deleteAnnotation",
                  "description": "Executes the mutation `deleteAnnotation`.\n\n**Arguments**\n- `id` (*ID!*): No description provided.",
                  "value": {
                    "query": "mutation deleteAnnotation($id: ID!) {\n  deleteAnnotation(id: $id)\n}",
                    "variables": {
                      "id": "example-id"
                    },
                    "operationName": "deleteAnnotation"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "mutation",
          "name": "deleteAnnotation",
          "returnType": "Boolean!",
          "arguments": [
            {
              "name": "id",
              "type": "ID!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/mutations/generateEntityEmbeddings": {
      "post": {
        "tags": [
          "Mutations"
        ],
        "summary": "Mutations: generateEntityEmbeddings",
        "description": "Generate embeddings for entities in an investigation\n\n**Arguments**\n- `input` (*GenerateEmbeddingsInput!*): No description provided.\n\n> Submit this GraphQL mutation via POST /graphql on the Summit API server.",
        "operationId": "mutations_generateEntityEmbeddings",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "generateEntityEmbeddings",
                  "description": "Generate embeddings for entities in an investigation\n\n**Arguments**\n- `input` (*GenerateEmbeddingsInput!*): No description provided.",
                  "value": {
                    "query": "mutation generateEntityEmbeddings($input: GenerateEmbeddingsInput!) {\n  generateEntityEmbeddings(input: $input) {\n    # Select fields from GenerateEmbeddingsResponse\n    __typename\n  }\n}",
                    "variables": {
                      "input": "VALUE"
                    },
                    "operationName": "generateEntityEmbeddings"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "mutation",
          "name": "generateEntityEmbeddings",
          "returnType": "GenerateEmbeddingsResponse!",
          "arguments": [
            {
              "name": "input",
              "type": "GenerateEmbeddingsInput!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/mutations/testGraphRAGServices": {
      "post": {
        "tags": [
          "Mutations"
        ],
        "summary": "Mutations: testGraphRAGServices",
        "description": "Test GraphRAG services (embedding and LLM)\n\n> Submit this GraphQL mutation via POST /graphql on the Summit API server.",
        "operationId": "mutations_testGraphRAGServices",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "testGraphRAGServices",
                  "description": "Test GraphRAG services (embedding and LLM)",
                  "value": {
                    "query": "mutation testGraphRAGServices {\n  testGraphRAGServices {\n    # Select fields from TestServicesResponse\n    __typename\n  }\n}",
                    "operationName": "testGraphRAGServices"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "mutation",
          "name": "testGraphRAGServices",
          "returnType": "TestServicesResponse!",
          "arguments": []
        }
      }
    },
    "/mutations/createCrystalSession": {
      "post": {
        "tags": [
          "Mutations"
        ],
        "summary": "Mutations: createCrystalSession",
        "description": "Executes the mutation `createCrystalSession`.\n\n**Arguments**\n- `input` (*CreateCrystalSessionInput!*): No description provided.\n\n> Submit this GraphQL mutation via POST /graphql on the Summit API server.",
        "operationId": "mutations_createCrystalSession",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "createCrystalSession",
                  "description": "Executes the mutation `createCrystalSession`.\n\n**Arguments**\n- `input` (*CreateCrystalSessionInput!*): No description provided.",
                  "value": {
                    "query": "mutation createCrystalSession($input: CreateCrystalSessionInput!) {\n  createCrystalSession(input: $input) {\n    # Select fields from CrystalSession\n    __typename\n  }\n}",
                    "variables": {
                      "input": "VALUE"
                    },
                    "operationName": "createCrystalSession"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "mutation",
          "name": "createCrystalSession",
          "returnType": "CrystalSession!",
          "arguments": [
            {
              "name": "input",
              "type": "CreateCrystalSessionInput!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/mutations/startCrystalRun": {
      "post": {
        "tags": [
          "Mutations"
        ],
        "summary": "Mutations: startCrystalRun",
        "description": "Executes the mutation `startCrystalRun`.\n\n**Arguments**\n- `input` (*StartCrystalRunInput!*): No description provided.\n\n> Submit this GraphQL mutation via POST /graphql on the Summit API server.",
        "operationId": "mutations_startCrystalRun",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "startCrystalRun",
                  "description": "Executes the mutation `startCrystalRun`.\n\n**Arguments**\n- `input` (*StartCrystalRunInput!*): No description provided.",
                  "value": {
                    "query": "mutation startCrystalRun($input: StartCrystalRunInput!) {\n  startCrystalRun(input: $input) {\n    # Select fields from CrystalRun\n    __typename\n  }\n}",
                    "variables": {
                      "input": "VALUE"
                    },
                    "operationName": "startCrystalRun"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "mutation",
          "name": "startCrystalRun",
          "returnType": "CrystalRun!",
          "arguments": [
            {
              "name": "input",
              "type": "StartCrystalRunInput!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/mutations/recordCrystalMessage": {
      "post": {
        "tags": [
          "Mutations"
        ],
        "summary": "Mutations: recordCrystalMessage",
        "description": "Executes the mutation `recordCrystalMessage`.\n\n**Arguments**\n- `input` (*RecordCrystalMessageInput!*): No description provided.\n\n> Submit this GraphQL mutation via POST /graphql on the Summit API server.",
        "operationId": "mutations_recordCrystalMessage",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "recordCrystalMessage",
                  "description": "Executes the mutation `recordCrystalMessage`.\n\n**Arguments**\n- `input` (*RecordCrystalMessageInput!*): No description provided.",
                  "value": {
                    "query": "mutation recordCrystalMessage($input: RecordCrystalMessageInput!) {\n  recordCrystalMessage(input: $input) {\n    # Select fields from CrystalMessage\n    __typename\n  }\n}",
                    "variables": {
                      "input": "VALUE"
                    },
                    "operationName": "recordCrystalMessage"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "mutation",
          "name": "recordCrystalMessage",
          "returnType": "CrystalMessage!",
          "arguments": [
            {
              "name": "input",
              "type": "RecordCrystalMessageInput!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/mutations/updateCrystalPanels": {
      "post": {
        "tags": [
          "Mutations"
        ],
        "summary": "Mutations: updateCrystalPanels",
        "description": "Executes the mutation `updateCrystalPanels`.\n\n**Arguments**\n- `input` (*UpdateCrystalPanelsInput!*): No description provided.\n\n> Submit this GraphQL mutation via POST /graphql on the Summit API server.",
        "operationId": "mutations_updateCrystalPanels",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "updateCrystalPanels",
                  "description": "Executes the mutation `updateCrystalPanels`.\n\n**Arguments**\n- `input` (*UpdateCrystalPanelsInput!*): No description provided.",
                  "value": {
                    "query": "mutation updateCrystalPanels($input: UpdateCrystalPanelsInput!) {\n  updateCrystalPanels(input: $input) {\n    # Select fields from CrystalSession\n    __typename\n  }\n}",
                    "variables": {
                      "input": "VALUE"
                    },
                    "operationName": "updateCrystalPanels"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "mutation",
          "name": "updateCrystalPanels",
          "returnType": "CrystalSession!",
          "arguments": [
            {
              "name": "input",
              "type": "UpdateCrystalPanelsInput!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/mutations/closeCrystalSession": {
      "post": {
        "tags": [
          "Mutations"
        ],
        "summary": "Mutations: closeCrystalSession",
        "description": "Executes the mutation `closeCrystalSession`.\n\n**Arguments**\n- `sessionId` (*ID!*): No description provided.\n\n> Submit this GraphQL mutation via POST /graphql on the Summit API server.",
        "operationId": "mutations_closeCrystalSession",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "closeCrystalSession",
                  "description": "Executes the mutation `closeCrystalSession`.\n\n**Arguments**\n- `sessionId` (*ID!*): No description provided.",
                  "value": {
                    "query": "mutation closeCrystalSession($sessionId: ID!) {\n  closeCrystalSession(sessionId: $sessionId) {\n    # Select fields from CrystalSession\n    __typename\n  }\n}",
                    "variables": {
                      "sessionId": "example-id"
                    },
                    "operationName": "closeCrystalSession"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "mutation",
          "name": "closeCrystalSession",
          "returnType": "CrystalSession!",
          "arguments": [
            {
              "name": "sessionId",
              "type": "ID!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/subscriptions/entityCreated": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Subscriptions: entityCreated",
        "description": "Executes the subscription `entityCreated`.\n\n**Arguments**\n- `tenantId` (*String!*): No description provided.\n\n> Submit this GraphQL subscription via POST /graphql on the Summit API server.",
        "operationId": "subscriptions_entityCreated",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "entityCreated",
                  "description": "Executes the subscription `entityCreated`.\n\n**Arguments**\n- `tenantId` (*String!*): No description provided.",
                  "value": {
                    "query": "subscription entityCreated($tenantId: String!) {\n  entityCreated(tenantId: $tenantId) {\n    # Select fields from Entity\n    __typename\n  }\n}",
                    "variables": {
                      "tenantId": "VALUE"
                    },
                    "operationName": "entityCreated"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "subscription",
          "name": "entityCreated",
          "returnType": "Entity!",
          "arguments": [
            {
              "name": "tenantId",
              "type": "String!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/subscriptions/entityUpdated": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Subscriptions: entityUpdated",
        "description": "Executes the subscription `entityUpdated`.\n\n**Arguments**\n- `tenantId` (*String!*): No description provided.\n\n> Submit this GraphQL subscription via POST /graphql on the Summit API server.",
        "operationId": "subscriptions_entityUpdated",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "entityUpdated",
                  "description": "Executes the subscription `entityUpdated`.\n\n**Arguments**\n- `tenantId` (*String!*): No description provided.",
                  "value": {
                    "query": "subscription entityUpdated($tenantId: String!) {\n  entityUpdated(tenantId: $tenantId) {\n    # Select fields from Entity\n    __typename\n  }\n}",
                    "variables": {
                      "tenantId": "VALUE"
                    },
                    "operationName": "entityUpdated"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "subscription",
          "name": "entityUpdated",
          "returnType": "Entity!",
          "arguments": [
            {
              "name": "tenantId",
              "type": "String!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/subscriptions/entityDeleted": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Subscriptions: entityDeleted",
        "description": "Executes the subscription `entityDeleted`.\n\n**Arguments**\n- `tenantId` (*String!*): No description provided.\n\n> Submit this GraphQL subscription via POST /graphql on the Summit API server.",
        "operationId": "subscriptions_entityDeleted",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "entityDeleted",
                  "description": "Executes the subscription `entityDeleted`.\n\n**Arguments**\n- `tenantId` (*String!*): No description provided.",
                  "value": {
                    "query": "subscription entityDeleted($tenantId: String!) {\n  entityDeleted(tenantId: $tenantId)\n}",
                    "variables": {
                      "tenantId": "VALUE"
                    },
                    "operationName": "entityDeleted"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "subscription",
          "name": "entityDeleted",
          "returnType": "ID!",
          "arguments": [
            {
              "name": "tenantId",
              "type": "String!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/subscriptions/relationshipCreated": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Subscriptions: relationshipCreated",
        "description": "Executes the subscription `relationshipCreated`.\n\n**Arguments**\n- `tenantId` (*String!*): No description provided.\n\n> Submit this GraphQL subscription via POST /graphql on the Summit API server.",
        "operationId": "subscriptions_relationshipCreated",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "relationshipCreated",
                  "description": "Executes the subscription `relationshipCreated`.\n\n**Arguments**\n- `tenantId` (*String!*): No description provided.",
                  "value": {
                    "query": "subscription relationshipCreated($tenantId: String!) {\n  relationshipCreated(tenantId: $tenantId) {\n    # Select fields from Relationship\n    __typename\n  }\n}",
                    "variables": {
                      "tenantId": "VALUE"
                    },
                    "operationName": "relationshipCreated"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "subscription",
          "name": "relationshipCreated",
          "returnType": "Relationship!",
          "arguments": [
            {
              "name": "tenantId",
              "type": "String!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/subscriptions/relationshipDeleted": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Subscriptions: relationshipDeleted",
        "description": "Executes the subscription `relationshipDeleted`.\n\n**Arguments**\n- `tenantId` (*String!*): No description provided.\n\n> Submit this GraphQL subscription via POST /graphql on the Summit API server.",
        "operationId": "subscriptions_relationshipDeleted",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "relationshipDeleted",
                  "description": "Executes the subscription `relationshipDeleted`.\n\n**Arguments**\n- `tenantId` (*String!*): No description provided.",
                  "value": {
                    "query": "subscription relationshipDeleted($tenantId: String!) {\n  relationshipDeleted(tenantId: $tenantId)\n}",
                    "variables": {
                      "tenantId": "VALUE"
                    },
                    "operationName": "relationshipDeleted"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "subscription",
          "name": "relationshipDeleted",
          "returnType": "ID!",
          "arguments": [
            {
              "name": "tenantId",
              "type": "String!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/subscriptions/investigationUpdated": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Subscriptions: investigationUpdated",
        "description": "Executes the subscription `investigationUpdated`.\n\n**Arguments**\n- `tenantId` (*String!*): No description provided.\n\n> Submit this GraphQL subscription via POST /graphql on the Summit API server.",
        "operationId": "subscriptions_investigationUpdated",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "investigationUpdated",
                  "description": "Executes the subscription `investigationUpdated`.\n\n**Arguments**\n- `tenantId` (*String!*): No description provided.",
                  "value": {
                    "query": "subscription investigationUpdated($tenantId: String!) {\n  investigationUpdated(tenantId: $tenantId) {\n    # Select fields from Investigation\n    __typename\n  }\n}",
                    "variables": {
                      "tenantId": "VALUE"
                    },
                    "operationName": "investigationUpdated"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "subscription",
          "name": "investigationUpdated",
          "returnType": "Investigation!",
          "arguments": [
            {
              "name": "tenantId",
              "type": "String!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/subscriptions/copilotEvents": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Subscriptions: copilotEvents",
        "description": "Real-time events for a specific run\n\n**Arguments**\n- `runId` (*ID!*): No description provided.\n\n> Submit this GraphQL subscription via POST /graphql on the Summit API server.",
        "operationId": "subscriptions_copilotEvents",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "copilotEvents",
                  "description": "Real-time events for a specific run\n\n**Arguments**\n- `runId` (*ID!*): No description provided.",
                  "value": {
                    "query": "subscription copilotEvents($runId: ID!) {\n  copilotEvents(runId: $runId) {\n    # Select fields from CopilotEvent\n    __typename\n  }\n}",
                    "variables": {
                      "runId": "example-id"
                    },
                    "operationName": "copilotEvents"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "subscription",
          "name": "copilotEvents",
          "returnType": "CopilotEvent!",
          "arguments": [
            {
              "name": "runId",
              "type": "ID!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/subscriptions/aiSuggestions": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Subscriptions: aiSuggestions",
        "description": "Executes the subscription `aiSuggestions`.\n\n**Arguments**\n- `entityId` (*ID!*): No description provided.\n\n> Submit this GraphQL subscription via POST /graphql on the Summit API server.",
        "operationId": "subscriptions_aiSuggestions",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "aiSuggestions",
                  "description": "Executes the subscription `aiSuggestions`.\n\n**Arguments**\n- `entityId` (*ID!*): No description provided.",
                  "value": {
                    "query": "subscription aiSuggestions($entityId: ID!) {\n  aiSuggestions(entityId: $entityId) {\n    # Select fields from AIRecommendation\n    __typename\n  }\n}",
                    "variables": {
                      "entityId": "example-id"
                    },
                    "operationName": "aiSuggestions"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "subscription",
          "name": "aiSuggestions",
          "returnType": "[AIRecommendation!]!",
          "arguments": [
            {
              "name": "entityId",
              "type": "ID!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/subscriptions/graphRAGQueryProgress": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Subscriptions: graphRAGQueryProgress",
        "description": "Subscribe to GraphRAG query results\n\n**Arguments**\n- `queryId` (*String!*): No description provided.\n\n> Submit this GraphQL subscription via POST /graphql on the Summit API server.",
        "operationId": "subscriptions_graphRAGQueryProgress",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "graphRAGQueryProgress",
                  "description": "Subscribe to GraphRAG query results\n\n**Arguments**\n- `queryId` (*String!*): No description provided.",
                  "value": {
                    "query": "subscription graphRAGQueryProgress($queryId: String!) {\n  graphRAGQueryProgress(queryId: $queryId) {\n    # Select fields from GraphRAGResponse\n    __typename\n  }\n}",
                    "variables": {
                      "queryId": "VALUE"
                    },
                    "operationName": "graphRAGQueryProgress"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "subscription",
          "name": "graphRAGQueryProgress",
          "returnType": "GraphRAGResponse!",
          "arguments": [
            {
              "name": "queryId",
              "type": "String!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/subscriptions/embeddingGenerationProgress": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Subscriptions: embeddingGenerationProgress",
        "description": "Subscribe to embedding generation progress\n\n**Arguments**\n- `investigationId` (*String!*): No description provided.\n\n> Submit this GraphQL subscription via POST /graphql on the Summit API server.",
        "operationId": "subscriptions_embeddingGenerationProgress",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "embeddingGenerationProgress",
                  "description": "Subscribe to embedding generation progress\n\n**Arguments**\n- `investigationId` (*String!*): No description provided.",
                  "value": {
                    "query": "subscription embeddingGenerationProgress($investigationId: String!) {\n  embeddingGenerationProgress(investigationId: $investigationId) {\n    # Select fields from GenerateEmbeddingsResponse\n    __typename\n  }\n}",
                    "variables": {
                      "investigationId": "VALUE"
                    },
                    "operationName": "embeddingGenerationProgress"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "subscription",
          "name": "embeddingGenerationProgress",
          "returnType": "GenerateEmbeddingsResponse!",
          "arguments": [
            {
              "name": "investigationId",
              "type": "String!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    },
    "/subscriptions/crystalRunLogs": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Subscriptions: crystalRunLogs",
        "description": "Executes the subscription `crystalRunLogs`.\n\n**Arguments**\n- `sessionId` (*ID!*): No description provided.\n- `runId` (*ID!*): No description provided.\n\n> Submit this GraphQL subscription via POST /graphql on the Summit API server.",
        "operationId": "subscriptions_crystalRunLogs",
        "servers": [
          {
            "url": "http://localhost:4000/graphql",
            "description": "Local development GraphQL endpoint."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL operation document to execute."
                  },
                  "variables": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Variables object supplied to the GraphQL operation."
                  },
                  "operationName": {
                    "type": "string",
                    "description": "Optional explicit operation name for multi-operation documents."
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "crystalRunLogs",
                  "description": "Executes the subscription `crystalRunLogs`.\n\n**Arguments**\n- `sessionId` (*ID!*): No description provided.\n- `runId` (*ID!*): No description provided.",
                  "value": {
                    "query": "subscription crystalRunLogs($sessionId: ID!, $runId: ID!) {\n  crystalRunLogs(sessionId: $sessionId, runId: $runId) {\n    # Select fields from CrystalRunLogEvent\n    __typename\n  }\n}",
                    "variables": {
                      "sessionId": "example-id",
                      "runId": "example-id"
                    },
                    "operationName": "crystalRunLogs"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure the query and variables match the schema."
          },
          "500": {
            "description": "Server error while processing the GraphQL operation."
          }
        },
        "x-graphql-operation": {
          "type": "subscription",
          "name": "crystalRunLogs",
          "returnType": "CrystalRunLogEvent!",
          "arguments": [
            {
              "name": "sessionId",
              "type": "ID!",
              "description": null,
              "defaultValue": null
            },
            {
              "name": "runId",
              "type": "ID!",
              "description": null,
              "defaultValue": null
            }
          ]
        }
      }
    }
  },
  "components": {
    "schemas": {
      "GraphQLRequest": {
        "type": "object",
        "required": [
          "query"
        ],
        "properties": {
          "query": {
            "type": "string",
            "description": "GraphQL document to execute."
          },
          "variables": {
            "type": "object",
            "additionalProperties": true,
            "description": "Variables passed to the GraphQL execution."
          },
          "operationName": {
            "type": "string",
            "description": "Optional explicit operation name when the document contains multiple operations."
          }
        }
      },
      "GraphQLResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": true
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                },
                "path": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "x-generated-at": "2025-09-26T16:00:14.991Z"
}