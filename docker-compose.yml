services:
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: intelgraph_dev
      POSTGRES_USER: intelgraph
      POSTGRES_PASSWORD: dev_password
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/db/migrations/postgres:/docker-entrypoint-initdb.d
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U intelgraph -d intelgraph_dev']
      interval: 10s
      timeout: 5s
      retries: 30

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 30

  neo4j:
    image: neo4j:5.8
    container_name: neo4j
    ports:
      - '7474:7474'
      - '7687:7687'
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    environment:
      NEO4J_AUTH: neo4j/dev_password
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_apoc_export_file_enabled: true
      NEO4J_apoc_import_file_enabled: true
      NEO4J_apoc_import_file_use__neo4j__config: true
      NEO4J_ACCEPT_LICENSE_AGREEMENT: 'yes'
    healthcheck:
      test:
        ['CMD', 'cypher-shell', '-u', 'neo4j', '-p', 'dev_password', 'RETURN 1']
      interval: 30s
      timeout: 10s
      retries: 12

  opa:
    image: openpolicyagent/opa:0.65.0-rootless
    container_name: opa
    command:
      - run
      - --server
      - --watch
      - /policy
    ports:
      - '8181:8181'
    volumes:
      - ./policy/opa:/policy:ro
    healthcheck:
      test: ['CMD', 'wget', '-qO-', 'http://localhost:8181/health']
      interval: 15s
      timeout: 5s
      retries: 12

  jaeger:
    image: jaegertracing/all-in-one:1.58
    container_name: jaeger
    environment:
      COLLECTOR_OTLP_ENABLED: 'true'
    ports:
      - '16686:16686'
      - '14250:14250'
      - '14268:14268'

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.110.0
    container_name: otel-collector
    command: ['--config=/etc/otel-collector.yaml']
    volumes:
      - ./ops/devkit/otel-collector.yaml:/etc/otel-collector.yaml:ro
    ports:
      - '4317:4317'
      - '4318:4318'
      - '9464:9464'
    depends_on:
      - jaeger

  mock-services:
    image: node:20-bullseye
    container_name: mock-services
    working_dir: /workspace
    command: ['node', 'scripts/devkit/mock-services.js']
    environment:
      MOCK_SERVICE_PORT: 4010
    volumes:
      - .:/workspace:cached
    ports:
      - '4010:4010'
    healthcheck:
      test:
        [
          'CMD',
          'node',
          'scripts/health-check.js',
          'http://localhost:4010/health',
        ]
      interval: 15s
      timeout: 5s
      retries: 6

  migrations:
    build: ./server
    container_name: migrations
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    environment:
      NODE_ENV: development
      POSTGRES_HOST: postgres
      POSTGRES_USER: intelgraph
      POSTGRES_PASSWORD: dev_password
      POSTGRES_DB: intelgraph_dev
      POSTGRES_URL: postgres://intelgraph:dev_password@postgres:5432/intelgraph_dev
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USERNAME: neo4j
      NEO4J_PASSWORD: dev_password
    command: ['node', 'scripts/db_migrate.cjs']

  seed-fixtures:
    image: node:20-bullseye
    container_name: seed-fixtures
    working_dir: /workspace
    command:
      [
        'bash',
        '-lc',
        'if [ ! -d node_modules ]; then npm install; fi; node scripts/devkit/seed-fixtures.js',
      ]
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: intelgraph
      POSTGRES_PASSWORD: dev_password
      POSTGRES_DB: intelgraph_dev
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: dev_password
      OPA_URL: http://opa:8181
    volumes:
      - .:/workspace:cached
    depends_on:
      migrations:
        condition: service_completed_successfully
      opa:
        condition: service_healthy
    restart: 'no'

  api:
    image: node:20-bullseye
    container_name: api
    working_dir: /workspace/server
    command:
      [
        'bash',
        '-lc',
        'if [ ! -d node_modules ]; then npm install; fi; npm run dev',
      ]
    environment:
      NODE_ENV: development
      PORT: 4000
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: intelgraph
      POSTGRES_PASSWORD: dev_password
      POSTGRES_DB: intelgraph_dev
      REDIS_HOST: redis
      REDIS_PORT: 6379
      OPA_URL: http://opa:8181
      MOCK_SERVICE_URL: http://mock-services:4010
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_SERVICE_NAME: intelgraph-api
    volumes:
      - .:/workspace:cached
    ports:
      - '4000:4000'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      seed-fixtures:
        condition: service_completed_successfully
      otel-collector:
        condition: service_started
    healthcheck:
      test:
        [
          'CMD',
          'node',
          '/workspace/scripts/health-check.js',
          'http://localhost:4000/health',
        ]
      interval: 10s
      timeout: 5s
      retries: 12

  ui:
    image: node:20-bullseye
    container_name: ui
    working_dir: /workspace/client
    command:
      [
        'bash',
        '-lc',
        'if [ ! -d node_modules ]; then npm install; fi; npm run dev -- --host 0.0.0.0 --port 3000',
      ]
    environment:
      VITE_PORT: 3000
      VITE_HOST: 0.0.0.0
      VITE_API_URL: http://api:4000
    volumes:
      - .:/workspace:cached
    ports:
      - '3000:3000'
    depends_on:
      api:
        condition: service_started
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'wget -qO- http://localhost:3000 >/dev/null 2>&1 || exit 1',
        ]
      interval: 10s
      timeout: 5s
      retries: 12

  worker:
    image: node:20-bullseye
    container_name: worker
    working_dir: /workspace/server
    command:
      [
        'bash',
        '-lc',
        'if [ ! -d node_modules ]; then npm install; fi; npm run dev:worker',
      ]
    environment:
      NODE_ENV: development
      WORKER_PORT: 4100
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: intelgraph
      POSTGRES_PASSWORD: dev_password
      POSTGRES_DB: intelgraph_dev
      REDIS_URL: redis://redis:6379
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_SERVICE_NAME: intelgraph-worker
    volumes:
      - .:/workspace:cached
    ports:
      - '4100:4100'
    depends_on:
      redis:
        condition: service_healthy
      seed-fixtures:
        condition: service_completed_successfully
      otel-collector:
        condition: service_started
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'wget -qO- http://localhost:4100/health >/dev/null 2>&1 || exit 1',
        ]
      interval: 10s
      timeout: 5s
      retries: 12

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - '9090:9090'
    volumes:
      - ./ops/observability/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - '8080:3000'
    environment:
      GF_SECURITY_ADMIN_PASSWORD: dev_password
      GF_USERS_ALLOW_SIGN_UP: 'false'
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./ops/observability/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./ops/observability/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
      - otel-collector

  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '2181:2181'
    profiles: ['kafka', 'ai']

  kafka:
    image: confluentinc/cp-kafka:7.2.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
      - '29092:29092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: ['CMD-SHELL', "bash -lc 'echo > /dev/tcp/localhost/9092'"]
      interval: 10s
      timeout: 5s
      retries: 30
    profiles: ['kafka', 'ai']

  ingestion-service:
    build: ./ingestion
    container_name: ingestion-service
    depends_on:
      - kafka
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    profiles: ['kafka', 'ai']

  nlp-service:
    build: ./nlp-service
    container_name: nlp-service
    depends_on:
      - kafka
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPACY_MODEL: en_core_web_sm
    mem_limit: 2g
    profiles: ['ai']

  reliability-service:
    build: ./reliability-service
    container_name: reliability-service
    depends_on:
      - kafka
      - redis
    ports:
      - '8001:8001'
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      REDIS_URL: redis://redis:6379
    profiles: ['kafka', 'ai']

volumes:
  postgres_data:
  redis_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  prometheus_data:
  grafana_data:
