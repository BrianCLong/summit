services:
  # Core database services always enabled
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: intelgraph
      POSTGRES_USER: intelgraph
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/db/migrations/postgres:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U intelgraph -d intelgraph"]
      interval: 10s
      timeout: 5s
      retries: 30

  neo4j:
    image: neo4j:4.4
    container_name: neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
    environment:
      NEO4J_AUTH: neo4j/password
    healthcheck:
      test: ["CMD", "bash", "-lc", "wget -qO- http://localhost:7474 >/dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 30

  redis:
    image: redis:6.2-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 30

  # Migrations run before server
  migrations:
    build: ./server
    container_name: migrations
    depends_on:
      neo4j:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=password
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=intelgraph
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=intelgraph
      - POSTGRES_URL=postgres://intelgraph:password@postgres:5432/intelgraph
    command: ["node", "scripts/db_migrate.cjs"]

  active-measures:
    build: ./active-measures-module
    container_name: active-measures
    command: node --require ts-node/register src/index.ts
    depends_on:
      neo4j:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    environment:
      - NODE_ENV=production
      - PORT=4000
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=password
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=intelgraph
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=intelgraph
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - AI_ENABLED=${AI_ENABLED:-false}
      - KAFKA_ENABLED=${KAFKA_ENABLED:-false}
      # Security Configuration
      - JWT_SECRET=${JWT_SECRET:-change_this_in_production_jwt_secret_key_must_be_at_least_32_chars_long}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET:-change_this_in_production_refresh_secret_key_must_be_different}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-https://app.intelgraph.com}
      - CORS_ORIGIN=${CORS_ORIGIN:-https://app.intelgraph.com}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-900000}
      - RATE_LIMIT_MAX=${RATE_LIMIT_MAX:-500}
      - VALID_API_KEYS=${VALID_API_KEYS:-}
    ports:
      - "4000:4000"
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:4000/health', r=>process.exit(r.statusCode<500?0:1)).on('error',()=>process.exit(1))\""]
      interval: 10s
      timeout: 5s
      retries: 12

  client:
    build:
      context: ./client
      dockerfile: Dockerfile.dev
    container_name: client
    environment:
      - VITE_PORT=3000
      - VITE_HOST=0.0.0.0
    ports:
      - "3000:3000"
    depends_on:
      server:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:3000 >/dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 12

  # Optional Kafka services (enable with --profile kafka)
  # zookeeper:
  #   image: confluentinc/cp-zookeeper:7.2.1
  #   container_name: zookeeper
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000
  #   ports:
  #     - "2181:2181"
  #   profiles: ["kafka", "ai"]

  # kafka:
  #   image: confluentinc/cp-kafka:7.2.1
  #   container_name: kafka
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - "9092:9092"
  #     - "29092:29092"
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
  #     KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  #   healthcheck:
  #     test: ["CMD-SHELL", "bash -lc 'echo > /dev/tcp/localhost/9092'"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 30
  #   profiles: ["kafka", "ai"]

  # ingestion-service:
  #   build: ./ingestion
  #   container_name: ingestion-service
  #   depends_on:
  #     - kafka
  #   environment:
  #     KAFKA_BOOTSTRAP_SERVERS: kafka:9092
  #   profiles: ["kafka", "ai"]

  # nlp-service:
  #   build: ./nlp-service
  #   container_name: nlp-service
  #   depends_on:
  #     - kafka
  #   environment:
  #     KAFKA_BOOTSTRAP_SERVERS: kafka:9092
  #     SPACY_MODEL: en_core_web_sm
  #   mem_limit: 2g
  #   profiles: ["ai"]

  # reliability-service:
  #   build: ./reliability-service
  #   container_name: reliability-service
  #   depends_on:
  #     - kafka
  #     - redis
  #   ports:
  #     - "8001:8001"
  #   environment:
  #     KAFKA_BOOTSTRAP_SERVERS: kafka:9092
  #     REDIS_URL: redis://redis:6379
  #   profiles: ["kafka", "ai"]

  # graph-service:
  #   build: ./graph-service
  #   container_name: graph-service
  #   depends_on:
  #     kafka:
  #       condition: service_healthy
  #     neo4j:
  #       condition: service_healthy
  #   environment:
  #     KAFKA_BOOTSTRAP_SERVERS: kafka:9092
  #     NEO4J_URI: bolt://neo4j:7687
  #     NEO4J_USER: neo4j
  #     NEO4J_PASSWORD: password
  #   profiles: ["kafka", "ai"]

  # api-service:
  #   build: ./api
  #   container_name: api-service
  #   depends_on:
  #     neo4j:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   ports:
  #     - "8000:8000"
  #   environment:
  #     NEO4J_URI: bolt://neo4j:7687
  #     NEO4J_USER: neo4j
  #     NEO4J_PASSWORD: password
  #     REDIS_URL: redis://redis:6379
  #   healthcheck:
  #     test: ["CMD-SHELL", "wget -qO- http://localhost:8000/docs >/dev/null 2>&1 || exit 1"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 30
  #   profiles: ["ai"]

  # ai-server:
  #   build: ./python
  #   command: uvicorn app.main:app --host 0.0.0.0 --port 8002
  #   container_name: ai-server
  #   ports:
  #     - "8002:8002"
  #   depends_on:
  #     neo4j:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   environment:
  #     - NEO4J_URI=bolt://neo4j:7687
  #     - NEO4J_USER=neo4j
  #     - NEO4J_PASSWORD=password
  #   healthcheck:
  #     test: ["CMD-SHELL", "wget -qO- http://localhost:8002/docs >/dev/null 2>&1 || exit 1"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 30
  #   profiles: ["ai"]

  # Elasticsearch for Search Engine
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    profiles: ["search", "mlfp"]

  # Search Engine Service
  search-engine:
    build: ./apps/search-engine
    container_name: search-engine
    ports:
      - "4006:4006"
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - NODE_ENV=development
      - PORT=4006
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=intelgraph
      - POSTGRES_USER=intelgraph
      - POSTGRES_PASSWORD=password
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=your-jwt-secret-key
      - LOG_LEVEL=info
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:4000
    volumes:
      - ./apps/search-engine/logs:/app/logs
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:4006/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    profiles: ["search", "mlfp"]

  # Graph Analytics Service
  graph-analytics:
    build: ./apps/graph-analytics
    container_name: graph-analytics
    ports:
      - "4005:4005"
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - NODE_ENV=development
      - PORT=4005
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=intelgraph
      - POSTGRES_USER=intelgraph
      - POSTGRES_PASSWORD=password
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=your-jwt-secret-key
      - LOG_LEVEL=info
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:4000
    volumes:
      - ./apps/graph-analytics/logs:/app/logs
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:4005/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    profiles: ["analytics", "mlfp"]

  # Feed Processor Service
  feed-processor:
    build: ./apps/feed-processor
    container_name: feed-processor
    ports:
      - "4007:4007"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - NODE_ENV=development
      - PORT=4007
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=intelgraph
      - POSTGRES_USER=intelgraph
      - POSTGRES_PASSWORD=password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=your-jwt-secret-key
      - LOG_LEVEL=info
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:4000
      - TEXTRAZOR_API_KEY=your-textrazor-api-key
      - VIRUSTOTAL_API_KEY=your-virustotal-api-key
      - ABUSEIPDB_API_KEY=your-abuseipdb-api-key
    volumes:
      - ./apps/feed-processor/logs:/app/logs
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:4007/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    profiles: ["feeds", "mlfp"]

  # Mobile Interface
  mobile-interface:
    build: ./apps/mobile-interface
    container_name: mobile-interface
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - API_BASE_URL=http://localhost:4000
      - NEXT_PUBLIC_API_URL=http://localhost:4000
      - NEXT_PUBLIC_WS_URL=ws://localhost:4000
      - NEXT_PUBLIC_MAPBOX_TOKEN=your-mapbox-token
    volumes:
      - ./apps/mobile-interface/.next:/app/.next
      - ./apps/mobile-interface/public:/app/public
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    profiles: ["mobile", "mlfp"]

volumes:
  neo4j_data:
  postgres_data:
  redis_data:
  elasticsearch_data:
