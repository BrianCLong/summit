version: "3.9"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports: ["2181:2181"]

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    depends_on: [zookeeper]
    ports: ["9092:9092","29092:29092"]
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  schema-registry:
    image: confluentinc/cp-schema-registry:7.6.1
    depends_on: [kafka]
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "kafka:9092"
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"
    ports: ["8081:8081"]

  neo4j:
    image: neo4j:5.22.0-enterprise
    ports: ["7474:7474","7687:7687"]
    environment:
      NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
      NEO4J_PLUGINS: '["apoc","graph-data-science"]'
      NEO4J_dbms_security_auth__enabled: "true"
      NEO4J_AUTH: "neo4j/neo4jpass"
      NEO4J_server_memory_heap_max__size: 8G
      NEO4J_server_memory_heap_initial__size: 4G
      NEO4J_db_temporal_timezone: "UTC"
      NEO4J_apoc_import_file_use__neo4j__config: "true"
      NEO4J_gds_enterprise__license__accepted: "true"
    volumes:
      - neo4j-data:/data

  postgres:
    image: postgres:16
    environment:
      POSTGRES_PASSWORD: pgpass
      POSTGRES_DB: intelgraph
    ports: ["5432:5432"]
    volumes: [ "pg-data:/var/lib/postgresql/data" ]

  redis:
    image: redis:7
    ports: ["6379:6379"]

  airflow:
    image: apache/airflow:2.10.2
    depends_on: [kafka, postgres, neo4j]
    environment:
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW__CORE__EXECUTOR: "LocalExecutor"
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: "postgresql+psycopg2://postgres:pgpass@postgres:5432/airflow"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/plugins:/opt/airflow/plugins
    command: bash -c "airflow db init && airflow users create --username admin --password admin --firstname A --lastname D --role Admin --email a@deploy/nginx/web.conf || true && airflow webserver & airflow scheduler"
    ports: ["8080:8080"]

  api:
    build: ./services/api
    depends_on: [neo4j, postgres, redis, kafka, embeddings]
    environment:
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASS: neo4jpass
      KAFKA_BROKER: kafka:9092
      REDIS_URL: redis://redis:6379/0
      POSTGRES_DSN: postgresql://postgres:pgpass@postgres:5432/intelgraph
      EMBEDDINGS_URL: http://embeddings:9100
      SLACK_WEBHOOK_URL: ${SLACK_WEBHOOK_URL:-}
      WEBHOOK_COORD_URLS: ${WEBHOOK_COORD_URLS:-}
    ports: ["8000:8000"]

  graphql:
    build: ./services/graphql
    depends_on: [api]
    environment:
      API_BASE_URL: http://api:8000
      NODE_ENV: production
    ports: ["4000:4000"]

  faust:
    build: ./services/faust
    depends_on: [kafka, api, neo4j, redis, embeddings]
    environment:
      KAFKA_BROKER: kafka:9092
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASS: neo4jpass
      SLACK_WEBHOOK_URL: ${SLACK_WEBHOOK_URL:-}
      WEBHOOK_COORD_URLS: ${WEBHOOK_COORD_URLS:-}

  embeddings:
    build: ./services/embeddings
    environment:
      MODEL_NAME: intfloat/multilingual-e5-base
      DEVICE: auto
      BATCH_SIZE: 32
    ports: ["9100:9100"]
    deploy:
      resources:
        reservations: { devices: [ { capabilities: [ "gpu" ] } ] } # ignored if no GPU

  api:
    build: ./services/api
    depends_on: [neo4j, postgres, redis, kafka, embeddings, summaries]
    environment:
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASS: neo4jpass
      KAFKA_BROKER: kafka:9092
      REDIS_URL: redis://redis:6379/0
      POSTGRES_DSN: postgresql://postgres:pgpass@postgres:5432/intelgraph
      EMBEDDINGS_URL: http://embeddings:9100
      SUMMARIES_URL: http://summaries:9201
      SLACK_WEBHOOK_URL: ${SLACK_WEBHOOK_URL:-}
      WEBHOOK_COORD_URLS: ${WEBHOOK_COORD_URLS:-}
      SLACK_BOT_TOKEN: ${SLACK_BOT_TOKEN:-}
      SLACK_CHANNEL_ID: ${SLACK_CHANNEL_ID:-}
      SLACK_SIGNING_SECRET: ${SLACK_SIGNING_SECRET:-}
    ports: ["8000:8000"]

  graphql:
    build: ./services/graphql
    depends_on: [api]
    environment:
      API_BASE_URL: http://api:8000
      NODE_ENV: production
    ports: ["4000:4000"]

  faust:
    build: ./services/faust
    depends_on: [kafka, api, neo4j, redis, embeddings]
    environment:
      KAFKA_BROKER: kafka:9092
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASS: neo4jpass
      SLACK_WEBHOOK_URL: ${SLACK_WEBHOOK_URL:-}
      WEBHOOK_COORD_URLS: ${WEBHOOK_COORD_URLS:-}

  embeddings:
    build: ./services/embeddings
    environment:
      MODEL_NAME: intfloat/multilingual-e5-base
      DEVICE: auto
      BATCH_SIZE: 32
    ports: ["9100:9100"]
    deploy:
      resources:
        reservations: { devices: [ { capabilities: [ "gpu" ] } ] } # ignored if no GPU

  summaries:
    build: ./services/summaries
    environment:
      MODEL_NAME: mistralai/Mistral-7B-Instruct-v0.3
      DEVICE: auto
      MAX_TOKENS: 768
    ports: ["9201:9201"]
    deploy:
      resources:
        reservations: { devices: [ { capabilities: [ "gpu" ] } ] } # ignored if no GPU

  ui:
    build: ./services/ui
    depends_on: [graphql]
    ports: ["3000:3000"]

volumes:
  neo4j-data:
  pg-data: