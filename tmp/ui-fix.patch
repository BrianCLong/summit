*** Begin Patch
*** Add File: client/Dockerfile
+# syntax=docker/dockerfile:1.6
+#
+# IntelGraph UI build (Vite) -> Nginx runner
+#
+FROM node:20-alpine AS build
+WORKDIR /app/client
+
+# Copy only what's needed to install deps quickly
+COPY package.json package-lock.json* ./
+
+# Install with devDependencies for TypeScript build
+RUN npm ci
+
+# Copy source
+COPY . .
+
+# Ensure prod build excludes tests
+RUN npm run build:docker
+
+FROM nginx:1.27-alpine AS runner
+COPY --from=build /app/client/dist /usr/share/nginx/html
+COPY nginx.conf /etc/nginx/conf.d/default.conf
+EXPOSE 80
+CMD ["nginx","-g","daemon off;"]
+
*** End Patch

*** Begin Patch
*** Add File: client/nginx.conf
+server {
+  listen 80;
+  server_name _;
+  root /usr/share/nginx/html;
+  index index.html;
+  location / {
+    try_files $uri /index.html;
+  }
+  # Asset caching (tweak as needed)
+  location ~* .\(js|css|woff2?|ttf|eot|png|jpg|jpeg|gif|svg)$ {
+    expires 7d;
+    add_header Cache-Control "public, max-age=604800, immutable";
+  }
+}
*** End Patch

*** Begin Patch
*** Add File: client/tsconfig.build.json
+{
+  "extends": "./tsconfig.json",
+  "compilerOptions": {
+    "noEmit": false,
+    "outDir": "./.tsbuild",
+    "skipLibCheck": true
+  },
+  "exclude": [
+    "**/*.test.*",
+    "**/__tests__/**",
+    "src/setupTests.ts"
+  ]
+}
*** End Patch

*** Begin Patch
*** Update File: client/package.json
 @@
   "scripts": {
-    "build": "tsc -b && vite build",
+    "build": "tsc -b && vite build",
+    "build:docker": "tsc -p tsconfig.build.json && vite build",
     "dev": "vite",
     "preview": "vite preview"
   }
*** End Patch

*** Begin Patch
*** Add File: client/src/types/global.d.ts
+declare global {
+  interface Window {
+    __REACT_DEVTOOLS_GLOBAL_HOOK__?: any;
+  }
+}
+export {};
*** End Patch

*** Begin Patch
*** Add File: client/src/components/ui/button.tsx
+import * as React from 'react';
+import MuiButton, { ButtonProps as MuiButtonProps } from '@mui/material/Button';
+
+export type ButtonProps = MuiButtonProps & React.RefAttributes<HTMLButtonElement>;
+export const Button = React.forwardRef<HTMLButtonElement, ButtonProps>((props, ref) => (
+  <MuiButton ref={ref} {...props} />
+));
+Button.displayName = 'Button';
+export default Button;
*** End Patch

*** Begin Patch
*** Add File: client/src/components/ui/card.tsx
+import MuiCard, { CardProps as MuiCardProps } from '@mui/material/Card';
+import CardContent from '@mui/material/CardContent';
+import CardHeader from '@mui/material/CardHeader';
+import CardActions from '@mui/material/CardActions';
+
+export type CardProps = MuiCardProps;
+export const Card = MuiCard;
+export { CardContent, CardHeader, CardActions };
+export default MuiCard;
*** End Patch

*** Begin Patch
*** Add File: client/src/components/ui/badge.tsx
+import Chip, { ChipProps } from '@mui/material/Chip';
+export type BadgeProps = ChipProps;
+export function Badge(props: BadgeProps) {
+  return <Chip size="small" variant="filled" {...props} />;
+}
+export default Badge;
*** End Patch

*** Begin Patch
*** Add File: client/src/components/ui/skeleton.tsx
+import MuiSkeleton, { SkeletonProps as MuiSkeletonProps } from '@mui/material/Skeleton';
+export type SkeletonProps = MuiSkeletonProps;
+export function Skeleton(props: SkeletonProps) { return <MuiSkeleton {...props} />; }
+export default Skeleton;
*** End Patch

*** Begin Patch
*** Add File: client/src/pages/DataIngestion.tsx
+import * as React from 'react';
+export default function DataIngestion() {
+  return <div style={{ padding: 16 }}>Data Ingestion – placeholder (wired for build)</div>;
+}
*** End Patch

*** Begin Patch
*** Add File: client/src/pages/AnalysisWorkspace.tsx
+import * as React from 'react';
+export default function AnalysisWorkspace() {
+  return <div style={{ padding: 16 }}>Analysis Workspace – placeholder (wired for build)</div>;
+}
*** End Patch

*** Begin Patch
*** Add File: client/src/pages/InvestigationDashboard.tsx
+import * as React from 'react';
+export default function InvestigationDashboard() {
+  return <div style={{ padding: 16 }}>Investigation Dashboard – placeholder (wired for build)</div>;
+}
*** End Patch

*** Begin Patch
*** Update File: client/src/providers/GraphQLProvider.tsx
 @@
-import { ApolloProvider } from '@apollo/client';
+import { ApolloClient, InMemoryCache, ApolloProvider, createHttpLink } from '@apollo/client';
+import { setContext } from '@apollo/client/link/context';
+
+// Defensive: construct client locally so TS sees the symbol and build doesn’t fail on types.
+const httpLink = createHttpLink({ uri: import.meta.env.VITE_GRAPHQL_URL || '/graphql' });
+const authLink = setContext((_, { headers }) => ({ headers }));
+const client = new ApolloClient({ link: authLink.concat(httpLink), cache: new InMemoryCache() });
 @@
-export function GraphQLProvider({ children }: { children: React.ReactNode }) {
-  return <ApolloProvider>{children}</ApolloProvider>;
-}
+export function GraphQLProvider({ children }: { children: React.ReactNode }) {
+  return <ApolloProvider client={client}>{children}</ApolloProvider>;
+}
*** End Patch

*** Begin Patch
*** Update File: client/src/utils/performanceOptimization.ts
 @@
-// direct access to performance.memory and devtools hook caused TS errors in prod build
-const mem = (performance as any).memory;
-const used = mem.usedJSHeapSize;
-const total = mem.totalJSHeapSize;
-const limit = mem.jsHeapSizeLimit;
-const devtools = (window as any).__REACT_DEVTOOLS_GLOBAL_HOOK__;
+// Safer typing for prod build
+type PerfMemory = { usedJSHeapSize: number; totalJSHeapSize: number; jsHeapSizeLimit: number };
+const perfAny = (globalThis as any)?.performance;
+const mem = (perfAny?.memory as PerfMemory | undefined);
+const used = mem?.usedJSHeapSize;
+const total = mem?.totalJSHeapSize;
+const limit = mem?.jsHeapSizeLimit;
+const devtools = (typeof window !== 'undefined' ? (window as any).__REACT_DEVTOOLS_GLOBAL_HOOK__ : undefined);
*** End Patch