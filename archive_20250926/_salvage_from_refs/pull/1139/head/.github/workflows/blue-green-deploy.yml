name: Blue/Green Deployment - Maestro Conductor v24.2

on:
  push:
    branches: [main]
    paths:
      - 'server/**'
      - 'client/**'
      - 'charts/**'
      - '.github/workflows/blue-green-deploy.yml'
  workflow_dispatch:
    inputs:
      target_environment:
        description: 'Target environment for deployment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      force_deployment:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  KUBECONFIG_STAGING: ${{ secrets.KUBECONFIG_STAGING }}
  KUBECONFIG_PROD: ${{ secrets.KUBECONFIG_PROD }}

jobs:
  # Build and test the application
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd server && npm ci
        cd ../client && npm ci

    - name: Run linting
      run: |
        npm run lint
        cd server && npm run lint
        cd ../client && npm run lint

    - name: Run type checking
      run: |
        npm run typecheck
        cd server && npm run typecheck
        cd ../client && npm run typecheck

    - name: Run unit tests
      run: |
        npm run test:unit
        cd server && npm run test
        cd ../client && npm run test

    - name: Build application
      run: |
        cd server && npm run build
        cd ../client && npm run build

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-and-test.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to staging (blue/green)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main' || github.event.inputs.target_environment == 'staging'
    environment: staging
    outputs:
      deployment-url: ${{ steps.deploy.outputs.url }}
      green-environment: ${{ steps.deploy.outputs.green-environment }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl for staging
      run: |
        echo "${{ env.KUBECONFIG_STAGING }}" | base64 -d > /tmp/kubeconfig-staging
        export KUBECONFIG=/tmp/kubeconfig-staging
        kubectl config view --minify

    - name: Deploy with Blue/Green strategy
      id: deploy
      run: |
        export KUBECONFIG=/tmp/kubeconfig-staging
        ./scripts/blue-green-deploy.sh staging ${{ needs.build-and-test.outputs.image-tag }}

    - name: Run smoke tests
      run: |
        ./scripts/smoke-tests.sh ${{ steps.deploy.outputs.url }}

    - name: Run integration tests
      run: |
        export BASE_URL=${{ steps.deploy.outputs.url }}
        npm run test:integration

  # Load testing on staging
  load-test-staging:
    runs-on: ubuntu-latest
    needs: deploy-staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Run performance tests
      run: |
        export BASE_URL=${{ needs.deploy-staging.outputs.deployment-url }}
        k6 run .maestro/tests/k6/api_performance.js
        k6 run .maestro/tests/k6/ingest_streaming.js

    - name: Run isolation stress tests
      run: |
        export BASE_URL=${{ needs.deploy-staging.outputs.deployment-url }}
        k6 run .maestro/tests/k6/isolation_stress.js

  # Chaos testing on staging
  chaos-test-staging:
    runs-on: ubuntu-latest
    needs: deploy-staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Run chaos tests
      run: |
        export KUBECONFIG=/tmp/kubeconfig-staging
        echo "${{ env.KUBECONFIG_STAGING }}" | base64 -d > /tmp/kubeconfig-staging
        export BASE_URL=${{ needs.deploy-staging.outputs.deployment-url }}
        ./.maestro/tests/run-isolation-tests.sh

  # Production deployment approval
  production-approval:
    runs-on: ubuntu-latest
    needs: [deploy-staging, load-test-staging, chaos-test-staging]
    if: github.ref == 'refs/heads/main' || github.event.inputs.target_environment == 'production'
    environment: production-approval
    steps:
    - name: Request production deployment approval
      run: |
        echo "All staging tests passed successfully:"
        echo "✅ Smoke tests"
        echo "✅ Integration tests" 
        echo "✅ Performance tests"
        echo "✅ Isolation stress tests"
        echo "✅ Chaos tests"
        echo ""
        echo "Ready for production deployment with blue/green strategy."
        echo "Staging URL: ${{ needs.deploy-staging.outputs.deployment-url }}"

  # Deploy to production (blue/green)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-test, production-approval]
    if: github.ref == 'refs/heads/main' || github.event.inputs.target_environment == 'production'
    environment: production
    outputs:
      deployment-url: ${{ steps.deploy.outputs.url }}
      previous-environment: ${{ steps.deploy.outputs.previous-environment }}
      current-environment: ${{ steps.deploy.outputs.current-environment }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl for production
      run: |
        echo "${{ env.KUBECONFIG_PROD }}" | base64 -d > /tmp/kubeconfig-prod
        export KUBECONFIG=/tmp/kubeconfig-prod
        kubectl config view --minify

    - name: Deploy with Blue/Green strategy
      id: deploy
      run: |
        export KUBECONFIG=/tmp/kubeconfig-prod
        ./scripts/blue-green-deploy.sh production ${{ needs.build-and-test.outputs.image-tag }}

    - name: Run production smoke tests
      run: |
        ./scripts/smoke-tests.sh ${{ steps.deploy.outputs.url }}

    - name: Monitor deployment health
      run: |
        ./scripts/monitor-deployment.sh ${{ steps.deploy.outputs.url }} 300 # 5 minutes

  # Post-deployment validation
  post-deployment-validation:
    runs-on: ubuntu-latest
    needs: deploy-production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run production health checks
      run: |
        ./scripts/health-checks.sh ${{ needs.deploy-production.outputs.deployment-url }}

    - name: Validate SLOs
      run: |
        ./scripts/validate-slos.sh ${{ needs.deploy-production.outputs.deployment-url }}

    - name: Run security validation
      run: |
        ./scripts/security-validation.sh ${{ needs.deploy-production.outputs.deployment-url }}

    - name: Cleanup old environment
      if: success()
      run: |
        export KUBECONFIG=/tmp/kubeconfig-prod
        echo "${{ env.KUBECONFIG_PROD }}" | base64 -d > /tmp/kubeconfig-prod
        ./scripts/cleanup-blue-green.sh production ${{ needs.deploy-production.outputs.previous-environment }}

  # Rollback on failure
  rollback-production:
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deployment-validation]
    if: failure()
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl for production
      run: |
        echo "${{ env.KUBECONFIG_PROD }}" | base64 -d > /tmp/kubeconfig-prod
        export KUBECONFIG=/tmp/kubeconfig-prod

    - name: Rollback to previous environment
      run: |
        ./scripts/rollback-blue-green.sh production ${{ needs.deploy-production.outputs.previous-environment }}

    - name: Verify rollback health
      run: |
        ./scripts/health-checks.sh https://maestro.production.example.com

    - name: Send rollback notification
      run: |
        echo "🚨 Production deployment rolled back due to validation failures"
        echo "Previous environment restored: ${{ needs.deploy-production.outputs.previous-environment }}"
        # In real implementation, would send Slack/email notifications

  # Success notification
  notify-success:
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deployment-validation]
    if: success()
    steps:
    - name: Send success notification
      run: |
        echo "🎉 Production deployment successful!"
        echo "Environment: ${{ needs.deploy-production.outputs.current-environment }}"
        echo "URL: ${{ needs.deploy-production.outputs.deployment-url }}"
        echo "Image: ${{ needs.build-and-test.outputs.image-tag }}"
        # In real implementation, would send Slack/email notifications