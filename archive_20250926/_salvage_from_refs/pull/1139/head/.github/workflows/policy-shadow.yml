name: Policy Shadow Eval
on:
  pull_request:
    paths:
      - 'policies/opa/**'
      - 'docs/schemas/**'
      - '.github/workflows/policy-shadow.yml'
  workflow_dispatch: {}

permissions:
  contents: read
  pull-requests: write

jobs:
  shadow:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install OPA
        run: |
          curl -L -o opa https://openpolicyagent.org/downloads/v0.64.1/opa_linux_amd64_static
          chmod +x opa && sudo mv opa /usr/local/bin/opa
      - name: Build bundle & run evals
        id: eval
        run: |
          opa check policies/opa
          opa build -b policies/opa -o composer-policy-bundle.tar.gz
          echo '# 🛡️ Policy Shadow Decisions' > policy-shadow.md
          shopt -s nullglob
          inputs=(policies/opa/sample-inputs/*.json)
          if [ ${#inputs[@]} -eq 0 ]; then echo 'No sample inputs found.' >> policy-shadow.md; fi
          for f in ${inputs[@]}; do
            echo "\n## Input: $f" >> policy-shadow.md
            opa eval -I -d policies/opa -i "$f" 'data.composer.policy_shadow.verdict' | sed 's/^/    /' >> policy-shadow.md || true
          done
          echo "bundle_path=composer-policy-bundle.tar.gz" >> $GITHUB_OUTPUT
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: policy-shadow
          path: |
            policy-shadow.md
            composer-policy-bundle.tar.gz
      - name: Comment on PR
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('policy-shadow.md','utf8');
            const marker = '<!-- policy-shadow-comment -->';
            const payload = `${marker}\n${body}`;
            const { owner, repo } = context.repo; const issue_number = context.issue.number;
            const comments = await github.rest.issues.listComments({ owner, repo, issue_number });
            const existing = comments.data.find(c => c.user.type === 'Bot' && c.body.includes(marker));
            if (existing) await github.rest.issues.updateComment({ owner, repo, comment_id: existing.id, body: payload });
            else await github.rest.issues.createComment({ owner, repo, issue_number, body: payload });

