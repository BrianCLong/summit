# Conductor Omniversal Phase 2A - Production Deployment
# Complete Kubernetes deployment with autoscaling, monitoring, and security

apiVersion: v1
kind: Namespace
metadata:
  name: conductor-system
  labels:
    name: conductor-system
    app.kubernetes.io/name: conductor-omniversal
    app.kubernetes.io/version: "2.0.0-phase2a"
    conductor.ai/phase: "2a"

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: conductor-config
  namespace: conductor-system
data:
  LOG_LEVEL: "info"
  PORT: "3000"
  ORCHESTRATION_ENABLED: "true"
  PREMIUM_ROUTING_ENABLED: "true"
  WEB_SCRAPING_ENABLED: "true"
  COMPLIANCE_GATE_ENABLED: "true"
  THOMPSON_SAMPLING_ENABLED: "true"
  MAX_CONCURRENT_SOURCES: "10"
  DEFAULT_SYNTHESIS_STRATEGY: "consensus"
  RATE_LIMIT_WINDOW_MS: "60000"
  CITATION_REQUIRED: "true"
  PROVENANCE_TRACKING: "true"

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: conductor-secrets
  namespace: conductor-system
type: Opaque
stringData:
  DATABASE_URL: "postgresql://conductor:${DB_PASSWORD}@postgres-conductor:5432/conductor"
  REDIS_URL: "redis://redis-conductor:6379"
  OPA_URL: "http://opa-service:8181"
  OPENAI_API_KEY: "${OPENAI_API_KEY}"
  ANTHROPIC_API_KEY: "${ANTHROPIC_API_KEY}"
  GITHUB_TOKEN: "${GITHUB_TOKEN}"
  JIRA_TOKEN: "${JIRA_TOKEN}"
  KEY_ENCRYPTION_KEY: "${KEY_ENCRYPTION_KEY}"

---
# Web Orchestrator Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: conductor-web-orchestrator
  namespace: conductor-system
  labels:
    app: conductor-web-orchestrator
    component: orchestration
    version: "2.0.0-phase2a"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: conductor-web-orchestrator
  template:
    metadata:
      labels:
        app: conductor-web-orchestrator
        component: orchestration
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: conductor-web-orchestrator
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: web-orchestrator
        image: conductor/web-orchestrator:2.0.0-phase2a
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        envFrom:
        - configMapRef:
            name: conductor-config
        - secretRef:
            name: conductor-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 2
        volumeMounts:
        - name: cache-volume
          mountPath: /app/cache
        - name: logs-volume  
          mountPath: /app/logs
      volumes:
      - name: cache-volume
        emptyDir:
          sizeLimit: 1Gi
      - name: logs-volume
        emptyDir:
          sizeLimit: 500Mi
      nodeSelector:
        kubernetes.io/arch: amd64
      tolerations:
      - key: "conductor-workload"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"

---
# Premium Model Router Deployment  
apiVersion: apps/v1
kind: Deployment
metadata:
  name: conductor-premium-router
  namespace: conductor-system
  labels:
    app: conductor-premium-router
    component: routing
    version: "2.0.0-phase2a"
spec:
  replicas: 2
  selector:
    matchLabels:
      app: conductor-premium-router
  template:
    metadata:
      labels:
        app: conductor-premium-router
        component: routing
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3001"
    spec:
      serviceAccountName: conductor-premium-router
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
      containers:
      - name: premium-router
        image: conductor/premium-router:2.0.0-phase2a
        ports:
        - containerPort: 3001
          name: http
        envFrom:
        - configMapRef:
            name: conductor-config
        - secretRef:
            name: conductor-secrets
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /ready
            port: 3001
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Service definitions
apiVersion: v1
kind: Service
metadata:
  name: conductor-web-orchestrator-svc
  namespace: conductor-system
  labels:
    app: conductor-web-orchestrator
spec:
  selector:
    app: conductor-web-orchestrator
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: conductor-premium-router-svc
  namespace: conductor-system
  labels:
    app: conductor-premium-router
spec:
  selector:
    app: conductor-premium-router
  ports:
  - port: 80
    targetPort: 3001
    protocol: TCP
    name: http
  type: ClusterIP

---
# ServiceAccount with appropriate RBAC
apiVersion: v1
kind: ServiceAccount
metadata:
  name: conductor-web-orchestrator
  namespace: conductor-system

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: conductor-premium-router
  namespace: conductor-system

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: conductor-web-orchestrator
  namespace: conductor-system
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: conductor-web-orchestrator
  namespace: conductor-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: conductor-web-orchestrator
subjects:
- kind: ServiceAccount
  name: conductor-web-orchestrator
  namespace: conductor-system

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: conductor-ingress
  namespace: conductor-system
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - conductor.yourdomain.com
    secretName: conductor-tls
  rules:
  - host: conductor.yourdomain.com
    http:
      paths:
      - path: /api/conductor/v1/orchestration
        pathType: Prefix
        backend:
          service:
            name: conductor-web-orchestrator-svc
            port:
              number: 80
      - path: /api/conductor/v1/routing
        pathType: Prefix
        backend:
          service:
            name: conductor-premium-router-svc
            port:
              number: 80

---
# NetworkPolicy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: conductor-network-policy
  namespace: conductor-system
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: conductor-omniversal
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 3000
  - from:
    - podSelector:
        matchLabels:
          component: monitoring
    ports:
    - protocol: TCP
      port: 3000
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
  # Allow database connections
  - to:
    - podSelector:
        matchLabels:
          app: postgres-conductor
    ports:
    - protocol: TCP
      port: 5432
  # Allow Redis connections
  - to:
    - podSelector:
        matchLabels:
          app: redis-conductor
    ports:
    - protocol: TCP
      port: 6379
  # Allow OPA connections
  - to:
    - podSelector:
        matchLabels:
          app: opa-service
    ports:
    - protocol: TCP
      port: 8181
  # Allow external web requests (for web orchestration)
  - to: []
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443

---
# PodDisruptionBudget for high availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: conductor-web-orchestrator-pdb
  namespace: conductor-system
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: conductor-web-orchestrator

---
# ServiceMonitor for Prometheus scraping
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: conductor-service-monitor
  namespace: conductor-system
  labels:
    app: conductor-omniversal
spec:
  selector:
    matchLabels:
      app: conductor-web-orchestrator
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s