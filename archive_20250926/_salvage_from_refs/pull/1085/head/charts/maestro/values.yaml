# Production-grade configuration for Maestro Orchestration System
global:
  registry: ghcr.io
  imageTag: 2.0.0-prod
  environment: production
  domain: maestro.intelgraph.ai

image:
  repository: ghcr.io/brianlong/intelgraph/maestro-control-plane
  tag: 2.0.0-prod
  pullPolicy: IfNotPresent
  pullSecrets:
    - name: ghcr-secret

# High Availability Configuration
replicas: 3
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0

service:
  type: ClusterIP
  port: 80
  targetPort: 8080
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"

# Production Resource Limits
resources:
  requests:
    memory: "1Gi"
    cpu: "500m"
  limits:
    memory: "4Gi"
    cpu: "2000m"

# Autoscaling Configuration
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60

# Production Environment Variables
env:
  - name: NODE_ENV
    value: "production"
  - name: LOG_LEVEL
    value: "info"
  - name: PORT
    value: "8080"
  - name: ORCHESTRATION_ENABLED
    value: "true"
  - name: PREMIUM_ROUTING_ENABLED
    value: "true"
  - name: WEB_SCRAPING_ENABLED
    value: "true"
  - name: COMPLIANCE_GATE_ENABLED
    value: "true"
  - name: THOMPSON_SAMPLING_ENABLED
    value: "true"
  - name: MAX_CONCURRENT_SOURCES
    value: "15"
  - name: DEFAULT_SYNTHESIS_STRATEGY
    value: "consensus"
  - name: RATE_LIMIT_WINDOW_MS
    value: "60000"
  - name: CITATION_REQUIRED
    value: "true"
  - name: PROVENANCE_TRACKING
    value: "true"
  - name: OTEL_EXPORTER_OTLP_ENDPOINT
    value: http://otel-collector.monitoring:4317
  - name: PDP_URL
    value: http://pdp.security:8181
  - name: REDIS_URL
    valueFrom:
      secretKeyRef:
        name: maestro-secrets
        key: redis-url
  - name: DATABASE_URL
    valueFrom:
      secretKeyRef:
        name: maestro-secrets
        key: database-url
  - name: OPENAI_API_KEY
    valueFrom:
      secretKeyRef:
        name: maestro-secrets
        key: openai-api-key
  - name: ANTHROPIC_API_KEY
    valueFrom:
      secretKeyRef:
        name: maestro-secrets
        key: anthropic-api-key

# Security Configuration - Enhanced Runtime Security
securityContext:
  runAsNonRoot: true
  runAsUser: 65532  # nonroot user from distroless
  runAsGroup: 65532
  fsGroup: 65532
  fsGroupChangePolicy: "Always"
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false
  seccompProfile:
    type: Localhost
    localhostProfile: profiles/intelgraph-seccomp.json
  capabilities:
    drop:
      - ALL
  # Additional security hardening
  procMount: Default
  
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 65532
  runAsGroup: 65532
  fsGroup: 65532
  fsGroupChangePolicy: "Always"
  seccompProfile:
    type: Localhost
    localhostProfile: profiles/intelgraph-seccomp.json
  sysctls: []
  supplementalGroups: []

# Health Checks
healthCheck:
  liveness:
    enabled: true
    path: /healthz
    port: 8080
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  readiness:
    enabled: true
    path: /readyz
    port: 8080
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
    successThreshold: 1
  startup:
    enabled: true
    path: /readyz
    port: 8080
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 30
    successThreshold: 1

# Persistence
persistence:
  enabled: true
  storageClass: "gp3-encrypted"
  size: 20Gi
  accessModes:
    - ReadWriteOnce
  annotations:
    volume.kubernetes.io/storage-provisioner: ebs.csi.aws.com

# RBAC Configuration
rbac:
  create: true
  rules:
    - apiGroups: [""]
      resources: ["pods", "services", "configmaps", "secrets"]
      verbs: ["get", "list", "watch"]
    - apiGroups: ["apps"]
      resources: ["deployments", "replicasets"]
      verbs: ["get", "list", "watch"]
    - apiGroups: ["networking.k8s.io"]
      resources: ["networkpolicies"]
      verbs: ["get", "list", "watch"]

serviceAccount:
  create: true
  name: ""
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::123456789012:role/maestro-service-role"

# Ingress Configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-burst: "2000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://intelgraph.ai,https://app.intelgraph.ai"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    nginx.ingress.kubernetes.io/enable-cors: "true"
  hosts:
    - host: maestro.intelgraph.ai
      paths:
        - path: /api/maestro/v1
          pathType: Prefix
        - path: /api/orchestration/v1
          pathType: Prefix
        - path: /healthz
          pathType: Exact
        - path: /readyz
          pathType: Exact
        - path: /metrics
          pathType: Exact
  tls:
    - secretName: maestro-tls
      hosts:
        - maestro.intelgraph.ai

# Network Policy
networkPolicy:
  enabled: true
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: ingress-nginx
      - namespaceSelector:
          matchLabels:
            name: monitoring
      ports:
        - protocol: TCP
          port: 8080
  egress:
    # DNS
    - to: []
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53
    # Database connections
    - to:
      - namespaceSelector:
          matchLabels:
            name: database
      ports:
        - protocol: TCP
          port: 5432
    # Redis connections
    - to:
      - namespaceSelector:
          matchLabels:
            name: cache
      ports:
        - protocol: TCP
          port: 6379
    # External web requests (HTTPS only)
    - to: []
      ports:
        - protocol: TCP
          port: 443
    # OPA Policy Decision Point
    - to:
      - namespaceSelector:
          matchLabels:
            name: security
      ports:
        - protocol: TCP
          port: 8181
    # OpenTelemetry Collector
    - to:
      - namespaceSelector:
          matchLabels:
            name: monitoring
      ports:
        - protocol: TCP
          port: 4317
        - protocol: TCP
          port: 4318

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 2
  maxUnavailable: 1

# Monitoring and Observability
metrics:
  enabled: true
  serviceMonitor:
    enabled: true
    namespace: monitoring
    labels:
      app.kubernetes.io/name: maestro
      app.kubernetes.io/component: orchestrator
    interval: 30s
    scrapeTimeout: 10s
    path: /metrics
    honorLabels: true
  prometheusRule:
    enabled: true
    namespace: monitoring
    rules:
      - alert: MaestroHighErrorRate
        expr: rate(maestro_orchestration_errors_total[5m]) > 0.1
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: "High error rate in Maestro orchestration"
          description: "Maestro orchestration error rate is {{ $value }} errors per second"
      - alert: MaestroHighLatency
        expr: histogram_quantile(0.95, rate(maestro_orchestration_duration_seconds_bucket[5m])) > 30
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High latency in Maestro orchestration"
          description: "95th percentile latency is {{ $value }}s"
      - alert: MaestroPodDown
        expr: up{job="maestro-orchestrator"} == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "Maestro orchestrator pod is down"
          description: "One or more Maestro orchestrator pods are not responding"

# Node Affinity and Tolerations
nodeSelector:
  kubernetes.io/arch: amd64
  node-type: compute-optimized

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - maestro
        topologyKey: kubernetes.io/hostname
    - weight: 50
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - maestro
        topologyKey: topology.kubernetes.io/zone

tolerations:
  - key: "maestro-workload"
    operator: "Equal"
    value: "true"
    effect: "NoSchedule"
  - key: "compute-optimized"
    operator: "Equal"
    value: "true"
    effect: "NoSchedule"

# Volume Mounts
volumeMounts:
  - name: cache-volume
    mountPath: /app/cache
  - name: logs-volume
    mountPath: /app/logs
  - name: config-volume
    mountPath: /app/config
    readOnly: true

volumes:
  - name: cache-volume
    emptyDir:
      sizeLimit: 2Gi
  - name: logs-volume
    emptyDir:
      sizeLimit: 1Gi
  - name: config-volume
    configMap:
      name: maestro-config

# Additional ConfigMaps
configMaps:
  maestro-config:
    data:
      app.yaml: |
        server:
          port: 8080
          host: 0.0.0.0
          timeout: 30s
        orchestration:
          maxConcurrentSources: 15
          defaultStrategy: consensus
          timeoutSeconds: 300
        premium:
          enabled: true
          budgetThreshold: 5.0
        compliance:
          enabled: true
          auditTrail: true
        cache:
          ttl: 3600
          maxSize: 1000
        ratelimit:
          global: 1000
          perTenant: 100
          window: 60

# Secrets (will be created separately with sealed-secrets or external-secrets)
secrets:
  maestro-secrets:
    type: Opaque
    # These will be populated by external secret management