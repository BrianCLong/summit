name: CI-CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}
  push:
    tags:
      - 'v*.*.*'

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/${{ github.repository }}

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Install root deps
        run: npm ci
      - name: Prettier check
        run: npx prettier --check .
      - name: Lint root
        run: npm run lint --if-present
      - name: Test server
        working-directory: server
        run: |
          npm ci
          npm test -- --ci --reporters=default --reporters=jest-junit
      - name: Test client
        working-directory: client
        run: |
          npm ci
          npm run test -- --run --reporter=junit
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Python lint
        run: |
          pip install black flake8 mypy
          black --check python ml
          flake8 python ml
          mypy python ml --ignore-missing-imports

  docker-build-scan-push:
    needs: build-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
    strategy:
      matrix:
        service: [server, client]
    steps:
      - uses: actions/checkout@v4
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build image
        run: |
          docker build -t ${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:${{ github.sha }} ${{ matrix.service }}/
      - name: Trivy image scan
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}.sarif'
          severity: 'CRITICAL,HIGH'
      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-${{ matrix.service }}.sarif
      - name: Push image
        run: |
          docker push ${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:${{ github.sha }}

  deploy-staging:
    if: github.ref == 'refs/heads/main'
    needs: docker-build-scan-push
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v4
      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.29.0'
      - name: Setup helm
        uses: azure/setup-helm@v4
      - name: Write kubeconfig
        run: echo "${KUBE_CONFIG}" | base64 -d > $HOME/.kube/config
        env:
          KUBE_CONFIG: ${{ secrets.STAGING_KUBE_CONFIG_B64 }}
      - name: Deploy server
        run: |
          helm upgrade --install server ./helm/server \
            --namespace staging --create-namespace \
            --set image.repository=${{ env.IMAGE_PREFIX }}/server \
            --set image.tag=${{ github.sha }}
          kubectl -n staging rollout status deploy/server-server --timeout=120s || {
            echo "Server rollout failed, rolling back";
            helm rollback server || true; exit 1; }
      - name: Deploy client
        run: |
          helm upgrade --install client ./helm/client \
            --namespace staging --create-namespace \
            --set image.repository=${{ env.IMAGE_PREFIX }}/client \
            --set image.tag=${{ github.sha }}
          kubectl -n staging rollout status deploy/client-client --timeout=120s || {
            echo "Client rollout failed, rolling back";
            helm rollback client || true; exit 1; }

  deploy-prod:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: docker-build-scan-push
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.29.0'
      - name: Setup helm
        uses: azure/setup-helm@v4
      - name: Write kubeconfig
        run: echo "${KUBE_CONFIG}" | base64 -d > $HOME/.kube/config
        env:
          KUBE_CONFIG: ${{ secrets.PROD_KUBE_CONFIG_B64 }}
      - name: Deploy server
        run: |
          helm upgrade --install server ./helm/server \
            --namespace prod --create-namespace \
            --set image.repository=${{ env.IMAGE_PREFIX }}/server \
            --set image.tag=${{ github.sha }} \
            --set hpa.enabled=true --set replicaCount=3
          kubectl -n prod rollout status deploy/server-server --timeout=180s || {
            echo "Server rollout failed, rolling back";
            helm rollback server || true; exit 1; }
      - name: Deploy client
        run: |
          helm upgrade --install client ./helm/client \
            --namespace prod --create-namespace \
            --set image.repository=${{ env.IMAGE_PREFIX }}/client \
            --set image.tag=${{ github.sha }} \
            --set hpa.enabled=true --set replicaCount=3
          kubectl -n prod rollout status deploy/client-client --timeout=180s || {
            echo "Client rollout failed, rolling back";
            helm rollback client || true; exit 1; }
