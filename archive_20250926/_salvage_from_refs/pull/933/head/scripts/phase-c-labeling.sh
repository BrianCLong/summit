#!/usr/bin/env bash
set -euo pipefail

# üè∑Ô∏è Phase C: Automated Labeling and Routing System
# Mission: Implement intelligent PR classification and routing

REPO=$(gh repo view --json nameWithOwner -q .nameWithOwner)
LOG_FILE="phase-c-labeling-$(date +%Y%m%d-%H%M).log"

echo "üè∑Ô∏è PHASE C: AUTOMATED LABELING & ROUTING SYSTEM" | tee "$LOG_FILE"
echo "Repository: $REPO" | tee -a "$LOG_FILE"
echo "Started: $(date)" | tee -a "$LOG_FILE"
echo "" | tee -a "$LOG_FILE"

# Create required labels if they don't exist
echo "=== C1: ENSURE REQUIRED LABELS EXIST ===" | tee -a "$LOG_FILE"

REQUIRED_LABELS=(
  "priority:release#8B0000#Critical release functionality"
  "priority:absorption#4B0082#Automated absorption PR"
  "priority:infra#800080#Infrastructure and deployment"
  "priority:security#FF4500#Security-related changes"
  "priority:ga#FF6347#GA readiness features"
  "area:frontend#87CEEB#Client-side changes"
  "area:backend#32CD32#Server-side changes"
  "area:docs#D3D3D3#Documentation changes"
  "area:monorepo#FFD700#Monorepo architecture"
  "status:ready-merge#00FF00#Ready for auto-merge"
  "status:needs-review#FFFF00#Requires human review"
  "status:breaking-change#FF0000#Contains breaking changes"
  "auto-generated#C0C0C0#Generated by automation"
)

for LABEL_SPEC in "${REQUIRED_LABELS[@]}"; do
  IFS='#' read -r NAME COLOR DESC <<< "$LABEL_SPEC"
  
  if ! gh label list | grep -q "^$NAME"; then
    echo "Creating label: $NAME" | tee -a "$LOG_FILE"
    gh label create "$NAME" --color "$COLOR" --description "$DESC" 2>/dev/null || true
  else
    echo "Label exists: $NAME" | tee -a "$LOG_FILE"
  fi
done

echo "=== C2: INTELLIGENT PR CLASSIFICATION ===" | tee -a "$LOG_FILE"

# Get all open PRs with file information
PRS_WITH_FILES=$(gh pr list --state open --json number,title,files,labels,isDraft,headRefName)

echo "$PRS_WITH_FILES" | jq -c '.[]' | while read -r PR; do
  PR_NUM=$(echo "$PR" | jq -r '.number')
  PR_TITLE=$(echo "$PR" | jq -r '.title')
  PR_FILES=$(echo "$PR" | jq -r '.files[].path' 2>/dev/null || echo "")
  EXISTING_LABELS=$(echo "$PR" | jq -r '.labels[].name' 2>/dev/null || echo "")
  
  echo "Analyzing PR #$PR_NUM: $PR_TITLE" | tee -a "$LOG_FILE"
  
  NEW_LABELS=()
  
  # Priority classification
  if echo "$PR_TITLE" | grep -qiE "(release|ga|hotfix|security)"; then
    NEW_LABELS+=("priority:release")
  elif echo "$PR_TITLE" | grep -qiE "(absorb|absorption)"; then
    NEW_LABELS+=("priority:absorption")  
  elif echo "$PR_TITLE" | grep -qiE "(infra|deployment|helm|docker|ci|cd)"; then
    NEW_LABELS+=("priority:infra")
  elif echo "$PR_TITLE" | grep -qiE "(security|auth|permission|rbac)"; then
    NEW_LABELS+=("priority:security")
  elif echo "$PR_TITLE" | grep -qiE "(ga|monorepo)"; then
    NEW_LABELS+=("priority:ga")
  fi
  
  # Area classification based on files
  HAS_FRONTEND=false
  HAS_BACKEND=false
  HAS_DOCS=false
  HAS_MONOREPO=false
  
  while IFS= read -r FILE; do
    if [[ "$FILE" =~ ^client/ ]] || [[ "$FILE" =~ \.(tsx?|jsx?|css|scss|html)$ ]]; then
      HAS_FRONTEND=true
    elif [[ "$FILE" =~ ^server/ ]] || [[ "$FILE" =~ ^api/ ]]; then
      HAS_BACKEND=true  
    elif [[ "$FILE" =~ \.(md|rst|txt)$ ]] || [[ "$FILE" =~ ^docs/ ]]; then
      HAS_DOCS=true
    elif [[ "$FILE" =~ ^(ga-|monorepo/) ]] || echo "$FILE" | grep -qE "/(package\.json|tsconfig\.json)$"; then
      HAS_MONOREPO=true
    fi
  done <<< "$PR_FILES"
  
  # Add area labels
  [[ "$HAS_FRONTEND" == true ]] && NEW_LABELS+=("area:frontend")
  [[ "$HAS_BACKEND" == true ]] && NEW_LABELS+=("area:backend")
  [[ "$HAS_DOCS" == true ]] && NEW_LABELS+=("area:docs")
  [[ "$HAS_MONOREPO" == true ]] && NEW_LABELS+=("area:monorepo")
  
  # Status classification
  if echo "$EXISTING_LABELS" | grep -q "auto-generated"; then
    NEW_LABELS+=("auto-generated")
  fi
  
  # Check if PR is ready for merge (has auto-merge enabled)
  if gh pr view "$PR_NUM" --json autoMergeRequest | jq -e '.autoMergeRequest != null' >/dev/null 2>&1; then
    NEW_LABELS+=("status:ready-merge")
  fi
  
  # Apply new labels (only if they don't already exist)
  for LABEL in "${NEW_LABELS[@]}"; do
    if ! echo "$EXISTING_LABELS" | grep -q "^$LABEL$"; then
      echo "  + Adding label: $LABEL" | tee -a "$LOG_FILE"
      gh pr edit "$PR_NUM" --add-label "$LABEL" 2>/dev/null || true
    else
      echo "  ~ Label exists: $LABEL" | tee -a "$LOG_FILE"
    fi
  done
  
  sleep 0.5  # Rate limiting
done

echo "=== C3: AUTOMATED ROUTING RULES ===" | tee -a "$LOG_FILE"

# Set up automated routing based on labels
echo "Implementing routing rules:" | tee -a "$LOG_FILE"

# High priority PRs get expedited review assignment
HIGH_PRIORITY_PRS=$(gh pr list --state open --label "priority:release,priority:security" --json number)
echo "$HIGH_PRIORITY_PRS" | jq -r '.[].number' | while read -r PR_NUM; do
  echo "  ‚Üí High priority PR #$PR_NUM marked for expedited processing" | tee -a "$LOG_FILE"
  gh pr edit "$PR_NUM" --add-label "needs:expedited-review" 2>/dev/null || true
done

# GA PRs get special handling
GA_PRS=$(gh pr list --state open --label "priority:ga" --json number)
echo "$GA_PRS" | jq -r '.[].number' | while read -r PR_NUM; do
  echo "  ‚Üí GA PR #$PR_NUM added to GA milestone" | tee -a "$LOG_FILE"
  # Would set milestone if it exists
  gh pr edit "$PR_NUM" --add-label "milestone:ga-ready" 2>/dev/null || true
done

# Docs-only PRs can be fast-tracked
DOCS_ONLY_PRS=$(gh pr list --state open --label "area:docs" --json number,labels)
echo "$DOCS_ONLY_PRS" | jq -c '.[] | select([.labels[].name] | map(startswith("area:")) | length == 1)' | \
while read -r PR_DATA; do
  PR_NUM=$(echo "$PR_DATA" | jq -r '.number')
  echo "  ‚Üí Docs-only PR #$PR_NUM eligible for fast-track" | tee -a "$LOG_FILE"
  gh pr edit "$PR_NUM" --add-label "fast-track:docs" 2>/dev/null || true
done

echo "=== C4: AUTOMATED WORKFLOW TRIGGERS ===" | tee -a "$LOG_FILE"

# Create summary report
TOTAL_LABELED=$(gh pr list --state open --json number | jq length)
echo "‚úÖ Phase C Complete" | tee -a "$LOG_FILE"
echo "‚úÖ Labels created and applied to $TOTAL_LABELED PRs" | tee -a "$LOG_FILE"
echo "‚úÖ Routing rules active for priority classification" | tee -a "$LOG_FILE"

# Export metrics
cat > "phase-c-summary.json" << EOF
{
  "phase": "C",
  "completed_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
  "repository": "$REPO",
  "prs_labeled": $TOTAL_LABELED,
  "labels_created": ${#REQUIRED_LABELS[@]},
  "routing_rules_active": true,
  "log_file": "$LOG_FILE"
}
EOF

echo "Phase C labeling and routing system deployed successfully!" | tee -a "$LOG_FILE"