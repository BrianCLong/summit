#!/usr/bin/env bash
set -euo pipefail

# 🌐 Global Absorption + Auto-Processing Script
# Mission: Process every PR + branch, absorb 100% functionality into main

REPO=$(gh repo view --json nameWithOwner -q .nameWithOwner)
BASE=main
LOG_FILE="global-absorb-$(date +%Y%m%d-%H%M).log"

echo "🌐 GLOBAL ABSORPTION PROTOCOL INITIATED" | tee "$LOG_FILE"
echo "Repository: $REPO" | tee -a "$LOG_FILE"
echo "Target branch: $BASE" | tee -a "$LOG_FILE"
echo "Started: $(date)" | tee -a "$LOG_FILE"
echo "" | tee -a "$LOG_FILE"

# Fetch everything first
git fetch --all --prune

echo "=== PHASE A1: INVENTORY OPEN PRS ===" | tee -a "$LOG_FILE"

# Get all open PRs with enhanced metadata
PRS_JSON=$(gh pr list --state open --json number,title,isDraft,labels,updatedAt,headRefName,url,mergeable,files,baseRefName)
TOTAL_PRS=$(echo "$PRS_JSON" | jq length)
echo "Found $TOTAL_PRS open PRs" | tee -a "$LOG_FILE"

echo "=== PHASE A2: DISCOVER ORPHAN BRANCHES ===" | tee -a "$LOG_FILE"

# Find branches with recent activity but NO PR
ORPHAN_BRANCHES=()
ORPHAN_BRANCHES_RAW=$(mktemp)

gh api "repos/$REPO/branches?per_page=200" | \
  jq -r '[.[] | select(.name | test("^(main|integrate/|rc|gh-pages)$")|not)] | .[].name' | \
  while read -r BR; do
    if ! gh pr list --search "head:$BR" --json number | jq -e 'length>0' >/dev/null 2>&1; then
      # Check if branch has commits ahead of main
      AHEAD=$(git rev-list --count "origin/$BASE..origin/$BR" 2>/dev/null || echo "0")
      if [ "$AHEAD" -gt 0 ]; then
        echo "Orphan branch found: $BR (${AHEAD} commits ahead)" | tee -a "$LOG_FILE"
        echo "$BR" >> "$ORPHAN_BRANCHES_RAW"
      fi
    fi
  done

# Read orphan branches from temp file into array
while IFS= read -r line; do
  ORPHAN_BRANCHES+=("$line")
done < "$ORPHAN_BRANCHES_RAW"
rm -f "$ORPHAN_BRANCHES_RAW"

echo "Found ${#ORPHAN_BRANCHES[@]} orphan branches with unmerged work" | tee -a "$LOG_FILE"

echo "=== PHASE A3: AUTO-CREATE PRS FOR ORPHAN BRANCHES ===" | tee -a "$LOG_FILE"

CREATED_PRS=0
if [ ${#ORPHAN_BRANCHES[@]} -gt 0 ]; then
for BR in "${ORPHAN_BRANCHES[@]}"; do
  echo "Creating absorption PR for branch: $BR" | tee -a "$LOG_FILE"
  
  # Create PR with absorption template
  PR_BODY="🤖 **Automated Absorption PR**

This PR was automatically created to absorb all functionality from \`$BR\` into \`$BASE\`.

**Branch Analysis:**
- Commits ahead of main: $(git rev-list --count "origin/$BASE..origin/$BR" 2>/dev/null || echo "unknown")
- Last activity: $(git log -1 --format="%ad" --date=short "origin/$BR" 2>/dev/null || echo "unknown")

**Absorption Status:** ⏳ Processing
**Auto-merge:** Will be enabled once checks pass

---
*Generated by IntelGraph Global Absorption Protocol*"

  if gh pr create \
    --head "$BR" \
    --base "$BASE" \
    --title "🔄 Absorb: $BR" \
    --body "$PR_BODY" \
    --label "priority:absorption,auto-generated" 2>/dev/null; then
    echo "✅ Created absorption PR for $BR" | tee -a "$LOG_FILE"
    CREATED_PRS=$((CREATED_PRS + 1))
  else
    echo "⚠️ Failed to create PR for $BR (may already exist)" | tee -a "$LOG_FILE"
  fi
done
else
  echo "No orphan branches found to create PRs for" | tee -a "$LOG_FILE"
fi

echo "Created $CREATED_PRS new absorption PRs" | tee -a "$LOG_FILE"

echo "=== PHASE A4: REFRESH PR LIST WITH NEW ABSORPTION PRS ===" | tee -a "$LOG_FILE"

# Refresh PR list to include newly created absorption PRs
sleep 2
PRS_JSON=$(gh pr list --state open --json number,title,isDraft,labels,updatedAt,headRefName,url,mergeable,files,baseRefName)
UPDATED_TOTAL=$(echo "$PRS_JSON" | jq length)
echo "Updated total PRs to process: $UPDATED_TOTAL" | tee -a "$LOG_FILE"

echo "=== PHASE A5: GLOBAL PRIORITIZATION & AUTO-MERGE ENABLEMENT ===" | tee -a "$LOG_FILE"

# Enhanced prioritization algorithm
PRIORITIZED_PRS=$(echo "$PRS_JSON" | jq -r '
.[]
| select(.isDraft|not)
| select([.labels[].name] | contains(["do-not-merge"])|not)
| . as $pr
| ([
    (if (.title|test("(?i)(release|ga|hotfix|security)")) then 150 else 0 end),
    (if ([.labels[].name] | map(test("(?i)(release|ga|hotfix|critical|security)")) | any) then 150 else 0 end),
    (if (.title|test("(?i)(infra|deployment|helm|server|startup|bootstrap|security|telemetry)")) then 60 else 0 end),
    (if ([.files[].path] | map(test("^(server/src/app\\.ts|infra/|deployment/|helm/|rollouts/|server/src/bootstrap|server/src/security)")) | any) then 60 else 0 end),
    (if (.title|test("(?i)(absorption|absorb)")) then 100 else 0 end),
    (if (.labels | length > 0) then 5 else 0 end),
    (if (.updatedAt) then ((now - (.updatedAt|fromdate)) / 86400 | floor | if . > 7 then 15 else 0 end) else 0 end)
  ] | add) as $score
| [$score, $pr.number, $pr.headRefName, $pr.url, $pr.title, $pr.mergeable]
| @tsv' | sort -nr)

echo "Prioritized PR processing order:" | tee -a "$LOG_FILE"
echo "$PRIORITIZED_PRS" | head -20 | nl | tee -a "$LOG_FILE"

echo "=== PHASE A6: MASS AUTO-MERGE ENABLEMENT ===" | tee -a "$LOG_FILE"

AUTO_MERGE_SUCCESS=0
AUTO_MERGE_TOTAL=0

echo "$PRIORITIZED_PRS" | while IFS=$'\t' read -r SCORE NUM BRANCH URL TITLE MERGEABLE; do
  AUTO_MERGE_TOTAL=$((AUTO_MERGE_TOTAL + 1))
  
  echo "Processing PR #$NUM: $TITLE (Score: $SCORE)" | tee -a "$LOG_FILE"
  
  # Enable auto-merge regardless of current check status
  if gh pr merge "$NUM" --auto --squash 2>/dev/null || gh pr merge "$NUM" --auto --merge 2>/dev/null; then
    echo "✅ Auto-merge enabled for PR #$NUM" | tee -a "$LOG_FILE"
    AUTO_MERGE_SUCCESS=$((AUTO_MERGE_SUCCESS + 1))
    
    # Add priority labels based on score
    if [ "$SCORE" -ge 150 ]; then
      gh pr edit "$NUM" --add-label "priority:release" 2>/dev/null || true
    elif [ "$SCORE" -ge 100 ]; then
      gh pr edit "$NUM" --add-label "priority:absorption" 2>/dev/null || true
    elif [ "$SCORE" -ge 60 ]; then
      gh pr edit "$NUM" --add-label "priority:infra" 2>/dev/null || true
    fi
    
    gh pr edit "$NUM" --add-label "ready:auto-merge" 2>/dev/null || true
    
    # Trigger check re-runs to accelerate processing
    gh pr checks rerun "$NUM" 2>/dev/null || true
    
  else
    echo "⚠️ Auto-merge failed for PR #$NUM (may already be enabled or have restrictions)" | tee -a "$LOG_FILE"
  fi
  
  # Small delay to avoid rate limiting
  sleep 1
done

echo "" | tee -a "$LOG_FILE"
echo "=== PHASE A COMPLETE ===" | tee -a "$LOG_FILE"
echo "✅ Orphan branches processed: ${#ORPHAN_BRANCHES[@]}" | tee -a "$LOG_FILE"
echo "✅ Absorption PRs created: $CREATED_PRS" | tee -a "$LOG_FILE"
echo "✅ Auto-merge enabled on: $AUTO_MERGE_SUCCESS PRs" | tee -a "$LOG_FILE"
echo "✅ Total PRs in auto-processing: $UPDATED_TOTAL" | tee -a "$LOG_FILE"
echo "" | tee -a "$LOG_FILE"

# Export metrics for next phases
export TOTAL_PRS_PROCESSED="$UPDATED_TOTAL"
export AUTO_MERGE_SUCCESS_COUNT="$AUTO_MERGE_SUCCESS"
export ORPHAN_BRANCHES_COUNT="${#ORPHAN_BRANCHES[@]}"
export ABSORPTION_PRS_CREATED="$CREATED_PRS"

echo "📊 PHASE A METRICS EXPORTED" | tee -a "$LOG_FILE"
echo "Ready for Phase B: Thorny conflict resolution" | tee -a "$LOG_FILE"

# Create status summary
cat > "global-absorb-phase-a-summary.json" << EOF
{
  "phase": "A",
  "completed_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
  "repository": "$REPO",
  "total_prs_processed": $UPDATED_TOTAL,
  "auto_merge_enabled": $AUTO_MERGE_SUCCESS,
  "orphan_branches_found": ${#ORPHAN_BRANCHES[@]},
  "absorption_prs_created": $CREATED_PRS,
  "success_rate": $(echo "scale=2; $AUTO_MERGE_SUCCESS * 100 / $UPDATED_TOTAL" | bc -l 2>/dev/null || echo "100"),
  "log_file": "$LOG_FILE"
}
EOF

echo "Phase A complete. Status saved to global-absorb-phase-a-summary.json" | tee -a "$LOG_FILE"