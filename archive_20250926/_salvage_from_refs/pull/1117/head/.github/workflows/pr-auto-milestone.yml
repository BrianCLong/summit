name: pr-auto-milestone

on:
  pull_request:
    types: [opened, edited, synchronize, labeled]

permissions:
  contents: read
  pull-requests: write
  issues: read
  projects: write

jobs:
  wire:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Ensure gh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh auth status || true

      - name: Apply milestone/labels/project from linked issues
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR: ${{ github.event.pull_request.number }}
          PROJECT_TITLE: 'Assistant v1.1'
        run: |
          set -euo pipefail
          BODY=$(gh pr view "$PR" --json body -q .body)
          NUMS=$(printf "%s" "$BODY" | grep -oE '(close[sd]?|fixe?[sd]?|resolve[sd]?) #[0-9]+' | grep -oE '#[0-9]+' | tr -d '#' | tr '\n' ' ' || true)
          [ -z "$NUMS" ] && exit 0
          PICK=""; THEME="";
          for n in $NUMS; do
            L=$(gh issue view "$n" --json labels -q '.labels[].name' | tr '\n' ' ' || true)
            if [[ "$L" == *"release: v1.1"* ]]; then
              PICK="$n"
              if   [[ "$L" == *"theme: routing"*   ]]; then THEME="theme: routing";
              elif [[ "$L" == *"theme: citations"* ]]; then THEME="theme: citations";
              elif [[ "$L" == *"theme: exports"*   ]]; then THEME="theme: exports";
              else THEME="theme: quality"; fi
              break
            fi
          done
          [ -z "$PICK" ] && exit 0
          MS=$(gh issue view "$PICK" --json milestone -q '.milestone.title' || echo "")
          if [ -n "$MS" ]; then gh pr edit "$PR" --milestone "$MS" || true; fi
          if [ -n "$THEME" ]; then gh pr edit "$PR" --add-label "$THEME" || true; fi
          OWNER=$(gh repo view --json owner -q .owner.login); REPO=$(gh repo view --json name -q .name)
          PID=$(gh api graphql -f query='query($o:String!,$r:String!,$t:String!){ repository(owner:$o,name:$r){ projectsV2(first:20, query:$t){ nodes { id title } } } }' -F o="$OWNER" -F r="$REPO" -F t="$PROJECT_TITLE" | jq -r '.data.repository.projectsV2.nodes[0].id')
          CID=$(gh pr view "$PR" --json id -q .id)
          if [ -n "$PID" ] && [ -n "$CID" ]; then
            gh api graphql -f query='mutation($p:ID!,$c:ID!){ addProjectV2ItemById(input:{projectId:$p,contentId:$c}){ item { id } } }' -F p="$PID" -F c="$CID" >/dev/null || true
          fi
