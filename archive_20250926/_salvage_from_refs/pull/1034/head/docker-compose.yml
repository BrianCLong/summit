version: "3.9"

services:
  server:
    build:
      context: ./server
      dockerfile: Dockerfile.prod
    container_name: intelgraph-server
    env_file:
      - .env
    environment:
      - NODE_ENV=development
      - PORT=4000
      - DISABLE_SOCKET_AUTH=${DISABLE_SOCKET_AUTH:-0}
      - NEO4J_URI=${NEO4J_URI:-bolt://neo4j:7687}
      - NEO4J_USERNAME=${NEO4J_USERNAME:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-neo4j_pass}
      - POSTGRES_HOST=${POSTGRES_HOST:-postgres}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_DB=${POSTGRES_DB:-intelgraph}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - CLIENT_URL=${CLIENT_URL:-http://localhost:3000}
    ports:
      - "4000:4000"
      - "9229:9229"
    depends_on:
      - postgres
      - neo4j
      - redis
    volumes:
      - ./server:/app
      - ./uploads:/app/uploads
    command: npm run dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/graphql"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  client:
    build:
      context: ./client
      dockerfile: Dockerfile.prod
    container_name: intelgraph-client
    environment:
      - VITE_API_URL=${VITE_API_URL:-http://localhost:4000}
      - VITE_WS_URL=${VITE_WS_URL:-http://localhost:4000}
    ports:
      - "3000:3000"
    depends_on:
      - server
    volumes:
      - ./client:/app
    command: npm run dev -- --host 0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  postgres:
    build:
      context: ./deploy/docker/postgres
      dockerfile: Dockerfile
    container_name: intelgraph-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-intelgraph}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  neo4j:
    image: neo4j:4.4-enterprise
    container_name: intelgraph-neo4j
    environment:
      - NEO4J_AUTH=${NEO4J_USERNAME:-neo4j}/${NEO4J_PASSWORD:-neo4j_pass}
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4jdata:/data
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:7474 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  redis:
    image: redis:7-alpine
    container_name: intelgraph-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "INFO"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  opa:
    image: openpolicyagent/opa:0.63.0
    container_name: intelgraph-opa
    command: ["run", "--server", "/policies"]
    volumes:
      - ./server/policies:/policies
    ports:
      - "8181:8181"
    profiles: ["opa"]

  streamlit:
    build:
      context: ./python
    container_name: intelgraph-streamlit
    command: streamlit run apps/streamlit_app/app.py --server.port 8501 --server.address 0.0.0.0
    ports:
      - "8501:8501"
    volumes:
      - ./python:/app
    profiles: ["streamlit"]

volumes:
  pgdata:
  neo4jdata:
