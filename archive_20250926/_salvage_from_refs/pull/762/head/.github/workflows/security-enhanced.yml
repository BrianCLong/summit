name: Security Gates Enhanced

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop, ops/ci-stabilize-*]
  schedule:
    - cron: "17 3 * * *"  # Daily at 3:17 AM UTC

permissions:
  contents: read
  security-events: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "20.13.1"
  PYTHON_VERSION: "3.11"

jobs:
  gitleaks:
    name: GitLeaks Secret Scan
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config-path: .gitleaks.toml
          args: detect --source . --no-git --redact --verbose
          
      - name: Upload GitLeaks results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: |
            gitleaks-report.json
            gitleaks-report.sarif
          retention-days: 7

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      security-events: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        language: [javascript, python]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          config-file: .github/codeql-config.yml
          
      - name: Setup Node.js (for JavaScript analysis)
        if: matrix.language == 'javascript'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Python (for Python analysis)
        if: matrix.language == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies (JavaScript)
        if: matrix.language == 'javascript'
        run: |
          npm ci --prefer-offline --no-audit
          if [ -d "client" ]; then cd client && npm ci --prefer-offline --no-audit && cd ..; fi
          if [ -d "server" ]; then cd server && npm ci --prefer-offline --no-audit && cd ..; fi
          
      - name: Install dependencies (Python)
        if: matrix.language == 'python'
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f ml/requirements.txt ]; then pip install -r ml/requirements.txt; fi
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          upload: true
          category: "/language:${{ matrix.language }}"

  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: Run npm audit
        run: |
          npm audit --audit-level high --json > npm-audit.json || {
            echo "High or critical vulnerabilities found in npm dependencies"
            npm audit --audit-level high
            exit 1
          }
          
      - name: Upload npm audit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-report
          path: npm-audit.json
          retention-days: 7

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'security-scan')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Build Docker image
        run: |
          docker build -t intelgraph:scan-${{ github.sha }} .
          
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'intelgraph:scan-${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  zap-baseline:
    name: OWASP ZAP Baseline
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'security-scan')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies and start server
        run: |
          npm ci --prefer-offline --no-audit
          npm run build
          npm run start:test &
          
          # Wait for server to be ready
          timeout 60 bash -c 'until curl -s http://localhost:3000/health > /dev/null; do sleep 2; done' || {
            echo "Server failed to start within 60 seconds"
            exit 1
          }
          
      - name: Run ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -m 2 -T 10 -z "-silent"'
          allow_issue_writing: false
          
      - name: Upload ZAP scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-baseline-report
          path: |
            report_html.html
            report_json.json
          retention-days: 7

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [gitleaks, codeql, dependency-check]
    if: always()
    steps:
      - name: Security Check Summary
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| GitLeaks | ${{ needs.gitleaks.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL | ${{ needs.codeql.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Check | ${{ needs.dependency-check.result }} |" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.gitleaks.result }}" == "failure" ]]; then
            echo "❌ **SECURITY ALERT**: GitLeaks found potential secrets in the code."
            echo "🔧 **Action Required**: Review the GitLeaks report and rotate any exposed secrets."
          fi
          
          if [[ "${{ needs.codeql.result }}" == "failure" ]]; then
            echo "❌ **SECURITY ALERT**: CodeQL found potential security vulnerabilities."
            echo "🔧 **Action Required**: Review the CodeQL alerts in the Security tab."
          fi
          
          if [[ "${{ needs.dependency-check.result }}" == "failure" ]]; then
            echo "❌ **SECURITY ALERT**: High or critical vulnerabilities found in dependencies."
            echo "🔧 **Action Required**: Update vulnerable dependencies."
          fi