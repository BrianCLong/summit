name: 🛡️ Security Audit - Comprehensive Security Scanning
on:
  push:
    branches: [main, develop, 'release/**']
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * 1' # Weekly on Mondays at 2 AM UTC
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

concurrency:
  group: security-audit-${{ github.ref }}
  cancel-in-progress: false # Don't cancel security scans

env:
  SCAN_RESULTS_PATH: .security-scan-results

jobs:
  setup:
    name: 🔧 Security Scan Setup
    runs-on: ubuntu-latest
    outputs:
      scan-matrix: ${{ steps.setup.outputs.scan-matrix }}
      has-code: ${{ steps.setup.outputs.has-code }}
      has-docker: ${{ steps.setup.outputs.has-docker }}
      has-dependencies: ${{ steps.setup.outputs.has-dependencies }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup scan environment
        id: setup
        run: |
          mkdir -p ${{ env.SCAN_RESULTS_PATH }}

          # Detect what we have to scan
          HAS_CODE="false"
          HAS_DOCKER="false"
          HAS_DEPENDENCIES="false"

          if find . -name "*.js" -o -name "*.ts" -o -name "*.py" -o -name "*.go" | head -1 | grep -q .; then
            HAS_CODE="true"
          fi

          if find . -name "Dockerfile*" -o -name "docker-compose*.yml" | head -1 | grep -q .; then
            HAS_DOCKER="true"
          fi

          if find . -name "package*.json" -o -name "requirements*.txt" -o -name "Cargo.toml" -o -name "go.mod" | head -1 | grep -q .; then
            HAS_DEPENDENCIES="true"
          fi

          # Create scan matrix
          MATRIX='{"include":['
          MATRIX+='"secret-scan",'
          MATRIX+='"sast-scan",'
          if [ "$HAS_DOCKER" == "true" ]; then
            MATRIX+='"container-scan",'
          fi
          if [ "$HAS_DEPENDENCIES" == "true" ]; then
            MATRIX+='"dependency-scan",'
          fi
          MATRIX+='"license-scan"'
          MATRIX+=']}'

          echo "scan-matrix=$MATRIX" >> $GITHUB_OUTPUT
          echo "has-code=$HAS_CODE" >> $GITHUB_OUTPUT
          echo "has-docker=$HAS_DOCKER" >> $GITHUB_OUTPUT  
          echo "has-dependencies=$HAS_DEPENDENCIES" >> $GITHUB_OUTPUT

          echo "🔧 Security scan setup complete"
          echo "Code: $HAS_CODE | Docker: $HAS_DOCKER | Dependencies: $HAS_DEPENDENCIES"

  secret-scan:
    name: 🔍 Secret Detection
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Gitleaks
        run: |
          wget -q https://github.com/gitleaks/gitleaks/releases/download/v8.18.4/gitleaks_8.18.4_linux_x64.tar.gz
          tar xzf gitleaks_8.18.4_linux_x64.tar.gz
          sudo mv gitleaks /usr/local/bin/
          gitleaks version

      - name: Configure Gitleaks
        run: |
          if [ ! -f .gitleaks.toml ]; then
            cat > .gitleaks.toml << 'EOF'
          [extend]
          useDefault = true

          [[rules]]
          description = "AWS Access Key"
          id = "aws-access-key"
          regex = '''AKIA[0-9A-Z]{16}'''

          [[rules]]
          description = "OpenAI API Key"
          id = "openai-api-key"
          regex = '''sk-[a-zA-Z0-9]{48}'''

          [[rules]]
          description = "GitHub Token"
          id = "github-token"
          regex = '''gh[pousr]_[A-Za-z0-9_]{36,251}'''

          [allowlist]
          description = "Test files and examples"
          files = [
            '''.*test.*''',
            '''.*spec.*''',
            '''.*example.*''',
            '''.*mock.*'''
          ]
          EOF
          fi

      - name: Run Gitleaks scan
        run: |
          echo "🔍 Scanning for secrets..."
          gitleaks detect \
            --source . \
            --config .gitleaks.toml \
            --report-format json \
            --report-path ${{ env.SCAN_RESULTS_PATH }}/gitleaks-report.json \
            --verbose || {
            echo "SECRETS_FOUND=true" >> $GITHUB_ENV
            echo "⚠️ Potential secrets detected"
          }

          if [ ! -f "${{ env.SCAN_RESULTS_PATH }}/gitleaks-report.json" ]; then
            echo '{"results": []}' > ${{ env.SCAN_RESULTS_PATH }}/gitleaks-report.json
          fi

      - name: Upload Gitleaks results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: gitleaks-results
          path: ${{ env.SCAN_RESULTS_PATH }}/gitleaks-report.json
          retention-days: 30

  sast-scan:
    name: 🔬 Static Application Security Testing
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.has-code == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python for Semgrep
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Semgrep
        run: |
          pip install semgrep
          semgrep --version

      - name: Run Semgrep SAST
        run: |
          echo "🔬 Running SAST scan with Semgrep..."
          semgrep \
            --config=auto \
            --json \
            --output=${{ env.SCAN_RESULTS_PATH }}/semgrep-results.json \
            --max-memory=4000 \
            --timeout=300 \
            . || {
            echo "SAST_ISSUES_FOUND=true" >> $GITHUB_ENV
            echo "⚠️ SAST issues detected"
          }

          # Generate summary
          if [ -f "${{ env.SCAN_RESULTS_PATH }}/semgrep-results.json" ]; then
            ISSUES_COUNT=$(jq '.results | length' ${{ env.SCAN_RESULTS_PATH }}/semgrep-results.json)
            echo "Found $ISSUES_COUNT SAST issues"
            echo "SAST_ISSUES_COUNT=$ISSUES_COUNT" >> $GITHUB_ENV
          fi

      - name: Upload Semgrep results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: semgrep-results
          path: ${{ env.SCAN_RESULTS_PATH }}/semgrep-results.json
          retention-days: 30

  container-scan:
    name: 🐳 Container Security Scan
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.has-docker == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy
          trivy version

      - name: Build Docker image for scanning
        run: |
          if [ -f "Dockerfile" ]; then
            echo "🐳 Building Docker image for security scan..."
            docker build -t security-scan-image:latest . || {
              echo "Docker build failed, scanning base images only"
              echo "DOCKER_BUILD_FAILED=true" >> $GITHUB_ENV
            }
          fi

      - name: Scan Docker image with Trivy
        run: |
          echo "🐳 Scanning container for vulnerabilities..."
          if [ "$DOCKER_BUILD_FAILED" != "true" ] && [ -f "Dockerfile" ]; then
            trivy image \
              --format json \
              --output ${{ env.SCAN_RESULTS_PATH }}/trivy-image-results.json \
              --severity HIGH,CRITICAL \
              --ignore-unfixed \
              security-scan-image:latest || {
              echo "CONTAINER_VULNS_FOUND=true" >> $GITHUB_ENV
            }
          fi

      - name: Scan Dockerfile with Trivy
        run: |
          echo "🐳 Scanning Dockerfile for misconfigurations..."
          if [ -f "Dockerfile" ]; then
            trivy config \
              --format json \
              --output ${{ env.SCAN_RESULTS_PATH }}/trivy-dockerfile-results.json \
              --severity HIGH,CRITICAL \
              Dockerfile || {
              echo "DOCKERFILE_ISSUES_FOUND=true" >> $GITHUB_ENV
            }
          fi

      - name: Upload Trivy results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-results
          path: ${{ env.SCAN_RESULTS_PATH }}/trivy-*.json
          retention-days: 30

  dependency-scan:
    name: 📦 Dependency Security Scan
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.has-dependencies == 'true'
    strategy:
      matrix:
        ecosystem: [npm, python, go]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        if: matrix.ecosystem == 'npm'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Setup Python
        if: matrix.ecosystem == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Setup Go
        if: matrix.ecosystem == 'go'
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Install audit tools
        run: |
          case "${{ matrix.ecosystem }}" in
            npm)
              if [ -f "package.json" ]; then
                npm install --package-lock-only
                echo "NPM_AUDIT=true" >> $GITHUB_ENV
              fi
              ;;
            python)
              if [ -f "requirements.txt" ] || [ -f "pyproject.toml" ]; then
                pip install safety
                echo "PYTHON_AUDIT=true" >> $GITHUB_ENV
              fi
              ;;
            go)
              if [ -f "go.mod" ]; then
                go install golang.org/x/vuln/cmd/govulncheck@latest
                echo "GO_AUDIT=true" >> $GITHUB_ENV
              fi
              ;;
          esac

      - name: Run dependency audit
        run: |
          case "${{ matrix.ecosystem }}" in
            npm)
              if [ "$NPM_AUDIT" == "true" ]; then
                echo "📦 Auditing npm dependencies..."
                pnpm audit --audit-level=moderate --json > ${{ env.SCAN_RESULTS_PATH }}/npm-audit.json || {
                  echo "NPM_VULNS_FOUND=true" >> $GITHUB_ENV
                }
              fi
              ;;
            python)
              if [ "$PYTHON_AUDIT" == "true" ]; then
                echo "📦 Auditing Python dependencies..."
                if [ -f "requirements.txt" ]; then
                  safety check --json --output ${{ env.SCAN_RESULTS_PATH }}/safety-audit.json || {
                    echo "PYTHON_VULNS_FOUND=true" >> $GITHUB_ENV
                  }
                fi
              fi
              ;;
            go)
              if [ "$GO_AUDIT" == "true" ]; then
                echo "📦 Auditing Go dependencies..."
                govulncheck -json ./... > ${{ env.SCAN_RESULTS_PATH }}/govuln-audit.json || {
                  echo "GO_VULNS_FOUND=true" >> $GITHUB_ENV
                }
              fi
              ;;
          esac

      - name: Upload dependency scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-scan-${{ matrix.ecosystem }}
          path: ${{ env.SCAN_RESULTS_PATH }}/*audit*.json
          retention-days: 30

  license-scan:
    name: ⚖️ License Compliance Check
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.has-dependencies == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install license checker
        run: |
          pnpm install -g license-checker

      - name: Check licenses
        run: |
          echo "⚖️ Checking dependency licenses..."
          if [ -f "package.json" ]; then
            license-checker \
              --json \
              --out ${{ env.SCAN_RESULTS_PATH }}/license-check.json \
              --excludePrivatePackages || {
              echo "LICENSE_ISSUES_FOUND=true" >> $GITHUB_ENV
            }
            
            # Check for problematic licenses
            if grep -i "gpl\|agpl\|copyleft" ${{ env.SCAN_RESULTS_PATH }}/license-check.json > /dev/null; then
              echo "COPYLEFT_LICENSES_FOUND=true" >> $GITHUB_ENV
              echo "⚠️ Copyleft licenses detected"
            fi
          fi

      - name: Upload license results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: license-scan-results
          path: ${{ env.SCAN_RESULTS_PATH }}/license-check.json
          retention-days: 30

  security-report:
    name: 📊 Security Audit Report
    runs-on: ubuntu-latest
    needs: [setup, secret-scan, sast-scan, container-scan, dependency-scan, license-scan]
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Download all scan results
        uses: actions/download-artifact@v4
        with:
          path: scan-results

      - name: Generate security report
        run: |
          echo "📊 Generating comprehensive security report..."

          # Create report header
          cat > security-report.md << 'EOF'
          # 🛡️ Security Audit Report

          **Generated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")  
          **Repository:** ${{ github.repository }}  
          **Branch/Commit:** ${{ github.ref_name }}@${{ github.sha }}

          ## Executive Summary
          EOF

          # Count issues across all scans
          TOTAL_ISSUES=0
          HIGH_SEVERITY=0
          MEDIUM_SEVERITY=0

          echo "" >> security-report.md
          echo "### Scan Results Overview" >> security-report.md
          echo "" >> security-report.md

          # Process each scan type
          for scan_type in gitleaks semgrep trivy npm-audit safety govuln license; do
            if find scan-results -name "*${scan_type}*" -type f 2>/dev/null | grep -q .; then
              echo "- ✅ ${scan_type^} scan completed" >> security-report.md
            else
              echo "- ➖ ${scan_type^} scan skipped" >> security-report.md
            fi
          done

          echo "" >> security-report.md

          # Add detailed findings if any issues found
          if [ $TOTAL_ISSUES -gt 0 ]; then
            echo "### 🚨 Security Findings" >> security-report.md
            echo "" >> security-report.md
            echo "**Total Issues Found:** $TOTAL_ISSUES" >> security-report.md
            echo "- High Severity: $HIGH_SEVERITY" >> security-report.md
            echo "- Medium Severity: $MEDIUM_SEVERITY" >> security-report.md
            echo "" >> security-report.md
            echo "Please review the detailed scan artifacts for complete findings." >> security-report.md
          else
            echo "### ✅ Security Status" >> security-report.md
            echo "" >> security-report.md
            echo "No critical security issues detected in automated scans." >> security-report.md
          fi

          echo "" >> security-report.md
          echo "---" >> security-report.md
          echo "*This report was automatically generated by the Security Audit workflow*" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-report
          path: security-report.md
          retention-days: 90

      - name: Comment security summary (PR only)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  security-gate:
    name: 🚪 Security Gate
    runs-on: ubuntu-latest
    needs: [secret-scan, sast-scan, container-scan, dependency-scan, license-scan]
    if: always()
    steps:
      - name: Evaluate security posture
        run: |
          echo "🚪 Evaluating overall security posture..."

          FAIL_BUILD=false

          # Check for critical security issues
          if [[ "${{ needs.secret-scan.result }}" == "failure" ]] || 
             [[ "${{ env.SECRETS_FOUND }}" == "true" ]]; then
            echo "❌ CRITICAL: Secrets detected - failing build"
            FAIL_BUILD=true
          fi

          if [[ "${{ env.SAST_ISSUES_COUNT }}" -gt "10" ]]; then
            echo "❌ CRITICAL: Too many SAST issues (${{ env.SAST_ISSUES_COUNT }}) - failing build"
            FAIL_BUILD=true
          fi

          if [[ "${{ env.COPYLEFT_LICENSES_FOUND }}" == "true" ]]; then
            echo "⚠️ WARNING: Copyleft licenses detected - review required"
            # Don't fail build for license issues, but warn
          fi

          if [ "$FAIL_BUILD" == "true" ]; then
            echo "🚨 Security gate FAILED - critical issues must be resolved"
            exit 1
          else
            echo "✅ Security gate PASSED - no critical issues detected"
          fi
