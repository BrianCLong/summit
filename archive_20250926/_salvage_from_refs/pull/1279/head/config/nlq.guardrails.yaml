# NLâ†’Cypher Guardrails Configuration
# Controls constraint enforcement for natural language query translation

# Global settings
global:
  enabled: true
  default_enforcement_mode: "block"  # block, warn, allow
  log_level: "info"
  metrics_enabled: true

# Read-only enforcement
readonly:
  enabled: true

  # Write operations that are forbidden
  forbidden_operations:
    - CREATE
    - MERGE
    - DELETE
    - REMOVE
    - SET
    - DROP
    - FOREACH

  # Procedures that are explicitly allowed (all others blocked)
  allowed_procedures:
    - "db.labels"
    - "db.relationshipTypes"
    - "db.propertyKeys"
    - "db.schema.nodeTypeProperties"
    - "db.schema.relTypeProperties"
    - "db.indexes"
    - "db.constraints"

  # Functions that are explicitly allowed for write-like operations
  allowed_write_functions: []

# LIMIT clause enforcement
limits:
  # Automatically inject LIMIT if missing
  auto_inject: true

  # Default LIMIT when auto-injecting
  default_limit: 100

  # Maximum allowed LIMIT value
  max_limit: 10000

  # Warn if LIMIT is above this threshold
  warn_threshold: 1000

# Query complexity constraints
complexity:
  enabled: true

  # Maximum depth for variable-length paths [*n..m]
  max_var_length_paths: 3

  # Maximum traversal depth in query
  max_traversal_depth: 5

  # Maximum estimated Cartesian product size
  max_cartesian_product_size: 100

  # Cost budget for query execution (in abstract units)
  cost_budget: 1.0

  # Complexity scoring weights
  weights:
    var_length_multiplier: 2.0
    match_clause_multiplier: 1.5
    subquery_multiplier: 1.8
    optional_match_multiplier: 1.3

# Timeout settings
timeouts:
  # Maximum query execution time
  query_timeout_ms: 30000

  # Maximum time for constraint analysis
  parse_timeout_ms: 5000

  # Maximum time for translation
  translation_timeout_ms: 15000

# Pattern-based restrictions
patterns:
  # Patterns that are completely forbidden
  forbidden_patterns:
    - "CALL\\s+apoc\\.cypher\\.run"          # Dynamic Cypher execution
    - "CALL\\s+apoc\\.load\\."               # External data loading
    - "CALL\\s+dbms\\."                      # Database management
    - "LOAD\\s+CSV"                          # CSV loading
    - "USING\\s+PERIODIC\\s+COMMIT"          # Batch processing
    - "CALL\\s+apoc\\.export\\."             # Data export
    - "CALL\\s+apoc\\.import\\."             # Data import
    - "CALL\\s+apoc\\.util\\.validate"       # Validation bypasses

  # Patterns that generate warnings but don't block
  warning_patterns:
    - "\\[\\*\\]"                            # Unlimited variable-length
    - "OPTIONAL\\s+MATCH.*OPTIONAL\\s+MATCH" # Multiple optional matches
    - "UNWIND.*UNWIND"                       # Nested unwinds
    - "WITH.*WITH.*WITH"                     # Deep WITH chains
    - "COLLECT\\(COLLECT\\("                 # Nested collections

  # Safe patterns that are explicitly allowed
  safe_patterns:
    - "MATCH.*RETURN"                        # Basic read queries
    - "MATCH.*WHERE.*RETURN"                 # Filtered reads
    - "MATCH.*ORDER\\s+BY.*RETURN"           # Sorted reads

# Environment-specific overrides
environments:
  development:
    readonly:
      enabled: false  # Allow writes in dev
    limits:
      max_limit: 50000
    complexity:
      cost_budget: 5.0

  staging:
    readonly:
      enabled: true
    limits:
      max_limit: 5000
    complexity:
      cost_budget: 2.0

  production:
    readonly:
      enabled: true
    limits:
      max_limit: 1000
      auto_inject: true
    complexity:
      cost_budget: 0.5
      max_var_length_paths: 2

# Tenant-specific overrides
tenants:
  # Premium tenants get higher limits
  premium:
    limits:
      max_limit: 50000
      default_limit: 500
    complexity:
      cost_budget: 5.0

  # Basic tenants get stricter limits
  basic:
    limits:
      max_limit: 1000
      default_limit: 50
    complexity:
      cost_budget: 0.2

# User role-based permissions
roles:
  admin:
    readonly:
      enabled: false  # Admins can write
    limits:
      max_limit: 100000
    complexity:
      cost_budget: 10.0

  analyst:
    readonly:
      enabled: true
    limits:
      max_limit: 10000
      default_limit: 200
    complexity:
      cost_budget: 2.0

  viewer:
    readonly:
      enabled: true
    limits:
      max_limit: 1000
      default_limit: 50
    complexity:
      cost_budget: 0.5

# Explanation settings
explanation:
  enabled: true

  # Default explanation level for different contexts
  default_levels:
    api: "detailed"
    ui: "basic"
    admin: "technical"

  # Include technical details for these roles
  technical_roles:
    - admin
    - developer
    - security_analyst

  # Learning resources
  documentation_base_url: "https://docs.intelgraph.io/nlq-guardrails"

  # Appeal process
  appeal:
    enabled: true
    contact_url: "https://support.intelgraph.io/nlq-appeal"
    escalation_roles:
      - security_lead
      - platform_engineer

# Monitoring and alerting
monitoring:
  # Metrics collection
  metrics:
    violation_counts: true
    complexity_scores: true
    execution_times: true
    constraint_effectiveness: true

  # Alert thresholds
  alerts:
    high_violation_rate: 0.1      # Alert if >10% queries blocked
    high_complexity_rate: 0.05    # Alert if >5% queries high complexity
    constraint_bypass_attempts: 1 # Alert on any bypass attempts

  # Audit logging
  audit:
    log_all_violations: true
    log_successful_queries: false  # Only log violations by default
    retention_days: 90

# Integration settings
integrations:
  # OPA policy engine
  opa:
    enabled: true
    endpoint: "http://localhost:8181"
    policy_package: "intelgraph.nlq.constraints"

  # Cost tracking
  cost_tracking:
    enabled: true
    service_endpoint: "http://cost-guard:8080"

  # Schema service
  schema_service:
    enabled: true
    cache_ttl_seconds: 300
    refresh_interval_seconds: 3600