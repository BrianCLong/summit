import { test, expect } from '@playwright/test';

const BASE_URL = process.env.WEB_URL || 'http://localhost:3001';

// End-to-end test for the streaming alerts panel in the UI.
test.describe('Streaming Alerts Panel', () => {

  test('alert appears, highlights, is keyboard-focusable, and meets a11y standards', async ({ page, request }) => {
    const correlationId = `pw-a11y-test-${Date.now()}`;
    const alertTitle = `Playwright Test Alert: ${correlationId}`;

    // Step 1: Go to the alerts page before the alert is emitted.
    await page.goto(`${BASE_URL}/alerts`);

    // Step 2: Check for ARIA live region attribute for accessibility.
    await expect(page.getByRole('region', { name: /alerts/i })).toHaveAttribute('aria-live', /polite|assertive/i);

    // Step 3: Emit a new alert using the dev API endpoint.
    const emitResponse = await request.post(`${BASE_URL}/api/dev/emit-alert`, {
      data: {
        correlation_id: correlationId,
        title: alertTitle,
        severity: 'medium',
        body: 'This is a test alert generated by Playwright.'
      }
    });
    expect(emitResponse.ok()).toBeTruthy();

    // Step 4: Verify the new alert appears in the UI.
    const alertRow = page.getByTestId(`alert-${correlationId}`);
    await expect(alertRow).toBeVisible({ timeout: 5000 }); // Wait up to 5s for the alert to appear via WebSocket

    // Step 5: Verify the alert row has a temporary highlight class.
    // This class should be applied by frontend JS on arrival.
    await expect(alertRow).toHaveClass(/highlight|pulse|flash/, { timeout: 2000 });

    // Step 6: Verify the alert is focusable for keyboard navigation.
    await alertRow.focus();
    await expect(alertRow).toBeFocused();
  });
});
