openapi: 3.0.3
info:
  title: Prov-Ledger Write API
  version: 0.1.0
paths:
  /prov/v1/evidence:
    post:
      summary: Create evidence
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvidenceCreate'
      responses:
        '201': { description: Created, content: { application/json: { schema: { type: object, properties: { id: { type: string, format: uuid } } } } } }
        '400': { description: Bad request }
  /prov/v1/claim:
    post:
      summary: Create claim linking evidence
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClaimCreate'
      responses:
        '201': { description: Created, content: { application/json: { schema: { type: object, properties: { id: { type: string, format: uuid } } } } } }
        '400': { description: Bad request }
  /prov/v1/export/{caseId}:
    post:
      summary: Export disclosure bundle for a case
      parameters:
        - in: path
          name: caseId
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                evidenceIds: { type: array, items: { type: string } }
                rightToReply: { type: object }
      responses:
        '200': { description: ZIP stream }
        '403': { description: Policy denied }
  /prov/v1/manifest/{bundleId}:
    get:
      summary: Get manifest summary by bundleId
      parameters:
        - in: path
          name: bundleId
          required: true
          schema: { type: string }
      responses:
        '200': { description: Manifest summary, content: { application/json: { schema: { $ref: '#/components/schemas/Manifest' } } } }
        '404': { description: Not found }
components:
  schemas:
    EvidenceCreate:
      type: object
      required: [checksum, algorithm, source, license]
      properties:
        checksum: { type: string }
        algorithm: { type: string, enum: [sha256, sha1, md5] }
        source: { type: string }
        license: { type: string }
        confidence: { type: number, minimum: 0, maximum: 1 }
        transforms: { type: array, items: { type: object } }
    ClaimCreate:
      type: object
      required: [statement, evidenceIds]
      properties:
        statement: { type: string }
        evidenceIds: { type: array, items: { type: string } }
    Manifest:
      type: object
      properties:
        root: { type: string }
        algorithm: { type: string }
        entries:
          type: array
          items:
            type: object
            properties:
              path: { type: string }
              sha256: { type: string }
              size: { type: integer }
        counts: { type: object, properties: { files: { type: integer } } }
        generatedAt: { type: string, format: date-time }
