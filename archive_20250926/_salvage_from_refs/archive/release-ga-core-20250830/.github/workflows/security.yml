name: Security Pipeline
on:
  schedule:
    - cron: '0 2 * * 1' # Weekly on Monday at 2 AM
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - '**/*.ts'
      - '**/*.js'
      - '**/*.py'
      - '**/Dockerfile'
      - '**/package*.json'
      - '**/requirements*.txt'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # CodeQL analysis for static code scanning
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: ['javascript', 'python']
    steps:
      - name: Checkout repository
        uses: actions/checkout@c9ef52556095b32f140b0c7d74474f53696d9000 # v4
        
      - name: Initialize CodeQL
        uses: github/codeql-action/init@b6110717a335152231a71b8447af51af11020a8f # v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality
          
      - name: Autobuild
        uses: github/codeql-action/autobuild@b6110717a335152231a71b8447af51af11020a8f # v3
        
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@b6110717a335152231a71b8447af51af11020a8f # v3
        with:
          category: "/language:${{matrix.language}}"

  # Dependency scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@c9ef52556095b32f140b0c7d74474f53696d9000 # v4
        
      - name: Setup Node.js
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --workspaces
        
      - name: Run npm audit
        run: |
          npm audit --audit-level high --json > npm-audit.json
          
      - name: Setup Python
        uses: actions/setup-python@824a62378795d7a63864050674956c050c8c0868 # v4
        with:
          python-version: '3.11'
          
      - name: Install Python security tools
        run: |
          pip install safety bandit semgrep
          
      - name: Python dependency scan with Safety
        run: |
          find . -name "requirements*.txt" -exec safety check -r {} \;
          
      - name: Python security scan with Bandit
        run: |
          find . -name "*.py" -path "*/apps/*" -exec bandit -r {} \;
          
      - name: Semgrep security scan
        run: |
          semgrep --config=auto --json --output=semgrep.json .
          
      - name: Upload scan results
        uses: actions/upload-artifact@0b7f8f6 # v4
        with:
          name: security-scan-results
          path: |
            npm-audit.json
            semgrep.json
          retention-days: 30

  # Container image scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - api-gateway
          - analytics-service
          - ml-engine
          - graph-analytics
          - feed-processor
          - search-engine
          - workflow-engine
          - mobile-interface
    steps:
      - name: Checkout code
        uses: actions/checkout@c9ef52556095b32f140b0c7d74474f53696d9000 # v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@94ab11c4e8a0292eaf4d3e5b44313865b0473544 # v3
        
      - name: Build image for scanning
        uses: docker/build-push-action@2568b8024053d353f34a2ca2d4de679415494351 # v5
        with:
          context: .
          file: ./apps/${{ matrix.service }}/Dockerfile
          push: false
          tags: ${{ matrix.service }}:scan
          cache-from: type=gha
          load: true
          
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@77137e9
        with:
          image-ref: '${{ matrix.service }}:scan'
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@b6110717a335152231a71b8447af51af11020a8f # v3
        if: always()
        with:
          sarif_file: 'trivy-${{ matrix.service }}.sarif'
          category: 'trivy-${{ matrix.service }}'
          
      - name: Run Grype vulnerability scanner
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
          grype ${{ matrix.service }}:scan -o json > grype-${{ matrix.service }}.json
          
      - name: Upload Grype results
        uses: actions/upload-artifact@0b7f8f6 # v4
        with:
          name: grype-${{ matrix.service }}
          path: grype-${{ matrix.service }}.json
          retention-days: 30

  # Infrastructure security scanning
  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@c9ef52556095b32f140b0c7d74474f53696d9000 # v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@fea496d8026727ca4633b69d3d8d2d83198a7053 # v3
        with:
          terraform_version: '1.6.0'
          
      - name: Terraform security scan with Checkov
        uses: bridgecrewio/checkov-action@b92aaaf90225837053f939c126e97339242dc08a # master
        with:
          directory: infra/terraform/aws
          framework: terraform
          output_format: sarif
          output_file_path: checkov.sarif
          
      - name: Upload Checkov scan results
        uses: github/codeql-action/upload-sarif@b6110717a335152231a71b8447af51af11020a8f # v3
        if: always()
        with:
          sarif_file: checkov.sarif
          category: 'checkov-terraform'
          
      - name: Helm security scan with Kubesec
        run: |
          wget https://github.com/controlplaneio/kubesec/releases/latest/download/kubesec_linux_amd64.tar.gz
          tar -xzf kubesec_linux_amd64.tar.gz
          
          # Generate Helm templates and scan
          helm template intelgraph deploy/helm/intelgraph \
            --values deploy/helm/intelgraph/values.yaml > helm-output.yaml
          ./kubesec scan helm-output.yaml > kubesec-results.json
          
      - name: Upload Kubesec results
        uses: actions/upload-artifact@0b7f8f6 # v4
        with:
          name: kubesec-results
          path: kubesec-results.json
          retention-days: 30

  # OWASP ZAP baseline scan
  zap-baseline:
    name: OWASP ZAP Baseline Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@c9ef52556095b32f140b0c7d74474f53696d9000 # v4
        
      - name: ZAP baseline scan
        uses: zaproxy/action-baseline@bf6310e89f3a7513423e01893a33c184df27b38d # v0.12.0
        with:
          target: 'https://staging.intelgraph.example.com'
          rules_file_name: './deploy/zap/baseline.conf'
          cmd_options: '-a -j -T 60'
          
      - name: Upload ZAP results
        uses: actions/upload-artifact@0b7f8f6 # v4
        if: always()
        with:
          name: zap-baseline-results
          path: report_html.html
          retention-days: 30

  # Secrets scanning
  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@c9ef52556095b32f140b0c7d74474f53696d9000 # v4
        with:
          fetch-depth: 0
          
      - name: Install TruffleHog
        run: |
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
          
      - name: Run TruffleHog secrets scan
        run: |
          trufflehog git file://. --json --no-update > trufflehog-results.json
          
      - name: Install GitLeaks
        run: |
          wget https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks_linux_x64.tar.gz
          tar -xzf gitleaks_linux_x64.tar.gz
          chmod +x gitleaks
          sudo mv gitleaks /usr/local/bin/
          
      - name: Run GitLeaks scan
        run: |
          gitleaks detect --source . --report-format json --report-path gitleaks-results.json
          
      - name: Upload secrets scan results
        uses: actions/upload-artifact@0b7f8f6 # v4
        with:
          name: secrets-scan-results
          path: |
            trufflehog-results.json
            gitleaks-results.json
          retention-days: 30
          
      - name: Check for high-risk secrets
        run: |
          if [ -s gitleaks-results.json ]; then
            echo "🚨 Potential secrets detected!"
            cat gitleaks-results.json
            exit 1
          fi

  # License compliance scanning
  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@c9ef52556095b32f140b0c7d74474f53696d9000 # v4
        
      - name: Setup Node.js
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --workspaces
        
      - name: Install license checker
        run: npm install -g license-checker
        
      - name: Check Node.js licenses
        run: |
          license-checker --onlyAllow "MIT;Apache-2.0;BSD-3-Clause;BSD-2-Clause;ISC;0BSD" \
            --excludePrivatePackages --json > node-licenses.json
            
      - name: Setup Python
        uses: actions/setup-python@824a62378795d7a63864050674956c050c8c0868 # v4
        with:
          python-version: '3.11'
          
      - name: Install pip-licenses
        run: pip install pip-licenses
        
      - name: Check Python licenses
        run: |
          find . -name "requirements*.txt" -exec pip install -r {} \;
          pip-licenses --format=json --output-file=python-licenses.json
          
      - name: Upload license scan results
        uses: actions/upload-artifact@0b7f8f6 # v4
        with:
          name: license-scan-results
          path: |
            node-licenses.json
            python-licenses.json
          retention-days: 30

  # Security summary report
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [codeql, dependency-scan, container-scan, infrastructure-scan, secrets-scan, license-scan]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@0b7f8f6 # v4
        
      - name: Generate security summary
        run: |
          echo "# 🔒 Security Scan Summary" > security-summary.md
          echo "Date: $(date)" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "## 📊 Scan Results" >> security-summary.md
          echo "| Scan Type | Status | Details |" >> security-summary.md
          echo "|-----------|--------|---------|" >> security-summary.md
          echo "| CodeQL | ${{ needs.codeql.result }} | Static code analysis |" >> security-summary.md
          echo "| Dependencies | ${{ needs.dependency-scan.result }} | Vulnerability scan |" >> security-summary.md
          echo "| Containers | ${{ needs.container-scan.result }} | Image security scan |" >> security-summary.md
          echo "| Infrastructure | ${{ needs.infrastructure-scan.result }} | IaC security scan |" >> security-summary.md
          echo "| Secrets | ${{ needs.secrets-scan.result }} | Secrets detection |" >> security-summary.md
          echo "| Licenses | ${{ needs.license-scan.result }} | License compliance |" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "## 🛡️ Security Recommendations" >> security-summary.md
          echo "- Review and address any high/critical vulnerabilities" >> security-summary.md
          echo "- Ensure all dependencies are up to date" >> security-summary.md
          echo "- Verify container base images are patched" >> security-summary.md
          echo "- Check infrastructure configurations follow best practices" >> security-summary.md
          echo "- Confirm no secrets are exposed in code" >> security-summary.md
          echo "- Validate all licenses are compliant" >> security-summary.md
          
      - name: Upload security summary
        uses: actions/upload-artifact@0b7f8f6 # v4
        with:
          name: security-summary
          path: security-summary.md
          retention-days: 90
