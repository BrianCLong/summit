# IntelGraph AI/ML Docker Image
# Multi-stage build for optimized AI dependencies

# Stage 1: Base Python environment with system dependencies
FROM nvidia/cuda:13.0.0-devel-ubuntu22.04 as ai-base

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV CUDA_VISIBLE_DEVICES=0

# Install system dependencies
RUN apt-get update && apt-get install -y \
    python3 \
    python3-pip \
    python3-dev \
    python3-venv \
    # OCR dependencies
    tesseract-ocr \
    tesseract-ocr-eng \
    tesseract-ocr-deu \
    tesseract-ocr-fra \
    tesseract-ocr-spa \
    tesseract-ocr-chi-sim \
    libtesseract-dev \
    libleptonica-dev \
    # Audio/Video processing
    ffmpeg \
    libsm6 \
    libxext6 \
    libfontconfig1 \
    libxrender1 \
    libgl1-mesa-glx \
    libglib2.0-0 \
    # Audio processing
    libsndfile1 \
    portaudio19-dev \
    # Build tools
    build-essential \
    cmake \
    pkg-config \
    # Utilities
    wget \
    curl \
    git \
    unzip \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN useradd -m -u 1000 aiuser && \
    mkdir -p /app && \
    chown -R aiuser:aiuser /app

USER aiuser
WORKDIR /app

# Stage 2: Python dependencies
FROM ai-base as python-deps

# Create virtual environment
RUN python3 -m venv /app/venv
ENV PATH="/app/venv/bin:$PATH"

# Upgrade pip and install wheel
RUN pip install --upgrade pip setuptools wheel

# Copy requirements file
COPY --chown=aiuser:aiuser server/requirements.txt ./

# Install PyTorch with CUDA support
RUN pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118

# Install other Python dependencies
RUN pip install -r requirements.txt

# Stage 3: Download AI models
FROM python-deps as model-downloader

ENV PATH="/app/venv/bin:$PATH"

# Create models directory
RUN mkdir -p /app/models

# Download spaCy models
RUN python -m spacy download en_core_web_lg && \
    python -m spacy download en_core_web_sm && \
    python -m spacy download de_core_news_lg && \
    python -m spacy download fr_core_news_lg && \
    python -m spacy download es_core_news_lg

# Download NLTK data
RUN python -c "import nltk; nltk.download('punkt', download_dir='/app/models/nltk'); nltk.download('stopwords', download_dir='/app/models/nltk'); nltk.download('wordnet', download_dir='/app/models/nltk'); nltk.download('vader_lexicon', download_dir='/app/models/nltk')"

# Download Whisper models
RUN python -c "import whisper; whisper.load_model('tiny'); whisper.load_model('base'); whisper.load_model('small')"

# Download Sentence Transformer models
RUN python -c "from sentence_transformers import SentenceTransformer; SentenceTransformer('all-MiniLM-L6-v2'); SentenceTransformer('all-mpnet-base-v2')"

# Download YOLO models
RUN python -c "from ultralytics import YOLO; YOLO('yolov8n.pt'); YOLO('yolov8s.pt')"

# Stage 4: Final runtime image
FROM ai-base as runtime

# Copy virtual environment and models from previous stages
COPY --from=model-downloader --chown=aiuser:aiuser /app/venv /app/venv
COPY --from=model-downloader --chown=aiuser:aiuser /app/models /app/models
COPY --from=model-downloader --chown=aiuser:aiuser /home/aiuser/.cache /home/aiuser/.cache

# Set up environment
ENV PATH="/app/venv/bin:$PATH"
ENV NLTK_DATA="/app/models/nltk"

# Copy application code
COPY --chown=aiuser:aiuser server/src/ai ./src/ai
COPY --chown=aiuser:aiuser server/package.json ./
COPY --chown=aiuser:aiuser server/requirements.txt ./

# Create necessary directories
RUN mkdir -p /app/temp /app/logs /app/uploads

# Health check script
RUN echo '#!/bin/bash\n\
python -c "import torch, cv2, spacy, transformers, whisper, ultralytics; print(\"AI dependencies OK\")" && \
python -c "nlp = spacy.load(\"en_core_web_sm\"); print(\"spaCy models OK\")" && \
echo "Health check passed"' > /app/healthcheck.sh && \
chmod +x /app/healthcheck.sh

# Expose port for AI service
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=60s --retries=3 \
    CMD /app/healthcheck.sh

# Default command
CMD ["python", "-c", "print('IntelGraph AI container ready. Use docker exec to run AI scripts.')"]