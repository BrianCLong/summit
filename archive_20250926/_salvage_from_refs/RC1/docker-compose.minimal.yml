version: '3.8'

services:
  # Core database services
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: intelgraph
      POSTGRES_USER: intelgraph
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Initialize with extensions
      - ./server/db/seeds/postgres/00_enable_extensions.sql:/docker-entrypoint-initdb.d/00_enable_extensions.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U intelgraph -d intelgraph"]
      interval: 10s
      timeout: 5s
      retries: 30

  neo4j:
    image: neo4j:5-community
    container_name: neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
    environment:
      NEO4J_AUTH: neo4j/password
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "password", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 30s

  redis:
    image: redis:6.2-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 30

  # Run migrations directly via script
  migrations:
    image: node:18-alpine
    container_name: migrations
    depends_on:
      neo4j:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=password
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=intelgraph
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=intelgraph
      - POSTGRES_URL=postgres://intelgraph:password@postgres:5432/intelgraph
    volumes:
      - ./server:/app
    working_dir: /app
    command: ["sh", "-c", "npm install --production && node scripts/db_migrate.cjs"]

volumes:
  neo4j_data:
  postgres_data:
  redis_data: