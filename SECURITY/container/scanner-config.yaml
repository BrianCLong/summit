# Container Security Scanning Configuration
# Trivy, Snyk, and custom vulnerability scanning setup

---
# Trivy Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: trivy-config
  namespace: intelgraph-security
data:
  trivy.yaml: |
    # Trivy configuration for container scanning
    cache:
      dir: /tmp/trivy-cache
      ttl: 72h
    
    db:
      skip-update: false
      
    vulnerability:
      type: "os,library"
      ignore-unfixed: false
      
    secret:
      config: /etc/trivy/secret.yaml
      
    severity: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
    
    output: table
    format: json
    
    exit-code: 1  # Exit with error if vulnerabilities found
    
    ignore-policy: |
      # Ignore specific CVEs that are false positives or accepted risks
      # CVE-2023-12345  # Example: Library XYZ false positive
      
  secret.yaml: |
    # Secret scanning rules
    rules:
      - id: aws-access-key
        category: secret
        title: AWS Access Key
        regex: 'AKIA[0-9A-Z]{16}'
        keywords: ["AKIA"]
        
      - id: private-key
        category: secret
        title: Private Key
        regex: '-----BEGIN [A-Z ]+ PRIVATE KEY-----'
        keywords: ["BEGIN", "PRIVATE KEY"]
        
      - id: api-key
        category: secret
        title: Generic API Key
        regex: '[Aa]pi[_-]?[Kk]ey["\s]*[:=]["\s]*[0-9a-zA-Z]{16,}'
        keywords: ["api", "key"]

---
# CronJob for scheduled vulnerability scanning
apiVersion: batch/v1
kind: CronJob
metadata:
  name: container-vulnerability-scan
  namespace: intelgraph-security
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: scanner-service-account
          restartPolicy: OnFailure
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            fsGroup: 1000
          containers:
          - name: trivy-scanner
            image: aquasec/trivy:latest
            command:
            - /bin/sh
            - -c
            args:
            - |
              # Update vulnerability database
              trivy image --download-db-only
              
              # Scan all IntelGraph images
              for image in $(kubectl get pods -n intelgraph -o jsonpath='{.items[*].spec.containers[*].image}' | tr ' ' '\n' | sort -u); do
                echo "Scanning image: $image"
                trivy image --config /etc/trivy/trivy.yaml --format json --output /tmp/scan-results-$(echo $image | tr '/' '-' | tr ':' '-').json $image
              done
              
              # Upload results to security dashboard
              curl -X POST "${SECURITY_DASHBOARD_URL}/api/v1/scan-results" \
                -H "Authorization: Bearer ${API_TOKEN}" \
                -H "Content-Type: application/json" \
                -d @/tmp/scan-results-*.json
                
            env:
            - name: SECURITY_DASHBOARD_URL
              valueFrom:
                secretKeyRef:
                  name: scanner-secrets
                  key: dashboard-url
            - name: API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: scanner-secrets
                  key: api-token
            volumeMounts:
            - name: trivy-config
              mountPath: /etc/trivy
            - name: scan-results
              mountPath: /tmp
            resources:
              limits:
                cpu: 500m
                memory: 1Gi
              requests:
                cpu: 100m
                memory: 256Mi
          volumes:
          - name: trivy-config
            configMap:
              name: trivy-config
          - name: scan-results
            emptyDir:
              sizeLimit: 1Gi

---
# Service Account for scanner
apiVersion: v1
kind: ServiceAccount
metadata:
  name: scanner-service-account
  namespace: intelgraph-security
automountServiceAccountToken: true

---
# RBAC for scanner service account
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: scanner-role
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: scanner-rolebinding
subjects:
- kind: ServiceAccount
  name: scanner-service-account
  namespace: intelgraph-security
roleRef:
  kind: ClusterRole
  name: scanner-role
  apiGroup: rbac.authorization.k8s.io

---
# Snyk Integration ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: snyk-config
  namespace: intelgraph-security
data:
  snyk.json: |
    {
      "language-settings": {
        "javascript": {
          "includeDevDeps": false
        }
      },
      "exclude": {
        "code": [
          "test/**",
          "tests/**",
          "**/*.test.js",
          "**/*.spec.js"
        ]
      },
      "severity-threshold": "medium",
      "fail-on": "all"
    }

---
# Custom Security Scanner Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: intelgraph-security-scanner
  namespace: intelgraph-security
  labels:
    app: security-scanner
spec:
  replicas: 1
  selector:
    matchLabels:
      app: security-scanner
  template:
    metadata:
      labels:
        app: security-scanner
    spec:
      serviceAccountName: scanner-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: scanner
        image: intelgraph/security-scanner:latest
        ports:
        - containerPort: 8080
        env:
        - name: SCANNER_CONFIG_PATH
          value: "/etc/scanner/config.yaml"
        - name: TRIVY_CONFIG_PATH
          value: "/etc/trivy/trivy.yaml"
        - name: SNYK_CONFIG_PATH
          value: "/etc/snyk/snyk.json"
        volumeMounts:
        - name: scanner-config
          mountPath: /etc/scanner
        - name: trivy-config
          mountPath: /etc/trivy
        - name: snyk-config
          mountPath: /etc/snyk
        - name: scan-cache
          mountPath: /tmp/scan-cache
        resources:
          limits:
            cpu: 1000m
            memory: 2Gi
          requests:
            cpu: 200m
            memory: 512Mi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: scanner-config
        configMap:
          name: scanner-config
      - name: trivy-config
        configMap:
          name: trivy-config
      - name: snyk-config
        configMap:
          name: snyk-config
      - name: scan-cache
        emptyDir:
          sizeLimit: 2Gi

---
# Scanner Service
apiVersion: v1
kind: Service
metadata:
  name: security-scanner-service
  namespace: intelgraph-security
spec:
  selector:
    app: security-scanner
  ports:
  - port: 80
    targetPort: 8080
  type: ClusterIP

---
# Scanner Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: scanner-config
  namespace: intelgraph-security
data:
  config.yaml: |
    scanner:
      name: "IntelGraph Security Scanner"
      version: "1.0.0"
      
    scanning:
      enabled: true
      schedule: "0 */6 * * *"  # Every 6 hours
      timeout: 1800  # 30 minutes
      
      image_scanning:
        enabled: true
        registries:
          - "docker.io"
          - "gcr.io"
          - "quay.io"
        ignore_unfixed: false
        severity_levels: ["CRITICAL", "HIGH", "MEDIUM"]
        
      dependency_scanning:
        enabled: true
        package_managers: ["npm", "pip", "go", "maven"]
        include_dev_deps: false
        
      secret_scanning:
        enabled: true
        rules:
          - aws_keys
          - api_keys
          - private_keys
          - certificates
          - database_credentials
        entropy_threshold: 4.0
        
      compliance_scanning:
        enabled: true
        standards:
          - "CIS"
          - "NIST"
          - "PCI-DSS"
          - "SOX"
        
    reporting:
      enabled: true
      formats: ["json", "sarif", "html"]
      destinations:
        - type: "webhook"
          url: "${SECURITY_WEBHOOK_URL}"
        - type: "s3"
          bucket: "${SCAN_RESULTS_BUCKET}"
        - type: "slack"
          webhook: "${SLACK_WEBHOOK_URL}"
          
    notifications:
      enabled: true
      channels:
        critical:
          - "pagerduty"
          - "slack"
          - "email"
        high:
          - "slack"
          - "email"
        medium:
          - "email"
          
    integrations:
      jira:
        enabled: false
        url: "${JIRA_URL}"
        project: "SEC"
        
      github:
        enabled: true
        repository: "intelgraph/intelgraph"
        create_issues: true
        
      defectdojo:
        enabled: false
        url: "${DEFECTDOJO_URL}"
        engagement_id: 1

---
# SBOM (Software Bill of Materials) Generator
apiVersion: batch/v1
kind: CronJob
metadata:
  name: sbom-generator
  namespace: intelgraph-security
spec:
  schedule: "0 3 * * 0"  # Weekly on Sunday at 3 AM
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: scanner-service-account
          restartPolicy: OnFailure
          containers:
          - name: syft-sbom-generator
            image: anchore/syft:latest
            command:
            - /bin/sh
            - -c
            args:
            - |
              # Generate SBOM for all IntelGraph images
              for image in $(kubectl get pods -n intelgraph -o jsonpath='{.items[*].spec.containers[*].image}' | tr ' ' '\n' | sort -u); do
                echo "Generating SBOM for image: $image"
                syft packages $image -o spdx-json > /tmp/sbom-$(echo $image | tr '/' '-' | tr ':' '-').json
                syft packages $image -o cyclonedx-json > /tmp/sbom-cyclonedx-$(echo $image | tr '/' '-' | tr ':' '-').json
              done
              
              # Upload SBOMs to artifact repository
              curl -X POST "${ARTIFACT_REPO_URL}/api/v1/sboms" \
                -H "Authorization: Bearer ${API_TOKEN}" \
                -H "Content-Type: application/json" \
                -d @/tmp/sbom-*.json
                
            env:
            - name: ARTIFACT_REPO_URL
              valueFrom:
                secretKeyRef:
                  name: scanner-secrets
                  key: artifact-repo-url
            - name: API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: scanner-secrets
                  key: api-token
            resources:
              limits:
                cpu: 500m
                memory: 1Gi
              requests:
                cpu: 100m
                memory: 256Mi

---
# Secrets for scanner integrations
apiVersion: v1
kind: Secret
metadata:
  name: scanner-secrets
  namespace: intelgraph-security
type: Opaque
data:
  dashboard-url: "" # Base64 encoded security dashboard URL
  api-token: "" # Base64 encoded API token
  artifact-repo-url: "" # Base64 encoded artifact repository URL
  slack-webhook-url: "" # Base64 encoded Slack webhook URL
  security-webhook-url: "" # Base64 encoded security webhook URL

---
# Network Policy for security scanner
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: security-scanner-netpol
  namespace: intelgraph-security
spec:
  podSelector:
    matchLabels:
      app: security-scanner
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: intelgraph
    ports:
    - protocol: TCP
      port: 8080
  egress:
  # Allow DNS
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # Allow HTTPS for external API calls
  - to: []
    ports:
    - protocol: TCP
      port: 443
  # Allow connection to Kubernetes API
  - to: []
    ports:
    - protocol: TCP
      port: 6443
  # Allow connection to Docker registries
  - to: []
    ports:
    - protocol: TCP
      port: 5000