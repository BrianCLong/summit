# Docker Compose for IntelGraph Observability Stack
# Includes Jaeger, Prometheus, Grafana, and supporting services for comprehensive monitoring

version: '3.8'

networks:
  observability:
    driver: bridge
  intelgraph:
    external: true

volumes:
  prometheus_data:
  grafana_data:
  jaeger_data:
  elasticsearch_data:

services:
  # Jaeger - Distributed Tracing
  jaeger-collector:
    image: jaegertracing/jaeger-collector:1.50
    container_name: jaeger-collector
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=http://elasticsearch:9200
      - ES_USERNAME=elastic
      - ES_PASSWORD=changeme
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "14268:14268"  # HTTP
      - "14250:14250"  # gRPC
      - "9411:9411"    # Zipkin compatible
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
    networks:
      - observability
      - intelgraph
    depends_on:
      - elasticsearch
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  jaeger-agent:
    image: jaegertracing/jaeger-agent:1.50
    container_name: jaeger-agent
    environment:
      - REPORTER_GRPC_HOST_PORT=jaeger-collector:14250
    ports:
      - "5775:5775/udp"  # compact thrift
      - "6831:6831/udp"  # compact thrift
      - "6832:6832/udp"  # binary thrift
      - "5778:5778"      # HTTP
    networks:
      - observability
    depends_on:
      - jaeger-collector

  jaeger-query:
    image: jaegertracing/jaeger-query:1.50
    container_name: jaeger-query
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=http://elasticsearch:9200
      - ES_USERNAME=elastic
      - ES_PASSWORD=changeme
    ports:
      - "16686:16686"
    networks:
      - observability
    depends_on:
      - elasticsearch

  # Elasticsearch for Jaeger storage
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - observability
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    networks:
      - observability
      - intelgraph
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M

  # Grafana - Visualization
  grafana:
    image: grafana/grafana:10.1.0
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel,redis-datasource
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - observability
    depends_on:
      - prometheus

  # Node Exporter - System Metrics
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: node-exporter
    command:
      - '--path.rootfs=/host'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    volumes:
      - /:/host:ro,rslave
    networks:
      - observability
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 32M

  # cAdvisor - Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: cadvisor
    privileged: true
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - observability
    devices:
      - /dev/kmsg:/dev/kmsg
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 64M

  # Redis Exporter - Redis Metrics
  redis-exporter:
    image: oliver006/redis_exporter:v1.55.0
    container_name: redis-exporter
    environment:
      - REDIS_ADDR=redis://redis:6379
    ports:
      - "9121:9121"
    networks:
      - observability
      - intelgraph
    deploy:
      resources:
        limits:
          memory: 64M
        reservations:
          memory: 16M

  # MongoDB Exporter - MongoDB Metrics
  mongodb-exporter:
    image: percona/mongodb_exporter:0.39.0
    container_name: mongodb-exporter
    environment:
      - MONGODB_URI=mongodb://mongo:27017
    ports:
      - "9216:9216"
    networks:
      - observability
      - intelgraph
    deploy:
      resources:
        limits:
          memory: 64M
        reservations:
          memory: 16M

  # Neo4j Exporter - Neo4j Metrics
  neo4j-exporter:
    image: neo4j/neo4j-prometheus-exporter:5.0
    container_name: neo4j-exporter
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=password
    ports:
      - "9308:9308"
    networks:
      - observability
      - intelgraph
    deploy:
      resources:
        limits:
          memory: 64M
        reservations:
          memory: 16M

  # Kafka Exporter - Kafka Metrics
  kafka-exporter:
    image: danielqsj/kafka-exporter:v1.6.0
    container_name: kafka-exporter
    command:
      - '--kafka.server=kafka:9092'
    ports:
      - "9308:9308"
    networks:
      - observability
      - intelgraph
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 32M

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.87.0
    container_name: otel-collector
    command:
      - '--config=/etc/otel-collector-config.yml'
    volumes:
      - ./monitoring/otel/collector-config.yml:/etc/otel-collector-config.yml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics
      - "8889:8889"   # Prometheus exporter
      - "13133:13133" # Health check
    networks:
      - observability
      - intelgraph
    depends_on:
      - jaeger-collector
      - prometheus
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M

  # Alertmanager - Alert Management
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager:/etc/alertmanager
    networks:
      - observability
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 32M

  # Loki - Log Aggregation
  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    command:
      - '-config.file=/etc/loki/local-config.yaml'
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki:/etc/loki
    networks:
      - observability
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M

  # Promtail - Log Collection
  promtail:
    image: grafana/promtail:2.9.0
    container_name: promtail
    command:
      - '-config.file=/etc/promtail/config.yml'
    volumes:
      - ./monitoring/promtail:/etc/promtail
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - observability
    depends_on:
      - loki

  # Tempo - Distributed Tracing (Alternative to Jaeger)
  tempo:
    image: grafana/tempo:2.2.0
    container_name: tempo
    command:
      - '-config.file=/etc/tempo.yaml'
    volumes:
      - ./monitoring/tempo:/etc/tempo
    ports:
      - "3200:3200"   # Tempo HTTP
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
    networks:
      - observability

  # Vector - Observability Data Pipeline
  vector:
    image: timberio/vector:0.33.0-alpine
    container_name: vector
    volumes:
      - ./monitoring/vector/vector.toml:/etc/vector/vector.toml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - "8686:8686"   # Vector API
    networks:
      - observability
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 64M

  # Blackbox Exporter - Endpoint Monitoring
  blackbox-exporter:
    image: prom/blackbox-exporter:v0.24.0
    container_name: blackbox-exporter
    command:
      - '--config.file=/etc/blackbox_exporter/config.yml'
    volumes:
      - ./monitoring/blackbox:/etc/blackbox_exporter
    ports:
      - "9115:9115"
    networks:
      - observability
      - intelgraph
    deploy:
      resources:
        limits:
          memory: 64M
        reservations:
          memory: 16M

  # Zipkin (Alternative tracing backend)
  zipkin:
    image: openzipkin/zipkin:2.24
    container_name: zipkin
    environment:
      - STORAGE_TYPE=elasticsearch
      - ES_HOSTS=elasticsearch:9200
    ports:
      - "9411:9411"
    networks:
      - observability
    depends_on:
      - elasticsearch
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M

  # Pushgateway - Batch Job Metrics
  pushgateway:
    image: prom/pushgateway:v1.6.2
    container_name: pushgateway
    ports:
      - "9091:9091"
    networks:
      - observability
    deploy:
      resources:
        limits:
          memory: 64M
        reservations:
          memory: 16M

  # Consul - Service Discovery
  consul:
    image: hashicorp/consul:1.16.0
    container_name: consul
    command:
      - 'consul'
      - 'agent'
      - '-dev'
      - '-client=0.0.0.0'
      - '-ui'
    ports:
      - "8500:8500"
    networks:
      - observability
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 32M