version: "3.9"

services:
  # Core Gateway
  api-gateway:
    build: ../../services/api-gateway
    ports: ["4000:4000"]
    environment:
      - NODE_ENV=development
      - POLICY_DRY_RUN=true
      - PROV_LEDGER_URL=http://prov-ledger:4010
      - GRAPH_XAI_URL=http://graph-xai:4011
      - CONDUCTOR_API_URL=http://conductor-api:4020
      - LICENSE_REGISTRY_URL=http://license-registry:4030
      - AGENT_RUNTIME_URL=http://agent-runtime:4012
      - PREDICTIVE_SUITE_URL=http://predictive-suite:4013
    depends_on:
      - prov-ledger
      - graph-xai
      - conductor-api
      - license-registry
      - neo4j
      - postgres
      - redis

  # AI/ML Services
  graph-xai:
    build: ../../services/graph-xai
    ports: ["4011:4011"]
    environment:
      - PYTHONPATH=/app
      - MODEL_CACHE_TTL=3600
    depends_on:
      - redis
      - postgres

  predictive-suite:
    build: ../../services/predictive-suite
    ports: ["4013:4013"]
    environment:
      - PYTHONPATH=/app
      - MODEL_REGISTRY_URL=http://prov-ledger:4010
    depends_on:
      - prov-ledger

  # Data Services
  prov-ledger:
    build: ../../services/prov-ledger
    ports: ["4010:4010"]
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/provenance
    depends_on:
      - postgres

  license-registry:
    build: ../../services/license-registry
    ports: ["4030:4030"]
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/licenses
    depends_on:
      - postgres

  # Orchestration Services
  agent-runtime:
    build: ../../services/agent-runtime
    ports: ["4012:4012"]
    environment:
      - NODE_ENV=development
      - REDIS_URL=redis://redis:6379
      - API_GATEWAY_URL=http://api-gateway:4000
    depends_on:
      - redis
      - api-gateway

  conductor-api:
    build: ../../services/conductor-api
    ports: ["4020:4020"]
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/conductor
    depends_on:
      - postgres

  # Data Processing
  feed-processor:
    build: ../../services/feed-processor
    environment:
      - REDIS_URL=redis://redis:6379
      - FEED_QUEUE_NAME=feed:ingest
      - FEED_BATCH_SIZE=500
      - FEED_WORKER_CONCURRENCY=4
      - FEED_PARALLELISM=8
      - FEED_TRACING_ENABLED=true
      - FEED_LOG_LEVEL=INFO
      - JAEGER_HOST=jaeger
      - JAEGER_PORT=6831
    depends_on:
      - redis
      - jaeger

  sync-broker:
    build: ../../services/sync-broker
    environment:
      - NODE_ENV=development
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis

  # Web Applications
  web:
    build: ../../apps/web
    ports: ["3000:3000"]
    environment:
      - NEXT_PUBLIC_GATEWAY_URL=http://localhost:4000
      - NODE_ENV=development
    depends_on:
      - api-gateway

  offline-kit:
    build: ../../apps/offline-kit
    ports: ["3001:3001"]
    environment:
      - REACT_APP_SYNC_BROKER_URL=http://localhost:4014
      - NODE_ENV=development

  # Infrastructure Services
  neo4j:
    image: neo4j:5.21
    environment:
      - NEO4J_AUTH=neo4j/test
      - NEO4J_PLUGINS=["apoc"]
    ports: ["7474:7474", "7687:7687"]
    volumes:
      - neo4j_data:/data

  postgres:
    image: postgres:16
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports: ["5432:5432"]
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    ports: ["6379:6379"]
    volumes:
      - redis_data:/data

  kafka:
    image: bitnami/kafka:3.6
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    ports: ["9092:9092"]

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    ports: ["9000:9000", "9001:9001"]
    volumes:
      - minio_data:/data

  # Data Lineage
  openlineage:
    image: openlineage/marquez:latest
    ports: ["5000:5000"]
    environment:
      - MARQUEZ_CONFIG=/usr/src/app/marquez.yml
    depends_on:
      - postgres

  # Search
  elasticsearch:
    image: elasticsearch:8.14.3
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ports: ["9200:9200"]
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data

  # Observability
  jaeger:
    image: jaegertracing/all-in-one:1.57
    ports: ["16686:16686", "6831:6831/udp"]

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.99.0
    command: ["--config=/etc/otel-collector-config.yml"]
    volumes:
      - ./otel-collector-config.yml:/etc/otel-collector-config.yml
    ports: ["4317:4317", "4318:4318"]
    depends_on:
      - prometheus

  prometheus:
    image: prom/prometheus:v2.55.0
    ports: ["9090:9090"]
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus

  grafana:
    image: grafana/grafana:11.1.4
    ports: ["3005:3000"]
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana

  loki:
    image: grafana/loki:3.1.1
    ports: ["3100:3100"]
    volumes:
      - loki_data:/loki

volumes:
  neo4j_data:
  postgres_data:
  redis_data:
  minio_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:
  loki_data:

networks:
  default:
    name: intelgraph-platform