apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
  labels:
    name: monitoring
    app.kubernetes.io/name: monitoring
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: intelgraph-monitoring-stack
  namespace: argocd
  labels:
    app.kubernetes.io/name: monitoring
spec:
  project: default
  source:
    repoURL: https://github.com/BrianCLong/summit
    targetRevision: HEAD
    path: charts/monitoring
    helm:
      releaseName: intelgraph-monitoring
      valueFiles:
        - values.yaml
      parameters:
        - name: global.environment
          value: production
        - name: global.domain
          value: intelgraph.ai
        - name: global.clusterName
          value: intelgraph-prod
        - name: prometheus.enabled
          value: 'true'
        - name: grafana.enabled
          value: 'true'
        - name: jaeger.enabled
          value: 'true'
        - name: loki.enabled
          value: 'true'
        - name: promtail.enabled
          value: 'true'
  destination:
    server: https://kubernetes.default.svc
    namespace: monitoring
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
      allowEmpty: false
    syncOptions:
      - CreateNamespace=true
      - PrunePropagationPolicy=foreground
      - PruneLast=true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m
  ignoreDifferences:
    - group: apps
      kind: Deployment
      jsonPointers:
        - /spec/replicas
  revisionHistoryLimit: 10
---
# OpenTelemetry Collector Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector-config
  namespace: monitoring
data:
  config.yaml: |
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
      jaeger:
        protocols:
          grpc:
            endpoint: 0.0.0.0:14250
          thrift_http:
            endpoint: 0.0.0.0:14268
          thrift_compact:
            endpoint: 0.0.0.0:6831
      prometheus:
        config:
          scrape_configs:
            - job_name: 'otel-collector'
              scrape_interval: 15s
              static_configs:
                - targets: ['localhost:8888']

    processors:
      batch:
        timeout: 1s
        send_batch_size: 1024
        send_batch_max_size: 2048
      
      memory_limiter:
        limit_mib: 1000
        spike_limit_mib: 200
        check_interval: 5s
      
      resource:
        attributes:
          - key: service.namespace
            value: intelgraph
          - key: deployment.environment
            value: production
          - key: k8s.cluster.name
            value: intelgraph-prod
            action: upsert

    exporters:
      jaeger:
        endpoint: jaeger-collector.monitoring.svc.cluster.local:14250
        tls:
          insecure: true
      
      prometheus:
        endpoint: "0.0.0.0:8889"
        namespace: intelgraph
        const_labels:
          cluster: intelgraph-prod
      
      loki:
        endpoint: http://loki.monitoring.svc.cluster.local:3100/loki/api/v1/push
        tenant_id: intelgraph
      
      logging:
        loglevel: info

    service:
      pipelines:
        traces:
          receivers: [otlp, jaeger]
          processors: [memory_limiter, resource, batch]
          exporters: [jaeger, logging]
        
        metrics:
          receivers: [otlp, prometheus]
          processors: [memory_limiter, resource, batch]
          exporters: [prometheus, logging]
        
        logs:
          receivers: [otlp]
          processors: [memory_limiter, resource, batch]
          exporters: [loki, logging]
      
      extensions: [health_check, pprof, zpages]
      telemetry:
        logs:
          level: info
        metrics:
          address: 0.0.0.0:8888
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: otel-collector
  namespace: monitoring
  labels:
    app.kubernetes.io/name: otel-collector
    app.kubernetes.io/component: collector
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: otel-collector
  template:
    metadata:
      labels:
        app.kubernetes.io/name: otel-collector
        app.kubernetes.io/component: collector
    spec:
      serviceAccountName: otel-collector
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      containers:
        - name: otel-collector
          image: otel/opentelemetry-collector-contrib:0.89.0
          args:
            - --config=/conf/config.yaml
          volumeMounts:
            - name: config-volume
              mountPath: /conf
          ports:
            - containerPort: 4317 # OTLP gRPC
              name: otlp-grpc
              protocol: TCP
            - containerPort: 4318 # OTLP HTTP
              name: otlp-http
              protocol: TCP
            - containerPort: 14250 # Jaeger gRPC
              name: jaeger-grpc
              protocol: TCP
            - containerPort: 14268 # Jaeger HTTP
              name: jaeger-http
              protocol: TCP
            - containerPort: 6831 # Jaeger Thrift Compact
              name: jaeger-compact
              protocol: UDP
            - containerPort: 8888 # Metrics
              name: metrics
              protocol: TCP
            - containerPort: 8889 # Prometheus
              name: prometheus
              protocol: TCP
          env:
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            - name: GOMEMLIMIT
              value: '800MiB'
          resources:
            requests:
              memory: '512Mi'
              cpu: '250m'
            limits:
              memory: '1Gi'
              cpu: '500m'
          livenessProbe:
            httpGet:
              path: /
              port: 13133
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /
              port: 13133
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
      volumes:
        - name: config-volume
          configMap:
            name: otel-collector-config
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: otel-collector
  namespace: monitoring
  labels:
    app.kubernetes.io/name: otel-collector
---
apiVersion: v1
kind: Service
metadata:
  name: otel-collector
  namespace: monitoring
  labels:
    app.kubernetes.io/name: otel-collector
    app.kubernetes.io/component: collector
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: otel-collector
  ports:
    - name: otlp-grpc
      port: 4317
      targetPort: 4317
      protocol: TCP
    - name: otlp-http
      port: 4318
      targetPort: 4318
      protocol: TCP
    - name: jaeger-grpc
      port: 14250
      targetPort: 14250
      protocol: TCP
    - name: jaeger-http
      port: 14268
      targetPort: 14268
      protocol: TCP
    - name: jaeger-compact
      port: 6831
      targetPort: 6831
      protocol: UDP
    - name: metrics
      port: 8888
      targetPort: 8888
      protocol: TCP
    - name: prometheus
      port: 8889
      targetPort: 8889
      protocol: TCP
---
# ServiceMonitor for Prometheus scraping
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: otel-collector
  namespace: monitoring
  labels:
    app.kubernetes.io/name: otel-collector
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: otel-collector
  endpoints:
    - port: metrics
      interval: 30s
      path: /metrics
    - port: prometheus
      interval: 30s
      path: /metrics
---
# Network Policy for OpenTelemetry Collector
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: otel-collector-netpol
  namespace: monitoring
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: otel-collector
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: default
        - namespaceSelector:
            matchLabels:
              name: maestro
      ports:
        - protocol: TCP
          port: 4317
        - protocol: TCP
          port: 4318
        - protocol: TCP
          port: 14250
        - protocol: TCP
          port: 14268
        - protocol: UDP
          port: 6831
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 8888
        - protocol: TCP
          port: 8889
  egress:
    # DNS
    - to: []
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53
    # Jaeger
    - to:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 14250
    # Loki
    - to:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 3100
