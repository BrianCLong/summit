# IntelGraph v2.5.0 Production Values
# Canary deployment with SLO monitoring

image:
  repository: ghcr.io/brianlong/intelgraph/core
  tag: "v2.5.0"
  pullPolicy: IfNotPresent

replicaCount: 3

strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0

# Argo Rollouts canary strategy (if using Argo)
rollouts:
  strategy:
    canary:
      steps:
        - setWeight: 10
        - pause: { duration: 30m }
        - setWeight: 50
        - pause: { duration: 30m }
        - setWeight: 100

resources:
  requests:
    cpu: "500m"
    memory: "1Gi"
  limits:
    cpu: "2"
    memory: "4Gi"

autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 15
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Service configuration
service:
  type: ClusterIP
  port: 4000
  targetPort: http

# Ingress with SSL termination
ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  hosts:
    - host: api.intelgraph.ai
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: intelgraph-tls
      hosts:
        - api.intelgraph.ai

# Application configuration
config:
  query:
    p95TargetMs: 1500
    timeoutMs: 120000
    maxConcurrent: 100
    budget:
      enabled: true
      caseDefaultCents: 5000
      softWarnRatio: 0.8
      hardStopRatio: 1.0
  nl2cypher:
    safeMode: true
    autoLimit: 200
    dangerousOpsBlocked: true
  provenance:
    verificationEnabled: true
    merkleTreeDepth: 16
    anchorRegistry: "internal"

# OPA Policy configuration
opa:
  enabled: true
  policiesConfigMap: intelgraph-opa-bundle
  replicaCount: 2
  resources:
    requests:
      cpu: "100m"
      memory: "128Mi"
    limits:
      cpu: "500m"
      memory: "512Mi"

# Redis configuration
redis:
  enabled: true
  architecture: standalone
  master:
    resources:
      requests:
        cpu: "100m"
        memory: "128Mi"
      limits:
        cpu: "1"
        memory: "1Gi"
    persistence:
      enabled: true
      size: 8Gi

# Neo4j configuration
neo4j:
  enabled: true
  core:
    numberOfServers: 3
  readReplica:
    numberOfServers: 2
  resources:
    cpu: "2"
    memory: "4Gi"
  neo4jconf:
    dbms.memory.heap.initial_size: "2G"
    dbms.memory.heap.max_size: "4G"
    dbms.memory.pagecache.size: "2G"

# PostgreSQL configuration
postgresql:
  enabled: true
  architecture: replication
  primary:
    resources:
      requests:
        cpu: "500m"
        memory: "1Gi"
      limits:
        cpu: "2"
        memory: "4Gi"
  readReplicas:
    replicaCount: 2

# Monitoring configuration
serviceMonitor:
  enabled: true
  interval: 15s
  scrapeTimeout: 10s
  port: http
  path: /metrics
  labels:
    release: prometheus

metrics:
  enabled: true
  path: /metrics
  port: 9090

# Health checks
livenessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /ready
    port: http
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

# Security context
securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000

podSecurityContext:
  seccompProfile:
    type: RuntimeDefault

# Network policies
networkPolicy:
  enabled: true
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: ingress-nginx
      ports:
      - protocol: TCP
        port: 4000

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 2

# Node affinity for high availability
nodeAffinity:
  preferredDuringSchedulingIgnoredDuringExecution:
  - weight: 100
    preference:
      matchExpressions:
      - key: node-type
        operator: In
        values:
        - compute-optimized

# Tolerations for dedicated nodes
tolerations:
- key: "dedicated"
  operator: "Equal"
  value: "intelgraph"
  effect: "NoSchedule"

# Environment-specific overrides
env:
  NODE_ENV: "production"
  LOG_LEVEL: "info"
  METRICS_ENABLED: "true"
  PROM_METRICS_PORT: "9090"