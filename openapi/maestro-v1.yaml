openapi: 3.0.0
info:
  title: Maestro API
  version: 1.0.0
  description: Complete OpenAPI specification for the Maestro platform.

servers:
  - url: http://localhost:8080
    description: Local Development Server

paths:
  /healthz:
    get:
      summary: Health check endpoint
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    description: Indicates if the service is healthy
  /readyz:
    get:
      summary: Readiness check endpoint
      responses:
        '200':
          description: Service is ready to receive traffic
          content:
            application/json:
              schema:
                type: object
                properties:
                  ready:
                    type: boolean
                    description: Indicates if the service is ready
        '503':
          description: Service is not ready
  /metrics:
    get:
      summary: Prometheus metrics endpoint
      responses:
        '200':
          description: Prometheus metrics in exposition format
          content:
            text/plain:
              schema:
                type: string
  /run:
    post:
      summary: Trigger a Maestro orchestration run
      description: Starts an orchestration run using the specified workflow and inputs.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunRequest'
      responses:
        '202':
          description: Orchestration run accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunAccepted'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'
  /runs:
    get:
      summary: List all Maestro runs
      description: Returns a paginated list of orchestration runs.
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 1, default: 1 }
          description: Page number (1-based)
        - in: query
          name: pageSize
          schema: { type: integer, minimum: 1, maximum: 200, default: 50 }
          description: Page size
        - in: query
          name: status
          schema: { $ref: '#/components/schemas/RunStatus' }
          description: Filter by status
      responses:
        '200':
          description: A paginated list of runs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunList'
          headers:
            X-Request-Id:
              schema: { type: string }
              description: Request trace ID
            X-RateLimit-Limit:
              schema: { type: integer }
              description: The rate limit ceiling for that given request
            X-RateLimit-Remaining:
              schema: { type: integer }
              description: The number of requests left for the time window
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimited'
        '500':
          $ref: '#/components/responses/InternalError'

components:
  schemas:
    RunStatus:
      type: string
      enum: [pending, running, succeeded, failed, cancelled]

    RunRequest:
      type: object
      required: [workflow, inputs]
      properties:
        workflow:
          type: string
          description: Workflow identifier or name
        inputs:
          type: object
          additionalProperties: true
          description: Workflow input parameters
        tenantId:
          type: string
          description: Tenant/context identifier
        priority:
          type: integer
          minimum: 0
          maximum: 10
          default: 5

    RunAccepted:
      type: object
      properties:
        runId:
          type: string
        accepted:
          type: boolean
          default: true

    Run:
      type: object
      properties:
        id:
          type: string
          description: Unique ID of the run
        status:
          $ref: '#/components/schemas/RunStatus'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        workflow:
          type: string
        outputs:
          type: object
          additionalProperties: true

    RunList:
      type: object
      properties:
        items:
          type: array
          items: { $ref: '#/components/schemas/Run' }
        meta:
          $ref: '#/components/schemas/PaginationMeta'

    PaginationMeta:
      type: object
      properties:
        page: { type: integer }
        pageSize: { type: integer }
        totalItems: { type: integer }
        totalPages: { type: integer }

    ErrorResponse:
      type: object
      required: [error]
      properties:
        error:
          type: string
        code:
          type: string
        details:
          type: object
          additionalProperties: true

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
    Forbidden:
      description: Not authorized to access resource
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
    RateLimited:
      description: Too many requests
      headers:
        Retry-After:
          schema: { type: integer }
          description: Seconds until next allowed request
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
    InternalError:
      description: Internal server error
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }

security:
  - BearerAuth: []
# Includes typed schemas, error responses, pagination, and standard headers
