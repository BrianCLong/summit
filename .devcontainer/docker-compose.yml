version: '3.8'

services:
  devcontainer:
    build:
      context: ..
      dockerfile: .devcontainer/Dockerfile
    volumes:
      - ..:/workspace:cached
      - /var/run/docker.sock:/var/run/docker.sock
      - node_modules:/workspace/node_modules
      - ~/.gitconfig:/home/node/.gitconfig:ro
      - ~/.ssh:/home/node/.ssh:ro
    command: sleep infinity
    networks:
      - intelgraph-dev
    environment:
      - NODE_ENV=development
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - NEO4J_HOST=neo4j
    depends_on:
      - postgres
      - redis
      - neo4j

  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: intelgraph
      POSTGRES_PASSWORD: dev_password
      POSTGRES_DB: intelgraph_dev
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../scripts/db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - intelgraph-dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U intelgraph"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - intelgraph-dev
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  neo4j:
    image: neo4j:5.8
    restart: unless-stopped
    environment:
      NEO4J_AUTH: neo4j/dev_password
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_apoc_export_file_enabled: true
      NEO4J_apoc_import_file_enabled: true
      NEO4J_apoc_import_file_use__neo4j__config: true
      NEO4J_ACCEPT_LICENSE_AGREEMENT: yes
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - intelgraph-dev
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "dev_password", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ../ops/observability/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - intelgraph-dev

  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "8080:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: dev_password
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ../ops/observability/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ../ops/observability/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - intelgraph-dev
    depends_on:
      - prometheus

volumes:
  node_modules:
  postgres_data:
  redis_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  prometheus_data:
  grafana_data:

networks:
  intelgraph-dev:
    driver: bridge