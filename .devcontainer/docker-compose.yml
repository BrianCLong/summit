version: '3.8'

services:
  devcontainer:
    build:
      context: ..
      dockerfile: .devcontainer/Dockerfile
    volumes:
      - ..:/workspace:cached
      - /var/run/docker.sock:/var/run/docker.sock
      - node_modules:/workspace/node_modules
      - server_node_modules:/workspace/server/node_modules
      - client_node_modules:/workspace/client/node_modules
      - ~/.gitconfig:/home/node/.gitconfig:ro
      - ~/.ssh:/home/node/.ssh:ro
    command: sleep infinity
    networks:
      - intelgraph-dev
    environment:
      NODE_ENV: development
      POSTGRES_HOST: postgres
      REDIS_HOST: redis
      NEO4J_HOST: neo4j
      OPA_URL: http://opa:8181
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4318
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      opa:
        condition: service_started
      otel-collector:
        condition: service_started
      api:
        condition: service_started
      ui:
        condition: service_started
      worker:
        condition: service_started
      mock-notify:
        condition: service_started

  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: intelgraph
      POSTGRES_PASSWORD: dev_password
      POSTGRES_DB: intelgraph_dev
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../server/db/migrations/postgres:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    networks:
      - intelgraph-dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U intelgraph -d intelgraph_dev"]
      interval: 10s
      timeout: 5s
      retries: 12

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - intelgraph-dev
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 12

  neo4j:
    image: neo4j:5.8
    restart: unless-stopped
    environment:
      NEO4J_AUTH: neo4j/dev_password
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_apoc_export_file_enabled: "true"
      NEO4J_apoc_import_file_enabled: "true"
      NEO4J_apoc_import_file_use__neo4j__config: "true"
      NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - intelgraph-dev
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "dev_password", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 10

  opa:
    image: openpolicyagent/opa:0.67.1-rootless
    command:
      - "run"
      - "--server"
      - "--addr=0.0.0.0:8181"
      - "--diagnostic-addr=0.0.0.0:8182"
      - "--config-file=/policies/config.yaml"
      - "/policies"
    ports:
      - "8181:8181"
    volumes:
      - ../policy/devkit:/policies:ro
    networks:
      - intelgraph-dev
    healthcheck:
      test: ["CMD", "opa", "health", "--url", "http://localhost:8181"]
      interval: 10s
      timeout: 5s
      retries: 12

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.102.0
    command:
      - "--config=/etc/otelcol/config.yaml"
    volumes:
      - ../observability/otel/local-config.yaml:/etc/otelcol/config.yaml:ro
    ports:
      - "4317:4317"
      - "4318:4318"
      - "8889:8889"
      - "13133:13133"
    depends_on:
      - prometheus
    networks:
      - intelgraph-dev
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:13133/health/status"]
      interval: 10s
      timeout: 5s
      retries: 12
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=8889"
      - "prometheus.io/path=/metrics"

  api:
    build:
      context: ../server
      dockerfile: Dockerfile.dev
    environment:
      NODE_ENV: development
      PORT: 4000
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USERNAME: neo4j
      NEO4J_PASSWORD: dev_password
      POSTGRES_HOST: postgres
      POSTGRES_USER: intelgraph
      POSTGRES_PASSWORD: dev_password
      POSTGRES_DB: intelgraph_dev
      REDIS_HOST: redis
      REDIS_PORT: 6379
      OPA_BASE_URL: http://opa:8181
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4318
      MOCK_NOTIFICATION_URL: http://mock-notify:7080/events
    volumes:
      - ../server:/app
      - server_node_modules:/app/node_modules
    ports:
      - "4000:4000"
    networks:
      - intelgraph-dev
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      opa:
        condition: service_started
      otel-collector:
        condition: service_started
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=4000"
      - "prometheus.io/path=/metrics"

  ui:
    build:
      context: ../client
      dockerfile: Dockerfile.dev
    environment:
      VITE_PORT: 3000
      VITE_HOST: 0.0.0.0
      VITE_API_URL: http://api:4000/graphql
    volumes:
      - ../client:/app
      - client_node_modules:/app/node_modules
    ports:
      - "3000:3000"
    networks:
      - intelgraph-dev
    depends_on:
      api:
        condition: service_started

  worker:
    build:
      context: ../local-dev/worker
    environment:
      NODE_ENV: development
      REDIS_URL: redis://redis:6379
      API_HEALTH_URL: http://api:4000/health
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4318
      PORT: 7000
    volumes:
      - ../local-dev/worker:/app
      - worker_node_modules:/app/node_modules
    ports:
      - "7000:7000"
    networks:
      - intelgraph-dev
    depends_on:
      redis:
        condition: service_healthy
      api:
        condition: service_started
      otel-collector:
        condition: service_started
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=7000"
      - "prometheus.io/path=/metrics"

  mock-notify:
    build:
      context: ../local-dev/mock-services/notifications
    environment:
      PORT: 7080
    volumes:
      - ../local-dev/mock-services/notifications:/app
      - mock_node_modules:/app/node_modules
    ports:
      - "7080:7080"
    networks:
      - intelgraph-dev

  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ../ops/observability/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    networks:
      - intelgraph-dev

  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "8080:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: dev_password
      GF_USERS_ALLOW_SIGN_UP: 'false'
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ../ops/observability/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ../ops/observability/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ../dashboard/grafana:/var/lib/grafana/dashboards/devkit:ro
    networks:
      - intelgraph-dev
    depends_on:
      - prometheus

volumes:
  node_modules:
  server_node_modules:
  client_node_modules:
  worker_node_modules:
  mock_node_modules:
  postgres_data:
  redis_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  prometheus_data:
  grafana_data:

networks:
  intelgraph-dev:
    driver: bridge
