// Generated by Consent-Constraint Compiler. Do not edit manually.
export const POLICY = {
  "profile.read": {
    "analytics": "legitimate_interest",
    "support_diagnostics": "contract"
  },
  "payments.process": {
    "settlement": "contract",
    "fraud_detection": "legal_obligation"
  },
  "messaging.send": {
    "transactional": "contract",
    "security_alert": "vital_interest"
  }
};

const telemetry = [];

export class ConsentViolation extends Error {
  constructor(scope, purpose) {
    super(`Purpose "${purpose}" is not permitted within scope "${scope}"`);
    this.name = 'ConsentViolation';
    this.scope = scope;
    this.purpose = purpose;
  }
}

export function withConsent(scope, purpose) {
  const allowed = POLICY[scope];
  if (!allowed || !allowed[purpose]) {
    throw new ConsentViolation(scope, purpose);
  }
  const lawfulBasis = allowed[purpose];
  return (action, ...args) => {
    telemetry.push({ scope, purpose, lawfulBasis });
    return action(...args);
  };
}

export function getTelemetry() {
  return [...telemetry];
}

export function resetTelemetry() {
  telemetry.length = 0;
}
