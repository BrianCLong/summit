name: ${COMPOSE_PROJECT_NAME}

networks:
  core:
    name: ${NETWORK_NAME}

volumes:
  neo4j2_data: {}
  neo4j2_logs: {}
  grafana2_data: {}

services:
  neo4j:
    image: neo4j:${NEO4J_VERSION}-community
    restart: unless-stopped
    environment:
      - NEO4J_AUTH=${NEO4J_AUTH}
      - NEO4J_dbms_memory_heap_initial__size=${NEO4J_dbms_memory_heap_initial__size}
      - NEO4J_dbms_memory_heap_max__size=${NEO4J_dbms_memory_heap_max__size}
      - NEO4J_dbms_memory_pagecache_size=${NEO4J_dbms_memory_pagecache_size}
      - NEO4J_dbms_connector_bolt_listen__address=:7687
      - NEO4J_dbms_connector_http_listen__address=:7474
      - NEO4JLABS_PLUGINS=["apoc"]
    ports:
      - "7475:7474"    # note: different host port than your single container
      - "7688:7687"
    networks: [core]
    volumes:
      - neo4j2_data:/data
      - neo4j2_logs:/logs
    healthcheck:
      test: ["CMD", "cypher-shell", "-a", "bolt://localhost:7687",
             "-u", "neo4j", "-p", "${NEO4J_PASSWORD}", "RETURN 1"]
      interval: 10s
      timeout: 5s
      retries: 12

  redis:
    image: redis:${REDIS_VERSION}
    command: ["redis-server","--appendonly","yes"]
    ports: ["6380:6379"]    # avoid 6379 clash
    networks: [core]

  api:
    build:
      context: ${API_CONTEXT}
      dockerfile: ${API_DOCKERFILE}
    image: summit/api:${INTELGRAPH_TAG}
    depends_on:
      neo4j: {condition: service_healthy}
      redis: {condition: service_started}
    environment:
      - PORT=${API_PORT}
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - REDIS_URL=redis://redis:6379
      - AWS_REGION=${AWS_REGION}
      - S3_BUCKET=${S3_BUCKET}
      - SQS_QUEUE=${SQS_QUEUE}
    ports:
      - "${API_PORT}:${API_PORT}"
    networks: [core]

  web:
    build:
      context: ${WEB_CONTEXT}
      dockerfile: ${WEB_DOCKERFILE}
      args:
        - VITE_API_URL=http://localhost:${API_PORT}
    image: summit/web:${WEB_TAG}
    depends_on:
      api: {condition: service_started}
    environment:
      - PORT=${WEB_PORT}
    ports:
      - "15173:8080"
    networks: [core]

  grafana:
    image: grafana/grafana:${GRAFANA_VERSION}
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    ports: ["${GRAFANA_PORT}:3000"]
    networks: [core]
    volumes:
      - grafana2_data:/var/lib/grafana

  prom:
    image: prom/prometheus:${PROM_VERSION}
    command: ["--config.file=/etc/prometheus/prometheus.yml"]
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports: ["${PROM_PORT}:9090"]
    networks: [core]

  loki:
    image: grafana/loki:${LOKI_VERSION}
    command: ["-config.file=/etc/loki/local-config.yaml"]
    ports: ["${LOKI_PORT}:3100"]
    networks: [core]
    volumes:
      - ./loki-local-config.yaml:/etc/loki/local-config.yaml:ro

  awscreds:
    image: alpine:3.20
    command: ["sleep", "infinity"]
    profiles: ["aws"]
    environment:
      - AWS_REGION=${AWS_REGION}
    volumes:
      - ~/.aws:/root/.aws:ro
    networks: [core]

  blackbox:
    image: prom/blackbox-exporter:v0.25.0
    command: ["--config.file=/etc/blackbox/blackbox.yml"]
    networks: [core]
    ports: ["9115:9115"]
    volumes:
      - ./blackbox.yml:/etc/blackbox/blackbox.yml:ro

  alertmanager:
    image: prom/alertmanager:v0.27.0
    networks: [core]
    ports: ["9093:9093"]
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro