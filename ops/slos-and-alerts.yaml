# IntelGraph GA Cutover - SLOs and Alert Configuration
# Sprint 26: Enterprise-grade SLOs, security, provenance, and operational readiness

apiVersion: v1
kind: ConfigMap
metadata:
  name: intelgraph-ga-slos-alerts
  namespace: monitoring
  labels:
    app: intelgraph
    component: slo-monitoring
    version: v1.0.0-ga
data:
  slos.yaml: |
    # Service Level Objectives for GA Cutover
    slos:
      # P0 Performance & SLO Alignment
      - name: "graphql-read-latency"
        description: "GraphQL read operations p95 ≤ 350ms"
        sli_query: 'histogram_quantile(0.95, rate(graphql_request_duration_seconds_bucket{operation_type="query"}[5m]))'
        objective: 0.35
        unit: "s"
        warning_threshold: 0.45
        critical_threshold: 0.50
        evaluation_window: "5m"
        alert_duration: "10m"

      - name: "graphql-write-latency"
        description: "GraphQL write operations p95 ≤ 700ms"
        sli_query: 'histogram_quantile(0.95, rate(graphql_request_duration_seconds_bucket{operation_type="mutation"}[5m]))'
        objective: 0.70
        unit: "s"
        warning_threshold: 0.85
        critical_threshold: 0.90
        evaluation_window: "5m"
        alert_duration: "10m"

      - name: "graphql-subscription-latency"
        description: "GraphQL subscriptions p95 ≤ 250ms"
        sli_query: 'histogram_quantile(0.95, rate(graphql_subscription_duration_seconds_bucket[5m]))'
        objective: 0.25
        unit: "s"
        warning_threshold: 0.30
        critical_threshold: 0.35
        evaluation_window: "5m"
        alert_duration: "10m"

      - name: "neo4j-read-latency"
        description: "Neo4j 1-hop reads p95 ≤ 300ms"
        sli_query: 'histogram_quantile(0.95, rate(neo4j_query_duration_seconds_bucket{hops="1"}[5m]))'
        objective: 0.30
        unit: "s"
        warning_threshold: 0.40
        critical_threshold: 0.50
        evaluation_window: "5m"
        alert_duration: "15m"

      - name: "neo4j-multi-hop-latency"
        description: "Neo4j 2-3 hop reads p95 ≤ 1200ms"
        sli_query: 'histogram_quantile(0.95, rate(neo4j_query_duration_seconds_bucket{hops=~"2|3"}[5m]))'
        objective: 1.20
        unit: "s"
        warning_threshold: 1.50
        critical_threshold: 1.80
        evaluation_window: "5m"
        alert_duration: "15m"

      # Error Budget SLOs
      - name: "api-error-budget"
        description: "API error rate ≤ 0.1%"
        sli_query: 'rate(graphql_requests_total{status=~"5.."}[5m]) / rate(graphql_requests_total[5m])'
        objective: 0.001
        unit: "ratio"
        warning_threshold: 0.005
        critical_threshold: 0.01
        evaluation_window: "5m"
        alert_duration: "10m"

      - name: "ingest-error-budget"
        description: "Ingest error rate ≤ 0.5%"
        sli_query: 'rate(ingest_requests_total{status=~"error|failed"}[5m]) / rate(ingest_requests_total[5m])'
        objective: 0.005
        unit: "ratio"
        warning_threshold: 0.01
        critical_threshold: 0.02
        evaluation_window: "5m"
        alert_duration: "15m"

      # P1 ER Pipeline SLOs
      - name: "er-queue-lag"
        description: "ER queue lag ≤ 60s"
        sli_query: 'kafka_consumer_lag_seconds{topic="entity-resolution"}'
        objective: 60
        unit: "s"
        warning_threshold: 120
        critical_threshold: 180
        evaluation_window: "5m"
        alert_duration: "10m"

      - name: "er-dlq-rate"
        description: "ER DLQ rate ≤ 0.1%"
        sli_query: 'rate(er_dlq_messages_total[5m]) / rate(er_processed_messages_total[5m])'
        objective: 0.001
        unit: "ratio"
        warning_threshold: 0.003
        critical_threshold: 0.005
        evaluation_window: "5m"
        alert_duration: "10m"

      # P2 Policy & Security SLOs
      - name: "opa-decision-latency"
        description: "OPA policy decisions p95 ≤ 25ms"
        sli_query: 'histogram_quantile(0.95, rate(opa_decision_duration_seconds_bucket[5m]))'
        objective: 0.025
        unit: "s"
        warning_threshold: 0.040
        critical_threshold: 0.060
        evaluation_window: "5m"
        alert_duration: "10m"

      - name: "webauthn-success-rate"
        description: "WebAuthn success rate ≥ 99.5%"
        sli_query: 'rate(webauthn_attempts_total{status="success"}[5m]) / rate(webauthn_attempts_total[5m])'
        objective: 0.995
        unit: "ratio"
        warning_threshold: 0.990
        critical_threshold: 0.980
        evaluation_window: "5m"
        alert_duration: "15m"

      - name: "webauthn-stepup-rate"
        description: "WebAuthn step-up rate ≤ 0.5% of sessions"
        sli_query: 'rate(webauthn_stepup_total[1h]) / rate(user_sessions_total[1h])'
        objective: 0.005
        unit: "ratio"
        warning_threshold: 0.010
        critical_threshold: 0.020
        evaluation_window: "1h"
        alert_duration: "30m"

      # Cache & Performance SLOs
      - name: "redis-latency"
        description: "Redis p99 ≤ 5ms"
        sli_query: 'histogram_quantile(0.99, rate(redis_command_duration_seconds_bucket[5m]))'
        objective: 0.005
        unit: "s"
        warning_threshold: 0.010
        critical_threshold: 0.015
        evaluation_window: "5m"
        alert_duration: "10m"

      - name: "persisted-query-hit-rate"
        description: "Persisted query cache hit rate ≥ 85%"
        sli_query: 'rate(graphql_persisted_query_cache_hits_total[5m]) / rate(graphql_persisted_query_requests_total[5m])'
        objective: 0.85
        unit: "ratio"
        warning_threshold: 0.75
        critical_threshold: 0.70
        evaluation_window: "5m"
        alert_duration: "15m"

      - name: "neo4j-page-cache-hit-rate"
        description: "Neo4j page cache hit rate ≥ 95%"
        sli_query: 'neo4j_page_cache_hit_ratio'
        objective: 0.95
        unit: "ratio"
        warning_threshold: 0.90
        critical_threshold: 0.85
        evaluation_window: "5m"
        alert_duration: "15m"

      - name: "neo4j-replica-lag"
        description: "Neo4j replica lag ≤ 150ms"
        sli_query: 'neo4j_replication_lag_seconds'
        objective: 0.15
        unit: "s"
        warning_threshold: 0.25
        critical_threshold: 0.50
        evaluation_window: "5m"
        alert_duration: "10m"

      # Cost & Budget SLOs
      - name: "cost-budget-adherence"
        description: "Infrastructure cost ≤ $18k/month"
        sli_query: 'sum(aws_billing_estimated_charges_usd{service="total"}) by (month)'
        objective: 18000
        unit: "usd"
        warning_threshold: 14400  # 80%
        critical_threshold: 16200  # 90%
        evaluation_window: "1d"
        alert_duration: "1h"

      - name: "llm-cost-budget"
        description: "LLM costs ≤ $5k/month"
        sli_query: 'sum(openai_api_costs_usd) by (month)'
        objective: 5000
        unit: "usd"
        warning_threshold: 4000   # 80%
        critical_threshold: 4500   # 90%
        evaluation_window: "1d"
        alert_duration: "1h"

  alerts.yaml: |
    # Prometheus Alert Rules for GA Cutover
    groups:
      - name: intelgraph_ga_performance
        rules:
          # GraphQL Performance Alerts
          - alert: GraphQLReadLatencyWarning
            expr: histogram_quantile(0.95, rate(graphql_request_duration_seconds_bucket{operation_type="query"}[5m])) > 0.45
            for: 10m
            labels:
              severity: warning
              service: intelgraph-gateway
              component: graphql
              slo: graphql-read-latency
            annotations:
              summary: "GraphQL read latency exceeding warning threshold"
              description: "GraphQL read p95 latency is {{ $value }}s for 10+ minutes (target: 350ms)"
              runbook_url: "https://docs.intelgraph.dev/runbooks/graphql-performance"

          - alert: GraphQLReadLatencyCritical
            expr: histogram_quantile(0.95, rate(graphql_request_duration_seconds_bucket{operation_type="query"}[5m])) > 0.50
            for: 10m
            labels:
              severity: critical
              service: intelgraph-gateway
              component: graphql
              slo: graphql-read-latency
            annotations:
              summary: "GraphQL read latency critically high"
              description: "GraphQL read p95 latency is {{ $value }}s for 10+ minutes (target: 350ms)"
              runbook_url: "https://docs.intelgraph.dev/runbooks/graphql-performance"

          - alert: GraphQLWriteLatencyWarning
            expr: histogram_quantile(0.95, rate(graphql_request_duration_seconds_bucket{operation_type="mutation"}[5m])) > 0.85
            for: 10m
            labels:
              severity: warning
              service: intelgraph-gateway
              component: graphql
              slo: graphql-write-latency
            annotations:
              summary: "GraphQL write latency exceeding warning threshold"
              description: "GraphQL write p95 latency is {{ $value }}s for 10+ minutes (target: 700ms)"
              runbook_url: "https://docs.intelgraph.dev/runbooks/graphql-performance"

          - alert: GraphQLWriteLatencyCritical
            expr: histogram_quantile(0.95, rate(graphql_request_duration_seconds_bucket{operation_type="mutation"}[5m])) > 0.90
            for: 10m
            labels:
              severity: critical
              service: intelgraph-gateway
              component: graphql
              slo: graphql-write-latency
            annotations:
              summary: "GraphQL write latency critically high"
              description: "GraphQL write p95 latency is {{ $value }}s for 10+ minutes (target: 700ms)"
              runbook_url: "https://docs.intelgraph.dev/runbooks/graphql-performance"

      - name: intelgraph_ga_neo4j
        rules:
          # Neo4j Performance Alerts
          - alert: Neo4jReadLatencyWarning
            expr: histogram_quantile(0.95, rate(neo4j_query_duration_seconds_bucket{hops="1"}[5m])) > 0.40
            for: 15m
            labels:
              severity: warning
              service: neo4j
              component: database
              slo: neo4j-read-latency
            annotations:
              summary: "Neo4j read latency exceeding warning threshold"
              description: "Neo4j 1-hop read p95 latency is {{ $value }}s for 15+ minutes (target: 300ms)"
              runbook_url: "https://docs.intelgraph.dev/runbooks/neo4j-performance"

          - alert: Neo4jReplicaLagHigh
            expr: neo4j_replication_lag_seconds > 0.25
            for: 10m
            labels:
              severity: warning
              service: neo4j
              component: replica
              slo: neo4j-replica-lag
            annotations:
              summary: "Neo4j replica lag high"
              description: "Neo4j replica lag is {{ $value }}s for 10+ minutes (target: 150ms)"
              runbook_url: "https://docs.intelgraph.dev/runbooks/neo4j-replica-lag"

          - alert: Neo4jPageCacheHitRateLow
            expr: neo4j_page_cache_hit_ratio < 0.90
            for: 15m
            labels:
              severity: warning
              service: neo4j
              component: cache
              slo: neo4j-page-cache-hit-rate
            annotations:
              summary: "Neo4j page cache hit rate low"
              description: "Neo4j page cache hit rate is {{ $value | humanizePercentage }} for 15+ minutes (target: 95%)"
              runbook_url: "https://docs.intelgraph.dev/runbooks/neo4j-cache-tuning"

      - name: intelgraph_ga_error_budgets
        rules:
          # Error Budget Alerts
          - alert: APIErrorBudgetBurn
            expr: rate(graphql_requests_total{status=~"5.."}[5m]) / rate(graphql_requests_total[5m]) > 0.005
            for: 10m
            labels:
              severity: warning
              service: intelgraph-gateway
              component: api
              slo: api-error-budget
            annotations:
              summary: "API error budget burning too fast"
              description: "API error rate is {{ $value | humanizePercentage }} for 10+ minutes (budget: 0.1%)"
              runbook_url: "https://docs.intelgraph.dev/runbooks/error-budget-burn"

          - alert: APIErrorBudgetCritical
            expr: rate(graphql_requests_total{status=~"5.."}[5m]) / rate(graphql_requests_total[5m]) > 0.01
            for: 10m
            labels:
              severity: critical
              service: intelgraph-gateway
              component: api
              slo: api-error-budget
            annotations:
              summary: "API error budget critically exceeded"
              description: "API error rate is {{ $value | humanizePercentage }} for 10+ minutes (budget: 0.1%)"
              runbook_url: "https://docs.intelgraph.dev/runbooks/error-budget-burn"

          - alert: IngestErrorBudgetBurn
            expr: rate(ingest_requests_total{status=~"error|failed"}[5m]) / rate(ingest_requests_total[5m]) > 0.01
            for: 15m
            labels:
              severity: warning
              service: intelgraph-ingest
              component: pipeline
              slo: ingest-error-budget
            annotations:
              summary: "Ingest error budget burning"
              description: "Ingest error rate is {{ $value | humanizePercentage }} for 15+ minutes (budget: 0.5%)"
              runbook_url: "https://docs.intelgraph.dev/runbooks/ingest-errors"

      - name: intelgraph_ga_er_pipeline
        rules:
          # ER Pipeline Alerts
          - alert: ERQueueLagHigh
            expr: kafka_consumer_lag_seconds{topic="entity-resolution"} > 120
            for: 10m
            labels:
              severity: warning
              service: intelgraph-er
              component: pipeline
              slo: er-queue-lag
            annotations:
              summary: "Entity resolution queue lag high"
              description: "ER queue lag is {{ $value }}s for 10+ minutes (target: 60s)"
              runbook_url: "https://docs.intelgraph.dev/runbooks/er-backpressure"

          - alert: ERQueueLagCritical
            expr: kafka_consumer_lag_seconds{topic="entity-resolution"} > 180
            for: 10m
            labels:
              severity: critical
              service: intelgraph-er
              component: pipeline
              slo: er-queue-lag
            annotations:
              summary: "Entity resolution queue lag critical"
              description: "ER queue lag is {{ $value }}s for 10+ minutes (target: 60s)"
              runbook_url: "https://docs.intelgraph.dev/runbooks/er-backpressure"

          - alert: ERDLQRateHigh
            expr: rate(er_dlq_messages_total[5m]) / rate(er_processed_messages_total[5m]) > 0.003
            for: 10m
            labels:
              severity: warning
              service: intelgraph-er
              component: dlq
              slo: er-dlq-rate
            annotations:
              summary: "ER DLQ rate high"
              description: "ER DLQ rate is {{ $value | humanizePercentage }} for 10+ minutes (target: 0.1%)"
              runbook_url: "https://docs.intelgraph.dev/runbooks/er-dlq-surge"

      - name: intelgraph_ga_security
        rules:
          # Security & Policy Alerts
          - alert: OPADecisionLatencyHigh
            expr: histogram_quantile(0.95, rate(opa_decision_duration_seconds_bucket[5m])) > 0.040
            for: 10m
            labels:
              severity: warning
              service: intelgraph-gateway
              component: opa
              slo: opa-decision-latency
            annotations:
              summary: "OPA decision latency high"
              description: "OPA decision p95 latency is {{ $value }}s for 10+ minutes (target: 25ms)"
              runbook_url: "https://docs.intelgraph.dev/runbooks/opa-latency"

          - alert: WebAuthnFailureRateHigh
            expr: rate(webauthn_attempts_total{status="failure"}[5m]) / rate(webauthn_attempts_total[5m]) > 0.010
            for: 15m
            labels:
              severity: warning
              service: intelgraph-gateway
              component: webauthn
              slo: webauthn-success-rate
            annotations:
              summary: "WebAuthn failure rate high"
              description: "WebAuthn failure rate is {{ $value | humanizePercentage }} for 15+ minutes (target: <0.5%)"
              runbook_url: "https://docs.intelgraph.dev/runbooks/webauthn-failures"

          - alert: WebAuthnStepUpSpike
            expr: rate(webauthn_stepup_total[1h]) / rate(user_sessions_total[1h]) > 0.010
            for: 30m
            labels:
              severity: warning
              service: intelgraph-gateway
              component: webauthn
              slo: webauthn-stepup-rate
            annotations:
              summary: "WebAuthn step-up rate spike"
              description: "WebAuthn step-up rate is {{ $value | humanizePercentage }} for 30+ minutes (target: <0.5%)"
              runbook_url: "https://docs.intelgraph.dev/runbooks/webauthn-stepup-spike"

      - name: intelgraph_ga_cache
        rules:
          # Cache Performance Alerts
          - alert: RedisLatencyHigh
            expr: histogram_quantile(0.99, rate(redis_command_duration_seconds_bucket[5m])) > 0.010
            for: 10m
            labels:
              severity: warning
              service: redis
              component: cache
              slo: redis-latency
            annotations:
              summary: "Redis latency high"
              description: "Redis p99 latency is {{ $value }}s for 10+ minutes (target: 5ms)"
              runbook_url: "https://docs.intelgraph.dev/runbooks/redis-latency"

          - alert: PersistedQueryCacheHitRateLow
            expr: rate(graphql_persisted_query_cache_hits_total[5m]) / rate(graphql_persisted_query_requests_total[5m]) < 0.75
            for: 15m
            labels:
              severity: warning
              service: intelgraph-gateway
              component: persisted-queries
              slo: persisted-query-hit-rate
            annotations:
              summary: "Persisted query cache hit rate low"
              description: "PQ cache hit rate is {{ $value | humanizePercentage }} for 15+ minutes (target: 85%)"
              runbook_url: "https://docs.intelgraph.dev/runbooks/pq-cache-miss"

      - name: intelgraph_ga_cost
        rules:
          # Cost Budget Alerts
          - alert: InfrastructureCostApproaching
            expr: sum(aws_billing_estimated_charges_usd{service="total"}) by (month) > 14400
            for: 1h
            labels:
              severity: warning
              service: aws
              component: billing
              slo: cost-budget-adherence
            annotations:
              summary: "Infrastructure costs approaching budget limit"
              description: "Monthly infrastructure cost is ${{ $value }} (budget: $18k, warning: $14.4k)"
              runbook_url: "https://docs.intelgraph.dev/runbooks/cost-budget-burn"

          - alert: LLMCostApproaching
            expr: sum(openai_api_costs_usd) by (month) > 4000
            for: 1h
            labels:
              severity: warning
              service: openai
              component: api
              slo: llm-cost-budget
            annotations:
              summary: "LLM costs approaching budget limit"
              description: "Monthly LLM cost is ${{ $value }} (budget: $5k, warning: $4k)"
              runbook_url: "https://docs.intelgraph.dev/runbooks/llm-cost-optimization"

      - name: intelgraph_ga_rollback_triggers
        rules:
          # Rollback Trigger Alerts - these should page immediately
          - alert: GAErrrorBudgetBurnCritical
            expr: |
              (
                rate(graphql_requests_total{status=~"5.."}[15m]) / rate(graphql_requests_total[15m]) > 0.06  # 6%/hour burn rate
              ) or (
                rate(graphql_requests_total{status=~"policy_denied"}[15m]) / rate(graphql_requests_total[15m]) > 0.02  # Unexpected policy denials
              )
            for: 10m
            labels:
              severity: critical
              service: intelgraph-rollback
              component: trigger
              rollback: immediate
            annotations:
              summary: "ROLLBACK TRIGGER: Error budget burn critical"
              description: "Error budget burning > 6%/hour or unexpected policy denials > 2% - consider immediate rollback"
              runbook_url: "https://docs.intelgraph.dev/runbooks/ga-rollback"

          - alert: GALatencySLOBreach
            expr: |
              (
                histogram_quantile(0.95, rate(graphql_request_duration_seconds_bucket{operation_type="query"}[15m])) > 0.50
              ) and (
                histogram_quantile(0.95, rate(graphql_request_duration_seconds_bucket{operation_type="mutation"}[15m])) > 0.90
              )
            for: 15m
            labels:
              severity: critical
              service: intelgraph-rollback
              component: trigger
              rollback: immediate
            annotations:
              summary: "ROLLBACK TRIGGER: Sustained latency SLO breach"
              description: "Both read and write latencies exceeding thresholds for 15+ minutes"
              runbook_url: "https://docs.intelgraph.dev/runbooks/ga-rollback"

          - alert: GAQueueBacklog
            expr: |
              (
                kafka_consumer_lag_seconds{topic="entity-resolution"} > 180
              ) or (
                rate(er_dlq_messages_total[5m]) / rate(er_processed_messages_total[5m]) > 0.005
              )
            for: 10m
            labels:
              severity: critical
              service: intelgraph-rollback
              component: trigger
              rollback: immediate
            annotations:
              summary: "ROLLBACK TRIGGER: ER pipeline backlog critical"
              description: "ER queue lag > 180s or DLQ rate > 0.5% - consider rollback"
              runbook_url: "https://docs.intelgraph.dev/runbooks/ga-rollback"

      - name: intelgraph_ga_provenance
        rules:
          # Provenance & Security Alerts
          - alert: ProvenanceVerificationFailure
            expr: rate(provenance_verification_failures_total[5m]) > 0
            for: 1m
            labels:
              severity: critical
              service: intelgraph-cd
              component: provenance
            annotations:
              summary: "Provenance verification failure detected"
              description: "{{ $value }} provenance verification failures in last 5 minutes"
              runbook_url: "https://docs.intelgraph.dev/runbooks/provenance-failure"

          - alert: ProvenanceEmergencyBypassUsed
            expr: increase(provenance_emergency_bypass_total[1h]) > 0
            for: 1m
            labels:
              severity: warning
              service: intelgraph-cd
              component: provenance
            annotations:
              summary: "Emergency provenance bypass used"
              description: "Emergency bypass used {{ $value }} times in last hour"
              runbook_url: "https://docs.intelgraph.dev/runbooks/provenance-bypass"

          # Feature Flag Safety
          - alert: SafeModeEnabled
            expr: intelgraph_safe_mode_enabled == 1
            for: 5m
            labels:
              severity: warning
              service: intelgraph-gateway
              component: feature-flags
            annotations:
              summary: "Safe mode enabled"
              description: "IntelGraph is running in safe mode - some features may be disabled"
              runbook_url: "https://docs.intelgraph.dev/runbooks/safe-mode"

  dashboards.json: |
    {
      "dashboard": {
        "title": "IntelGraph GA Cutover - SLO Dashboard",
        "tags": ["intelgraph", "slo", "ga-cutover", "sprint-26"],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "30s",
        "panels": [
          {
            "title": "GA Go/No-Go Status",
            "type": "stat",
            "gridPos": {"h": 8, "w": 24, "x": 0, "y": 0},
            "targets": [
              {
                "expr": "avg(up{job=\"intelgraph-gateway\"}) * 100",
                "legendFormat": "API Availability %"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "unit": "percent",
                "thresholds": {
                  "steps": [
                    {"color": "red", "value": 0},
                    {"color": "yellow", "value": 99.0},
                    {"color": "green", "value": 99.9}
                  ]
                }
              }
            }
          },
          {
            "title": "GraphQL Read Latency (p95)",
            "type": "stat",
            "gridPos": {"h": 8, "w": 8, "x": 0, "y": 8},
            "targets": [
              {
                "expr": "histogram_quantile(0.95, rate(graphql_request_duration_seconds_bucket{operation_type=\"query\"}[5m])) * 1000",
                "legendFormat": "Read p95 (ms)"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "unit": "ms",
                "thresholds": {
                  "steps": [
                    {"color": "green", "value": 0},
                    {"color": "yellow", "value": 350},
                    {"color": "red", "value": 450}
                  ]
                }
              }
            }
          },
          {
            "title": "GraphQL Write Latency (p95)",
            "type": "stat",
            "gridPos": {"h": 8, "w": 8, "x": 8, "y": 8},
            "targets": [
              {
                "expr": "histogram_quantile(0.95, rate(graphql_request_duration_seconds_bucket{operation_type=\"mutation\"}[5m])) * 1000",
                "legendFormat": "Write p95 (ms)"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "unit": "ms",
                "thresholds": {
                  "steps": [
                    {"color": "green", "value": 0},
                    {"color": "yellow", "value": 700},
                    {"color": "red", "value": 850}
                  ]
                }
              }
            }
          },
          {
            "title": "Neo4j Read Latency (p95)",
            "type": "stat",
            "gridPos": {"h": 8, "w": 8, "x": 16, "y": 8},
            "targets": [
              {
                "expr": "histogram_quantile(0.95, rate(neo4j_query_duration_seconds_bucket{hops=\"1\"}[5m])) * 1000",
                "legendFormat": "Neo4j p95 (ms)"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "unit": "ms",
                "thresholds": {
                  "steps": [
                    {"color": "green", "value": 0},
                    {"color": "yellow", "value": 300},
                    {"color": "red", "value": 400}
                  ]
                }
              }
            }
          },
          {
            "title": "Error Budgets",
            "type": "timeseries",
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 16},
            "targets": [
              {
                "expr": "rate(graphql_requests_total{status=~\"5..\"}[5m]) / rate(graphql_requests_total[5m]) * 100",
                "legendFormat": "API Error Rate %"
              },
              {
                "expr": "rate(ingest_requests_total{status=~\"error|failed\"}[5m]) / rate(ingest_requests_total[5m]) * 100",
                "legendFormat": "Ingest Error Rate %"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "unit": "percent",
                "max": 1.0
              }
            }
          },
          {
            "title": "Cache Hit Rates",
            "type": "timeseries",
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 16},
            "targets": [
              {
                "expr": "rate(graphql_persisted_query_cache_hits_total[5m]) / rate(graphql_persisted_query_requests_total[5m]) * 100",
                "legendFormat": "PQ Cache Hit %"
              },
              {
                "expr": "neo4j_page_cache_hit_ratio * 100",
                "legendFormat": "Neo4j Page Cache %"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "unit": "percent",
                "min": 0,
                "max": 100
              }
            }
          },
          {
            "title": "ER Pipeline Health",
            "type": "timeseries",
            "gridPos": {"h": 8, "w": 8, "x": 0, "y": 24},
            "targets": [
              {
                "expr": "kafka_consumer_lag_seconds{topic=\"entity-resolution\"}",
                "legendFormat": "Queue Lag (s)"
              },
              {
                "expr": "rate(er_dlq_messages_total[5m]) / rate(er_processed_messages_total[5m]) * 100",
                "legendFormat": "DLQ Rate %"
              }
            ]
          },
          {
            "title": "Security Metrics",
            "type": "timeseries",
            "gridPos": {"h": 8, "w": 8, "x": 8, "y": 24},
            "targets": [
              {
                "expr": "histogram_quantile(0.95, rate(opa_decision_duration_seconds_bucket[5m])) * 1000",
                "legendFormat": "OPA Decision p95 (ms)"
              },
              {
                "expr": "rate(webauthn_stepup_total[1h]) / rate(user_sessions_total[1h]) * 100",
                "legendFormat": "WebAuthn Step-up %"
              }
            ]
          },
          {
            "title": "Cost Tracking",
            "type": "stat",
            "gridPos": {"h": 8, "w": 8, "x": 16, "y": 24},
            "targets": [
              {
                "expr": "sum(aws_billing_estimated_charges_usd{service=\"total\"}) by (month) / 18000 * 100",
                "legendFormat": "Infra Budget %"
              },
              {
                "expr": "sum(openai_api_costs_usd) by (month) / 5000 * 100",
                "legendFormat": "LLM Budget %"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "unit": "percent",
                "thresholds": {
                  "steps": [
                    {"color": "green", "value": 0},
                    {"color": "yellow", "value": 80},
                    {"color": "red", "value": 90}
                  ]
                }
              }
            }
          },
          {
            "title": "Rollback Triggers",
            "type": "table",
            "gridPos": {"h": 8, "w": 24, "x": 0, "y": 32},
            "targets": [
              {
                "expr": "ALERTS{alertname=~\"GA.*\",alertstate=\"firing\"}",
                "legendFormat": "Active Rollback Triggers",
                "format": "table"
              }
            ],
            "transformations": [
              {
                "id": "organize",
                "options": {
                  "excludeByName": {
                    "Time": true,
                    "__name__": true
                  }
                }
              }
            ]
          }
        ]
      }
    }

  notification_channels.yaml: |
    # Alertmanager Routing Configuration
    route:
      group_by: ['alertname', 'severity', 'service']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 4h
      receiver: 'default'
      routes:
        - match:
            component: budget-guard
          receiver: 'sre-and-finops'
          routes:
            - match:
                severity: critical
              receiver: 'oncall-page'
        - match:
            component: canary-budget
          receiver: 'finops-team'
        - match:
            severity: critical
          receiver: 'oncall-page'
          
    receivers:
      - name: 'default'
        slack_configs:
          - api_url: '{{ .SlackWebhookURL }}'
            channel: '#intelgraph-alerts'
            title: 'IntelGraph Alert: {{ .GroupLabels.alertname }}'
            text: '{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'
            
      - name: 'sre-and-finops'
        slack_configs:
          - api_url: '{{ .SlackWebhookURL }}'
            channel: '#sre-alerts'
            title: 'Budget System Alert: {{ .GroupLabels.alertname }}'
          - api_url: '{{ .SlackWebhookURL }}'
            channel: '#finops-alerts'
            title: 'Budget Impact: {{ .GroupLabels.alertname }}'
            
      - name: 'finops-team'
        slack_configs:
          - api_url: '{{ .SlackWebhookURL }}'
            channel: '#finops-alerts'
            title: 'Canary Budget Alert: {{ .GroupLabels.alertname }}'
            
      - name: 'oncall-page'
        pagerduty_configs:
          - service_key: '{{ .PagerDutyServiceKey }}'
            description: 'CRITICAL: {{ .GroupLabels.alertname }} - {{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'