type Entity {
  id: ID!
  kind: String!
  name: String
  owner: OwnerContext
}

type Edge {
  id: ID!
  src: ID!
  dst: ID!
  rel: String!
  risk: Float
}

type OwnerContext { 
  team: String, 
  escalationPath: [String!]! 
}

type Runbook {
  id: ID!
  name: String!
  version: String!
  dag: JSON!
  createdAt: DateTime!
}

enum RunState { QUEUED LEASED RUNNING SUCCEEDED FAILED TIMED_OUT ABORTED }

type Run {
  id: ID!
  runbookId: ID!
  tenantId: String!
  state: RunState!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Query {
  runbooks(limit: Int = 50, after: ID): [Runbook!]!
  run(id: ID!): Run
  entity(id: ID!): Entity
  neighbors(id: ID!, limit: Int = 50): [Entity!]!
  attackPaths(from: ID!, to: ID!, k: Int = 3): [[ID!]!]!
}

input LaunchRunInput { runbookId: ID!, tenantId: String!, params: JSON }
type Mutation {
  launchRun(input: LaunchRunInput!): Run!
  abortRun(id: ID!): Run!
}