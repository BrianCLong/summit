type Runbook {
  id: ID!
  name: String!
  version: String!
  dag: JSON!
  createdAt: DateTime!
}

enum RunState {
  QUEUED
  LEASED
  RUNNING
  SUCCEEDED
  FAILED
  TIMED_OUT
  ABORTED
}

type Run {
  id: ID!
  runbookId: ID!
  tenantId: String!
  state: RunState!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Query {
  runbooks(limit: Int = 50, after: ID): [Runbook!]!
  run(id: ID!): Run
}

input LaunchRunInput {
  runbookId: ID!
  tenantId: String!
  params: JSON
}
type Mutation {
  launchRun(input: LaunchRunInput!): Run!
  abortRun(id: ID!): Run!
}
