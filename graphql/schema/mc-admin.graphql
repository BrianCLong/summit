"""
MC Admin GraphQL API (v0.3.9)
- All mutations are persisted-only (IDs in persisted-manifest.json)
- ABAC/OPA enforced; every mutation emits audit evidence id.
"""

scalar JSON
scalar DateTime

enum Tenant {
  ALL
  TENANT_001
  TENANT_002
  TENANT_003
  TENANT_004
  TENANT_005
}

type AuditInfo {
  evidenceId: ID!
  ts: DateTime!
  actor: ID!
}

type Health {
  ok: Boolean!
  message: String
}

input FeatureFlagsInput {
  attestJWS: Boolean!
  attestPQ: Boolean!
  adaptiveCanary: Boolean!
  budgetV2: Boolean!
  bftEco: Boolean!
  zkProofs: Boolean!
  cse: Boolean!
}

input CanaryWeightsInput {
  p95: Float!
  error: Float!
  cost: Float!
  p99: Float!
}

input SloThresholdsInput {
  composite: Float!
  jwsFail: Float!    # ratio (e.g., 0.001 = 0.1%)
  budgetNoise: Float! # ratio (e.g., 0.05 = 5%)
  graphqlP95: Int!    # ms
  aaLag: Int!         # seconds
}

enum RemediationType {
  rotate_jwks
  force_attest_required
  policy_simulate
  zk_reindex
  bias_glb_blue
  raise_budget_cap
  tighten_hpa
  disable_autotune
}

type MutationResult {
  ok: Boolean!
  audit: AuditInfo!
  warnings: [String!]
}

type EvidenceResult {
  ok: Boolean!
  evidenceId: ID!
  hash: String!
  sizeBytes: Int!
  audit: AuditInfo!
}

type ExportResult {
  ok: Boolean!
  url: String!      # pre-signed URL or artifact path
  sizeBytes: Int!
  audit: AuditInfo!
}

type Query {
  health: Health!
  getFeatureFlags(tenant: Tenant!): FeatureFlagsInput!
  getCanaryWeights(tenant: Tenant!): CanaryWeightsInput!
  getSloThresholds(tenant: Tenant!): SloThresholdsInput!
}

type Mutation {
  setFeatureFlags(tenant: Tenant!, flags: FeatureFlagsInput!): MutationResult!
  setCanaryWeights(tenant: Tenant!, weights: CanaryWeightsInput!): MutationResult!
  setSloThresholds(tenant: Tenant!, thresholds: SloThresholdsInput!): MutationResult!
  proposeRemediation(tenant: Tenant!, type: RemediationType!, hitl: Boolean!): MutationResult!
  canaryPromote(tenant: Tenant!): MutationResult!
  canaryHold(tenant: Tenant!): MutationResult!
  evidencePack(version: String!): EvidenceResult!
  evidenceVerify: MutationResult!
  regulatorExport(tenant: Tenant!, profile: String!): ExportResult!
  podrRun(tenant: Tenant!): MutationResult!
}