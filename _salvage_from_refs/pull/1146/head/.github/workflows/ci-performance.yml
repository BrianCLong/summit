name: Performance Tests

permissions:
  contents: read

permissions:
  contents: read

on:
  pull_request:
    paths:
      - 'tests/performance/**'

jobs:
  performance-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: intelgraph_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      neo4j:
        image: neo4j:4.4-enterprise
        env:
          NEO4J_AUTH: neo4j/test_password
          NEO4J_ACCEPT_LICENSE_AGREEMENT: 'yes'
          NEO4J_apoc_export_file_enabled: true
          NEO4J_apoc_import_file_enabled: true
          NEO4J_dbms_security_procedures_unrestricted: apoc.*
        options: >-
          --health-cmd "cypher-shell -u neo4j -p test_password 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 7474:7474
          - 7687:7687

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@c9ef52556095b32f140b0c7d74474f53696d9000 # v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm -w install

      - name: Wait for services
        run: |
          pg_isready -h localhost -p 5432 -U test_user -d intelgraph_test
          timeout 60s bash -c 'until echo > /dev/tcp/localhost/7687; do sleep 1; done'
          redis-cli -h localhost -p 6379 ping

      - name: Setup k6
        uses: grafana/k6-action@v0.2.0
        with:
          filename: /dev/null  # dummy filename
        env:
          K6_VERSION: 0.46.0

      - name: Start server for k6 tests
        working-directory: ./server
        run: |
          pnpm run start &
          sleep 10  # Wait for server to start
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/intelgraph_test
          NEO4J_URI: bolt://localhost:7687
          NEO4J_USER: neo4j
          NEO4J_PASSWORD: test_password
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret
          ALLOWED_ORIGINS: http://localhost:3000
          RATE_LIMIT_MAX: 1000
          PORT: 4000

      - name: Run k6 GraphQL Read SLO Test
        uses: grafana/k6-action@v0.2.0
        with:
          filename: .maestro/tests/k6/graphql_read.js
        env:
          GRAPHQL_URL: http://localhost:4000/graphql
          JWT: test-token

      - name: Run k6 GraphQL Write SLO Test
        uses: grafana/k6-action@v0.2.0
        with:
          filename: .maestro/tests/k6/graphql_write.js
        env:
          GRAPHQL_URL: http://localhost:4000/graphql
          JWT: test-token

      - name: Run Subscription Fanout SLO Test
        working-directory: .maestro/tests
        run: node subscription_fanout.js
        env:
          GRAPHQL_URL: http://localhost:4000/graphql
          SUB_URL: http://localhost:4000
          JWT: test-token
          TENANT_ID: test-tenant
          RUNS: 50  # Reduced for CI

      - name: Upload k6 results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: k6-performance-results
          path: |
            fanout.json
            k6-*.json
