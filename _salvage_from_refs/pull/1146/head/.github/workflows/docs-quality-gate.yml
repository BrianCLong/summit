name: Documentation Quality Gate
on:
  pull_request:
    paths: 
      - 'docs/**'
      - 'docs-site/**'
      - 'api/**'
  push:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  quality-gate:
    name: Docs Quality Gate

permissions:
  contents: read
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    outputs:
      quality-score: ${{ steps.calculate-score.outputs.score }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          pnpm install -g \
            vale \
            @lycheeverse/lychee \
            @axe-core/cli \
            pa11y-ci \
            lighthouse-ci \
            textlint \
            markdownlint-cli2
          
          pip install \
            yamllint \
            doc8 \
            proselint
            
      - name: Cache Vale styles
        uses: actions/cache@v3
        with:
          path: .github/styles
          key: vale-styles-${{ hashFiles('.vale.ini') }}
          
      - name: Validate documentation structure
        id: structure-check
        run: |
          echo "::group::Structure Validation"
          node scripts/validate-structure.js
          echo "::endgroup::"
          
      - name: Style and grammar check
        id: style-check
        run: |
          echo "::group::Style Check"
          vale --config .vale.ini docs/
          echo "::endgroup::"
          
      - name: Markdown linting
        id: markdown-lint
        run: |
          echo "::group::Markdown Linting"
          markdownlint-cli2 "docs/**/*.md"
          echo "::endgroup::"
          
      - name: YAML validation
        id: yaml-check
        run: |
          echo "::group::YAML Validation"
          yamllint -c .yamllint.yml docs/ .github/
          echo "::endgroup::"
          
      - name: Link validation
        id: link-check
        run: |
          echo "::group::Link Validation"
          lychee --config lychee.toml docs/
          echo "LINK_ERRORS=$?" >> $GITHUB_OUTPUT
          echo "::endgroup::"
          
      - name: Spell checking
        id: spell-check
        run: |
          echo "::group::Spell Check"
          cspell "docs/**/*.md" --config cspell.config.js
          echo "::endgroup::"
          
      - name: Content quality analysis
        id: content-quality
        run: |
          echo "::group::Content Quality"
          node scripts/content-quality-analyzer.js
          echo "::endgroup::"
          
      - name: Accessibility validation
        id: accessibility-check
        if: github.event_name == 'pull_request'
        run: |
          echo "::group::Accessibility Check"
          # Build docs site for accessibility testing
          cd docs-site
          pnpm install --frozen-lockfile
          pnpm run build
          pnpm exec serve -s build -l 3000 &
          sleep 10
          
          # Run accessibility audit
          pnpm exec pa11y-ci --config ../.pa11yci
          echo "::endgroup::"
          
      - name: Performance audit
        id: performance-check
        if: github.event_name == 'pull_request'
        run: |
          echo "::group::Performance Audit"
          cd docs-site
          pnpm exec lhci autorun --config=../.lighthouserc.js
          echo "::endgroup::"
          
      - name: SEO validation
        id: seo-check
        run: |
          echo "::group::SEO Validation"
          node scripts/seo-validator.js
          echo "::endgroup::"
          
      - name: Security scan for secrets
        id: security-scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: detect -v --source=. --no-git --report-format sarif --report-path gitleaks.sarif --path docs
          
      - name: Test code examples
        id: code-test
        run: |
          echo "::group::Code Example Testing"
          node scripts/test-code-examples.js
          echo "::endgroup::"
          
      - name: API documentation validation
        id: api-validation
        run: |
          echo "::group::API Validation"
          # Validate OpenAPI specs
          pnpm exec swagger-codegen-cli validate -i api/intelgraph-core-api.yaml
          pnpm exec swagger-codegen-cli validate -i api/maestro-orchestration-api.yaml
          
          # Check API-docs alignment
          node scripts/validate-api-docs-alignment.js
          echo "::endgroup::"
          
      - name: Calculate quality score
        id: calculate-score
        run: |
          echo "::group::Quality Score Calculation"
          SCORE=$(node scripts/calculate-quality-score.js \
            --style-errors=${{ steps.style-check.outputs.errors || 0 }} \
            --link-errors=${{ steps.link-check.outputs.LINK_ERRORS || 0 }} \
            --accessibility-score=${{ steps.accessibility-check.outputs.score || 100 }} \
            --performance-score=${{ steps.performance-check.outputs.score || 100 }} \
            --content-score=${{ steps.content-quality.outputs.score || 100 }})
          
          echo "Quality Score: $SCORE"
          echo "score=$SCORE" >> $GITHUB_OUTPUT
          echo "::endgroup::"
          
      - name: Generate quality report
        id: generate-report
        run: |
          echo "::group::Quality Report"
          node scripts/generate-quality-report.js \
            --output-format=markdown \
            --output-file=quality-report.md
          echo "::endgroup::"
          
      - name: Upload quality artifacts
        uses: actions/upload-artifact@v4
        with:
          name: quality-report-${{ github.run_id }}
          path: |
            quality-report.md
            gitleaks.sarif
            lighthouse-report.html
            pa11y-report.json
            
      - name: Comment PR with quality report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const qualityReport = fs.readFileSync('quality-report.md', 'utf8');
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸ“Š Documentation Quality Report\n\n${qualityReport}`
            });
            
      - name: Quality gate decision
        if: steps.calculate-score.outputs.score < 85
        run: |
          echo "::error::Quality gate failed. Minimum score required: 85, Actual: ${{ steps.calculate-score.outputs.score }}"
          exit 1

  feature-coverage-check:
    name: Feature Coverage Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Verify feature coverage
        run: |
          echo "::group::Feature Coverage Check"
          npm install js-yaml
          node scripts/verify-feature-coverage.js
          echo "::endgroup::"
          
      - name: Generate coverage report
        run: |
          echo "::group::Coverage Report"
          node scripts/generate-coverage-report.js
          echo "::endgroup::"
          
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ github.run_id }}
          path: coverage-report.html

  docs-freshness-check:
    name: Documentation Freshness Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install dependencies
        run: pnpm install gray-matter
        
      - name: Check documentation freshness
        run: |
          echo "::group::Freshness Check"
          node scripts/freshness-check.js
          echo "::endgroup::"
          
      - name: Generate stale content report
        run: |
          echo "::group::Stale Content Report"
          node scripts/stale-content-report.js > stale-report.md
          echo "::endgroup::"
          
      - name: Create GitHub issue for stale content
        if: hashFiles('stale-report.md') != ''
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const staleReport = fs.readFileSync('stale-report.md', 'utf8');
            
            if (staleReport.trim()) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `ðŸ“… Stale Documentation Report - ${new Date().toISOString().split('T')[0]}`,
                body: staleReport,
                labels: ['documentation', 'maintenance', 'stale-content']
              });
            }

  orphan-detection:
    name: Orphaned Content Detection  
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Detect orphaned documentation
        run: |
          echo "::group::Orphan Detection"
          node scripts/detect-orphans.js
          echo "::endgroup::"
          
      - name: Upload orphan report
        uses: actions/upload-artifact@v4
        with:
          name: orphan-report-${{ github.run_id }}
          path: orphan-report.json

  compliance-check:
    name: Compliance Validation
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js  
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: GDPR compliance check
        run: |
          echo "::group::GDPR Compliance"
          node scripts/gdpr-compliance-check.js
          echo "::endgroup::"
          
      - name: Accessibility compliance audit
        run: |
          echo "::group::Accessibility Compliance"
          node scripts/accessibility-compliance-audit.js
          echo "::endgroup::"
          
      - name: Security compliance validation
        run: |
          echo "::group::Security Compliance"
          node scripts/security-compliance-check.js
          echo "::endgroup::"
          
      - name: Generate compliance report
        run: |
          echo "::group::Compliance Report"
          node scripts/generate-compliance-report.js
          echo "::endgroup::"
          
      - name: Upload compliance artifacts
        uses: actions/upload-artifact@v4
        with:
          name: compliance-report-${{ github.run_id }}
          path: |
            gdpr-compliance.json
            accessibility-compliance.json
            security-compliance.json
            compliance-summary.md