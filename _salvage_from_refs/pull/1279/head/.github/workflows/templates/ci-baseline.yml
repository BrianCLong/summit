# CI Baseline Template for IntelGraph
#
# This template provides the minimum required CI checks for all services
# and components in the IntelGraph platform. It enforces security,
# quality, and governance standards across the codebase.

name: CI Baseline

on:
  workflow_call:
    inputs:
      service_name:
        required: true
        type: string
        description: 'Name of the service being tested'
      service_path:
        required: true
        type: string
        description: 'Path to the service directory'
      node_version:
        required: false
        type: string
        default: '18'
        description: 'Node.js version to use'
      python_version:
        required: false
        type: string
        default: '3.11'
        description: 'Python version to use'
      requires_database:
        required: false
        type: boolean
        default: false
        description: 'Whether the service requires database services'
      requires_neo4j:
        required: false
        type: boolean
        default: false
        description: 'Whether the service requires Neo4j'
      coverage_threshold:
        required: false
        type: number
        default: 80
        description: 'Minimum code coverage percentage'
      skip_security_scan:
        required: false
        type: boolean
        default: false
        description: 'Skip security scanning (only for approved cases)'
    secrets:
      CODECOV_TOKEN:
        required: false
      SONAR_TOKEN:
        required: false

env:
  CI: true
  NODE_ENV: test
  FORCE_COLOR: 1

jobs:
  # Phase 1: Fast feedback checks
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for diff analysis

    - name: Setup Node.js
      if: contains(fromJSON('["typescript", "javascript", "web", "api", "gateway"]'), inputs.service_name)
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node_version }}
        cache: 'npm'
        cache-dependency-path: ${{ inputs.service_path }}/package-lock.json

    - name: Setup Python
      if: contains(fromJSON('["python", "ml", "ingest"]'), inputs.service_name)
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python_version }}

    - name: Install dependencies (Node.js)
      if: contains(fromJSON('["typescript", "javascript", "web", "api", "gateway"]'), inputs.service_name)
      run: |
        cd ${{ inputs.service_path }}
        npm ci

    - name: Install dependencies (Python)
      if: contains(fromJSON('["python", "ml", "ingest"]'), inputs.service_name)
      run: |
        cd ${{ inputs.service_path }}
        pip install -e .
        pip install flake8 black mypy pytest

    - name: Run ESLint (Node.js)
      if: contains(fromJSON('["typescript", "javascript", "web", "api", "gateway"]'), inputs.service_name)
      run: |
        cd ${{ inputs.service_path }}
        npm run lint

    - name: Run Prettier check (Node.js)
      if: contains(fromJSON('["typescript", "javascript", "web", "api", "gateway"]'), inputs.service_name)
      run: |
        cd ${{ inputs.service_path }}
        npx prettier --check "src/**/*.{ts,tsx,js,jsx}"

    - name: Run Black check (Python)
      if: contains(fromJSON('["python", "ml", "ingest"]'), inputs.service_name)
      run: |
        cd ${{ inputs.service_path }}
        black --check .

    - name: Run flake8 (Python)
      if: contains(fromJSON('["python", "ml", "ingest"]'), inputs.service_name)
      run: |
        cd ${{ inputs.service_path }}
        flake8 .

    - name: Check commit message format
      run: |
        # Check that commit messages follow conventional commits
        git log --oneline -1 --pretty=format:"%s" | grep -E "^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .+"

  # Phase 2: Type checking and build
  typecheck-and-build:
    name: Type Check and Build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: lint-and-format

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      if: contains(fromJSON('["typescript", "javascript", "web", "api", "gateway"]'), inputs.service_name)
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node_version }}
        cache: 'npm'
        cache-dependency-path: ${{ inputs.service_path }}/package-lock.json

    - name: Setup Python
      if: contains(fromJSON('["python", "ml", "ingest"]'), inputs.service_name)
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python_version }}

    - name: Install dependencies (Node.js)
      if: contains(fromJSON('["typescript", "javascript", "web", "api", "gateway"]'), inputs.service_name)
      run: |
        cd ${{ inputs.service_path }}
        npm ci

    - name: Install dependencies (Python)
      if: contains(fromJSON('["python", "ml", "ingest"]'), inputs.service_name)
      run: |
        cd ${{ inputs.service_path }}
        pip install -e .
        pip install mypy

    - name: Run TypeScript compiler (Node.js)
      if: contains(fromJSON('["typescript", "javascript", "web", "api", "gateway"]'), inputs.service_name)
      run: |
        cd ${{ inputs.service_path }}
        npm run typecheck

    - name: Run MyPy type check (Python)
      if: contains(fromJSON('["python", "ml", "ingest"]'), inputs.service_name)
      run: |
        cd ${{ inputs.service_path }}
        mypy .

    - name: Build application (Node.js)
      if: contains(fromJSON('["typescript", "javascript", "web", "api", "gateway"]'), inputs.service_name)
      run: |
        cd ${{ inputs.service_path }}
        npm run build

    - name: Upload build artifacts
      if: contains(fromJSON('["typescript", "javascript", "web", "api", "gateway"]'), inputs.service_name)
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.service_name }}-build
        path: ${{ inputs.service_path }}/dist/
        retention-days: 7

  # Phase 3: Unit and integration tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: lint-and-format

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
        # Only start if database is required
        if: ${{ inputs.requires_database }}

      neo4j:
        image: neo4j:5.13
        env:
          NEO4J_AUTH: neo4j/test_password
          NEO4J_PLUGINS: '["apoc"]'
        options: >-
          --health-cmd "cypher-shell -u neo4j -p test_password 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 7687:7687
          - 7474:7474
        # Only start if Neo4j is required
        if: ${{ inputs.requires_neo4j }}

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
        # Start Redis for caching tests
        if: ${{ inputs.requires_database }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      if: contains(fromJSON('["typescript", "javascript", "web", "api", "gateway"]'), inputs.service_name)
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node_version }}
        cache: 'npm'
        cache-dependency-path: ${{ inputs.service_path }}/package-lock.json

    - name: Setup Python
      if: contains(fromJSON('["python", "ml", "ingest"]'), inputs.service_name)
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python_version }}

    - name: Install dependencies (Node.js)
      if: contains(fromJSON('["typescript", "javascript", "web", "api", "gateway"]'), inputs.service_name)
      run: |
        cd ${{ inputs.service_path }}
        npm ci

    - name: Install dependencies (Python)
      if: contains(fromJSON('["python", "ml", "ingest"]'), inputs.service_name)
      run: |
        cd ${{ inputs.service_path }}
        pip install -e .
        pip install pytest pytest-cov

    - name: Setup test database
      if: ${{ inputs.requires_database }}
      run: |
        export PGPASSWORD=test_password
        # Run any migration scripts if they exist
        if [ -d "${{ inputs.service_path }}/migrations" ]; then
          for migration in ${{ inputs.service_path }}/migrations/*.sql; do
            [ -f "$migration" ] && psql -h localhost -U test_user -d test_db -f "$migration"
          done
        fi
      env:
        PGPASSWORD: test_password

    - name: Run unit tests (Node.js)
      if: contains(fromJSON('["typescript", "javascript", "web", "api", "gateway"]'), inputs.service_name)
      run: |
        cd ${{ inputs.service_path }}
        npm run test:coverage
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_DB: test_db
        POSTGRES_USER: test_user
        POSTGRES_PASSWORD: test_password
        NEO4J_URI: bolt://localhost:7687
        NEO4J_USERNAME: neo4j
        NEO4J_PASSWORD: test_password
        REDIS_URL: redis://localhost:6379

    - name: Run unit tests (Python)
      if: contains(fromJSON('["python", "ml", "ingest"]'), inputs.service_name)
      run: |
        cd ${{ inputs.service_path }}
        pytest --cov=. --cov-report=xml --cov-report=term
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_DB: test_db
        POSTGRES_USER: test_user
        POSTGRES_PASSWORD: test_password

    - name: Check coverage threshold
      run: |
        # Extract coverage percentage and compare with threshold
        if [ -f "${{ inputs.service_path }}/coverage/lcov.info" ]; then
          COVERAGE=$(grep -o 'LF:[0-9]*' ${{ inputs.service_path }}/coverage/lcov.info | tail -1 | grep -o '[0-9]*')
          COVERED=$(grep -o 'LH:[0-9]*' ${{ inputs.service_path }}/coverage/lcov.info | tail -1 | grep -o '[0-9]*')
          PERCENTAGE=$((COVERED * 100 / COVERAGE))
          echo "Coverage: $PERCENTAGE%"
          if [ $PERCENTAGE -lt ${{ inputs.coverage_threshold }} ]; then
            echo "❌ Coverage $PERCENTAGE% is below threshold ${{ inputs.coverage_threshold }}%"
            exit 1
          else
            echo "✅ Coverage $PERCENTAGE% meets threshold ${{ inputs.coverage_threshold }}%"
          fi
        fi

    - name: Upload coverage to Codecov
      if: secrets.CODECOV_TOKEN
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ${{ inputs.service_path }}/coverage/lcov.info
        flags: ${{ inputs.service_name }}
        name: ${{ inputs.service_name }}-coverage

  # Phase 4: Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: lint-and-format
    if: ${{ !inputs.skip_security_scan }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: ${{ inputs.service_path }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Setup Node.js for audit
      if: contains(fromJSON('["typescript", "javascript", "web", "api", "gateway"]'), inputs.service_name)
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node_version }}
        cache: 'npm'
        cache-dependency-path: ${{ inputs.service_path }}/package-lock.json

    - name: Run npm audit
      if: contains(fromJSON('["typescript", "javascript", "web", "api", "gateway"]'), inputs.service_name)
      run: |
        cd ${{ inputs.service_path }}
        npm audit --audit-level=high

    - name: Setup Python for safety check
      if: contains(fromJSON('["python", "ml", "ingest"]'), inputs.service_name)
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python_version }}

    - name: Run safety check (Python)
      if: contains(fromJSON('["python", "ml", "ingest"]'), inputs.service_name)
      run: |
        cd ${{ inputs.service_path }}
        pip install safety
        safety check

    - name: Scan for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ${{ inputs.service_path }}
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  # Phase 5: Code quality analysis
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [typecheck-and-build, test]
    if: secrets.SONAR_TOKEN

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      if: contains(fromJSON('["typescript", "javascript", "web", "api", "gateway"]'), inputs.service_name)
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node_version }}
        cache: 'npm'
        cache-dependency-path: ${{ inputs.service_path }}/package-lock.json

    - name: Install dependencies
      if: contains(fromJSON('["typescript", "javascript", "web", "api", "gateway"]'), inputs.service_name)
      run: |
        cd ${{ inputs.service_path }}
        npm ci

    - name: Download build artifacts
      if: contains(fromJSON('["typescript", "javascript", "web", "api", "gateway"]'), inputs.service_name)
      uses: actions/download-artifact@v3
      with:
        name: ${{ inputs.service_name }}-build
        path: ${{ inputs.service_path }}/dist/

    - name: Run SonarCloud analysis
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        projectBaseDir: ${{ inputs.service_path }}
        args: >
          -Dsonar.projectKey=intelgraph-${{ inputs.service_name }}
          -Dsonar.organization=intelgraph
          -Dsonar.sources=src
          -Dsonar.tests=src
          -Dsonar.test.inclusions=**/*.test.ts,**/*.test.tsx,**/*.spec.ts
          -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info
          -Dsonar.coverage.exclusions=**/*.test.ts,**/*.test.tsx,**/*.spec.ts

  # Phase 6: Container scanning (if Dockerfile exists)
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: typecheck-and-build
    if: ${{ hashFiles(format('{0}/Dockerfile', inputs.service_path)) != '' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        cd ${{ inputs.service_path }}
        docker build -t ${{ inputs.service_name }}:test .

    - name: Run Trivy container scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ inputs.service_name }}:test
        format: 'sarif'
        output: 'container-scan-results.sarif'

    - name: Upload container scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'container-scan-results.sarif'

  # Final: Policy compliance check
  policy-compliance:
    name: Policy Compliance Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [test, security-scan]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup OPA
      uses: open-policy-agent/setup-opa@v2
      with:
        version: latest

    - name: Run governance policy check
      run: |
        # Check if service follows governance policies
        echo "Checking governance policies for ${{ inputs.service_name }}..."

        # Check for required files
        REQUIRED_FILES=("README.md" "package.json" ".gitignore")
        for file in "${REQUIRED_FILES[@]}"; do
          if [ ! -f "${{ inputs.service_path }}/$file" ]; then
            echo "❌ Missing required file: $file"
            exit 1
          fi
        done

        # Check package.json for required fields
        if [ -f "${{ inputs.service_path }}/package.json" ]; then
          node -e "
            const pkg = require('./${{ inputs.service_path }}/package.json');
            const required = ['name', 'version', 'description', 'author', 'license'];
            const missing = required.filter(field => !pkg[field]);
            if (missing.length > 0) {
              console.log('❌ Missing package.json fields:', missing.join(', '));
              process.exit(1);
            }
            console.log('✅ Package.json compliance check passed');
          "
        fi

    - name: Validate CI compliance
      run: |
        # Ensure all required CI checks are present
        echo "✅ All required CI checks completed"
        echo "Service: ${{ inputs.service_name }}"
        echo "Coverage threshold: ${{ inputs.coverage_threshold }}%"
        echo "Security scan: ${{ !inputs.skip_security_scan && 'enabled' || 'skipped' }}"

  # Summary job
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [lint-and-format, typecheck-and-build, test, security-scan, code-quality, container-scan, policy-compliance]

    steps:
    - name: Generate CI summary
      run: |
        echo "## CI Baseline Results for ${{ inputs.service_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Lint & Format | ${{ needs.lint-and-format.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Type Check & Build | ${{ needs.typecheck-and-build.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Tests | ${{ needs.test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅' || needs.security-scan.result == 'skipped' && '⏭️' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '✅' || needs.code-quality.result == 'skipped' && '⏭️' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Container Scan | ${{ needs.container-scan.result == 'success' && '✅' || needs.container-scan.result == 'skipped' && '⏭️' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Policy Compliance | ${{ needs.policy-compliance.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Coverage Threshold:** ${{ inputs.coverage_threshold }}%" >> $GITHUB_STEP_SUMMARY
        echo "**Service Path:** \`${{ inputs.service_path }}\`" >> $GITHUB_STEP_SUMMARY

    - name: Check overall CI status
      run: |
        if [[ "${{ needs.lint-and-format.result }}" == "success" &&
              "${{ needs.typecheck-and-build.result }}" == "success" &&
              "${{ needs.test.result }}" == "success" &&
              ("${{ needs.security-scan.result }}" == "success" || "${{ needs.security-scan.result }}" == "skipped") &&
              "${{ needs.policy-compliance.result }}" == "success" ]]; then
          echo "✅ All required CI checks passed for ${{ inputs.service_name }}"
        else
          echo "❌ Some CI checks failed for ${{ inputs.service_name }}"
          exit 1
        fi