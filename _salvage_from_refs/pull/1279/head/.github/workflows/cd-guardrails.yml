name: CD Guardrails
description: 'Reusable workflow for CD guardrails: freeze windows + SLSA provenance verification'

on:
  workflow_call:
    inputs:
      image:
        description: 'Container image to verify'
        required: true
        type: string
      digest:
        description: 'Image digest for provenance verification'
        required: true
        type: string
      environment:
        description: 'Target deployment environment'
        required: false
        type: string
        default: 'production'
    secrets:
      ALLOWED_BUILDER_ID:
        description: 'Allowed GitHub Actions builder ID for SLSA verification'
        required: true
      ALLOWED_OIDC_ISSUER:
        description: 'Allowed OIDC issuer for attestation verification'
        required: true

jobs:
  guardrails:
    name: CD Guardrails
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --prefix tools/ci

    - name: Check freeze windows
      id: freeze-check
      run: |
        node tools/ci/check_freeze.js \
          --environment "${{ inputs.environment }}" \
          --freeze-config "ops/freeze-windows.yaml"
      env:
        CD_OVERRIDE: ${{ vars.CD_OVERRIDE }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Install cosign
      uses: sigstore/cosign-installer@v3.1.1
      with:
        cosign-release: 'v2.2.0'

    - name: Verify SLSA provenance
      uses: ./.github/actions/verify-provenance
      with:
        image: ${{ inputs.image }}
        digest: ${{ inputs.digest }}
        allowed-builder-id: ${{ secrets.ALLOWED_BUILDER_ID }}
        allowed-oidc-issuer: ${{ secrets.ALLOWED_OIDC_ISSUER }}
        require-verify-bundle: true
        fail-on-tamper: true

    - name: Log guardrail decision
      run: |
        echo "âœ… CD Guardrails passed:"
        echo "  ðŸš« Freeze window: ${{ steps.freeze-check.outputs.status }}"
        echo "  ðŸ”’ Provenance: verified"
        echo "  ðŸŽ¯ Environment: ${{ inputs.environment }}"
        echo "  ðŸ“¦ Image: ${{ inputs.image }}@${{ inputs.digest }}"

    - name: Update deployment status
      if: always()
      run: |
        STATUS="${{ job.status }}"
        curl -X POST \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}" \
          -d "{
            \"state\": \"$([ \"$STATUS\" = \"success\" ] && echo success || echo failure)\",
            \"description\": \"CD Guardrails $([ \"$STATUS\" = \"success\" ] && echo passed || echo failed)\",
            \"context\": \"cd-guardrails/guardrails\"
          }"

  tamper-test:
    name: Negative control â€” tamper blocks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Simulate tamper
        run: echo "bogus" >> dist/bundle.tgz
      - name: Verifyâ€‘Bundle (should fail)
        run: |
          node tools/verify-bundle/cli.js verify \
            --bundle dist/bundle.tgz \
            --policy security/policy/trust-policy.yaml
        continue-on-error: true
      - name: Fail if tamper did not block
        run: |
          echo "Tamper test unexpectedly passed" && exit 1
        if: ${{ success() }}