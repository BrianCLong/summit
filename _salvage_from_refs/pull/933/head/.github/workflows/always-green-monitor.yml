name: Always-Green Repository Monitor

on:
  schedule:
    # Every 2 hours during business hours
    - cron: '0 8-20/2 * * 1-5'
    # Every 6 hours on weekends
    - cron: '0 */6 * * 0,6'
  workflow_dispatch:
    inputs:
      force_processing:
        description: 'Force process all PRs'
        required: false
        default: 'false'

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  always-green-monitor:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.20.4'

      - name: Install GitHub CLI
        run: |
          gh --version || (curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update && sudo apt install gh)

      - name: Repository Health Check
        id: health_check
        run: |
          echo "🔍 Checking repository health..."

          # Collect metrics
          OPEN_PRS=$(gh pr list --state open --json number | jq length)
          AUTO_MERGE_ENABLED=$(gh pr list --state open --json number,autoMergeRequest | jq '[.[] | select(.autoMergeRequest != null)] | length')
          MERGEABLE_PRS=$(gh pr list --state open --json number,mergeable | jq '[.[] | select(.mergeable == "MERGEABLE")] | length')
          FAILING_CHECKS=$(gh pr list --state open --json number,statusCheckRollup | jq '[.[] | select(.statusCheckRollup.state == "FAILURE")] | length')

          # Calculate health score
          if [ "$OPEN_PRS" -eq 0 ]; then
            HEALTH_SCORE=100
          else
            AUTO_MERGE_PCT=$((AUTO_MERGE_ENABLED * 100 / OPEN_PRS))
            MERGEABLE_PCT=$((MERGEABLE_PRS * 100 / OPEN_PRS))
            PASSING_PCT=$(((OPEN_PRS - FAILING_CHECKS) * 100 / OPEN_PRS))
            
            HEALTH_SCORE=$(((AUTO_MERGE_PCT + MERGEABLE_PCT + PASSING_PCT) / 3))
          fi

          echo "📊 Repository Health Metrics:"
          echo "  Open PRs: $OPEN_PRS"
          echo "  Auto-merge enabled: $AUTO_MERGE_ENABLED ($AUTO_MERGE_PCT%)"
          echo "  Mergeable PRs: $MERGEABLE_PRS ($MERGEABLE_PCT%)"
          echo "  Passing checks: $((OPEN_PRS - FAILING_CHECKS)) ($(((OPEN_PRS - FAILING_CHECKS) * 100 / OPEN_PRS))%)"
          echo "  Overall health score: $HEALTH_SCORE/100"

          # Export for next steps
          echo "health_score=$HEALTH_SCORE" >> $GITHUB_OUTPUT
          echo "open_prs=$OPEN_PRS" >> $GITHUB_OUTPUT
          echo "auto_merge_enabled=$AUTO_MERGE_ENABLED" >> $GITHUB_OUTPUT
          echo "mergeable_prs=$MERGEABLE_PRS" >> $GITHUB_OUTPUT
          echo "failing_checks=$FAILING_CHECKS" >> $GITHUB_OUTPUT

      - name: Auto-Enable Merge on Ready PRs
        if: steps.health_check.outputs.health_score < 90
        run: |
          echo "🤖 Auto-enabling merge on ready PRs..."

          # Find PRs that are mergeable but don't have auto-merge
          gh pr list --state open --json number,mergeable,autoMergeRequest,isDraft | \
          jq -r '.[] | select(.mergeable == "MERGEABLE" and .autoMergeRequest == null and (.isDraft | not)) | .number' | \
          while read -r PR_NUM; do
            echo "  Enabling auto-merge on PR #$PR_NUM"
            gh pr merge "$PR_NUM" --auto --squash || gh pr merge "$PR_NUM" --auto --merge || true
            sleep 1
          done

      - name: Retry Failed Checks
        if: steps.health_check.outputs.failing_checks > 0
        run: |
          echo "🔄 Retrying failed checks..."

          gh pr list --state open --json number,statusCheckRollup | \
          jq -r '.[] | select(.statusCheckRollup.state == "FAILURE") | .number' | \
          head -5 | \
          while read -r PR_NUM; do
            echo "  Retrying checks for PR #$PR_NUM"
            gh pr checks rerun "$PR_NUM" || true
            sleep 2
          done

      - name: Clean Up Stale PRs
        run: |
          echo "🧹 Cleaning up stale PRs..."

          # Find PRs older than 30 days with no recent activity
          gh pr list --state open --json number,title,updatedAt,labels | \
          jq -r '.[] | select((now - (.updatedAt | fromdateiso8601)) > (30 * 86400)) | select([.labels[].name] | contains(["keep-open"]) | not) | "\(.number):\(.title)"' | \
          while IFS=':' read -r PR_NUM PR_TITLE; do
            echo "  Flagging stale PR #$PR_NUM: $PR_TITLE"
            gh pr edit "$PR_NUM" --add-label "stale:30-days" || true
          done

      - name: Generate Health Report
        run: |
          echo "📋 Generating health report..."

          cat > "always-green-report.md" << EOF_REPORT
          # 🟢 Always-Green Health Report

          **Generated**: $(date -u +%Y-%m-%dT%H:%M:%SZ)
          **Repository**: ${{ github.repository }}
          **Health Score**: ${{ steps.health_check.outputs.health_score }}/100

          ## Metrics
          - Open PRs: ${{ steps.health_check.outputs.open_prs }}
          - Auto-merge enabled: ${{ steps.health_check.outputs.auto_merge_enabled }}
          - Mergeable PRs: ${{ steps.health_check.outputs.mergeable_prs }}
          - Failing checks: ${{ steps.health_check.outputs.failing_checks }}

          ## Status
          $(if [ "${{ steps.health_check.outputs.health_score }}" -ge 90 ]; then
            echo "✅ **EXCELLENT** - Repository is in optimal health"
          elif [ "${{ steps.health_check.outputs.health_score }}" -ge 75 ]; then
            echo "🟡 **GOOD** - Minor issues detected, auto-remediation applied"
          elif [ "${{ steps.health_check.outputs.health_score }}" -ge 50 ]; then
            echo "🟠 **NEEDS ATTENTION** - Multiple issues detected, intervention recommended"
          else
            echo "🔴 **CRITICAL** - Significant health issues, immediate attention required"
          fi)
          EOF_REPORT

          # Commit the report
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add always-green-report.md
          git commit -m "chore: update always-green health report [skip ci]" || echo "No changes to commit"
          git push || echo "No changes to push"
