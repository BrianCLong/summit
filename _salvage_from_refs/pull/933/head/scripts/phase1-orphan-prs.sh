#!/usr/bin/env bash
set -euo pipefail

# üìã Phase 1: Open PRs for ALL Orphan Branches  
# Mission: Ensure every branch has a path to absorption via PR

REPO=$(gh repo view --json nameWithOwner -q .nameWithOwner)
BASE=main
LOG_FILE="phase1-orphan-prs-$(date +%Y%m%d-%H%M).log"

echo "üìã PHASE 1: OPEN PRS FOR ALL ORPHAN BRANCHES" | tee "$LOG_FILE"
echo "Repository: $REPO" | tee -a "$LOG_FILE"
echo "Base branch: $BASE" | tee -a "$LOG_FILE"
echo "Started: $(date)" | tee -a "$LOG_FILE"
echo "" | tee -a "$LOG_FILE"

# Fetch all branches first
echo "Fetching all branch references..." | tee -a "$LOG_FILE"
git fetch --all --prune

echo "=== DISCOVERING ALL ORPHAN BRANCHES ===" | tee -a "$LOG_FILE"

ORPHANS_FILE=$(mktemp)
CREATED_PRS=0
FAILED_CREATES=0
ALREADY_EXIST=0

# Get all branches (paginated properly to handle 420+ branches)
echo "Getting comprehensive branch list..." | tee -a "$LOG_FILE"
gh api "repos/$REPO/branches?per_page=100" --paginate \
| jq -r '.[].name' \
| grep -Ev '^(main|master|develop|integrate/|gh-pages|release/.*|rc.*)$' \
> "$ORPHANS_FILE"

TOTAL_CANDIDATES=$(wc -l < "$ORPHANS_FILE")
echo "Found $TOTAL_CANDIDATES candidate branches to check" | tee -a "$LOG_FILE"

echo "" | tee -a "$LOG_FILE"
echo "=== CHECKING FOR EXISTING PRS ===" | tee -a "$LOG_FILE"

# Filter out branches that already have PRs
ORPHANS_FINAL=$(mktemp)
PROCESSED=0

while IFS= read -r BR; do
  PROCESSED=$((PROCESSED + 1))
  if [ $((PROCESSED % 50)) -eq 0 ]; then
    echo "  Processed $PROCESSED/$TOTAL_CANDIDATES branches..." | tee -a "$LOG_FILE"
  fi
  
  # Check if branch has existing PR
  if ! gh pr list --search "head:$BR" --json number | jq -e 'length>0' >/dev/null 2>&1; then
    echo "$BR" >> "$ORPHANS_FINAL"
  else
    ALREADY_EXIST=$((ALREADY_EXIST + 1))
  fi
done < "$ORPHANS_FILE"

ORPHAN_COUNT=$(wc -l < "$ORPHANS_FINAL")
echo "Final orphan branches without PRs: $ORPHAN_COUNT" | tee -a "$LOG_FILE"
echo "Branches that already have PRs: $ALREADY_EXIST" | tee -a "$LOG_FILE"

echo "" | tee -a "$LOG_FILE"
echo "=== CREATING ABSORPTION PRS ===" | tee -a "$LOG_FILE"

if [ "$ORPHAN_COUNT" -gt 0 ]; then
  echo "Creating PRs for $ORPHAN_COUNT orphan branches..." | tee -a "$LOG_FILE"
  
  BATCH_SIZE=10  # Create PRs in batches to avoid rate limiting
  BATCH_NUM=1
  
  while IFS= read -r BR; do
    echo "[$BATCH_NUM] Creating absorption PR for: $BR" | tee -a "$LOG_FILE"
    
    # Check if branch actually exists and has commits ahead of main
    AHEAD=0
    if git show-ref --verify --quiet "refs/remotes/origin/$BR"; then
      AHEAD=$(git rev-list --count "origin/$BASE..origin/$BR" 2>/dev/null || echo "0")
    fi
    
    if [ "$AHEAD" -eq 0 ]; then
      echo "  ‚ö†Ô∏è Branch $BR has no commits ahead of $BASE, skipping" | tee -a "$LOG_FILE"
      continue
    fi
    
    # Get branch creation date and author for context
    LAST_COMMIT=$(git log -1 --format="%ad" --date=short "origin/$BR" 2>/dev/null || echo "unknown")
    LAST_AUTHOR=$(git log -1 --format="%an" "origin/$BR" 2>/dev/null || echo "unknown")
    
    # Create comprehensive PR body
    PR_BODY="ü§ñ **Automated Absorption PR**

This PR was automatically created to absorb all functionality from \`$BR\` into \`$BASE\`.

**Branch Analysis:**
- Commits ahead of main: $AHEAD
- Last activity: $LAST_COMMIT
- Last author: $LAST_AUTHOR

**Absorption Status:** ‚è≥ Processing via Global Absorption Protocol v2
**Auto-merge:** Will be enabled once checks pass

## What's Included

This branch contains work that needs to be preserved and integrated into the main codebase. The Global Absorption Protocol ensures:

- ‚úÖ No functionality loss
- ‚úÖ Proper conflict resolution
- ‚úÖ Quality gates maintained  
- ‚úÖ Audit trail preserved

## Process

1. **Automated Rebase**: Branch will be rebased onto latest main
2. **Conflict Resolution**: Fast-path resolvers for common conflicts
3. **Quality Checks**: Linting, formatting, and CI validation
4. **Auto-merge**: Enabled automatically upon passing checks

## Manual Review

This PR may require manual review if:
- Complex conflicts cannot be auto-resolved
- Breaking changes are detected
- Security implications need assessment

---
*Generated by IntelGraph Global Absorption Protocol v2*
*Branch absorption ensures zero functionality loss while maintaining repository health*"

    # Create the PR with rate limiting consideration
    if gh pr create \
      --head "$BR" \
      --base "$BASE" \
      --title "üîÑ Absorb: $BR ($AHEAD commits)" \
      --body "$PR_BODY" \
      --label "priority:absorption,auto-generated,absorption-v2" 2>/dev/null; then
      echo "  ‚úÖ Created absorption PR for $BR" | tee -a "$LOG_FILE"
      CREATED_PRS=$((CREATED_PRS + 1))
    else
      echo "  ‚ö†Ô∏è Failed to create PR for $BR (may already exist or be inaccessible)" | tee -a "$LOG_FILE"
      FAILED_CREATES=$((FAILED_CREATES + 1))
    fi
    
    # Rate limiting - pause every batch
    if [ $((BATCH_NUM % BATCH_SIZE)) -eq 0 ]; then
      echo "  üí§ Rate limit pause after batch $BATCH_NUM..." | tee -a "$LOG_FILE"
      sleep 5
    fi
    
    BATCH_NUM=$((BATCH_NUM + 1))
    
  done < "$ORPHANS_FINAL"
else
  echo "No orphan branches found - all branches already have PRs!" | tee -a "$LOG_FILE"
fi

echo "" | tee -a "$LOG_FILE"
echo "=== UPDATING PR COUNTS ===" | tee -a "$LOG_FILE"

# Get updated PR count
sleep 3  # Allow GitHub to update
UPDATED_PR_COUNT=$(gh pr list --state open --limit 1000 --json number | jq length)

echo "üìä PHASE 1 RESULTS:" | tee -a "$LOG_FILE"
echo "   Branches analyzed: $TOTAL_CANDIDATES" | tee -a "$LOG_FILE"
echo "   Orphan branches found: $ORPHAN_COUNT" | tee -a "$LOG_FILE"
echo "   PRs created successfully: $CREATED_PRS" | tee -a "$LOG_FILE" 
echo "   PR creation failures: $FAILED_CREATES" | tee -a "$LOG_FILE"
echo "   Branches already with PRs: $ALREADY_EXIST" | tee -a "$LOG_FILE"
echo "   Updated total open PRs: $UPDATED_PR_COUNT" | tee -a "$LOG_FILE"

# Calculate success rate
if [ "$ORPHAN_COUNT" -gt 0 ]; then
  SUCCESS_RATE=$(echo "scale=2; $CREATED_PRS * 100 / $ORPHAN_COUNT" | bc)
  echo "   Success rate: $SUCCESS_RATE%" | tee -a "$LOG_FILE"
fi

# Export results for Phase 2
cat > "phase1-results.json" << EOF
{
  "phase": 1,
  "completed_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
  "repository": "$REPO",
  "branches_analyzed": $TOTAL_CANDIDATES,
  "orphan_branches_found": $ORPHAN_COUNT,
  "prs_created": $CREATED_PRS,
  "pr_creation_failures": $FAILED_CREATES,
  "branches_already_with_prs": $ALREADY_EXIST,
  "updated_total_open_prs": $UPDATED_PR_COUNT,
  "success_rate": $(echo "scale=2; if($ORPHAN_COUNT > 0) $CREATED_PRS * 100 / $ORPHAN_COUNT else 100" | bc),
  "log_file": "$LOG_FILE"
}
EOF

echo "" | tee -a "$LOG_FILE"
if [ "$CREATED_PRS" -gt 0 ]; then
  echo "‚úÖ Phase 1 Complete - $CREATED_PRS absorption PRs created" | tee -a "$LOG_FILE"
  echo "üöÄ Ready for Phase 2: Tranche processing of all $UPDATED_PR_COUNT PRs" | tee -a "$LOG_FILE"
else
  echo "‚úÖ Phase 1 Complete - All branches already have PRs" | tee -a "$LOG_FILE"  
  echo "üöÄ Ready for Phase 2: Tranche processing of existing $UPDATED_PR_COUNT PRs" | tee -a "$LOG_FILE"
fi

# Cleanup
rm -f "$ORPHANS_FILE" "$ORPHANS_FINAL"

echo "" | tee -a "$LOG_FILE"
echo "üìà SCOPE FOR PHASE 2:" | tee -a "$LOG_FILE"
echo "   Total PRs to process: $UPDATED_PR_COUNT" | tee -a "$LOG_FILE"
echo "   Estimated tranches (N=40): $(echo "($UPDATED_PR_COUNT + 39) / 40" | bc)" | tee -a "$LOG_FILE"
echo "   Estimated processing time: $(echo "($UPDATED_PR_COUNT + 5) / 6 * 3" | bc) minutes" | tee -a "$LOG_FILE"