# Taskfile for IntelGraph Platform
# Modern task automation with cross-platform support
# Usage: task <command> or ./task <command>
# Install: go install github.com/go-task/task/v3/cmd/task@latest

version: '3'

vars:
  PYTHON: python3
  NODE_VERSION: 18
  PROJECT_NAME: intelgraph

env:
  COMPOSE_PROJECT_NAME: '{{.PROJECT_NAME}}'
  NODE_ENV: development

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list

  # =============================================================================
  # Setup & Bootstrap
  # =============================================================================

  bootstrap:
    desc: Setup complete development environment
    deps: [install]
    cmds:
      - test -f .env || cp .env.example .env
      - echo "‚úÖ Environment bootstrapped. Next: task up"

  install:
    desc: Install all dependencies (npm + python)
    cmds:
      - npm ci
      - task: install:server
      - task: install:client
      - task: install:python

  install:server:
    desc: Install server dependencies
    dir: server
    cmds:
      - npm ci

  install:client:
    desc: Install client dependencies
    dir: client
    cmds:
      - npm ci

  install:python:
    desc: Setup Python virtual environments
    cmds:
      - |
        for service in ingestion graph-service copilot; do
          if [ -d "$service" ] && [ -f "$service/requirements.txt" ]; then
            echo "Setting up $service Python environment..."
            if [ ! -d "$service/.venv" ]; then
              {{.PYTHON}} -m venv "$service/.venv"
            fi
            source "$service/.venv/bin/activate" && pip install -r "$service/requirements.txt"
          fi
        done

  # =============================================================================
  # Development
  # =============================================================================

  dev:
    desc: Start development environment (client + server)
    deps: [bootstrap]
    cmds:
      - npm run dev

  dev:server:
    desc: Start server in development mode
    dir: server
    cmds:
      - npm run dev

  dev:client:
    desc: Start client in development mode
    dir: client
    cmds:
      - npm run dev

  # =============================================================================
  # Docker & Services
  # =============================================================================

  up:
    desc: Start core services (minimal)
    cmds:
      - docker compose up -d --build
      - echo "‚úÖ Core services running. Try: task smoke"

  up:ai:
    desc: Start with AI services
    cmds:
      - docker compose --profile ai up -d --build

  up:kafka:
    desc: Start with Kafka streaming
    cmds:
      - docker compose --profile kafka up -d --build

  up:full:
    desc: Start all services (AI + Kafka)
    cmds:
      - docker compose --profile ai --profile kafka up -d --build

  down:
    desc: Stop all services
    cmds:
      - docker compose down --remove-orphans

  logs:
    desc: Show service logs
    cmds:
      - docker compose logs -f {{.CLI_ARGS}}

  ps:
    desc: Show running services
    cmds:
      - docker compose ps

  # =============================================================================
  # Testing
  # =============================================================================

  test:
    desc: Run all tests
    cmds:
      - task: test:unit
      - task: test:smoke

  test:unit:
    desc: Run unit tests
    cmds:
      - npm test

  test:server:
    desc: Run server tests
    dir: server
    cmds:
      - npm test

  test:client:
    desc: Run client tests
    dir: client
    cmds:
      - npm test

  test:e2e:
    desc: Run end-to-end tests
    cmds:
      - npx playwright test

  test:smoke:
    desc: Run smoke tests
    cmds:
      - bash scripts/smoke.sh

  smoke:
    desc: Alias for test:smoke
    cmds:
      - task: test:smoke

  # =============================================================================
  # Code Quality
  # =============================================================================

  fmt:
    desc: Format all code
    cmds:
      - prettier -w .
      - ruff format .
      - echo "‚úÖ Code formatted"

  lint:
    desc: Lint all code
    cmds:
      - eslint .
      - ruff check .
      - echo "‚úÖ Linting complete"

  lint:fix:
    desc: Fix auto-fixable lint issues
    cmds:
      - eslint . --fix
      - ruff check . --fix
      - echo "‚úÖ Auto-fixes applied"

  typecheck:
    desc: Run TypeScript type checking
    cmds:
      - tsc -b --pretty false

  check:
    desc: Run all quality checks
    cmds:
      - task: fmt
      - task: lint
      - task: typecheck
      - task: test:unit

  # =============================================================================
  # Database & Migrations
  # =============================================================================

  db:migrate:
    desc: Run database migrations
    dir: server
    cmds:
      - npm run db:migrate

  db:seed:
    desc: Seed database with sample data
    dir: server
    cmds:
      - npm run db:seed

  db:reset:
    desc: Reset database (migrate + seed)
    cmds:
      - task: db:migrate
      - task: db:seed

  reset-db:
    desc: Remove Neo4j volumes and reset
    cmds:
      - docker compose down
      - |
        V=$(docker volume ls -q | grep neo4j_data || true)
        if [ -n "$V" ]; then docker volume rm $V; fi
        echo "üóëÔ∏è  Neo4j volume removed"

  # =============================================================================
  # Build & Release
  # =============================================================================

  build:
    desc: Build all components
    cmds:
      - task: build:client
      - task: build:server

  build:client:
    desc: Build client
    dir: client
    cmds:
      - npm run build

  build:server:
    desc: Build server
    dir: server
    cmds:
      - npm run build

  # =============================================================================
  # Security & Audit
  # =============================================================================

  audit:
    desc: Run security audit
    cmds:
      - npm audit --audit-level=high
      - gitleaks detect --source . --config .gitleaks.toml
      - echo "‚úÖ Security audit complete"

  audit:fix:
    desc: Fix npm vulnerabilities
    cmds:
      - npm audit fix

  # =============================================================================
  # Data & Ingestion
  # =============================================================================

  ingest:
    desc: Run data ingestion
    cmds:
      - |
        if [ ! -d ingestion/.venv ]; then {{.PYTHON}} -m venv ingestion/.venv; fi
        source ingestion/.venv/bin/activate && {{.PYTHON}} ingestion/main.py

  graph:
    desc: Run graph service
    cmds:
      - |
        if [ ! -d graph-service/.venv ]; then {{.PYTHON}} -m venv graph-service/.venv; fi  
        source graph-service/.venv/bin/activate && {{.PYTHON}} graph-service/main.py

  # =============================================================================
  # Utilities
  # =============================================================================

  clean:
    desc: Clean build artifacts and caches
    cmds:
      - find . -name "node_modules" -type d -prune -exec rm -rf '{}' + 2>/dev/null || true
      - find . -name ".venv" -type d -prune -exec rm -rf '{}' + 2>/dev/null || true
      - find . -name "dist" -type d -prune -exec rm -rf '{}' + 2>/dev/null || true
      - find . -name "build" -type d -prune -exec rm -rf '{}' + 2>/dev/null || true
      - echo "üßπ Cleaned node_modules, venvs, and build artifacts"

  open:
    desc: Open key service URLs
    cmds:
      - echo "üåê Opening services..."
      - echo "Neo4j: http://localhost:7474"
      - echo "Client: http://localhost:3000"
      - echo "GraphQL: http://localhost:4000/graphql"
      - echo "Jaeger: http://localhost:16686"
      - echo "Grafana: http://localhost:3001"

  health:
    desc: Check service health
    cmds:
      - chmod +x scripts/health-check.sh && scripts/health-check.sh

  # =============================================================================
  # CI/Release
  # =============================================================================

  ci:
    desc: Run CI pipeline locally
    cmds:
      - task: bootstrap
      - task: check
      - task: up
      - sleep 5
      - task: smoke
      - task: down

  ga:
    desc: GA release validation
    cmds:
      - task: check
      - npm test
      - npx @cyclonedx/cyclonedx-npm --output-file sbom.json
      - ./scripts/release/verify_install.sh

  perf:
    desc: Run performance tests
    cmds:
      - API_BASE=http://localhost:4002 node_modules/.bin/k6 run tests/perf/nl2cypher_preview_test.js
