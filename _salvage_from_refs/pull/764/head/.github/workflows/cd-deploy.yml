name: cd-deploy

on:
  workflow_run:
    workflows: ['Build & Push', 'build-and-push', 'Build and Push']
    types: [completed]
    branches: [main]

permissions:
  contents: read
  id-token: write
  deployments: write

concurrency:
  group: cd-deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy-dev:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    name: Deploy to Dev
    runs-on: ubuntu-latest
    environment:
      name: dev
      url: https://dev.intelgraph.com
    steps:
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy (SSH)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEV_SSH_HOST }}
          username: ${{ secrets.DEV_SSH_USER }}
          key: ${{ secrets.DEV_SSH_KEY }}
          script: |
            set -euo pipefail
            echo "Pulling services…"
            docker compose -f /opt/intelgraph/docker-compose.yml pull server client
            echo "Recreating services…"
            docker compose -f /opt/intelgraph/docker-compose.yml up -d server client
            echo "Pruning old images…"
            docker image prune -f
            echo "Backing up Postgres…"
            PG_BACKUP_FILE="/tmp/pg_backup_$(date +%Y%m%d%H%M%S).sql"
            PGPASSWORD="${{ secrets.DEV_DB_PASSWORD }}" pg_dump -h ${{ secrets.DEV_DB_HOST }} -U ${{ secrets.DEV_DB_USER }} ${{ secrets.DEV_DB_NAME }} > "$PG_BACKUP_FILE" || true
            echo "Running DB migrations…"
            node /opt/intelgraph/server/scripts/db_migrate.js

  deploy-staging:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    name: Deploy to Staging
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://staging.intelgraph.com
    steps:
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy (SSH)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_SSH_HOST }}
          username: ${{ secrets.STAGING_SSH_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            set -euo pipefail
            docker compose -f /opt/intelgraph/docker-compose.yml pull server client
            docker compose -f /opt/intelgraph/docker-compose.yml up -d server client
            docker image prune -f
            PG_BACKUP_FILE="/tmp/pg_backup_$(date +%Y%m%d%H%M%S).sql"
            PGPASSWORD="${{ secrets.STAGING_DB_PASSWORD }}" pg_dump -h ${{ secrets.STAGING_DB_HOST }} -U ${{ secrets.STAGING_DB_USER }} ${{ secrets.STAGING_DB_NAME }} > "$PG_BACKUP_FILE" || true
            node /opt/intelgraph/server/scripts/db_migrate.js

  deploy-prod:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    name: Deploy to Prod
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://intelgraph.com
    steps:
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy (SSH)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_SSH_HOST }}
          username: ${{ secrets.PROD_SSH_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            set -euo pipefail
            docker compose -f /opt/intelgraph/docker-compose.yml pull server client
            docker compose -f /opt/intelgraph/docker-compose.yml up -d server client
            docker image prune -f
            PG_BACKUP_FILE="/tmp/pg_backup_$(date +%Y%m%d%H%M%S).sql"
            PGPASSWORD="${{ secrets.PROD_DB_PASSWORD }}" pg_dump -h ${{ secrets.PROD_DB_HOST }} -U ${{ secrets.PROD_DB_USER }} ${{ secrets.PROD_DB_NAME }} > "$PG_BACKUP_FILE" || true
            node /opt/intelgraph/server/scripts/db_migrate.js
