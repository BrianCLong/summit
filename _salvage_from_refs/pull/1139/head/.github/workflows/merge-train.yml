name: Merge Train
on:
  schedule: [{ cron: "*/30 14-23 * * 1-5" }]  # every 30m business hours UTC
  workflow_dispatch: {}
permissions: { contents: write, pull-requests: write }
jobs:
  train:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Collect eligible PRs
        id: collect
        uses: actions/github-script@v7
        with:
          script: |
            const prs = await github.paginate(github.rest.pulls.list, { owner: context.repo.owner, repo: context.repo.repo, state:'open', sort:'updated' });
            const ok = prs.filter(p =>
              p.labels.some(l=>l.name==='automerge') &&
              p.labels.every(l=>!/^risk:high$/.test(l.name)) &&
              !p.draft && p.mergeable_state!=='blocked'
            ).slice(0, 10);
            core.setOutput('numbers', ok.map(p=>p.number).join(','));
      - name: Build train branch
        if: steps.collect.outputs.numbers != ''
        run: |
          BR=train/$(date -u +%Y%m%dT%H%M%S)
          git checkout -b $BR origin/${{ github.event.repository.default_branch }}
          for n in $(echo "${{ steps.collect.outputs.numbers }}"); do gh pr checkout $n && git reset --soft HEAD~0 && git checkout $BR && git merge --no-ff "pr/$n" || true; done
          git push origin $BR
        env: { GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} }
      - name: Run full suite on train (reuses CI via checks)
        if: steps.collect.outputs.numbers != ''
        run: echo "Train branch pushed; CI will run on $BR"
      - name: Auto-merge queued PRs on green
        if: steps.collect.outputs.numbers != ''
        uses: actions/github-script@v7
        with:
          script: |
            // when the train branch CI is green (checked by required checks), merge individual PRs
            // (Implementation note: typically you'd gate via branch protection; here we simply mark as ready)
            const nums = "${{ steps.collect.outputs.numbers }}".split(',').map(n=>Number(n));
            for (const n of nums) {
              await github.rest.pulls.merge({ owner: context.repo.owner, repo: context.repo.repo, pull_number: n, merge_method: 'squash' }).catch(()=>{});
            }