# ===================================================================
# COMPREHENSIVE ADMISSION CONTROLLERS AND SUPPLY CHAIN SECURITY
# Policy enforcement, SBOM validation, and runtime security monitoring
# ===================================================================

# ===================================================================
# OPA GATEKEEPER CONSTRAINT TEMPLATES
# ===================================================================
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: intelgraphsecuritypolicy
  annotations:
    description: "IntelGraph security policy enforcement"
spec:
  crd:
    spec:
      names:
        kind: IntelGraphSecurityPolicy
      validation:
        openAPIV3Schema:
          type: object
          properties:
            requiredLabels:
              type: array
              items:
                type: string
            forbiddenImages:
              type: array
              items:
                type: string
            allowedRegistries:
              type: array
              items:
                type: string
            maxReplicas:
              type: integer
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package intelgraphsecuritypolicy
        
        violation[{"msg": msg}] {
          required_labels := input.parameters.requiredLabels
          provided_labels := input.review.object.metadata.labels
          missing := required_labels[_]
          not provided_labels[missing]
          msg := sprintf("Missing required label: %v", [missing])
        }
        
        violation[{"msg": msg}] {
          forbidden_images := input.parameters.forbiddenImages
          image := input.review.object.spec.template.spec.containers[_].image
          forbidden_image := forbidden_images[_]
          contains(image, forbidden_image)
          msg := sprintf("Forbidden image detected: %v", [image])
        }
        
        violation[{"msg": msg}] {
          allowed_registries := input.parameters.allowedRegistries
          image := input.review.object.spec.template.spec.containers[_].image
          not image_from_allowed_registry(image, allowed_registries)
          msg := sprintf("Image from unauthorized registry: %v", [image])
        }
        
        violation[{"msg": msg}] {
          max_replicas := input.parameters.maxReplicas
          replicas := input.review.object.spec.replicas
          replicas > max_replicas
          msg := sprintf("Too many replicas: %v (max: %v)", [replicas, max_replicas])
        }
        
        image_from_allowed_registry(image, allowed_registries) {
          registry := allowed_registries[_]
          startswith(image, registry)
        }

---
# ===================================================================
# SECURITY POLICY CONSTRAINTS
# ===================================================================
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: IntelGraphSecurityPolicy
metadata:
  name: intelgraph-production-security
spec:
  match:
    kinds:
      - apiGroups: ["apps"]
        kinds: ["Deployment"]
    namespaces: ["intelgraph-production"]
  parameters:
    requiredLabels:
      - "app.kubernetes.io/name"
      - "app.kubernetes.io/version"
      - "security.intelgraph.ai/level"
    allowedRegistries:
      - "ghcr.io/brianlong/intelgraph/"
      - "gcr.io/distroless/"
      - "registry.k8s.io/"
    forbiddenImages:
      - "latest"
      - "debug"
      - "alpine"
    maxReplicas: 50

---
# ===================================================================
# CONTAINER SECURITY CONSTRAINT TEMPLATE
# ===================================================================
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: containersecuritypolicy
spec:
  crd:
    spec:
      names:
        kind: ContainerSecurityPolicy
      validation:
        openAPIV3Schema:
          type: object
          properties:
            runAsNonRoot:
              type: boolean
            readOnlyRootFilesystem:
              type: boolean
            allowPrivilegeEscalation:
              type: boolean
            requiredDropCapabilities:
              type: array
              items:
                type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package containersecuritypolicy
        
        violation[{"msg": msg}] {
          input.parameters.runAsNonRoot == true
          container := input.review.object.spec.template.spec.containers[_]
          not container.securityContext.runAsNonRoot == true
          msg := sprintf("Container must run as non-root: %v", [container.name])
        }
        
        violation[{"msg": msg}] {
          input.parameters.readOnlyRootFilesystem == true
          container := input.review.object.spec.template.spec.containers[_]
          not container.securityContext.readOnlyRootFilesystem == true
          msg := sprintf("Container must have read-only root filesystem: %v", [container.name])
        }
        
        violation[{"msg": msg}] {
          input.parameters.allowPrivilegeEscalation == false
          container := input.review.object.spec.template.spec.containers[_]
          container.securityContext.allowPrivilegeEscalation == true
          msg := sprintf("Container must not allow privilege escalation: %v", [container.name])
        }
        
        violation[{"msg": msg}] {
          required := input.parameters.requiredDropCapabilities
          container := input.review.object.spec.template.spec.containers[_]
          provided := container.securityContext.capabilities.drop
          missing := required[_]
          not missing in provided
          msg := sprintf("Container missing required dropped capability: %v", [missing])
        }

---
# ===================================================================
# CONTAINER SECURITY CONSTRAINTS
# ===================================================================
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: ContainerSecurityPolicy
metadata:
  name: intelgraph-container-security
spec:
  match:
    kinds:
      - apiGroups: ["apps"]
        kinds: ["Deployment", "StatefulSet", "DaemonSet"]
    namespaces: ["intelgraph-production"]
  parameters:
    runAsNonRoot: true
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    requiredDropCapabilities:
      - "ALL"

---
# ===================================================================
# KYVERNO CLUSTER POLICIES
# ===================================================================
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: intelgraph-supply-chain-security
  annotations:
    policies.kyverno.io/title: Supply Chain Security
    policies.kyverno.io/category: Supply Chain Security
    policies.kyverno.io/severity: high
    policies.kyverno.io/description: >-
      Enforces supply chain security requirements including image signing,
      SBOM validation, and vulnerability scanning.
spec:
  validationFailureAction: enforce
  background: false
  rules:
  - name: verify-image-signatures
    match:
      any:
      - resources:
          kinds:
          - Pod
    verifyImages:
    - imageReferences:
      - "ghcr.io/brianlong/intelgraph/*"
      attestors:
      - count: 1
        entries:
        - keys:
            publicKeys: |-
              -----BEGIN PUBLIC KEY-----
              MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE...
              -----END PUBLIC KEY-----
      - count: 1
        entries:
        - keyless:
            url: https://fulcio.sigstore.dev
            roots: |
              -----BEGIN CERTIFICATE-----
              MIIB9zCCAXygAwIBAgIUALZNAPFdxHPwjeDl...
              -----END CERTIFICATE-----
            rekor:
              url: https://rekor.sigstore.dev

  - name: require-sbom-attestation
    match:
      any:
      - resources:
          kinds:
          - Pod
    verifyImages:
    - imageReferences:
      - "ghcr.io/brianlong/intelgraph/*"
      attestations:
      - predicateType: https://spdx.dev/Document
        conditions:
        - all:
          - key: "{{ creationInfo.created }}"
            operator: DurationSinceNow
            value: "24h"

  - name: block-unsigned-images
    match:
      any:
      - resources:
          kinds:
          - Pod
    validate:
      message: "All images must be signed and have attestations"
      fail:
        conditions:
        - key: "{{ request.object.spec.containers[?contains(image, 'ghcr.io/brianlong/intelgraph')] | length(@) }}"
          operator: GreaterThan
          value: 0

---
# ===================================================================
# VULNERABILITY SCANNING POLICY
# ===================================================================
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: vulnerability-scanning-policy
  annotations:
    policies.kyverno.io/title: Vulnerability Scanning
    policies.kyverno.io/category: Security
    policies.kyverno.io/severity: high
spec:
  validationFailureAction: enforce
  background: false
  rules:
  - name: check-vulnerability-scan-results
    match:
      any:
      - resources:
          kinds:
          - Pod
    mutate:
      patchStrategicMerge:
        metadata:
          annotations:
            security.intelgraph.ai/scan-required: "true"
            security.intelgraph.ai/scan-time: "{{ time_now_utc() }}"
    validate:
      message: "Images must pass vulnerability scanning"
      pattern:
        metadata:
          annotations:
            security.intelgraph.ai/scan-status: "passed"

---
# ===================================================================
# FALCO RUNTIME SECURITY RULES
# ===================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: falco-rules
  namespace: security
  labels:
    app.kubernetes.io/name: falco
data:
  intelgraph_rules.yaml: |
    - rule: IntelGraph Unauthorized Process in Container
      desc: Detect unauthorized process execution in IntelGraph containers
      condition: >
        spawned_process and container and 
        k8s.ns.name="intelgraph-production" and
        not proc.name in (node, npm, dumb-init, tini) and
        not proc.pname in (node, npm, dumb-init, tini)
      output: >
        Unauthorized process in IntelGraph container 
        (user=%user.name command=%proc.cmdline container=%container.name 
         image=%container.image.repository k8s.pod=%k8s.pod.name)
      priority: WARNING
      tags: [container, process, intelgraph]

    - rule: IntelGraph Sensitive File Access
      desc: Detect access to sensitive files in IntelGraph containers
      condition: >
        open_read and container and 
        k8s.ns.name="intelgraph-production" and
        fd.name in (/etc/passwd, /etc/shadow, /etc/group, 
                   /var/run/secrets, /run/secrets) and
        not proc.name in (node, npm)
      output: >
        Sensitive file accessed in IntelGraph container 
        (file=%fd.name user=%user.name process=%proc.name 
         container=%container.name k8s.pod=%k8s.pod.name)
      priority: CRITICAL
      tags: [filesystem, secrets, intelgraph]

    - rule: IntelGraph Network Connection to Suspicious IP
      desc: Detect network connections to suspicious IPs from IntelGraph
      condition: >
        outbound and container and 
        k8s.ns.name="intelgraph-production" and
        not fd.sip in (cluster_ip_range, allowed_external_ips)
      output: >
        Suspicious network connection from IntelGraph 
        (destination=%fd.sip:%fd.sport user=%user.name 
         process=%proc.name container=%container.name k8s.pod=%k8s.pod.name)
      priority: WARNING
      tags: [network, intelgraph]

    - rule: IntelGraph Privilege Escalation Attempt
      desc: Detect privilege escalation attempts in IntelGraph containers
      condition: >
        spawned_process and container and 
        k8s.ns.name="intelgraph-production" and
        proc.name in (su, sudo, pkexec, doas) and
        not user.name=root
      output: >
        Privilege escalation attempt in IntelGraph container 
        (command=%proc.cmdline user=%user.name container=%container.name 
         k8s.pod=%k8s.pod.name)
      priority: CRITICAL
      tags: [privilege_escalation, intelgraph]

---
# ===================================================================
# ADMISSION WEBHOOK CONFIGURATION
# ===================================================================
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionWebhook
metadata:
  name: intelgraph-security-validator
spec:
  clientConfig:
    service:
      name: intelgraph-admission-webhook
      namespace: security
      path: "/validate"
  rules:
  - operations: ["CREATE", "UPDATE"]
    apiGroups: ["apps"]
    apiVersions: ["v1"]
    resources: ["deployments", "statefulsets", "daemonsets"]
  - operations: ["CREATE", "UPDATE"]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  namespaceSelector:
    matchLabels:
      security.intelgraph.ai/admission-webhook: "enabled"
  admissionReviewVersions: ["v1", "v1beta1"]
  sideEffects: None
  failurePolicy: Fail

---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingAdmissionWebhook
metadata:
  name: intelgraph-security-mutator
spec:
  clientConfig:
    service:
      name: intelgraph-admission-webhook
      namespace: security
      path: "/mutate"
  rules:
  - operations: ["CREATE"]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  namespaceSelector:
    matchLabels:
      security.intelgraph.ai/admission-webhook: "enabled"
  admissionReviewVersions: ["v1", "v1beta1"]
  sideEffects: None
  failurePolicy: Fail

---
# ===================================================================
# ADMISSION WEBHOOK SERVICE
# ===================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: intelgraph-admission-webhook
  namespace: security
  labels:
    app.kubernetes.io/name: admission-webhook
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: admission-webhook
  template:
    metadata:
      labels:
        app.kubernetes.io/name: admission-webhook
    spec:
      serviceAccountName: admission-controller-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
        runAsGroup: 65532
        fsGroup: 65532
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: webhook
        image: ghcr.io/brianlong/intelgraph/admission-webhook:v1.0.0
        imagePullPolicy: Always
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        ports:
        - containerPort: 8443
          name: webhook
          protocol: TCP
        env:
        - name: TLS_CERT_FILE
          value: /etc/certs/tls.crt
        - name: TLS_PRIVATE_KEY_FILE
          value: /etc/certs/tls.key
        - name: LOG_LEVEL
          value: "info"
        - name: PORT
          value: "8443"
        volumeMounts:
        - name: tls-certs
          mountPath: /etc/certs
          readOnly: true
        - name: tmp
          mountPath: /tmp
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: tls-certs
        secret:
          secretName: admission-webhook-tls
      - name: tmp
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: intelgraph-admission-webhook
  namespace: security
  labels:
    app.kubernetes.io/name: admission-webhook
spec:
  selector:
    app.kubernetes.io/name: admission-webhook
  ports:
  - port: 443
    targetPort: 8443
    protocol: TCP
    name: webhook

---
# ===================================================================
# POLICY VIOLATION MONITORING
# ===================================================================
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: admission-controller-alerts
  namespace: monitoring
  labels:
    app.kubernetes.io/name: admission-controller
spec:
  groups:
  - name: admission.security.rules
    rules:
    - alert: PolicyViolationDetected
      expr: increase(gatekeeper_violations_total[5m]) > 0
      for: 1m
      labels:
        severity: warning
      annotations:
        summary: "Security policy violation detected"
        description: "Gatekeeper detected {{ $value }} policy violations in the last 5 minutes"
    
    - alert: AdmissionWebhookFailure
      expr: increase(apiserver_admission_webhook_admission_duration_seconds_count{name="intelgraph-security-validator",rejected="true"}[5m]) > 5
      for: 2m
      labels:
        severity: critical
      annotations:
        summary: "High admission webhook rejection rate"
        description: "Admission webhook rejecting too many requests: {{ $value }} rejections in 5 minutes"
    
    - alert: UnsignedImageDetected
      expr: increase(kyverno_policy_violations_total{policy_name="intelgraph-supply-chain-security"}[5m]) > 0
      for: 0m
      labels:
        severity: critical
      annotations:
        summary: "Unsigned container image detected"
        description: "Attempt to deploy unsigned container image blocked"

---
# ===================================================================
# RUNTIME SECURITY MONITORING
# ===================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: runtime-security-config
  namespace: security
data:
  config.yaml: |
    monitoring:
      enabled: true
      interval: 30s
      
    rules:
      - name: "Unauthorized binary execution"
        pattern: "exec_binary"
        severity: "high"
        action: "alert"
        
      - name: "Sensitive file access"
        pattern: "file_access:/etc/passwd,/etc/shadow"
        severity: "critical"
        action: "block"
        
      - name: "Network connection to suspicious IP"
        pattern: "net_connect:external"
        severity: "medium"
        action: "log"
        
    notifications:
      slack:
        enabled: true
        channel: "#security-alerts"
        webhook_url: "${SLACK_WEBHOOK_URL}"
        
      pagerduty:
        enabled: true
        routing_key: "${PAGERDUTY_ROUTING_KEY}"