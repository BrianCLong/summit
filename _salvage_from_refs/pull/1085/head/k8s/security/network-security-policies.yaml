# ===================================================================
# COMPREHENSIVE NETWORK SECURITY POLICIES
# Zero-trust network controls for IntelGraph platform
# ===================================================================

# ===================================================================
# DEFAULT DENY ALL POLICY
# ===================================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
  namespace: intelgraph-production
  labels:
    app.kubernetes.io/name: intelgraph
    security.intelgraph.ai/policy: default-deny
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress

---
# ===================================================================
# MAESTRO ORCHESTRATOR NETWORK POLICY
# ===================================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: maestro-orchestrator-netpol
  namespace: intelgraph-production
  labels:
    app.kubernetes.io/name: maestro
    app.kubernetes.io/component: orchestrator
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: maestro
      app.kubernetes.io/component: orchestrator
  policyTypes:
  - Ingress
  - Egress
  
  ingress:
  # Ingress from nginx controller
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8080
  
  # Monitoring ingress
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: prometheus
    ports:
    - protocol: TCP
      port: 9090  # metrics
  
  # Health check from load balancer
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: aws-load-balancer-controller
    ports:
    - protocol: TCP
      port: 8080
  
  egress:
  # DNS resolution
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    - podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  
  # Database connections
  - to:
    - namespaceSelector:
        matchLabels:
          name: database
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: postgresql
    ports:
    - protocol: TCP
      port: 5432
  
  # Redis cache connections
  - to:
    - namespaceSelector:
        matchLabels:
          name: cache
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: redis
    ports:
    - protocol: TCP
      port: 6379
  
  # External HTTPS API calls (AI services)
  - to: []
    ports:
    - protocol: TCP
      port: 443
  
  # OPA Policy Decision Point
  - to:
    - namespaceSelector:
        matchLabels:
          name: security
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: opa
    ports:
    - protocol: TCP
      port: 8181
  
  # OpenTelemetry collector
  - to:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: opentelemetry-collector
    ports:
    - protocol: TCP
      port: 4317
    - protocol: TCP
      port: 4318

---
# ===================================================================
# INGRESS CONTROLLER NETWORK POLICY
# ===================================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: nginx-ingress-netpol
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
  policyTypes:
  - Ingress
  - Egress
  
  ingress:
  # External traffic from load balancer
  - from: []
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
  
  # Webhook from cert-manager
  - from:
    - namespaceSelector:
        matchLabels:
          name: cert-manager
    ports:
    - protocol: TCP
      port: 8443
  
  egress:
  # DNS resolution
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    - podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  
  # Backend services
  - to:
    - namespaceSelector:
        matchLabels:
          name: intelgraph-production
    ports:
    - protocol: TCP
      port: 8080
  
  # External certificate validation (Let's Encrypt)
  - to: []
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443

---
# ===================================================================
# MONITORING NETWORK POLICY
# ===================================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: monitoring-netpol
  namespace: monitoring
  labels:
    app.kubernetes.io/name: monitoring
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  
  ingress:
  # Grafana dashboard access
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 3000
  
  # Inter-monitoring communication
  - from:
    - podSelector: {}
    ports:
    - protocol: TCP
      port: 9090  # Prometheus
    - protocol: TCP
      port: 9093  # Alertmanager
    - protocol: TCP
      port: 4317  # OTEL collector
    - protocol: TCP
      port: 4318  # OTEL collector HTTP
  
  egress:
  # DNS resolution
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    - podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  
  # Scrape metrics from applications
  - to:
    - namespaceSelector:
        matchLabels:
          name: intelgraph-production
    ports:
    - protocol: TCP
      port: 9090  # metrics port
  
  # External alerting (Slack, PagerDuty)
  - to: []
    ports:
    - protocol: TCP
      port: 443

---
# ===================================================================
# DATABASE NETWORK POLICY
# ===================================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: database-netpol
  namespace: database
  labels:
    app.kubernetes.io/name: database
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  
  ingress:
  # Application connections
  - from:
    - namespaceSelector:
        matchLabels:
          name: intelgraph-production
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: maestro
    ports:
    - protocol: TCP
      port: 5432
  
  # Backup and monitoring
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: postgres-exporter
    ports:
    - protocol: TCP
      port: 5432
  
  egress:
  # DNS resolution only
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    - podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53

---
# ===================================================================
# SECURITY SERVICES NETWORK POLICY
# ===================================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: security-services-netpol
  namespace: security
  labels:
    app.kubernetes.io/name: security-services
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  
  ingress:
  # OPA policy queries
  - from:
    - namespaceSelector:
        matchLabels:
          name: intelgraph-production
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: maestro
    ports:
    - protocol: TCP
      port: 8181
  
  # Vault secrets access
  - from:
    - namespaceSelector:
        matchLabels:
          name: intelgraph-production
    - podSelector:
        matchLabels:
          security.intelgraph.ai/vault-client: "true"
    ports:
    - protocol: TCP
      port: 8200
  
  egress:
  # DNS resolution
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    - podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53
  
  # External security feeds (optional)
  - to: []
    ports:
    - protocol: TCP
      port: 443

---
# ===================================================================
# CILIUM NETWORK POLICY (Enhanced L3/L4/L7)
# ===================================================================
apiVersion: "cilium.io/v2"
kind: CiliumNetworkPolicy
metadata:
  name: maestro-orchestrator-l7-policy
  namespace: intelgraph-production
spec:
  endpointSelector:
    matchLabels:
      app.kubernetes.io/name: maestro
      app.kubernetes.io/component: orchestrator
  
  ingress:
  # HTTP/HTTPS ingress with L7 filtering
  - fromEndpoints:
    - matchLabels:
        "k8s:io.kubernetes.pod.namespace": ingress-nginx
        app.kubernetes.io/name: ingress-nginx
    toPorts:
    - ports:
      - port: "8080"
        protocol: TCP
      rules:
        http:
        - method: "GET"
          path: "/healthz"
        - method: "GET"
          path: "/readyz"
        - method: "GET"
          path: "/metrics"
        - method: "POST"
          path: "/api/maestro/v1/.*"
          headers:
          - "Content-Type: application/json"
        - method: "GET"
          path: "/api/maestro/v1/.*"
        - method: "PUT"
          path: "/api/maestro/v1/.*"
          headers:
          - "Content-Type: application/json"
        - method: "DELETE"
          path: "/api/maestro/v1/.*"
  
  egress:
  # DNS with domain restrictions
  - toEndpoints:
    - matchLabels:
        "k8s:io.kubernetes.pod.namespace": kube-system
        k8s-app: kube-dns
    toPorts:
    - ports:
      - port: "53"
        protocol: UDP
      rules:
        dns:
        - matchName: "*.intelgraph.ai"
        - matchName: "api.openai.com"
        - matchName: "api.anthropic.com"
        - matchName: "*.amazonaws.com"
        - matchName: "kubernetes.default.svc.cluster.local"
  
  # HTTPS egress with SNI filtering
  - toFQDNs:
    - matchName: "api.openai.com"
    - matchName: "api.anthropic.com"
    - matchPattern: "*.intelgraph.ai"
    toPorts:
    - ports:
      - port: "443"
        protocol: TCP
      rules:
        http:
        - method: "POST"
          path: "/v1/.*"
          headers:
          - "Authorization: Bearer.*"
          - "Content-Type: application/json"
        - method: "GET"
          path: "/v1/.*"
          headers:
          - "Authorization: Bearer.*"

---
# ===================================================================
# ISTIO SECURITY POLICIES
# ===================================================================
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: maestro-orchestrator-mtls
  namespace: intelgraph-production
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: maestro
      app.kubernetes.io/component: orchestrator
  mtls:
    mode: STRICT

---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: maestro-orchestrator-authz
  namespace: intelgraph-production
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: maestro
      app.kubernetes.io/component: orchestrator
  
  rules:
  # Health checks
  - from:
    - source:
        principals: ["cluster.local/ns/ingress-nginx/sa/ingress-nginx"]
    to:
    - operation:
        methods: ["GET"]
        paths: ["/healthz", "/readyz"]
  
  # Metrics collection
  - from:
    - source:
        principals: ["cluster.local/ns/monitoring/sa/prometheus"]
    to:
    - operation:
        methods: ["GET"]
        paths: ["/metrics"]
  
  # API access with JWT validation
  - from:
    - source:
        principals: ["cluster.local/ns/ingress-nginx/sa/ingress-nginx"]
    to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE"]
        paths: ["/api/maestro/v1/*"]
    when:
    - key: request.headers[authorization]
      values: ["Bearer *"]

---
# ===================================================================
# RATE LIMITING POLICY
# ===================================================================
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: maestro-rate-limit
  namespace: intelgraph-production
spec:
  workloadSelector:
    labels:
      app.kubernetes.io/name: maestro
      app.kubernetes.io/component: orchestrator
  
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_INBOUND
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.filters.http.local_ratelimit
        typed_config:
          "@type": type.googleapis.com/udpa.type.v1.TypedStruct
          type_url: type.googleapis.com/envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit
          value:
            stat_prefix: maestro_rate_limiter
            token_bucket:
              max_tokens: 1000
              tokens_per_fill: 100
              fill_interval: 60s
            filter_enabled:
              runtime_key: local_rate_limit_enabled
              default_value:
                numerator: 100
                denominator: HUNDRED
            filter_enforced:
              runtime_key: local_rate_limit_enforced
              default_value:
                numerator: 100
                denominator: HUNDRED