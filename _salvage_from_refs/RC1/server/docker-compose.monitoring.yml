version: '3.8'

services:
  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: intelgraph-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./infrastructure/monitoring/prometheus/alerts.yml:/etc/prometheus/alerts.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped
    networks:
      - monitoring-network
      - intelgraph-network

  # Grafana - Metrics Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: intelgraph-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./infrastructure/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    restart: unless-stopped
    depends_on:
      - prometheus
    networks:
      - monitoring-network

  # AlertManager - Alert Management
  alertmanager:
    image: prom/alertmanager:latest
    container_name: intelgraph-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./infrastructure/monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    restart: unless-stopped
    networks:
      - monitoring-network

  # Node Exporter - System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: intelgraph-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    networks:
      - monitoring-network

  # Redis Exporter - Redis Metrics
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: intelgraph-redis-exporter
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    restart: unless-stopped
    depends_on:
      - redis
    networks:
      - monitoring-network
      - intelgraph-network

  # Postgres Exporter - PostgreSQL Metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: intelgraph-postgres-exporter
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
    restart: unless-stopped
    depends_on:
      - postgres
    networks:
      - monitoring-network
      - intelgraph-network

  # Loki - Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: intelgraph-loki
    ports:
      - "3100:3100"
    volumes:
      - ./infrastructure/monitoring/loki/loki.yml:/etc/loki/loki.yml
      - loki_data:/loki
    command: -config.file=/etc/loki/loki.yml
    restart: unless-stopped
    networks:
      - monitoring-network

  # Promtail - Log Collector
  promtail:
    image: grafana/promtail:latest
    container_name: intelgraph-promtail
    volumes:
      - ./infrastructure/monitoring/promtail/promtail.yml:/etc/promtail/promtail.yml
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/promtail.yml
    restart: unless-stopped
    depends_on:
      - loki
    networks:
      - monitoring-network

  # Jaeger - Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: intelgraph-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
    restart: unless-stopped
    networks:
      - monitoring-network

  # ElasticSearch for APM (Application Performance Monitoring)
  elasticsearch-apm:
    image: elasticsearch:7.17.0
    container_name: intelgraph-elasticsearch-apm
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_apm_data:/usr/share/elasticsearch/data
    restart: unless-stopped
    networks:
      - monitoring-network

  # Kibana for Log Analysis
  kibana:
    image: kibana:7.17.0
    container_name: intelgraph-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch-apm:9200
    depends_on:
      - elasticsearch-apm
    restart: unless-stopped
    networks:
      - monitoring-network

  # Uptime Monitoring
  uptime-kuma:
    image: louislam/uptime-kuma:latest
    container_name: intelgraph-uptime-kuma
    ports:
      - "3002:3001"
    volumes:
      - uptime_data:/app/data
    restart: unless-stopped
    networks:
      - monitoring-network

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  loki_data:
    driver: local
  elasticsearch_apm_data:
    driver: local
  uptime_data:
    driver: local

networks:
  monitoring-network:
    driver: bridge
  intelgraph-network:
    external: true