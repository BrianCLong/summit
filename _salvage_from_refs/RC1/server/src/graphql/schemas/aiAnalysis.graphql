# AI Analysis Schema
# Comprehensive AI-powered analysis capabilities for entity extraction,
# relationship detection, and intelligent insights generation

type ExtractedEntity {
  id: ID!
  text: String!
  type: String!
  confidence: Float!
  position: EntityPosition!
}

type EntityPosition {
  start: Int!
  end: Int!
}

type ExtractedRelationship {
  id: ID!
  source: String!
  target: String!
  type: String!
  confidence: Float!
}

type EntityExtractionResult {
  entities: [ExtractedEntity!]!
  relationships: [ExtractedRelationship!]!
}

type AnalyzedRelationship {
  id: ID!
  source: String!
  target: String!
  type: String!
  confidence: Float!
  context: String
  metadata: JSON
}

type SuggestedRelationship {
  type: String!
  reason: String!
  confidence: Float!
}

type RiskFactor {
  factor: String!
  severity: String!
  description: String!
}

type EntityInsights {
  entityId: ID!
  insights: [String!]!
  suggestedRelationships: [SuggestedRelationship!]!
  riskFactors: [RiskFactor!]!
  generatedAt: String!
}

type SentimentAnalysis {
  sentiment: String!
  confidence: Float!
  keywords: [String!]!
  metadata: JSON
}

type DataQualityInsight {
  id: ID!
  type: String!
  severity: String!
  message: String!
  suggestions: [String!]!
  affectedEntities: [ID!]!
}

type DataQualityReport {
  graphId: ID!
  overallScore: Float!
  insights: [DataQualityInsight!]!
  recommendations: [String!]!
  generatedAt: String!
}

type AppliedSuggestion {
  suggestionId: ID!
  applied: Boolean!
  message: String!
  changes: [String!]!
}

type AISuggestionResult {
  graphId: ID!
  appliedSuggestions: [AppliedSuggestion!]!
  totalChanges: Int!
  appliedAt: String!
}

type EntityEnhancements {
  properties: [String!]!
  relationships: [String!]!
  insights: [String!]!
}

type EntityEnhancementResult {
  entityId: ID!
  enhancements: EntityEnhancements!
  confidence: Float!
  enhancedAt: String!
}

type AIEnhancementResult {
  enhancements: [EntityEnhancementResult!]!
  totalEntitiesEnhanced: Int!
  totalEnhancementsApplied: Int!
}

# AI Analysis Queries
extend type Query {
  """
  Extract entities and relationships from text using AI/NLP techniques
  """
  extractEntities(
    text: String!
    extractRelationships: Boolean = false
    confidenceThreshold: Float = 0.7
  ): EntityExtractionResult!

  """
  Analyze potential relationships between a list of entities within given text
  """
  analyzeRelationships(
    entities: [String!]!
    text: String!
  ): [AnalyzedRelationship!]!

  """
  Generate AI-powered insights for a specific entity
  """
  generateEntityInsights(
    entityId: ID!
    entityType: String!
    properties: JSON = {}
  ): EntityInsights!

  """
  Perform sentiment analysis on text content
  """
  analyzeSentiment(
    text: String!
  ): SentimentAnalysis!

  """
  Get AI-generated insights about data quality and suggestions for improvement
  """
  getDataQualityInsights(
    graphId: ID
  ): DataQualityReport!
}

# AI Analysis Mutations
extend type Mutation {
  """
  Apply AI-generated suggestions to improve graph structure and data quality
  """
  applyAISuggestions(
    graphId: ID!
    suggestionIds: [ID!]!
  ): AISuggestionResult!

  """
  Use AI to enhance entities with additional properties, relationships, and insights
  """
  enhanceEntitiesWithAI(
    entityIds: [ID!]!
    enhancementTypes: [String!] = ["properties", "relationships", "insights"]
  ): AIEnhancementResult!
}