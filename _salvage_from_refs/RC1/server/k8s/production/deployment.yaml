apiVersion: apps/v1
kind: Deployment
metadata:
  name: intelgraph-app
  namespace: intelgraph-production
  labels:
    app: intelgraph
    component: backend
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: intelgraph
      component: backend
  template:
    metadata:
      labels:
        app: intelgraph
        component: backend
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "4000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: intelgraph-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      initContainers:
        - name: wait-for-databases
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              echo "Waiting for Neo4j..."
              until nc -z intelgraph-neo4j 7687; do sleep 1; done
              echo "Waiting for PostgreSQL..."
              until nc -z intelgraph-postgres 5432; do sleep 1; done
              echo "Waiting for Redis..."
              until nc -z intelgraph-redis 6379; do sleep 1; done
              echo "All databases are ready!"
      containers:
        - name: intelgraph-app
          image: ${IMAGE_TAG}
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 4000
              protocol: TCP
          env:
            - name: NODE_ENV
              value: "production"
            - name: PORT
              value: "4000"
            # Database connections
            - name: NEO4J_URI
              value: "bolt://intelgraph-neo4j:7687"
            - name: NEO4J_USERNAME
              value: "neo4j"
            - name: NEO4J_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: intelgraph-secrets
                  key: neo4j_password
            - name: POSTGRES_HOST
              value: "intelgraph-postgres"
            - name: POSTGRES_PORT
              value: "5432"
            - name: POSTGRES_DB
              value: "intelgraph_prod"
            - name: POSTGRES_USER
              value: "intelgraph"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: intelgraph-secrets
                  key: postgres_password
            - name: REDIS_HOST
              value: "intelgraph-redis"
            - name: REDIS_PORT
              value: "6379"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: intelgraph-secrets
                  key: redis_password
            # JWT secrets
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: intelgraph-secrets
                  key: jwt_secret
            - name: JWT_REFRESH_SECRET
              valueFrom:
                secretKeyRef:
                  name: intelgraph-secrets
                  key: jwt_refresh_secret
            # External API keys
            - name: OPENAI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: intelgraph-secrets
                  key: openai_api_key
            # Monitoring
            - name: PROMETHEUS_ENABLED
              value: "true"
            - name: SENTRY_DSN
              valueFrom:
                secretKeyRef:
                  name: intelgraph-secrets
                  key: sentry_dsn
                  optional: true
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "2Gi"
              cpu: "1000m"
          livenessProbe:
            httpGet:
              path: /health
              port: http
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /api/readyz
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /health
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 10
          volumeMounts:
            - name: uploads
              mountPath: /app/uploads
            - name: logs
              mountPath: /app/logs
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: uploads
          persistentVolumeClaim:
            claimName: intelgraph-uploads-pvc
        - name: logs
          emptyDir: {}
        - name: tmp
          emptyDir:
            sizeLimit: 1Gi
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values: ["intelgraph"]
                topologyKey: kubernetes.io/hostname
      tolerations:
        - key: "node.kubernetes.io/not-ready"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 300
        - key: "node.kubernetes.io/unreachable"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 300

---
apiVersion: v1
kind: Service
metadata:
  name: intelgraph-app-service
  namespace: intelgraph-production
  labels:
    app: intelgraph
    component: backend
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "4000"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: 4000
      protocol: TCP
  selector:
    app: intelgraph
    component: backend

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: intelgraph-ingress
  namespace: intelgraph-production
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
    - hosts:
        - intelgraph.example.com
        - api.intelgraph.example.com
      secretName: intelgraph-tls
  rules:
    - host: intelgraph.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: intelgraph-app-service
                port:
                  number: 80
    - host: api.intelgraph.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: intelgraph-app-service
                port:
                  number: 80

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: intelgraph-uploads-pvc
  namespace: intelgraph-production
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: intelgraph-pdb
  namespace: intelgraph-production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: intelgraph
      component: backend

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: intelgraph-hpa
  namespace: intelgraph-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: intelgraph-app
  minReplicas: 3
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 100
          periodSeconds: 60