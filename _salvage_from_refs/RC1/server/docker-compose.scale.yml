version: '3.8'

services:
  # NGINX Load Balancer
  nginx:
    image: nginx:alpine
    container_name: intelgraph-nginx
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Status endpoint
    volumes:
      - ./infrastructure/load-balancer/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/ssl:/etc/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - intelgraph-app-1
      - intelgraph-app-2
      - intelgraph-app-3
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - intelgraph-network

  # Application Instances
  intelgraph-app-1:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: intelgraph-app-1
    environment:
      - NODE_ENV=production
      - PORT=4000
      - INSTANCE_ID=app-1
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
    volumes:
      - app_uploads:/app/uploads
      - app_logs_1:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'
    networks:
      - intelgraph-network

  intelgraph-app-2:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: intelgraph-app-2
    environment:
      - NODE_ENV=production
      - PORT=4000
      - INSTANCE_ID=app-2
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
    volumes:
      - app_uploads:/app/uploads
      - app_logs_2:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'
    networks:
      - intelgraph-network

  intelgraph-app-3:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: intelgraph-app-3
    environment:
      - NODE_ENV=production
      - PORT=4000
      - INSTANCE_ID=app-3
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
    volumes:
      - app_uploads:/app/uploads
      - app_logs_3:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'
    networks:
      - intelgraph-network

  # Auto-scaling service (conceptual - would be replaced by Kubernetes HPA)
  autoscaler:
    image: alpine:latest
    container_name: intelgraph-autoscaler
    volumes:
      - ./infrastructure/scripts/autoscaler.sh:/autoscaler.sh:ro
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - CHECK_INTERVAL=60
      - CPU_THRESHOLD=70
      - MEMORY_THRESHOLD=80
      - MIN_INSTANCES=3
      - MAX_INSTANCES=10
      - SCALE_UP_COOLDOWN=300
      - SCALE_DOWN_COOLDOWN=600
    command: sh /autoscaler.sh
    restart: unless-stopped
    depends_on:
      - intelgraph-app-1
      - intelgraph-app-2
      - intelgraph-app-3
    networks:
      - intelgraph-network

  # Circuit Breaker / Health Monitor
  health-monitor:
    image: alpine:latest
    container_name: intelgraph-health-monitor
    volumes:
      - ./infrastructure/scripts/health-monitor.sh:/health-monitor.sh:ro
    environment:
      - MONITOR_INTERVAL=30
      - HEALTH_ENDPOINT=http://nginx/health
      - ALERT_WEBHOOK_URL=${ALERT_WEBHOOK_URL}
    command: sh /health-monitor.sh
    restart: unless-stopped
    depends_on:
      - nginx
    networks:
      - intelgraph-network

volumes:
  app_uploads:
    driver: local
  app_logs_1:
    driver: local
  app_logs_2:
    driver: local
  app_logs_3:
    driver: local
  nginx_logs:
    driver: local

networks:
  intelgraph-network:
    external: true