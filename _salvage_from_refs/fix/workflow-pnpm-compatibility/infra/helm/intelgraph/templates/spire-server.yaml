# SPIRE Server Deployment for Zero-Trust mTLS
apiVersion: apps/v1
kind: Deployment
metadata:
  name: spire-server
  namespace: {{ .Values.namespace | default "intelgraph" }}
  labels:
    app: spire-server
    component: identity
spec:
  replicas: {{ .Values.spire.server.replicas | default 2 }}
  selector:
    matchLabels:
      app: spire-server
  template:
    metadata:
      labels:
        app: spire-server
        component: identity
    spec:
      serviceAccountName: spire-server
      containers:
      - name: spire-server
        image: {{ .Values.spire.server.image | default "ghcr.io/spiffe/spire-server:1.8.5" }}
        args:
        - -config
        - /run/spire/config/server.conf
        ports:
        - containerPort: 8081
          name: grpc
          protocol: TCP
        - containerPort: 8080
          name: healthz
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /live
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
        volumeMounts:
        - name: spire-config
          mountPath: /run/spire/config
          readOnly: true
        - name: spire-data
          mountPath: /run/spire/data
        - name: socket
          mountPath: /tmp/spire-server/private
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        env:
        - name: SPIRE_TRUST_DOMAIN
          value: {{ .Values.spire.trustDomain | default "intelgraph.local" }}
      volumes:
      - name: spire-config
        configMap:
          name: spire-server-config
      - name: spire-data
        persistentVolumeClaim:
          claimName: spire-server-data
      - name: socket
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: spire-server
  namespace: {{ .Values.namespace | default "intelgraph" }}
  labels:
    app: spire-server
spec:
  type: ClusterIP
  ports:
  - name: grpc
    port: 8081
    targetPort: 8081
    protocol: TCP
  - name: healthz
    port: 8080
    targetPort: 8080
    protocol: TCP
  selector:
    app: spire-server
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: spire-server
  namespace: {{ .Values.namespace | default "intelgraph" }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: spire-server-cluster-role
rules:
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
- apiGroups: ["authentication.k8s.io"]
  resources: ["tokenreviews"]
  verbs: ["create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: spire-server-cluster-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: spire-server-cluster-role
subjects:
- kind: ServiceAccount
  name: spire-server
  namespace: {{ .Values.namespace | default "intelgraph" }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: spire-server-config
  namespace: {{ .Values.namespace | default "intelgraph" }}
data:
  server.conf: |
    server {
      bind_address = "0.0.0.0"
      bind_port = "8081"
      trust_domain = "{{ .Values.spire.trustDomain | default "intelgraph.local" }}"
      data_dir = "/run/spire/data"
      log_level = "{{ .Values.spire.server.logLevel | default "INFO" }}"
      socket_path = "/tmp/spire-server/private/api.sock"
      
      ca_key_type = "rsa-2048"
      ca_ttl = "87600h" # 10 years
      default_x509_svid_ttl = "1h"
      
      # Telemetry
      telemetry {
        Prometheus {
          port = 9988
        }
      }
    }

    plugins {
      DataStore "sql" {
        plugin_data {
          database_type = "postgres"
          connection_string = "postgresql://{{ .Values.postgres.username }}:{{ .Values.postgres.password }}@{{ .Values.postgres.host }}:{{ .Values.postgres.port }}/{{ .Values.postgres.database }}?sslmode=require"
          max_open_conns = 10
          max_idle_conns = 5
          conn_max_lifetime = "1h"
        }
      }

      NodeAttestor "k8s_psat" {
        plugin_data {
          clusters = {
            "{{ .Values.cluster.name | default "intelgraph-cluster" }}" = {
              service_account_allow_list = [
                "intelgraph:conductor",
                "intelgraph:gateway", 
                "intelgraph:worker",
                "intelgraph:spire-agent"
              ]
            }
          }
        }
      }

      KeyManager "memory" {
        plugin_data = {}
      }

      Notifier "k8sbundle" {
        plugin_data {
          namespace = "{{ .Values.namespace | default "intelgraph" }}"
          config_map = "spire-bundle"
        }
      }
    }

    health_checks {
      listener_enabled = true
      bind_address = "0.0.0.0"
      bind_port = "8080"
      live_path = "/live"
      ready_path = "/ready"
    }
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: spire-server-data
  namespace: {{ .Values.namespace | default "intelgraph" }}
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.spire.server.storageSize | default "1Gi" }}
  {{- if .Values.storageClass }}
  storageClassName: {{ .Values.storageClass }}
  {{- end }}