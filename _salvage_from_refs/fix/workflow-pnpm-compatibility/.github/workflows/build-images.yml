name: build-images

on:
  push:
    branches: [ main ]
    paths:
      - 'Dockerfile*'
      - '**/Dockerfile*'
      - 'package.json'
      - 'package-lock.json'
      - 'pnpm-lock.yaml'
      - 'src/**'
      - 'server/**'
      - 'client/**'
      - 'apps/**'
      - 'services/**'
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write
  actions: read
  security-events: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: brianclong/intelgraph

jobs:
  build-and-push:
    runs-on: ubuntu-22.04
    timeout-minutes: 45
    strategy:
      matrix:
        component:
          - name: web
            dockerfile: apps/web/Dockerfile
            context: .
          - name: server
            dockerfile: server/Dockerfile
            context: .
          - name: gateway
            dockerfile: services/gateway/Dockerfile
            context: .
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm dlx turbo run build --cache-dir .turbo
        env:
          TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
          TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.2.4'

      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0.17.1

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=IntelGraph ${{ matrix.component.name }}
            org.opencontainers.image.description=IntelGraph ${{ matrix.component.name }} component
            org.opencontainers.image.vendor=IntelGraph Team

      - name: Check if Dockerfile exists
        id: dockerfile-check
        run: |
          if [ -f "${{ matrix.component.dockerfile }}" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Warning: Dockerfile not found at ${{ matrix.component.dockerfile }}"
          fi

      - name: Build and push Docker image
        if: steps.dockerfile-check.outputs.exists == 'true'
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.component.context }}
          file: ${{ matrix.component.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: Generate SBOM with Syft
        if: steps.dockerfile-check.outputs.exists == 'true'
        run: |
          syft ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component.name }}:latest -o spdx-json=sbom-${{ matrix.component.name }}.spdx.json
          syft ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component.name }}:latest -o cyclonedx-json=sbom-${{ matrix.component.name }}.cyclonedx.json

      - name: Scan image with Trivy
        if: steps.dockerfile-check.outputs.exists == 'true'
        run: |
          trivy image \
            --format sarif \
            --output trivy-${{ matrix.component.name }}.sarif \
            --severity HIGH,CRITICAL \
            --exit-code 1 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component.name }}:latest

      - name: Upload Trivy scan results to GitHub Security tab
        if: steps.dockerfile-check.outputs.exists == 'true' && (success() || failure())
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-${{ matrix.component.name }}.sarif
          category: trivy-${{ matrix.component.name }}

      - name: Cosign sign (keyless)
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: cosign sign ghcr.io/${{ env.IMAGE_NAME }}/${{ matrix.component.name }}:${{ github.sha }}

      - name: Verify image signature
        if: steps.dockerfile-check.outputs.exists == 'true'
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          cosign verify \
            --certificate-identity-regexp "https://github.com/${{ github.repository }}/.github/workflows/" \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component.name }}@${{ steps.build.outputs.digest }}

      - name: Upload SBOM artifacts
        if: steps.dockerfile-check.outputs.exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ matrix.component.name }}
          path: |
            sbom-${{ matrix.component.name }}.spdx.json
            sbom-${{ matrix.component.name }}.cyclonedx.json
          retention-days: 30

      - name: Generate build summary
        if: steps.dockerfile-check.outputs.exists == 'true'
        run: |
          echo "## 🐳 Container Build Summary - ${{ matrix.component.name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Image | \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component.name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Digest | \`${{ steps.build.outputs.digest }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Tags | ${{ steps.meta.outputs.tags }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Platforms | linux/amd64, linux/arm64 |" >> $GITHUB_STEP_SUMMARY
          echo "| Signed | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| SBOM Generated | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scanned | ✅ |" >> $GITHUB_STEP_SUMMARYated | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scanned | ✅ |" >> $GITHUB_STEP_SUMMARY