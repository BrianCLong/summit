extend type Query {
  suggestLinks(input: SuggestLinksInput!): SuggestLinksPayload! @server/src/security/graphqlAuthPlugin.ts(action: "read", resource: "graph")
  explainSuggestion(id: ID!): SuggestionExplanation! @server/src/security/graphqlAuthPlugin.ts(action: "read", resource: "graph")
}

extend type Mutation {
  resolveEntities(input: ResolveEntitiesInput!): ResolveEntitiesPayload! @server/src/security/graphqlAuthPlugin.ts(action: "update", resource: "graph")
  acceptSuggestion(id: ID!): SuggestionActionResult! @server/src/security/graphqlAuthPlugin.ts(action: "update", resource: "graph")
  rejectSuggestion(id: ID!, reason: String): SuggestionActionResult! @server/src/security/graphqlAuthPlugin.ts(action: "update", resource: "graph")
}

input SuggestLinksInput { caseId: ID!, seedNodeIds: [ID!]!, topK: Int = 20, threshold: Float = 0.65 }
type SuggestLinksPayload { suggestions: [LinkSuggestion!]!, generatedAt: DateTime! }
type LinkSuggestion {
  id: ID!
  sourceId: ID!
  targetId: ID!
  score: Float!
  reasons: [Reason!]!   # short XAI bullets
  previewPath: [ID!]    # optional 2â€“4 hop exemplar
}
type Reason { label: String!, weight: Float! }

input ResolveEntitiesInput { caseId: ID!, candidates: [EntityCandidateInput!]! }
input EntityCandidateInput { canonical: ID, duplicates: [ID!]!, strategy: ERStrategy = STRICT }
enum ERStrategy { STRICT, FUZZY, MODEL }

type ResolveEntitiesPayload { merged: [ID!]!, rejected: [ID!]! }

type SuggestionExplanation {
  id: ID!
  features: [FeatureAttribution!]!
  paths: [[ID!]!]            # top-k supporting motifs
  citations: [String!]       # provenance notes
}
type FeatureAttribution { name: String!, value: Float!, contribution: Float! }

type SuggestionActionResult { id: ID!, status: String! }  # accepted/rejected
