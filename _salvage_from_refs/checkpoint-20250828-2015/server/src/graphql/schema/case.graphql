type Case {
  id: ID!
  tenant_id: String
  name: String!
  status: String!
  priority: String
  summary: String
  created_by: String
  created_at: DateTime!
  updated_at: DateTime!
  members: [CaseMember!]!
  items: [CaseItem!]!
  notes: [CaseNote!]!
  timeline: [CaseTimelineEvent!]!
}

type CaseMember {
  user_id: String!
  role: String!
}

type CaseItem {
  id: ID!
  kind: String!
  ref_id: String!
  tags: [String!]!
  added_by: String
  added_at: DateTime!
}

type CaseNote {
  id: ID!
  author_id: String
  body: String!
  created_at: DateTime!
}

type CaseTimelineEvent {
  id: ID!
  at: DateTime!
  event: String!
  payload: JSON!
}

type LegalHold {
  id: ID!
  tenant_id: String
  name: String!
  created_by: String
  created_at: DateTime!
}

type LegalHoldItem {
  hold_id: ID!
  kind: String!
  ref_id: String!
  added_at: DateTime!
}

type RetentionPolicy {
  id: ID!
  tenant_id: String
  name: String!
  rule: JSON!
  enabled: Boolean!
}

extend type Query {
  case(id: ID!): Case
  cases: [Case!]!
  legalHolds(search: String, after: String, limit: Int): [LegalHold!]!
}

extend type Mutation {
  addCaseItem(caseId: ID!, kind: String!, refId: String!, tags: [String!]): CaseItem!
  createCase(name: String!, summary: String): Case!
  addCaseNote(caseId: ID!, body: String!): CaseNote!
  updateCase(id: ID!, status: String, priority: String): Case
  removeCaseItem(caseId: ID!, itemId: ID!): Boolean!
  exportCaseBundle(caseId: ID!, format: String!): String!
  createLegalHold(name: String!): LegalHold!
  addToLegalHold(holdId: ID!, kind: String!, refId: String!): LegalHoldItem!
  removeFromLegalHold(holdId: ID!, kind: String!, refId: String!): Boolean!
}
