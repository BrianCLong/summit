name: Server Startup Smoke Test
on: 
  push:
    branches: [main, develop, fix/ui-docker-build]
    paths: ['server/**', '.github/workflows/server-startup-smoke.yml']
  pull_request:
    paths: ['server/**', '.github/workflows/server-startup-smoke.yml']

jobs:
  smoke-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: intelgraph  
          POSTGRES_DB: intelgraph
        ports:
          - '5432:5432'
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

      redis:
        image: redis:7-alpine
        ports:
          - '6379:6379'
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

      neo4j:
        image: neo4j:4.4
        env:
          NEO4J_AUTH: neo4j/test_password
        ports:
          - '7474:7474'
          - '7687:7687'
        options: >-
          --health-cmd "wget -qO- http://localhost:7474 >/dev/null 2>&1 || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: Install server dependencies
        working-directory: server
        run: npm ci

      - name: Create test environment file
        working-directory: server
        run: |
          cat > .env << EOF
          NODE_ENV=test
          PORT=4000
          DATABASE_URL=postgres://intelgraph:test_password@localhost:5432/intelgraph
          NEO4J_URI=bolt://localhost:7687
          NEO4J_USER=neo4j
          NEO4J_PASSWORD=test_password
          REDIS_HOST=localhost
          REDIS_PORT=6379
          JWT_SECRET=test-jwt-secret-for-ci-at-least-32-characters-long
          JWT_REFRESH_SECRET=test-refresh-secret-different-from-jwt-secret
          CORS_ORIGIN=http://localhost:3000
          EOF

      - name: Start server in background
        working-directory: server
        run: |
          npm run dev &
          echo $! > server.pid
          sleep 10

      - name: Test health endpoint
        run: |
          curl -f http://localhost:4000/healthz
          echo "✓ Health check passed"

      - name: Test readiness endpoint
        run: |
          curl -f http://localhost:4000/readyz
          echo "✓ Readiness check passed"

      - name: Test metrics endpoint
        run: |
          curl -f http://localhost:4000/metrics | head -5
          echo "✓ Metrics endpoint responding"

      - name: Stop server
        working-directory: server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi

      - name: Check server logs
        working-directory: server
        if: failure()
        run: |
          echo "=== Server logs (if available) ==="
          tail -50 nohup.out || echo "No server logs found"