name: seed-subissues

on:
  issues:
    types: [opened, labeled]

permissions:
  contents: read
  issues: write
  projects: write

jobs:
  seed:
    if: >
      contains(join(github.event.issue.labels.*.name, ' '), 'release: v1.1') &&
      contains(join(github.event.issue.labels.*.name, ' '), 'tracking')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Ensure gh
        env: { GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} }
        run: gh auth status || true

      - name: Spawn sub-issues from seeds (idempotent)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PARENT_NUMBER: ${{ github.event.issue.number }}
        run: |
          set -euo pipefail
          test -f .github/roadmap_seeds.yml || exit 0
          python3 - <<'PY'
import os, subprocess, yaml, hashlib
parent=int(os.environ["PARENT_NUMBER"])  # tracking issue number
with open('.github/roadmap_seeds.yml') as f:
  seeds=yaml.safe_load(f) or {}

# infer THEME from parent title
title=subprocess.check_output(["gh","issue","view",str(parent),"--json","title","-q",".title"]).decode().lower()
theme='quality'
for k in ['routing','citations','exports']:
  if k in title:
    theme=k; break

items=seeds.get(theme, [])

def marker(theme, title):
  hid=hashlib.sha1((theme+'|'+title).encode()).hexdigest()[:12]
  return f"<!-- seed:{theme}:{hid} -->"

def issue_has_marker(num, mark):
  try:
    out=subprocess.check_output(["gh","issue","view",str(num),"--json","comments","-q",".comments[].body"]).decode()
  except subprocess.CalledProcessError:
    return False
  return mark in out

# scan existing issues for markers to avoid dup
existing_nums=subprocess.check_output(["gh","issue","list","--label",f"release: v1.0.0-assistant,theme: {theme}","--state","all","--json","number","-q",".[].number"]).decode().strip().split()

for it in items:
  t=it.get('title','(no title)')
  b=it.get('body','')
  mark=marker(theme,t)
  dup=False
  for n in existing_nums:
    if issue_has_marker(n, mark):
      dup=True; break
  if dup:
    continue
  url=subprocess.check_output([
    'gh','issue','create',
    '--title', t,
    '--body', b,
    '--label','release: v1.1',
    '--label', f'theme: {theme}'
  ]).decode().strip()
  num=url.split('/')[-1]
  # annotate for future idempotency
  subprocess.run(['gh','issue','comment',num,'--body',mark],check=False)
  subprocess.run(['gh','issue','comment',num,'--body',f'Linked to tracking issue #{parent}'],check=False)
  subprocess.run(['gh','issue','comment',str(parent),'--body',f'Spawned sub-issue #{num}'],check=False)
PY
