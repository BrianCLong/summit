# Supply Chain Provenance Verification
# Sprint 27A: Verify SBOM + SLSA provenance on artifact promotion

name: Verify Provenance

on:
  workflow_call:
    inputs:
      artifact_path:
        description: 'Path to artifact to verify'
        required: true
        type: string
      registry:
        description: 'Container registry'
        required: false
        type: string
        default: 'ghcr.io'
  pull_request:
    paths:
      - 'dist/**'
      - '.github/workflows/verify-provenance.yml'
  push:
    branches: [main]
    tags: ['v*']

env:
  COSIGN_EXPERIMENTAL: 1

jobs:
  verify-provenance:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      packages: read

    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0

      - name: Install Cosign
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 # v3.5.0

      - name: Install SLSA Verifier
        uses: slsa-framework/slsa-verifier/actions/installer@c9abffe4d2ab2ffa0b2ea9b2582b84164f390adc # v2.5.1

      - name: Install Syft
        uses: anchore/sbom-action/download-syft@e8d2a6937ecead383dfe75190d104edd1f9c5751 # v0.16.0

      - name: Load Trust Policy
        id: trust-policy
        run: |
          if [[ -f "security/policy/trust-policy.yaml" ]]; then
            echo "trust_policy_exists=true" >> $GITHUB_OUTPUT
            echo "Using trust policy from security/policy/trust-policy.yaml"
          else
            echo "trust_policy_exists=false" >> $GITHUB_OUTPUT
            echo "Warning: No trust policy found, using basic verification"
          fi

      - name: Verify Container Image Provenance
        if: contains(inputs.artifact_path, 'docker') || contains(inputs.artifact_path, 'container')
        run: |
          IMAGE_TAG="${{ inputs.registry }}/${{ github.repository }}:${{ github.sha }}"
          echo "Verifying container image: $IMAGE_TAG"

          # Verify signature
          cosign verify $IMAGE_TAG \
            --certificate-identity-regexp="^https://github\\.com/${{ github.repository }}/" \
            --certificate-oidc-issuer=https://token.actions.githubusercontent.com

          # Verify SLSA provenance
          cosign verify-attestation $IMAGE_TAG \
            --type slsaprovenance \
            --certificate-identity-regexp="^https://github\\.com/${{ github.repository }}/" \
            --certificate-oidc-issuer=https://token.actions.githubusercontent.com

          # Extract and verify SBOM
          cosign download sbom $IMAGE_TAG > sbom.json
          syft validate sbom.json

          echo "✅ Container image provenance verified"

      - name: Verify Artifact Provenance
        if: "!contains(inputs.artifact_path, 'docker') && !contains(inputs.artifact_path, 'container')"
        run: |
          ARTIFACT_PATH="${{ inputs.artifact_path }}"
          echo "Verifying artifact: $ARTIFACT_PATH"

          if [[ ! -f "$ARTIFACT_PATH" ]]; then
            echo "❌ Artifact not found: $ARTIFACT_PATH"
            exit 1
          fi

          # Check for accompanying provenance files
          PROVENANCE_FILE="${ARTIFACT_PATH}.intoto.jsonl"
          SBOM_FILE="${ARTIFACT_PATH}.sbom.json"
          SIGNATURE_FILE="${ARTIFACT_PATH}.sig"

          # Verify SLSA provenance if available
          if [[ -f "$PROVENANCE_FILE" ]]; then
            echo "Verifying SLSA provenance..."
            slsa-verifier verify-artifact \
              --provenance-path "$PROVENANCE_FILE" \
              --source-uri "github.com/${{ github.repository }}" \
              --source-tag "${{ github.ref_name }}" \
              "$ARTIFACT_PATH"
            echo "✅ SLSA provenance verified"
          else
            echo "⚠️  No SLSA provenance found at $PROVENANCE_FILE"
          fi

          # Verify SBOM if available
          if [[ -f "$SBOM_FILE" ]]; then
            echo "Verifying SBOM..."
            syft validate "$SBOM_FILE"

            # Check SBOM corresponds to artifact
            ARTIFACT_HASH=$(sha256sum "$ARTIFACT_PATH" | cut -d' ' -f1)
            SBOM_SUBJECT=$(jq -r '.metadata.component.bomRef // .serialNumber' "$SBOM_FILE" 2>/dev/null || echo "")

            if [[ -n "$SBOM_SUBJECT" ]] && [[ "$SBOM_SUBJECT" == *"$ARTIFACT_HASH"* ]]; then
              echo "✅ SBOM corresponds to artifact"
            else
              echo "⚠️  SBOM subject validation inconclusive"
            fi
          else
            echo "⚠️  No SBOM found at $SBOM_FILE"
          fi

          # Verify signature if available
          if [[ -f "$SIGNATURE_FILE" ]]; then
            echo "Verifying artifact signature..."
            cosign verify-blob \
              --signature "$SIGNATURE_FILE" \
              --certificate-identity-regexp="^https://github\\.com/${{ github.repository }}/" \
              --certificate-oidc-issuer=https://token.actions.githubusercontent.com \
              "$ARTIFACT_PATH"
            echo "✅ Artifact signature verified"
          else
            echo "⚠️  No signature found at $SIGNATURE_FILE"
          fi

      - name: Verify Against Trust Policy
        if: steps.trust-policy.outputs.trust_policy_exists == 'true'
        run: |
          echo "Verifying against trust policy..."

          # Parse trust policy requirements
          REQUIRED_ATTESTATIONS=$(yq eval '.spec.artifacts.required_attestations[].predicate_type' security/policy/trust-policy.yaml)
          MIN_SLSA_LEVEL=$(yq eval '.spec.slsa.minimum_level' security/policy/trust-policy.yaml)

          echo "Required SLSA level: $MIN_SLSA_LEVEL"
          echo "Required attestations:"
          echo "$REQUIRED_ATTESTATIONS"

          # Verify minimum SLSA level
          if [[ -f "${{ inputs.artifact_path }}.intoto.jsonl" ]]; then
            SLSA_LEVEL=$(jq -r '.predicate.buildDefinition.buildType' "${{ inputs.artifact_path }}.intoto.jsonl" | grep -o 'slsa[0-9]' | grep -o '[0-9]' || echo "0")
            if [[ "$SLSA_LEVEL" -ge "$MIN_SLSA_LEVEL" ]]; then
              echo "✅ SLSA level $SLSA_LEVEL meets minimum requirement of $MIN_SLSA_LEVEL"
            else
              echo "❌ SLSA level $SLSA_LEVEL below minimum requirement of $MIN_SLSA_LEVEL"
              exit 1
            fi
          fi

          echo "✅ Trust policy verification passed"

      - name: Generate Verification Report
        if: always()
        run: |
          cat > provenance-verification-report.json << EOF
          {
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "artifact": "${{ inputs.artifact_path }}",
            "repository": "${{ github.repository }}",
            "commit": "${{ github.sha }}",
            "ref": "${{ github.ref }}",
            "verification_results": {
              "slsa_provenance": $(if [[ -f "${{ inputs.artifact_path }}.intoto.jsonl" ]]; then echo "true"; else echo "false"; fi),
              "sbom_present": $(if [[ -f "${{ inputs.artifact_path }}.sbom.json" ]]; then echo "true"; else echo "false"; fi),
              "signature_verified": $(if [[ -f "${{ inputs.artifact_path }}.sig" ]]; then echo "true"; else echo "false"; fi),
              "trust_policy_compliant": ${{ steps.trust-policy.outputs.trust_policy_exists }}
            },
            "tools_used": {
              "cosign": "$(cosign version --json | jq -r '.GitVersion')",
              "slsa_verifier": "$(slsa-verifier version 2>&1 | head -n1 || echo 'unknown')",
              "syft": "$(syft version -o json | jq -r '.version')"
            }
          }
          EOF

          echo "Verification report generated:"
          cat provenance-verification-report.json

      - name: Upload Verification Report
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        if: always()
        with:
          name: provenance-verification-report
          path: provenance-verification-report.json
          retention-days: 90
