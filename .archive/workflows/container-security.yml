# ===================================================================
# CONTAINER SECURITY PIPELINE
# Comprehensive security scanning, SBOM generation, and image signing
# ===================================================================

name: Container Security Pipeline

permissions:
  contents: read

on:
  push:
    branches: [main, develop, 'security/**']
    paths:
      - 'Dockerfile*'
      - 'package*.json'
      - 'server/**'
      - '.github/workflows/container-security.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'Dockerfile*'
      - 'package*.json'
      - 'server/**'
  schedule:
    # Run security scans daily at 02:00 UTC
    - cron: '0 2 * * *'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/maestro
  COSIGN_EXPERIMENTAL: 1

jobs:
  # ===================================================================
  # DEPENDENCY SCANNING
  # ===================================================================
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run npm audit
        run: |
          npm audit --audit-level moderate --json > npm-audit-report.json || true
          npm audit --audit-level high --json > npm-audit-high.json || true

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json > snyk-report.json
        continue-on-error: true

      - name: Upload dependency scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif

  # ===================================================================
  # CONTAINER IMAGE BUILD AND SCAN
  # ===================================================================
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      packages: write
      id-token: write
      attestations: write

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.5

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build container image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.secure-enhanced
          target: production
          platforms: linux/amd64,linux/arm64
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            BUILD_VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            VCS_REF=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '1'

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        id: grype-scan
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          fail-build: true
          severity-cutoff: high
          output-format: sarif

      - name: Upload Grype scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ${{ steps.grype-scan.outputs.sarif }}

      - name: Docker Scout CVE scan
        uses: docker/scout-action@v1
        if: github.event_name != 'pull_request'
        with:
          command: cves
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          sarif-file: scout-cves.sarif
          summary: true

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ github.sha }}
          path: sbom.spdx.json

      - name: Push image to registry
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.secure-enhanced
          target: production
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            BUILD_VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            VCS_REF=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ===================================================================
  # IMAGE SIGNING AND ATTESTATION
  # ===================================================================
  sign-image:
    name: Sign Container Image
    runs-on: ubuntu-latest
    needs: [container-scan]
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write

    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.2.3'

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Sign container image
        run: |
          cosign sign --yes \
            -a "repo=${{ github.repository }}" \
            -a "workflow=${{ github.workflow }}" \
            -a "ref=${{ github.sha }}" \
            ${{ needs.container-scan.outputs.image-tag }}

      - name: Download SBOM artifact
        uses: actions/download-artifact@v4
        with:
          name: sbom-${{ github.sha }}
          path: .

      - name: Attest SBOM
        run: |
          cosign attest --yes \
            --predicate sbom.spdx.json \
            --type spdxjson \
            ${{ needs.container-scan.outputs.image-tag }}

      - name: Generate attestation
        uses: actions/attest-build-provenance@v1
        id: attest
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ needs.container-scan.outputs.image-digest }}
          push-to-registry: true

  # ===================================================================
  # RUNTIME SECURITY VALIDATION
  # ===================================================================
  runtime-security:
    name: Runtime Security Validation
    runs-on: ubuntu-latest
    needs: [container-scan]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Load container image
        run: |
          docker load < /tmp/image.tar

      - name: Run security compliance checks
        run: |
          # Check if container runs as non-root
          docker run --rm ${{ needs.container-scan.outputs.image-tag }} whoami | grep -v root

          # Check file permissions
          docker run --rm ${{ needs.container-scan.outputs.image-tag }} ls -la /app | grep -E "^d.......w." && exit 1 || exit 0

          # Check for presence of shell
          docker run --rm ${{ needs.container-scan.outputs.image-tag }} which sh && exit 1 || exit 0

          # Check for sensitive files
          docker run --rm ${{ needs.container-scan.outputs.image-tag }} find /etc -name "passwd" -o -name "shadow" -o -name "group" 2>/dev/null | wc -l | grep -q "0"

      - name: Run container structure test
        uses: plexsystems/container-structure-test-action@v0.3.0
        with:
          image: ${{ needs.container-scan.outputs.image-tag }}
          config: .github/container-structure-test.yaml

  # ===================================================================
  # POLICY VALIDATION
  # ===================================================================
  policy-validation:
    name: Policy Validation
    runs-on: ubuntu-latest
    needs: [container-scan]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup OPA
        uses: open-policy-agent/setup-opa@v2
        with:
          version: latest

      - name: Validate security policies
        run: |
          # Create OPA input
          cat > input.json <<EOF
          {
            "image": "${{ needs.container-scan.outputs.image-tag }}",
            "metadata": {
              "repository": "${{ github.repository }}",
              "ref": "${{ github.sha }}",
              "actor": "${{ github.actor }}"
            }
          }
          EOF

          # Run policy evaluation
          opa eval -d policy/ -i input.json "data.container.security.allow" | grep -q "true"

      - name: Validate Kubernetes security policies
        run: |
          # Validate Pod Security Standards
          kubectl --dry-run=server --validate=true apply -f k8s/security/pod-security-policy.yaml

  # ===================================================================
  # NOTIFICATION
  # ===================================================================
  notify:
    name: Security Notifications
    runs-on: ubuntu-latest
    needs:
      [
        dependency-scan,
        container-scan,
        sign-image,
        runtime-security,
        policy-validation,
      ]
    if: always()

    steps:
      - name: Notify security team on failure
        if: contains(needs.*.result, 'failure')
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#security-alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_SECURITY }}
          fields: repo,author,eventName,ref,workflow

      - name: Create security report
        if: always()
        run: |
          cat > security-report.md <<EOF
          # Security Scan Report

          ## Build Information
          - Repository: ${{ github.repository }}
          - Commit: ${{ github.sha }}
          - Branch: ${{ github.ref_name }}
          - Actor: ${{ github.actor }}

          ## Scan Results
          - Dependency Scan: ${{ needs.dependency-scan.result }}
          - Container Scan: ${{ needs.container-scan.result }}
          - Image Signing: ${{ needs.sign-image.result }}
          - Runtime Security: ${{ needs.runtime-security.result }}
          - Policy Validation: ${{ needs.policy-validation.result }}

          ## Artifacts
          - SBOM: Available
          - Signed Image: ${{ needs.container-scan.outputs.image-tag }}
          - Attestations: Generated
          EOF

      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report-${{ github.sha }}
          path: security-report.md
