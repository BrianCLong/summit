name: oneclick-launch

permissions:
  contents: read

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag or digest to deploy (e.g., latest or @sha256:...)'
        required: true
        default: 'ghcr.io/brianclong/maestro-control-plane:latest'
      auto_promote:
        description: 'Auto-promote from staging to prod without manual gate (0=false, 1=true)'
        required: false
        default: '0'
        type: choice
        options:
          - '0'
          - '1'

env:
  KUBECONFIG_DEV: ${{ secrets.KUBECONFIG_DEV }}
  KUBECONFIG_UAT: ${{ secrets.KUBECONFIG_UAT }}
  KUBECONFIG_PROD: ${{ secrets.KUBECONFIG_PROD }}
  GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
  GRAFANA_URL: ${{ secrets.GRAFANA_URL }}
  GRAFANA_API_TOKEN: ${{ secrets.GRAFANA_API_TOKEN }}
  PGURL: ${{ secrets.PGURL }}
  PAGERDUTY_ROUTING_KEY: ${{ secrets.PAGERDUTY_ROUTING_KEY }}

jobs:
  launch-maestro:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: Install kubectl-argo-rollouts
        run: |
          curl -LO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64
          chmod +x kubectl-argo-rollouts-linux-amd64
          sudo mv kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts

      - name: Run One-Click Launch Script
        run: |
          # Write kubeconfig secrets to files
          echo "${{ secrets.KUBECONFIG_DEV }}" | base64 -d > kubeconfig_dev
          echo "${{ secrets.KUBECONFIG_UAT }}" | base64 -d > kubeconfig_uat
          echo "${{ secrets.KUBECONFIG_PROD }}" | base64 -d > kubeconfig_prod

          # Set KUBECONFIG environment variable to point to the generated files
          export KUBECONFIG=kubeconfig_dev:kubeconfig_uat:kubeconfig_prod

          # Execute the launch script
          ./scripts/oneclick-launch/launch.sh \
            IMAGE="${{ github.event.inputs.image_tag }}" \
            AUTO_PROMOTE="${{ github.event.inputs.auto_promote }}" \
            GRAFANA_URL="${{ env.GRAFANA_URL }}" \
            GRAFANA_API_TOKEN="${{ env.GRAFANA_API_TOKEN }}" \
            PGURL="${{ env.PGURL }}" \
            PAGERDUTY_ROUTING_KEY="${{ env.PAGERDUTY_ROUTING_KEY }}"

      - name: Upload Evidence Bundle
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: oneclick-evidence
          path: oneclick-evidence-*.tar
          retention-days: 7
