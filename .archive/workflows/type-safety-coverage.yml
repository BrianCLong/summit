name: Type Safety & Coverage Gates

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

permissions:
  contents: read
  checks: write
  pull-requests: write

concurrency:
  group: type-safety-${{ github.ref }}
  cancel-in-progress: true

jobs:
  typecheck-smart:
    name: Smart TypeScript Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run smart TypeScript check
        run: |
          echo "🔍 Running TypeScript check on changed packages only..."

          # Check if we're in a PR context
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_REF="origin/${{ github.base_ref }}"
            echo "Checking changes since: $BASE_REF"
          else
            BASE_REF="HEAD~1"
            echo "Checking changes since: $BASE_REF"
          fi

          # Run typecheck only on changed packages
          npm run typecheck -- --filter="...[${BASE_REF}]" --continue-on-error=false > typecheck.log 2>&1

          # Check exit code
          if [ $? -eq 0 ]; then
            echo "✅ TypeScript check passed"
            echo "TYPECHECK_STATUS=success" >> $GITHUB_ENV
          else
            echo "❌ TypeScript check failed"
            echo "TYPECHECK_STATUS=failure" >> $GITHUB_ENV
            cat typecheck.log
            exit 1
          fi

      - name: Upload TypeScript check artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: typecheck-logs
          path: typecheck.log
          retention-days: 7

  test-coverage:
    name: Test Coverage Enforcement
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: |
          echo "🧪 Running tests with coverage enforcement..."

          # Configure Jest coverage thresholds
          export COVERAGE_THRESHOLD_LINES=80
          export COVERAGE_THRESHOLD_BRANCHES=75
          export COVERAGE_THRESHOLD_FUNCTIONS=75
          export COVERAGE_THRESHOLD_STATEMENTS=80

          # Run tests with v8 coverage provider
          npm run test:ci -- --coverage --coverageProvider=v8 \
            --coverageThreshold='{
              "global": {
                "lines": 80,
                "branches": 75,
                "functions": 75,
                "statements": 80
              }
            }' \
            --coverageReporters='["text", "lcov", "json-summary"]'

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: |
            coverage/
            coverage/lcov.info
            coverage/coverage-summary.json
          retention-days: 7

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            try {
              const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
              const { total } = coverage;

              const coverageComment = `## 📊 Coverage Report

              | Metric | Percentage | Status |
              |--------|------------|--------|
              | Lines | ${total.lines.pct}% | ${total.lines.pct >= 80 ? '✅' : '❌'} |
              | Branches | ${total.branches.pct}% | ${total.branches.pct >= 75 ? '✅' : '❌'} |
              | Functions | ${total.functions.pct}% | ${total.functions.pct >= 75 ? '✅' : '❌'} |
              | Statements | ${total.statements.pct}% | ${total.statements.pct >= 80 ? '✅' : '❌'} |

              **Thresholds**: Lines ≥80%, Branches ≥75%, Functions ≥75%, Statements ≥80%
              `;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: coverageComment
              });
            } catch (error) {
              console.log('Could not read coverage summary:', error.message);
            }

  policy-validation:
    name: Policy Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Check Helm digest policy
        run: |
          echo "🔍 Validating Helm digest-only policy..."

          # Run the existing validation script
          chmod +x scripts/validate-helm-digests.sh
          ./scripts/validate-helm-digests.sh

      - name: Validate package.json constraints
        run: |
          echo "🔍 Validating package.json constraints..."

          # Check Node engine constraints
          find . -name "package.json" -not -path "*/node_modules/*" | while read package; do
            echo "Checking: $package"

            if ! grep -q '"engines"' "$package"; then
              echo "❌ Missing engines field in $package"
              exit 1
            fi

            if ! grep -q '"node":.*">=20' "$package"; then
              echo "❌ Node version not constrained to >=20 in $package"
              exit 1
            fi
          done

          echo "✅ All package.json files have proper constraints"

  security-scan:
    name: Security Policy Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run npm audit
        run: |
          echo "🔒 Running npm security audit..."
          npm audit --audit-level high

          if [ $? -ne 0 ]; then
            echo "❌ Security vulnerabilities found"
            echo "Run 'npm audit fix' to resolve issues"
            exit 1
          fi

          echo "✅ No high-severity vulnerabilities found"

      - name: Check for secrets
        run: |
          echo "🔍 Scanning for potential secrets..."

          # Basic secret patterns (extend as needed)
          SECRETS_FOUND=0

          if grep -r -E "(password|token|key|secret)" --include="*.json" --include="*.yaml" --include="*.yml" . | grep -v node_modules | grep -v ".git"; then
            echo "⚠️ Potential secrets found - please review"
            SECRETS_FOUND=1
          fi

          if [ $SECRETS_FOUND -eq 1 ]; then
            echo "❌ Please ensure no secrets are committed"
            exit 1
          fi

          echo "✅ No obvious secrets detected"
