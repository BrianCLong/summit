name: Maestro Build Plane CI

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [main]

permissions:
  contents: read
  id-token: write
  packages: write
  pull-requests: write
  actions: read
  security-events: write

jobs:
  setup:
    runs-on: ubuntu-22.04
    if: ${{ !github.event.pull_request.draft }}
    outputs:
      node-version: ${{ steps.versions.outputs.node }}
      python-version: ${{ steps.versions.outputs.python }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set versions
        id: versions
        run: |
          echo "node=20.14.0" >> $GITHUB_OUTPUT
          echo "python=3.12" >> $GITHUB_OUTPUT

  lint-typecheck-test:
    needs: setup
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v3
        with:
          version: 9.0.0

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint
        run: pnpm run lint

      - name: Type check
        run: pnpm run typecheck

      - name: Unit tests
        run: pnpm run test:unit -- --ci --coverage --reporters=default --reporters=jest-junit
        env:
          JEST_JUNIT_OUTPUT_DIR: ./reports
          JEST_JUNIT_OUTPUT_NAME: junit.xml

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            **/junit.xml
            **/coverage/**
            reports/**

  build-scan-sign:
    needs: [setup, lint-typecheck-test]
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        service: [server, client]
    outputs:
      server-image: ${{ steps.build.outputs.server-image }}
      client-image: ${{ steps.build.outputs.client-image }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        id: build
        run: |
          SERVICE="${{ matrix.service }}"
          IMAGE="ghcr.io/${{ github.repository }}/${SERVICE}:${{ github.sha }}"

          docker buildx build \
            --push \
            --platform linux/amd64,linux/arm64 \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            --build-arg VCS_REF=${{ github.sha }} \
            --build-arg BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
            --tag $IMAGE \
            --file services/${SERVICE}/Dockerfile \
            .

          echo "${SERVICE}-image=$IMAGE" >> $GITHUB_OUTPUT

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.build.outputs.server-image || steps.build.outputs.client-image }}
          format: spdx-json
          output-file: sbom-${{ matrix.service }}.spdx.json

      - name: Vulnerability scan with Trivy
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ steps.build.outputs.server-image || steps.build.outputs.client-image }}
          severity: 'CRITICAL,HIGH,MEDIUM'
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-${{ matrix.service }}.sarif'

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Sign image with Cosign
        run: |
          IMAGE=${{ steps.build.outputs.server-image || steps.build.outputs.client-image }}
          cosign sign --yes $IMAGE

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ matrix.service }}
          path: sbom-${{ matrix.service }}.spdx.json

  policy-gate:
    needs: [build-scan-sign]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install Conftest
        run: |
          wget -O conftest.tar.gz https://github.com/open-policy-agent/conftest/releases/download/v0.49.1/conftest_0.49.1_Linux_x86_64.tar.gz
          tar xzf conftest.tar.gz
          sudo mv conftest /usr/local/bin

      - name: Test Dockerfile policies
        run: |
          conftest test --policy policy services/**/Dockerfile

      - name: Test Helm policies
        run: |
          if [ -d helm ]; then
            conftest test --policy policy helm/**/values.yaml || true
          fi

  preview-env:
    if: ${{ github.event.pull_request.head.repo.full_name == github.repository }}
    needs: [policy-gate, build-scan-sign]
    runs-on: ubuntu-22.04
    environment: preview
    env:
      NAMESPACE: pr-${{ github.event.number }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_B64 }}" | base64 -d > ~/.kube/config

      - name: Install Helm
        uses: azure/setup-helm@v4

      - name: Deploy to preview environment
        run: |
          helm upgrade --install intelgraph-${{ github.event.number }} helm/intelgraph \
            --namespace $NAMESPACE \
            --create-namespace \
            --set image.server.tag=${{ github.sha }} \
            --set image.client.tag=${{ github.sha }} \
            --set ingress.host=pr-${{ github.event.number }}.intelgraph-preview.dev \
            --wait --timeout=10m

      - name: Run E2E tests
        run: |
          pnpm install --frozen-lockfile
          npx playwright install --with-deps
          BASE_URL=https://pr-${{ github.event.number }}.intelgraph-preview.dev \
            pnpm run test:e2e || true

      - name: Upload E2E results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results
          path: |
            test-results/**
            playwright-report/**

      - name: Comment preview link
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          message: |
            ðŸš€ **Preview Environment Ready**

            **URL:** https://pr-${{ github.event.number }}.intelgraph-preview.dev
            **Images:**
            - Server: ${{ needs.build-scan-sign.outputs.server-image }}
            - Client: ${{ needs.build-scan-sign.outputs.client-image }}

            **Security:**
            - âœ… SBOM generated and attached
            - âœ… Vulnerability scan completed  
            - âœ… Images signed with Cosign
            - âœ… Policy gates passed

            **Artifacts:** Check the Actions tab for SBOM, test results, and security reports.

  cleanup-preview:
    if: ${{ github.event.action == 'closed' }}
    runs-on: ubuntu-22.04
    steps:
      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_B64 }}" | base64 -d > ~/.kube/config

      - name: Delete preview environment
        run: |
          kubectl delete namespace pr-${{ github.event.number }} --ignore-not-found=true
