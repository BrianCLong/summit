name: Sync Persisted Query Hashes

permissions:
  contents: read

on:
  # Trigger after successful client builds
  workflow_run:
    workflows: ['Client Build', 'E2E Tests']
    types:
      - completed
    branches:
      - main
      - develop

  # Manual trigger for emergency sync
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      source:
        description: 'Hash source'
        required: true
        default: 'artifacts'
        type: choice
        options:
          - artifacts
          - file
      dry_run:
        description: 'Dry run (preview changes only)'
        required: false
        default: false
        type: boolean

# Only run if upstream workflow succeeded
jobs:
  sync-hashes:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'

    strategy:
      matrix:
        environment:
          - staging
          - production

    environment: ${{ matrix.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile
          pnpm install redis@^4.6.0 # Ensure Redis client is available

      - name: Download PQ hash artifacts
        if: github.event_name == 'workflow_run'
        uses: actions/download-artifact@v4
        with:
          name: persisted-queries
          path: ./artifacts
          run-id: ${{ github.event.workflow_run.id }}

      - name: Verify hash file integrity
        if: github.event_name == 'workflow_run'
        run: |
          if [ -f "./artifacts/persisted-queries.json" ]; then
            echo "‚úÖ Hash file found"
            jq -r '.checksum // "no-checksum"' ./artifacts/persisted-queries.json
            
            # Verify file is valid JSON and has required structure
            jq -e '.hashes | type == "object"' ./artifacts/persisted-queries.json > /dev/null
            echo "‚úÖ Hash file structure is valid"
          else
            echo "‚ùå Hash file not found in artifacts"
            exit 1
          fi

      - name: Sync hashes to staging
        if: matrix.environment == 'staging'
        env:
          REDIS_URL: ${{ secrets.REDIS_URL_STAGING }}
          CI_ARTIFACTS_URL: ${{ secrets.CI_ARTIFACTS_URL }}
          CI_TOKEN: ${{ secrets.CI_TOKEN }}
        run: |
          # Use artifacts from workflow_run or manual file input
          if [ "${{ github.event_name }}" == "workflow_run" ]; then
            SOURCE_ARGS="--source=file --file=./artifacts/persisted-queries.json"
          else
            SOURCE_ARGS="--source=${{ inputs.source }}"
          fi

          DRY_RUN_FLAG=""
          if [ "${{ inputs.dry_run }}" == "true" ]; then
            DRY_RUN_FLAG="--dryRun=true"
          fi

          node scripts/sync-pq-hashes.js \
            --env=staging \
            $SOURCE_ARGS \
            $DRY_RUN_FLAG

      - name: Sync hashes to production
        if: matrix.environment == 'production' && github.ref == 'refs/heads/main'
        env:
          REDIS_URL: ${{ secrets.REDIS_URL_PRODUCTION }}
          CI_ARTIFACTS_URL: ${{ secrets.CI_ARTIFACTS_URL }}
          CI_TOKEN: ${{ secrets.CI_TOKEN }}
        run: |
          # Production requires additional safety checks
          echo "üîí Production sync - performing safety checks..."

          # Only sync from artifacts on main branch
          if [ "${{ github.event_name }}" == "workflow_run" ]; then
            SOURCE_ARGS="--source=file --file=./artifacts/persisted-queries.json"
            
            # Verify the hash count is reasonable (not too few or too many)
            HASH_COUNT=$(jq -r '.hashes | length' ./artifacts/persisted-queries.json)
            echo "üìä Hash count: $HASH_COUNT"
            
            if [ "$HASH_COUNT" -lt 10 ]; then
              echo "‚ùå Safety check failed: Too few hashes ($HASH_COUNT < 10)"
              exit 1
            fi
            
            if [ "$HASH_COUNT" -gt 10000 ]; then
              echo "‚ùå Safety check failed: Too many hashes ($HASH_COUNT > 10000)"
              exit 1
            fi
            
            echo "‚úÖ Safety checks passed"
          else
            SOURCE_ARGS="--source=${{ inputs.source }}"
          fi

          DRY_RUN_FLAG=""
          if [ "${{ inputs.dry_run }}" == "true" ]; then
            DRY_RUN_FLAG="--dryRun=true"
          fi

          node scripts/sync-pq-hashes.js \
            --env=production \
            $SOURCE_ARGS \
            $DRY_RUN_FLAG

      - name: Verify sync results
        if: ${{ !inputs.dry_run }}
        env:
          REDIS_URL: ${{ matrix.environment == 'staging' && secrets.REDIS_URL_STAGING || secrets.REDIS_URL_PRODUCTION }}
        run: |
          # Quick verification that hashes are accessible
          node -e "
            const { createClient } = require('redis');
            (async () => {
              const redis = createClient({ url: process.env.REDIS_URL });
              await redis.connect();
              const count = await redis.sCard('pq:allowlist');
              const metadata = await redis.hGetAll('pq:metadata');
              console.log(\`‚úÖ Verification: \${count} hashes in allowlist\`);
              console.log(\`üìã Last sync: \${metadata.synced_at}\`);
              await redis.quit();
            })();
          "

      - name: Post-sync health check
        if: ${{ !inputs.dry_run }}
        env:
          API_BASE: ${{ matrix.environment == 'staging' && secrets.API_BASE_STAGING || secrets.API_BASE_PRODUCTION }}
        run: |
          # Test that API can access the synced hashes
          curl -f "$API_BASE/health/pq" || {
            echo "‚ùå Post-sync health check failed"
            exit 1
          }

          echo "‚úÖ Post-sync health check passed"

      - name: Notify success
        if: success() && !inputs.dry_run
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#safe-mutations'
          text: |
            ‚úÖ PQ Hash Sync Completed
            Environment: ${{ matrix.environment }}
            Trigger: ${{ github.event_name }}
            Ref: ${{ github.ref }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#safe-mutations'
          text: |
            ‚ùå PQ Hash Sync Failed
            Environment: ${{ matrix.environment }}
            Trigger: ${{ github.event_name }}
            Ref: ${{ github.ref }}

            Check workflow logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
