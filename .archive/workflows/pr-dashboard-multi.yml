name: PR Dashboards (multi-wave)

on:
  schedule:
    - cron: '*/30 * * * *'
  workflow_dispatch: {}

permissions:
  contents: read
  issues: write
  pull-requests: read

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build multi-wave dashboard
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const { owner, repo } = context.repo;

            const marker = '<!-- pr-dashboards -->';
            const title = 'PR Dashboards (multi-wave)';
            const issueLabel = 'pr-dashboards';

            // Load waves from JSON config, fallback to ['v24']
            let waves = ['v24'];
            try {
              const cfg = JSON.parse(fs.readFileSync('project_management/pr_drafts/waves.json','utf8'));
              if (cfg && Array.isArray(cfg.waves) && cfg.waves.length) waves = cfg.waves;
            } catch (e) {
              // default
            }

            function listDraftFiles(dir) {
              try {
                return fs.readdirSync(dir)
                  .filter(f => /^PR-\d+-.+\.md$/.test(f) && f !== 'SHARED-SECTIONS.md')
                  .sort((a,b)=> a.localeCompare(b, undefined, { numeric:true }));
              } catch { return []; }
            }

            function firstH1(filePath) {
              const raw = fs.readFileSync(filePath, 'utf8');
              const line = raw.split(/\r?\n/).find(l => l.trim().startsWith('# '));
              if (line) return line.replace(/^#\s*/, '').trim();
              const base = path.basename(filePath).replace(/^PR-\d+-/, '').replace(/\.md$/, '');
              return base.replace(/-/g, ' ');
            }

            async function findPRByTitle(title) {
              const q = `repo:${owner}/${repo} is:pr in:title "${title.replace(/\"/g,'\\\"')}"`;
              const res = await github.rest.search.issuesAndPullRequests({ q, per_page: 10 });
              const prs = res.data.items.filter(it => it.pull_request).sort((a,b)=> new Date(b.updated_at) - new Date(a.updated_at));
              if (prs.length === 0) return null;
              const prNum = prs[0].number;
              const pr = (await github.rest.pulls.get({ owner, repo, pull_number: prNum })).data;
              return pr;
            }

            function statusInfo(pr) {
              if (!pr) return { emoji:'âšª', text:'not opened' };
              if (pr.state === 'open' && pr.draft) return { emoji:'ðŸŸ£', text:'draft' };
              if (pr.state === 'open') return { emoji:'ðŸŸ¢', text:'open' };
              if (pr.merged_at) return { emoji:'âœ…', text:'merged' };
              return { emoji:'ðŸ”´', text:'closed' };
            }

            async function sectionForWave(wave) {
              const dir = `project_management/pr_drafts/${wave}`;
              const files = listDraftFiles(dir);
              let body = `\n## ${wave.toUpperCase()}\n\n`;
              body += 'Legend: ðŸŸ¢ open Â· ðŸŸ£ draft Â· âœ… merged Â· ðŸ”´ closed Â· âšª not opened\n\n';
              if (!files.length) {
                body += '_No drafts found._\n';
                return body;
              }
              const rows = [];
              for (const f of files) {
                const abs = path.join(dir, f);
                const ttl = firstH1(abs);
                const pr = await findPRByTitle(ttl);
                const st = statusInfo(pr);
                const num = f.match(/^PR-(\d+)/)?.[1] || 'â€”';
                const link = pr ? `[#${pr.number}](${pr.html_url})` : '';
                rows.push({ num, ttl, st, link });
              }
              const table = [
                '| # | Title | Status | PR |',
                '|:-:|:------|:------:|:--:|',
                ...rows.map(r => `| ${r.num} | ${r.ttl} | ${r.st.emoji} ${r.st.text} | ${r.link || 'â€”'} |`)
              ].join('\n');
              body += table + '\n';
              return body;
            }

            const parts = [marker, `# PR Dashboards â€” multi-wave`, `Updated: ${new Date().toISOString()}\n`];
            for (const w of waves) {
              parts.push(await sectionForWave(w));
            }
            const body = parts.join('\n');

            const existing = await github.rest.issues.listForRepo({ owner, repo, state: 'open', labels: issueLabel, per_page: 100 });
            let issue = existing.data.find(i => i.title === title) || null;
            if (!issue) {
              try { await github.rest.issues.getLabel({ owner, repo, name: issueLabel }); }
              catch { try { await github.rest.issues.createLabel({ owner, repo, name: issueLabel, color: '5319e7' }); } catch {}
              }
              issue = (await github.rest.issues.create({ owner, repo, title, body, labels: [issueLabel] })).data;
              core.info(`Created dashboard issue #${issue.number}`);
            } else {
              if (!issue.body || !issue.body.includes(marker) || issue.body !== body) {
                await github.rest.issues.update({ owner, repo, issue_number: issue.number, body });
                core.info(`Updated dashboard issue #${issue.number}`);
              } else {
                core.info('Dashboard up-to-date.');
              }
            }
