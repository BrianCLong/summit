name: PR Dashboard (v24)

on:
  schedule:
    - cron: '*/30 * * * *'
  workflow_dispatch: {}

permissions:
  contents: read
  issues: write
  pull-requests: read

jobs:
  update:
    name: Update v24 PR Dashboard Issue
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build dashboard & create/update issue
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const { owner, repo } = context.repo;
            const draftsDir = 'project_management/pr_drafts/v24';
            const marker = '<!-- v24-pr-dashboard -->';
            const dashboardTitle = 'v24: PR Dashboard (PRs 1â€“10)';
            const dashboardLabel = 'v24';

            const run = async () => {
              function listDraftFiles() {
                try {
                  return fs.readdirSync(draftsDir)
                    .filter(f => /^PR-\d+-.+\.md$/.test(f) && f !== 'SHARED-SECTIONS.md')
                    .sort((a,b)=> a.localeCompare(b, undefined, { numeric:true }));
                } catch (e) {
                  return [];
                }
              }

              function firstH1(filePath) {
                const raw = fs.readFileSync(filePath, 'utf8');
                const line = raw.split(/\r?\n/).find(l => l.trim().startsWith('# '));
                if (line) return line.replace(/^#\s*/, '').trim();
                const base = path.basename(filePath).replace(/^PR-\d+-/, '').replace(/\.md$/, '');
                return base.replace(/-/g, ' ');
              }

              async function findPRByTitle(title) {
                const q = `repo:${owner}/${repo} is:pr in:title "${title.replace(/\"/g,'\\\"')}"`;
                const res = await github.rest.search.issuesAndPullRequests({ q, per_page: 10 });
                const prs = res.data.items.filter(it => it.pull_request).sort((a,b)=> new Date(b.updated_at) - new Date(a.updated_at));
                if (prs.length === 0) return null;
                const prNum = prs[0].number;
                const pr = (await github.rest.pulls.get({ owner, repo, pull_number: prNum })).data;
                return pr;
              }

              function statusInfo(pr) {
                if (!pr) return { emoji:'âšª', text:'not opened' };
                if (pr.state === 'open' && pr.draft) return { emoji:'ðŸŸ£', text:'draft' };
                if (pr.state === 'open') return { emoji:'ðŸŸ¢', text:'open' };
                if (pr.merged_at) return { emoji:'âœ…', text:'merged' };
                return { emoji:'ðŸ”´', text:'closed' };
              }

              const files = listDraftFiles();
              if (files.length === 0) {
                core.setFailed(`No PR draft files found in ${draftsDir}`);
                return;
              }

              const rows = [];
              for (const f of files) {
                const abs = path.join(draftsDir, f);
                const title = firstH1(abs);
                const pr = await findPRByTitle(title);
                const st = statusInfo(pr);
                const num = f.match(/^PR-(\d+)/)?.[1] || 'â€”';
                const link = pr ? `[#${pr.number}](${pr.html_url})` : '';
                rows.push({ num, title, st, link });
              }

              const header = `${marker}\n` +
                `# v24 PR Dashboard â€” Status (auto-updated)\n\n` +
                `Updated: ${new Date().toISOString()}\n\n` +
                `Legend: ðŸŸ¢ open Â· ðŸŸ£ draft Â· âœ… merged Â· ðŸ”´ closed Â· âšª not opened\n\n`;

              const table = [
                '| # | Title | Status | PR |',
                '|:-:|:------|:------:|:--:|',
                ...rows.map(r => `| ${r.num} | ${r.title} | ${r.st.emoji} ${r.st.text} | ${r.link || 'â€”'} |`)
              ].join('\n');

              const body = header + table + '\n';

              const existing = await github.rest.issues.listForRepo({ owner, repo, state: 'open', labels: dashboardLabel, per_page: 100 });
              let issue = existing.data.find(i => i.title === dashboardTitle) || null;

              if (!issue) {
                try { await github.rest.issues.getLabel({ owner, repo, name: dashboardLabel }); }
                catch {
                  try { await github.rest.issues.createLabel({ owner, repo, name: dashboardLabel, color: '0e8a16' }); } catch (e) {}
                }
                issue = (await github.rest.issues.create({ owner, repo, title: dashboardTitle, body, labels: [dashboardLabel] })).data;
                core.info(`Created dashboard issue #${issue.number}`);
              } else {
                if (!issue.body || !issue.body.includes(marker) || issue.body !== body) {
                  await github.rest.issues.update({ owner, repo, issue_number: issue.number, body });
                  core.info(`Updated dashboard issue #${issue.number}`);
                } else {
                  core.info('Dashboard up-to-date.');
                }
              }
            };

            run().catch(err => core.setFailed(err.message));
