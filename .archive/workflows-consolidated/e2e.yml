name: E2E (Playwright)

on:
  workflow_dispatch:
  pull_request:

jobs:
  changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      server: ${{ steps.filter.outputs.server }}
    steps:
      - uses: actions/checkout@c9ef52556095b32f140b0c7d74474f53696d9000 # v4
      - name: Paths filter
        id: filter
        uses: dorny/paths-filter@4512585 # v3
        with:
          filters: |
            server:
              - 'server/**'
              - 'client/**'
              - 'docker-compose.yml'
              - 'docs/realtime/**'
              - '.github/workflows/e2e.yml'

  test-golden-path:
    name: test:golden-path
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@c9ef52556095b32f140b0c7d74474f53696d9000 # v4
      - name: Set up Node 18
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: |
            server/package-lock.json
            client/package-lock.json

      - name: Install server dependencies
        run: npm ci
        working-directory: server

      - name: Install client dependencies
        run: npm ci
        working-directory: client

      - name: Generate persisted queries (required for test)
        run: npm run generate:persisted
        working-directory: client

      - name: Start services for testing
        run: |
          cd server && npm run build & 
          cd server && npm run seed:demo & 
          wait
          docker-compose -f docker-compose.yml up -d neo4j postgres redis
          # wait for services to be healthy
          for i in {1..60}; do
            curl -fsS http://localhost:4000/health && break
            sleep 2
          done
          cd server && npm start & 
          cd client && npm run dev & 
          # wait for client and server
          for i in {1..60}; do
            curl -fsS http://localhost:3000 && break
            sleep 2
          done

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium
        working-directory: client

      - name: Run Golden Path CI Gate Test (REQUIRED)
        run: npx playwright test golden-path-ci-gate.spec.ts --project=chromium
        working-directory: client
        env:
          NODE_ENV: test

      - name: Upload test results
        uses: actions/upload-artifact@0b7f8f6 # v4
        if: always()
        with:
          name: golden-path-results
          path: |
            client/test-results/
            client/playwright-report/

  e2e:
    runs-on: ubuntu-latest
    needs: [changes, test-golden-path] # Golden Path must pass first
    if: needs.changes.outputs.server == 'true'
    strategy:
      fail-fast: false
      matrix:
        layout: [cose-bilkent, dagre]
        sprite: ["0", "1"]
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@c9ef52556095b32f140b0c7d74474f53696d9000 # v4
      - name: Set up Node 18
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4
        with:
          node-version: 18
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: Launch stack (server+client+deps)
        run: |
          docker compose -f docker-compose.yml up -d --build postgres neo4j redis
          # wait for services to be healthy
          for i in {1..60}; do
            curl -fsS http://localhost:4000/health && break
            sleep 2
          done
          docker compose -f docker-compose.yml up -d --build server client
          # wait for client and server
          for i in {1..60}; do
            curl -fsS http://localhost:3000 && break
            sleep 2
          done
      - name: Install client deps
        run: cd client && npm ci
      - name: Run E2E tests (layout=${{ matrix.layout }}, sprite=${{ matrix.sprite }})
        env:
          LAYOUT: ${{ matrix.layout }}
          SPRITE_LABELS: ${{ matrix.sprite }}
        run: cd client && npm run test:e2e
      - name: Dump compose logs (on failure)
        if: failure()
        run: docker compose -f docker-compose.yml logs --no-color server client | tail -n 300
      - name: Tear down
        if: always()
        run: docker compose -f docker-compose.yml down -v

  e2e-analytics-bridge:
    name: E2E (Analytics Bridge)
    runs-on: ubuntu-latest
    needs: changes
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request' &&
        (contains(toJson(github.event.pull_request.labels), 'server') || needs.changes.outputs.server == 'true'))
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@c9ef52556095b32f140b0c7d74474f53696d9000 # v4
      - name: Set up Node 18
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4
        with:
          node-version: 18
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: Launch backend stack (Redis+server)
        env:
          DISABLE_SOCKET_AUTH: "1"
        run: |
          docker compose -f docker-compose.yml up -d --build redis postgres neo4j
          # launch server with auth bypass for analytics namespace
          docker compose -f docker-compose.yml up -d --build server
          # wait for server
          for i in {1..60}; do
            curl -fsS http://localhost:4000/health && break
            sleep 2
          done
      - name: Install client deps
        run: cd client && npm ci
      - name: Run analytics bridge E2E (with trace)
        env:
          E2E_WS_URL: http://localhost:4000
          E2E_REDIS_URL: redis://localhost:6379/1
        run: cd client && npm run test:e2e -- tests/e2e/analytics-bridge.spec.ts -- --trace on
      - name: Upload Playwright traces (on failure)
        if: failure()
        uses: actions/upload-artifact@0b7f8f6 # v4
        with:
          name: playwright-traces-analytics-bridge
          path: |
            client/test-results/**
            client/playwright-report/**
          retention-days: 7
      - name: Add trace viewer instructions (on failure)
        if: failure()
        run: |
          echo "## Analytics Bridge E2E â€“ Debug Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Artifact: 'playwright-traces-analytics-bridge' (kept 7 days)" >> $GITHUB_STEP_SUMMARY
          echo "- Includes 'client/test-results' (Playwright traces) and 'client/playwright-report' (HTML report)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### View HTML report" >> $GITHUB_STEP_SUMMARY
          echo "1. Download the artifact from this run's Artifacts section" >> $GITHUB_STEP_SUMMARY
          echo "2. Open 'client/playwright-report/index.html' locally in a browser" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### View trace in Playwright Trace Viewer" >> $GITHUB_STEP_SUMMARY
          echo "1. Download the artifact" >> $GITHUB_STEP_SUMMARY
          echo "2. Locate a trace file under 'client/test-results/**/trace.zip'" >> $GITHUB_STEP_SUMMARY
          echo "3. Run:

````bash
# install if needed
npx playwright show-trace client/test-results/**/trace.zip
````" >> $GITHUB_STEP_SUMMARY
      - name: Dump server logs (on failure)
        if: failure()
        run: docker compose -f docker-compose.yml logs --no-color server | tail -n 400
      - name: Tear down
        if: always()
        run: docker compose -f docker-compose.yml down -v
