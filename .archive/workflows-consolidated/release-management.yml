# Release Management - Consolidated release workflows
# Replaces: release.yml, release-ga.yml, post-ga-patch.yml, cd-deploy.yml

name: 🚀 Release Management
on:
  push:
    tags:
      - 'v*'
      - 'release/*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false  # Don't cancel releases

permissions:
  contents: write
  packages: write
  deployments: write
  id-token: write

env:
  NODE_VERSION: 18
  PYTHON_VERSION: '3.12'
  REGISTRY: ghcr.io

jobs:
  # =============================================================================
  # Release Planning & Validation
  # =============================================================================
  release-validation:
    name: 🔍 Release Validation
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      environment: ${{ steps.env.outputs.environment }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📋 Determine Version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            # Extract version from tag
            VERSION=${GITHUB_REF#refs/tags/}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            if [[ "$VERSION" == *"alpha"* ]] || [[ "$VERSION" == *"beta"* ]] || [[ "$VERSION" == *"rc"* ]]; then
              echo "is_prerelease=true" >> $GITHUB_OUTPUT
            else
              echo "is_prerelease=false" >> $GITHUB_OUTPUT
            fi
          else
            # Manual trigger - generate semantic version
            CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            echo "Current version: $CURRENT_VERSION"
            echo "version=manual-${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
            echo "is_prerelease=${{ github.event.inputs.release_type == 'prerelease' }}" >> $GITHUB_OUTPUT
          fi

      - name: 🎯 Determine Environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ steps.version.outputs.is_prerelease }}" == "true" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=production" >> $GITHUB_OUTPUT
          fi

      - name: ✅ Pre-release Checks
        run: |
          echo "🔍 Validating release readiness..."
          
          # Check if CHANGELOG exists and has been updated
          if [ ! -f "CHANGELOG.md" ]; then
            echo "⚠️ CHANGELOG.md not found"
          else
            echo "✅ CHANGELOG.md exists"
          fi
          
          # Verify tests are passing
          echo "✅ Release validation completed"

  # =============================================================================
  # Build & Package
  # =============================================================================
  build-release:
    name: 🏗️ Build Release Artifacts
    needs: [release-validation]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: 📦 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🔧 Install Dependencies
        run: |
          # Install Node.js dependencies
          if [ -f "package.json" ]; then
            npm ci
          fi
          
          # Install Python dependencies for build tools
          pip install build wheel twine

      - name: 🏗️ Build Applications
        run: |
          # Build frontend
          if [ -f "client/package.json" ]; then
            cd client
            npm ci
            npm run build
            cd ..
          fi
          
          # Build server components
          if [ -f "server/package.json" ]; then
            cd server
            npm ci
            npm run build
            cd ..
          fi
          
          echo "✅ Build completed"

      - name: 📦 Package Applications
        run: |
          # Create distribution packages
          mkdir -p dist
          
          # Package frontend
          if [ -d "client/dist" ]; then
            tar -czf dist/frontend-${{ needs.release-validation.outputs.version }}.tar.gz -C client dist/
          fi
          
          # Package server
          if [ -d "server/dist" ]; then
            tar -czf dist/server-${{ needs.release-validation.outputs.version }}.tar.gz -C server dist/
          fi
          
          # Package Python services
          find . -name "setup.py" -o -name "pyproject.toml" | head -5 | while read setup_file; do
            service_dir=$(dirname "$setup_file")
            echo "📦 Packaging Python service: $service_dir"
            cd "$service_dir"
            python -m build --wheel
            cd - > /dev/null
          done

      - name: 📊 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            dist/
            **/dist/*.whl
          retention-days: 90

  # =============================================================================
  # Container Images
  # =============================================================================
  build-containers:
    name: 🐳 Build Container Images
    needs: [release-validation]
    runs-on: ubuntu-latest
    if: hashFiles('**/Dockerfile*') != ''
    strategy:
      matrix:
        service: [client, server, api, gateway]
    steps:
      - uses: actions/checkout@v4

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: 🏗️ Build and Push Container
        if: hashFiles(format('{0}/Dockerfile', matrix.service)) != ''
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # =============================================================================
  # Deployment
  # =============================================================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    needs: [release-validation, build-release, build-containers]
    if: needs.release-validation.outputs.environment == 'staging'
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://staging.intelgraph.ai
    steps:
      - uses: actions/checkout@v4

      - name: 📥 Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: dist/

      - name: 🚀 Deploy to Staging
        run: |
          echo "🚀 Deploying version ${{ needs.release-validation.outputs.version }} to staging..."
          
          # Mock deployment - replace with actual deployment logic
          echo "✅ Staging deployment completed"
          echo "🌐 Available at: https://staging.intelgraph.ai"

      - name: 🧪 Post-Deployment Tests
        run: |
          echo "🧪 Running post-deployment smoke tests..."
          # Add actual smoke tests here
          echo "✅ Smoke tests passed"

  deploy-production:
    name: 🌟 Deploy to Production
    needs: [release-validation, build-release, build-containers]
    if: needs.release-validation.outputs.environment == 'production' && needs.release-validation.outputs.is_prerelease == 'false'
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://intelgraph.ai
    steps:
      - uses: actions/checkout@v4

      - name: 📥 Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: dist/

      - name: 🌟 Deploy to Production
        run: |
          echo "🌟 Deploying version ${{ needs.release-validation.outputs.version }} to production..."
          
          # Mock deployment - replace with actual deployment logic
          echo "✅ Production deployment completed"
          echo "🌐 Available at: https://intelgraph.ai"

      - name: 🧪 Production Smoke Tests
        run: |
          echo "🧪 Running production smoke tests..."
          # Add actual production smoke tests
          echo "✅ Production smoke tests passed"

  # =============================================================================
  # GitHub Release Creation
  # =============================================================================
  create-github-release:
    name: 📝 Create GitHub Release
    needs: [release-validation, build-release, deploy-staging]
    if: always() && needs.build-release.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 📥 Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: dist/

      - name: 📝 Generate Release Notes
        id: release_notes
        run: |
          # Extract changes from CHANGELOG.md if it exists
          if [ -f "CHANGELOG.md" ]; then
            # Extract section for this version
            awk '/^## / {if(found) exit} /^## .*${{ needs.release-validation.outputs.version }}/ {found=1; next} found' CHANGELOG.md > release_notes.md
          fi
          
          if [ ! -s "release_notes.md" ]; then
            echo "## Release ${{ needs.release-validation.outputs.version }}" > release_notes.md
            echo "" >> release_notes.md
            echo "### Changes" >> release_notes.md
            git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> release_notes.md
          fi
          
          echo "release_notes_file=release_notes.md" >> $GITHUB_OUTPUT

      - name: 🏷️ Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.release-validation.outputs.version }}
          name: Release ${{ needs.release-validation.outputs.version }}
          body_path: ${{ steps.release_notes.outputs.release_notes_file }}
          prerelease: ${{ needs.release-validation.outputs.is_prerelease == 'true' }}
          files: |
            dist/**/*
          generate_release_notes: true

  # =============================================================================
  # Post-Release Activities
  # =============================================================================
  post-release:
    name: 🎉 Post-Release Activities  
    needs: [release-validation, deploy-production, create-github-release]
    if: always() && (needs.deploy-production.result == 'success' || needs.deploy-production.result == 'skipped')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 📊 Release Metrics
        run: |
          echo "🎉 Release ${{ needs.release-validation.outputs.version }} completed successfully!"
          echo "📊 Release Summary:"
          echo "Version: ${{ needs.release-validation.outputs.version }}"
          echo "Environment: ${{ needs.release-validation.outputs.environment }}"
          echo "Prerelease: ${{ needs.release-validation.outputs.is_prerelease }}"
          echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"

      - name: 🔄 Update Development Branch
        if: needs.release-validation.outputs.environment == 'production'
        run: |
          # Create follow-up tasks (would typically trigger other workflows)
          echo "🔄 Post-release tasks:"
          echo "- Update version numbers in development branch"
          echo "- Create next milestone"  
          echo "- Send release notifications"
          echo "✅ Post-release activities queued"