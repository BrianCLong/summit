# Optimized CI Pipeline - Consolidates 8 separate CI workflows
# Replaces: ci.yml, ci-test.yml, ci-client-tests.yml, ci-security.yml,
#           ci-performance-k6.yml, python-ci.yml, golden-path.yml, ci-validate.yml

name: 🚀 Optimized CI Pipeline
on:
  push:
    branches: [main, feature/*, release/*]
  pull_request:
    branches: [main]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: 18
  PYTHON_VERSION: '3.12'
  COMPOSE_PROJECT_NAME: intelgraph-ci

jobs:
  # =============================================================================
  # Change Detection & Planning
  # =============================================================================
  detect-changes:
    name: 📋 Detect Changes & Plan Execution
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      python: ${{ steps.changes.outputs.python }}
      docs: ${{ steps.changes.outputs.docs }}
      infra: ${{ steps.changes.outputs.infra }}
      security: ${{ steps.changes.outputs.security }}
      performance: ${{ steps.changes.outputs.performance }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Analyze changed paths
        id: changes
        run: |
          # Get changed files since base branch
          git diff --name-only origin/${{ github.base_ref || 'main' }}... > changed_files.txt

          # Categorize changes
          echo "backend=$(grep -E '^(server|api|gateway|services)/' changed_files.txt && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "frontend=$(grep -E '^(client|ui|frontend|apps/web)/' changed_files.txt && echo true || echo false)" >> $GITHUB_OUTPUT  
          echo "python=$(grep -E '\.(py|pyi)$|requirements.*\.txt$|pyproject\.toml$' changed_files.txt && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "docs=$(grep -E '^docs/|\.md$' changed_files.txt && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "infra=$(grep -E '^(k8s|helm|terraform|docker|\.github/workflows)/' changed_files.txt && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "security=$(grep -E '(security|auth|rbac|policy)' changed_files.txt && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "performance=$(grep -E '(perf|benchmark|load)' changed_files.txt && echo true || echo false)" >> $GITHUB_OUTPUT

          # Summary
          echo "📊 Change Detection Summary:"
          echo "Backend: $(grep -E '^(server|api)/' changed_files.txt && echo '✅' || echo '⏭️')"
          echo "Frontend: $(grep -E '^(client|ui)/' changed_files.txt && echo '✅' || echo '⏭️')"
          echo "Python: $(grep -E '\.(py|pyi)$' changed_files.txt && echo '✅' || echo '⏭️')"

  # =============================================================================
  # Security Scanning Suite (Always Run)
  # =============================================================================
  security-suite:
    name: 🔒 Security Scanning Suite
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup Security Tools
        run: |
          # Install GitLeaks
          wget -q https://github.com/gitleaks/gitleaks/releases/download/v8.18.4/gitleaks_8.18.4_linux_x64.tar.gz
          tar xzf gitleaks_8.18.4_linux_x64.tar.gz
          sudo mv gitleaks /usr/local/bin/

          # Install Trivy
          sudo apt-get update -q
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update -q
          sudo apt-get install -y trivy

      - name: 🕵️ GitLeaks Secret Scanning
        run: |
          gitleaks detect --source . --config .gitleaks.toml --verbose
          echo "✅ No secrets detected"

      - name: 🛡️ Trivy Vulnerability Scanning
        run: |
          trivy fs --exit-code 0 --format table .
          trivy fs --exit-code 1 --severity HIGH,CRITICAL --format json -o trivy-results.json .
          echo "✅ Security scan completed"
        continue-on-error: true

      - name: 📊 Upload Security Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-results
          path: |
            trivy-results.json
          retention-days: 30

  # =============================================================================
  # Backend Testing (Node.js/TypeScript)
  # =============================================================================
  test-backend:
    name: 🔧 Backend Tests
    if: needs.detect-changes.outputs.backend == 'true' || github.event_name == 'push'
    needs: [detect-changes, security-suite]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service: [server, api, gateway]
        include:
          - service: server
            path: server
            test_cmd: npm test
          - service: api
            path: api
            test_cmd: npm test
          - service: gateway
            path: gateway
            test_cmd: npm test

    steps:
      - uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: ${{ matrix.path }}/package-lock.json

      - name: 🔧 Install Dependencies
        working-directory: ${{ matrix.path }}
        run: npm ci

      - name: 🧪 Run Tests
        working-directory: ${{ matrix.path }}
        run: ${{ matrix.test_cmd }}

      - name: 📊 Upload Coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-${{ matrix.service }}
          path: ${{ matrix.path }}/coverage/

  # =============================================================================
  # Frontend Testing (React/TypeScript)
  # =============================================================================
  test-frontend:
    name: 🎨 Frontend Tests
    if: needs.detect-changes.outputs.frontend == 'true' || github.event_name == 'push'
    needs: [detect-changes, security-suite]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: client/package-lock.json

      - name: 🔧 Install Dependencies
        working-directory: client
        run: npm ci

      - name: 🏗️ Build Application
        working-directory: client
        run: npm run build

      - name: 🧪 Run Unit Tests
        working-directory: client
        run: npm test -- --coverage --watchAll=false

      - name: 🎭 Run E2E Tests
        working-directory: client
        run: npx playwright test

  # =============================================================================
  # Python Service Testing
  # =============================================================================
  test-python:
    name: 🐍 Python Services
    if: needs.detect-changes.outputs.python == 'true' || github.event_name == 'push'
    needs: [detect-changes, security-suite]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service: [ml, copilot, ingestion, graph-service]

    steps:
      - uses: actions/checkout@v4

      - name: 📦 Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📥 Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ${{ matrix.service }}/.venv
          key: python-${{ matrix.service }}-${{ hashFiles(format('{0}/requirements*.txt', matrix.service), format('{0}/pyproject.toml', matrix.service)) }}

      - name: 🔧 Install Dependencies
        run: |
          if [ -f "${{ matrix.service }}/requirements.txt" ]; then
            python -m venv ${{ matrix.service }}/.venv
            source ${{ matrix.service }}/.venv/bin/activate
            pip install -r ${{ matrix.service }}/requirements.txt
          fi

      - name: 🧪 Run Tests
        run: |
          if [ -f "${{ matrix.service }}/requirements.txt" ]; then
            source ${{ matrix.service }}/.venv/bin/activate
            if [ -d "${{ matrix.service }}/tests" ]; then
              pytest ${{ matrix.service }}/tests/ -v
            else
              echo "⏭️ No tests found for ${{ matrix.service }}"
            fi
          fi

  # =============================================================================
  # Integration & Performance Testing
  # =============================================================================
  integration-tests:
    name: 🔗 Integration & Performance
    needs: [detect-changes, test-backend, test-frontend]
    if: always() && (needs.test-backend.result == 'success' || needs.test-frontend.result == 'success')
    runs-on: ubuntu-latest

    services:
      neo4j:
        image: neo4j:5.11-community
        env:
          NEO4J_AUTH: neo4j/devpassword
          NEO4J_PLUGINS: '["apoc"]'
        ports:
          - 7687:7687
          - 7474:7474

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: 📦 Setup Environment
        run: |
          cp .env.example .env
          echo "✅ Environment configured"

      - name: 🐳 Start Services
        run: |
          docker-compose -f docker-compose.dev.yml up -d --build
          sleep 30  # Allow services to stabilize

      - name: 🔍 Health Checks
        run: |
          curl -f http://localhost:4000/health || exit 1
          curl -f http://localhost:3000/ || exit 1
          echo "✅ All services healthy"

      - name: 🧪 Golden Path Smoke Tests
        run: |
          bash scripts/smoke.sh
          echo "✅ Golden path validated"

      - name: ⚡ Performance Tests
        if: needs.detect-changes.outputs.performance == 'true' || github.event_name == 'push'
        run: |
          npm install -g k6
          k6 run tests/performance/api-load.js
          echo "✅ Performance benchmarks completed"

      - name: 🧹 Cleanup
        if: always()
        run: |
          docker-compose -f docker-compose.dev.yml down --volumes || true

  # =============================================================================
  # Build & Artifact Generation
  # =============================================================================
  build-artifacts:
    name: 🏗️ Build & Package
    needs: [detect-changes, test-backend, test-frontend]
    if: github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'build')
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: 🏗️ Build All Components
        run: |
          npm run build
          echo "✅ Build completed"

      - name: 📦 Generate SBOM
        run: |
          npm install -g @cyclonedx/cyclonedx-npm
          cyclonedx-npm --output-file sbom.json
          echo "✅ Software Bill of Materials generated"

      - name: 📊 Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            client/dist/
            server/dist/
            sbom.json
          retention-days: 30

  # =============================================================================
  # Quality Gates & Summary
  # =============================================================================
  quality-gate:
    name: ✅ Quality Gate Summary
    needs:
      [detect-changes, security-suite, test-backend, test-frontend, test-python, integration-tests]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: 📊 Evaluate Results
        run: |
          echo "🔍 Quality Gate Evaluation:"
          echo "Security Suite: ${{ needs.security-suite.result }}"
          echo "Backend Tests: ${{ needs.test-backend.result }}"
          echo "Frontend Tests: ${{ needs.test-frontend.result }}"  
          echo "Python Tests: ${{ needs.test-python.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"

          # Determine overall result
          if [[ "${{ needs.security-suite.result }}" == "success" ]] && \
             ([[ "${{ needs.test-backend.result }}" == "success" ]] || [[ "${{ needs.test-backend.result }}" == "skipped" ]]) && \
             ([[ "${{ needs.test-frontend.result }}" == "success" ]] || [[ "${{ needs.test-frontend.result }}" == "skipped" ]]) && \
             ([[ "${{ needs.test-python.result }}" == "success" ]] || [[ "${{ needs.test-python.result }}" == "skipped" ]]) && \
             ([[ "${{ needs.integration-tests.result }}" == "success" ]] || [[ "${{ needs.integration-tests.result }}" == "skipped" ]]); then
            echo "🎉 All quality gates passed!"
            echo "✅ CI Pipeline: SUCCESS"
          else
            echo "❌ Quality gate failures detected"
            echo "🚫 CI Pipeline: FAILED"
            exit 1
          fi

      - name: 📈 Performance Summary
        if: always()
        run: |
          echo "📊 CI Pipeline Performance:"
          echo "⏱️  Total Duration: ${{ github.run_number }} minutes"  
          echo "🔄 Jobs Run: ${{ strategy.job-total || 'N/A' }}"
          echo "💾 Cache Hit Rate: TBD"
          echo "🎯 Optimization Target: <10 minutes total"
