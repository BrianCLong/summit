# .github/workflows/wargame-ci.yml
# WAR-GAMED SIMULATION - FOR DECISION SUPPORT ONLY
# Ethics Compliance: This CI/CD workflow is for hypothetical scenario simulation development.

name: WarGame Dashboard CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@c9ef52556095b32f140b0c7d74474f53696d9000 # v4

      - name: Set up Node.js
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4
        with:
          node-version: '20' # Ensure this matches project's engine requirement

      - name: Set up Python
        uses: actions/setup-python@824a62378795d7a63864050674956c050c8c0868 # v5
        with:
          python-version: '3.9' # Ensure this matches project's requirement

      - name: Install Docker Compose
        uses: docker/setup-buildx-action@94ab11c4e8a0292eaf4d3e5b44313865b0473544 # v3

      - name: Start Docker Compose services (Neo4j, Redis, Python API)
        run: |
          docker-compose -f docker-compose.dev.yml up -d --build neo4j redis api
          # Wait for services to be healthy
          echo "Waiting for Neo4j, Redis, and Python API to be ready..."
          # A better approach would be to use a tool like wait-for-it.sh
          # For now, we will rely on the healthchecks in the docker-compose file.

      - name: Install Server dependencies and build
        working-directory: ./server
        run: |
          npm install
          npm run build

      - name: Run Server Unit Tests
        working-directory: ./server
        run: npm test

      - name: Install Client dependencies and build
        working-directory: ./client
        run: |
          npm install
          npm run build

      - name: Run Client Unit Tests
        working-directory: ./client
        run: npm test

      - name: Install Python API dependencies
        working-directory: ./api
        run: |
          pip install -r requirements.txt
          python -m spacy download en_core_web_sm # Download spaCy model

      - name: Run Python API Tests (Placeholder)
        working-directory: ./api
        run: echo "No Python API tests defined yet." # Replace with actual test command if you add tests

      - name: Run Playwright E2E Tests
        working-directory: ./client
        run: |
          npx playwright install --with-deps
          npm run test:e2e
        env:
          PYTHON_API_URL: http://localhost:8000 # For server's axios calls

      - name: Validate GraphQL Schema Compatibility
        working-directory: ./server
        run: |
          echo "GraphQL schema compatibility validation placeholder."
          echo "Consider adding a step to generate SDL and compare against a baseline or lint."

      - name: Stop Docker Compose services
        if: always() # Ensure services are stopped even if previous steps fail
        run: docker-compose -f docker-compose.dev.yml down

  deploy-staging:
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: staging # Define a staging environment in GitHub
    if: github.ref == 'refs/heads/main' # Only deploy from main branch
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@c9ef52556095b32f140b0c7d74474f53696d9000 # v4

      - name: Deploy to Staging (Placeholder)
        run: |
          echo "Deploying WarGame Dashboard to staging environment..."
          echo "Deployment steps go here."