version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: maestro_dev
      POSTGRES_USER: maestro
      POSTGRES_PASSWORD: maestro_dev_password
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/db/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U maestro -d maestro_dev']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - maestro-network

  # Redis cache
  redis:
    image: redis:7-alpine
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - maestro-network

  # Neo4j graph database
  neo4j:
    image: neo4j:5-community
    environment:
      NEO4J_AUTH: neo4j/maestro_dev_password
      NEO4J_PLUGINS: '["graph-data-science", "apoc"]'
      NEO4J_dbms_security_procedures_unrestricted: gds.*,apoc.*
      NEO4J_dbms_memory_heap_initial__size: 256m
      NEO4J_dbms_memory_heap_max__size: 512m
    ports:
      - '7474:7474' # HTTP
      - '7687:7687' # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    healthcheck:
      test:
        [
          'CMD',
          'cypher-shell',
          '-u',
          'neo4j',
          '-p',
          'maestro_dev_password',
          'RETURN 1',
        ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - maestro-network

  # Maestro server (development)
  maestro-server:
    build:
      context: .
      dockerfile: deploy/aws/Dockerfile
      target: builder
    environment:
      NODE_ENV: development
      PORT: 8080
      DATABASE_URL: postgresql://maestro:maestro_dev_password@postgres:5432/maestro_dev
      REDIS_URL: redis://redis:6379
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: maestro_dev_password
      LOG_LEVEL: debug
      METRICS_ENABLED: true
      HOT_RELOAD: true
    ports:
      - '8080:8080'
      - '9229:9229' # Debug port
    volumes:
      - ./server:/app/server
      - ./conductor-ui:/app/conductor-ui
      - node_modules:/app/server/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    command: ['npm', 'run', 'dev']
    networks:
      - maestro-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/healthz']
      interval: 30s
      timeout: 10s
      retries: 3

  # Conductor UI (development)
  conductor-ui:
    build:
      context: ./conductor-ui
      dockerfile: Dockerfile.dev
    environment:
      NODE_ENV: development
      REACT_APP_API_URL: http://localhost:8080
      REACT_APP_WS_URL: ws://localhost:8080
      CHOKIDAR_USEPOLLING: true
    ports:
      - '3000:3000'
    volumes:
      - ./conductor-ui/src:/app/src
      - ./conductor-ui/public:/app/public
      - ui_node_modules:/app/node_modules
    depends_on:
      - maestro-server
    command: ['npm', 'start']
    networks:
      - maestro-network

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - '9090:9090'
    volumes:
      - ./deploy/monitoring/prometheus-dev.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - maestro-network

  # Grafana monitoring
  grafana:
    image: grafana/grafana:latest
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - '3001:3000'
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deploy/monitoring/grafana-dev:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - maestro-network

  # Jaeger tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    environment:
      COLLECTOR_OTLP_ENABLED: true
    ports:
      - '16686:16686' # UI
      - '14268:14268' # HTTP
      - '4317:4317' # OTLP gRPC
      - '4318:4318' # OTLP HTTP
    networks:
      - maestro-network

volumes:
  postgres_data:
  redis_data:
  neo4j_data:
  neo4j_logs:
  prometheus_data:
  grafana_data:
  node_modules:
  ui_node_modules:

networks:
  maestro-network:
    driver: bridge
