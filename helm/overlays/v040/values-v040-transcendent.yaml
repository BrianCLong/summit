# MC Platform v0.4.0 Transcendent Intelligence Helm Overlay
# Policy-sandboxed evolution with verifiable meta-optimization

# Global configuration
global:
  version: 'v0.4.0'
  transcendentMode:
    enabled: true
    safetyLevel: 'PRODUCTION'
    humanOversightRequired: true

# Application configuration
app:
  image:
    tag: 'v0.4.0-transcendent'

  env:
    # Transcendent Intelligence Configuration
    TRANSCENDENT_INTELLIGENCE_ENABLED: 'true'
    QUANTUM_COGNITION_ENABLED: 'true'
    EVOLUTION_SANDBOX_ENABLED: 'true'

    # Safety and Compliance
    SAFETY_SCORE_THRESHOLD: '0.95'
    HUMAN_OVERSIGHT_REQUIRED: 'true'
    EMERGENCY_ROLLBACK_ENABLED: 'true'

    # Evolution System
    EVOLUTION_WEIGHT_SUM_LIMIT: '1.0'
    EVOLUTION_SANDBOX_TIMEOUT: '300s'
    EVOLUTION_APPROVAL_REQUIRED: 'true'

    # Quantum Operations
    QUANTUM_COHERENCE_MIN_TIME: '50.0'
    QUANTUM_ERROR_RATE_MAX: '0.01'
    QUANTUM_ENTANGLEMENT_LIMIT: '1000'

    # Autonomy Configuration
    AUTONOMY_COMPENSATION_RATE_LIMIT: '0.005'
    AUTONOMY_HUMAN_OVERRIDE_TIMEOUT: '60s'
    AUTONOMY_SAFETY_CHECK_INTERVAL: '5m'

    # Post-Quantum Security
    PQ_SIGNATURES_ENABLED: 'true'
    DUAL_SIGNATURE_SCHEME: 'true'

    # Evidence and Audit
    EVIDENCE_GENERATION_REQUIRED: 'true'
    EVIDENCE_RETENTION_YEARS: '7'
    CRYPTOGRAPHIC_SIGNING_ENABLED: 'true'

# Resource allocation for transcendent workloads
resources:
  requests:
    cpu: '2000m'
    memory: '4Gi'
  limits:
    cpu: '4000m'
    memory: '8Gi'

# Horizontal Pod Autoscaler for quantum workloads
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 100
          periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60

# Service configuration
service:
  ports:
    - name: graphql
      port: 4000
      targetPort: 4000
    - name: metrics
      port: 9090
      targetPort: 9090
    - name: health
      port: 8080
      targetPort: 8080

# Ingress for transcendent operations
ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: 'nginx'
    nginx.ingress.kubernetes.io/ssl-redirect: 'true'
    nginx.ingress.kubernetes.io/force-ssl-redirect: 'true'
    nginx.ingress.kubernetes.io/backend-protocol: 'HTTP'
    # Transcendent operation timeouts
    nginx.ingress.kubernetes.io/proxy-read-timeout: '300'
    nginx.ingress.kubernetes.io/proxy-send-timeout: '300'
    nginx.ingress.kubernetes.io/proxy-connect-timeout: '60'
  hosts:
    - host: mc-platform-v040.example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: mc-platform-v040-tls
      hosts:
        - mc-platform-v040.example.com

# Security context for transcendent operations
securityContext:
  runAsNonRoot: true
  runAsUser: 10001
  runAsGroup: 10001
  fsGroup: 10001
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false

# Pod security policy
podSecurityContext:
  seccompProfile:
    type: RuntimeDefault

# NetworkPolicy for transcendent operations isolation
networkPolicy:
  enabled: true
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 9090
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
      ports:
        - protocol: TCP
          port: 4000
  egress:
    # Allow DNS
    - to: []
      ports:
        - protocol: UDP
          port: 53
    # Allow external services for sandbox validation
    - to: []
      ports:
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 80

# ServiceMonitor for Prometheus integration
serviceMonitor:
  enabled: true
  namespace: monitoring
  interval: 30s
  scrapeTimeout: 10s
  path: /metrics
  labels:
    app: mc-platform
    version: v0.4.0
    component: transcendent-intelligence
  metricRelabelings:
    - sourceLabels: [__name__]
      regex: 'go_.*'
      action: drop
    - sourceLabels: [__name__]
      regex: 'http_requests_total'
      targetLabel: component
      replacement: 'transcendent-api'

# PrometheusRule for v0.4.0 alerts
prometheusRule:
  enabled: true
  namespace: monitoring
  labels:
    app: mc-platform
    version: v0.4.0
  groups:
    - name: mc-platform-v040-transcendent
      rules:
        - alert: TranscendentSafetyScoreLow
          expr: mc_platform_safety_score < 0.95
          for: 1m
          labels:
            severity: critical
            version: v0.4.0
          annotations:
            summary: 'Transcendent intelligence safety score below critical threshold'
        - alert: QuantumCoherenceTimeDegraded
          expr: mc_platform_quantum_coherence_time_microseconds < 50.0
          for: 2m
          labels:
            severity: warning
            version: v0.4.0
          annotations:
            summary: 'Quantum coherence time below threshold'

# ConfigMap for transcendent configuration
configMap:
  enabled: true
  data:
    transcendent-config.yaml: |
      transcendent:
        intelligence:
          enabled: true
          level: "QUANTUM_READY"
          quantumEnhancement: true
        evolution:
          sandboxEnabled: true
          weightSumLimit: 1.0
          humanApprovalRequired: true
        safety:
          scoreThreshold: 0.95
          humanOversightRequired: true
          emergencyRollbackEnabled: true
        quantum:
          coherenceMinTime: 50.0
          errorRateMax: 0.01
          entanglementLimit: 1000
        autonomy:
          compensationRateLimit: 0.005
          humanOverrideTimeout: "60s"
          safetyCheckInterval: "5m"

# Secret for post-quantum cryptographic keys
secret:
  enabled: true
  type: Opaque
  data:
    # Base64 encoded placeholder keys (replace with actual keys)
    pq-signing-key: 'cGxhY2Vob2xkZXItcG9zdC1xdWFudHVtLXNpZ25pbmcta2V5'
    pq-verification-key: 'cGxhY2Vob2xkZXItcG9zdC1xdWFudHVtLXZlcmlmaWNhdGlvbi1rZXk='
    evidence-encryption-key: 'cGxhY2Vob2xkZXItZXZpZGVuY2UtZW5jcnlwdGlvbi1rZXk='

# PersistentVolumeClaim for evolution sandbox workspace
persistence:
  enabled: true
  accessMode: ReadWriteOnce
  size: 10Gi
  storageClass: 'fast-ssd'
  annotations:
    volume.beta.kubernetes.io/storage-provisioner: 'kubernetes.io/aws-ebs'

# Init containers for transcendent setup
initContainers:
  - name: transcendent-init
    image: alpine:3.18
    command:
      - sh
      - -c
      - |
        echo "Initializing transcendent intelligence workspace..."
        mkdir -p /workspace/sandbox
        mkdir -p /workspace/evidence
        mkdir -p /workspace/quantum
        chmod 755 /workspace/*
        echo "Transcendent workspace initialized"
    volumeMounts:
      - name: workspace
        mountPath: /workspace

# Sidecar containers for enhanced monitoring
sidecars:
  - name: quantum-metrics-exporter
    image: mc-platform/quantum-metrics:v0.4.0
    ports:
      - containerPort: 9091
        name: quantum-metrics
    env:
      - name: QUANTUM_METRICS_PORT
        value: '9091'
    resources:
      requests:
        cpu: '100m'
        memory: '128Mi'
      limits:
        cpu: '200m'
        memory: '256Mi'

# Health checks for transcendent operations
livenessProbe:
  httpGet:
    path: /health/live
    port: 8080
  initialDelaySeconds: 60
  periodSeconds: 30
  timeoutSeconds: 10
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /health/ready
    port: 8080
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

# Startup probe for transcendent initialization
startupProbe:
  httpGet:
    path: /health/startup
    port: 8080
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 30

# Pod disruption budget for high availability
podDisruptionBudget:
  enabled: true
  minAvailable: '50%'

# Node affinity for transcendent workloads
nodeAffinity:
  requiredDuringSchedulingIgnoredDuringExecution:
    nodeSelectorTerms:
      - matchExpressions:
          - key: node-type
            operator: In
            values:
              - transcendent-compute
              - high-performance

# Pod anti-affinity for distribution
podAntiAffinity:
  preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
            - key: app
              operator: In
              values:
                - mc-platform
        topologyKey: kubernetes.io/hostname

# Tolerations for dedicated transcendent nodes
tolerations:
  - key: 'transcendent-workload'
    operator: 'Equal'
    value: 'true'
    effect: 'NoSchedule'

# Priority class for transcendent operations
priorityClassName: 'transcendent-priority'

# Service account with transcendent permissions
serviceAccount:
  create: true
  name: 'mc-platform-transcendent'
  annotations:
    eks.amazonaws.com/role-arn: 'arn:aws:iam::ACCOUNT:role/mc-platform-transcendent-role'

# RBAC for transcendent operations
rbac:
  create: true
  rules:
    - apiGroups: ['']
      resources: ['secrets', 'configmaps']
      verbs: ['get', 'list', 'watch']
    - apiGroups: ['batch']
      resources: ['jobs']
      verbs: ['create', 'get', 'list', 'watch', 'delete']
    - apiGroups: ['apps']
      resources: ['deployments']
      verbs: ['get', 'list', 'watch']

# Volume mounts for transcendent operations
volumeMounts:
  - name: workspace
    mountPath: /app/workspace
  - name: config
    mountPath: /app/config
    readOnly: true
  - name: secrets
    mountPath: /app/secrets
    readOnly: true

volumes:
  - name: workspace
    persistentVolumeClaim:
      claimName: '{{ include "mc-platform.fullname" . }}-workspace'
  - name: config
    configMap:
      name: '{{ include "mc-platform.fullname" . }}-config'
  - name: secrets
    secret:
      secretName: '{{ include "mc-platform.fullname" . }}-secrets'
