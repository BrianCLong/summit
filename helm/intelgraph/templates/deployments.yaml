apiVersion: apps/v1
kind: Deployment
metadata: { name: api, namespace: {{ .Values.namespace }} }
spec:
  replicas: 2
  selector: { matchLabels: { app: api } }
  template:
    metadata: { labels: { app: api } }
    spec:
      containers:
        - name: api
          image: "{{ .Values.image.app.repository }}:{{ .Values.image.app.tag }}"
          ports: [ {containerPort: 4000} ]
          env:
            - name: GRAPH_URI
              value: {{ .Values.env.GRAPH_URI | quote }}
            - name: GRAPH_USER
              value: {{ .Values.env.GRAPH_USER | quote }}
            - name: GRAPH_PASSWORD
              valueFrom:
                secretKeyRef: { name: {{ .Values.env.GRAPH_PASSWORD_SECRET }}, key: password }
            - name: POSTGRES_URI
              valueFrom:
                secretKeyRef: { name: {{ .Values.env.POSTGRES_URI_SECRET }}, key: uri }
            - name: REDIS_URI
              valueFrom:
                secretKeyRef: { name: {{ .Values.env.REDIS_URI_SECRET }}, key: uri }
          readinessProbe: { httpGet: { path: /healthz, port: 4000 }, initialDelaySeconds: 5, periodSeconds: 10 }
          livenessProbe:  { httpGet: { path: /livez,  port: 4000 }, initialDelaySeconds: 15, periodSeconds: 20 }

---
apiVersion: apps/v1
kind: Deployment
metadata: { name: web, namespace: {{ .Values.namespace }} }
spec:
  replicas: 2
  selector: { matchLabels: { app: web } }
  template:
    metadata: { labels: { app: web } }
    spec:
      containers:
        - name: web
          image: "{{ .Values.image.web.repository }}:{{ .Values.image.web.tag }}"
          ports: [ {containerPort: 3000} ]
          readinessProbe: { httpGet: { path: /, port: 3000 }, initialDelaySeconds: 5 }
          livenessProbe:  { httpGet: { path: /, port: 3000 }, initialDelaySeconds: 15 }
---
apiVersion: v1
kind: Service
metadata: { name: api, namespace: {{ .Values.namespace }} }
spec:
  ports: [ { port: 80, targetPort: 4000 } ]
  selector: { app: api }
---
apiVersion: v1
kind: Service
metadata: { name: web, namespace: {{ .Values.namespace }} }
spec:
  ports: [ { port: 80, targetPort: 3000 } ]
  selector: { app: web }

