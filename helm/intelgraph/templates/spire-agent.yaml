# SPIRE Agent DaemonSet for Zero-Trust mTLS
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: spire-agent
  namespace: { { .Values.namespace | default "intelgraph" } }
  labels:
    app: spire-agent
    component: identity
spec:
  selector:
    matchLabels:
      app: spire-agent
  template:
    metadata:
      labels:
        app: spire-agent
        component: identity
    spec:
      serviceAccountName: spire-agent
      hostPID: true
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
        - name: spire-agent
          image:
            {
              {
                .Values.spire.agent.image | default "ghcr.io/spiffe/spire-agent:1.8.5",
              },
            }
          args:
            - -config
            - /run/spire/config/agent.conf
          ports:
            - containerPort: 8088
              name: healthz
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /live
              port: 8088
            initialDelaySeconds: 15
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /ready
              port: 8088
            initialDelaySeconds: 10
            periodSeconds: 10
          volumeMounts:
            - name: spire-config
              mountPath: /run/spire/config
              readOnly: true
            - name: spire-bundle
              mountPath: /run/spire/bundle
              readOnly: true
            - name: socket
              mountPath: /run/spire/sockets
            - name: proc
              mountPath: /host/proc
              readOnly: true
            - name: cgroup
              mountPath: /host/sys/fs/cgroup
              readOnly: true
          resources:
            requests:
              memory: '128Mi'
              cpu: '50m'
            limits:
              memory: '256Mi'
              cpu: '200m'
          env:
            - name: SPIRE_TRUST_DOMAIN
              value:
                { { .Values.spire.trustDomain | default "intelgraph.local" } }
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          securityContext:
            runAsUser: 0
            runAsGroup: 0
      volumes:
        - name: spire-config
          configMap:
            name: spire-agent-config
        - name: spire-bundle
          configMap:
            name: spire-bundle
        - name: socket
          hostPath:
            path: /run/spire/sockets
            type: DirectoryOrCreate
        - name: proc
          hostPath:
            path: /proc
        - name: cgroup
          hostPath:
            path: /sys/fs/cgroup
      tolerations:
        - operator: Exists
          effect: NoSchedule
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: spire-agent
  namespace: { { .Values.namespace | default "intelgraph" } }
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: spire-agent-cluster-role
rules:
  - apiGroups: ['']
    resources: ['nodes']
    verbs: ['get']
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: spire-agent-cluster-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: spire-agent-cluster-role
subjects:
  - kind: ServiceAccount
    name: spire-agent
    namespace: { { .Values.namespace | default "intelgraph" } }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: spire-agent-config
  namespace: { { .Values.namespace | default "intelgraph" } }
data:
  agent.conf: |
    agent {
      data_dir = "/run/spire/data"
      log_level = "{{ .Values.spire.agent.logLevel | default "INFO" }}"
      socket_path = "/run/spire/sockets/agent.sock"
      trust_bundle_path = "/run/spire/bundle/bundle.crt"
      trust_domain = "{{ .Values.spire.trustDomain | default "intelgraph.local" }}"
      server_address = "spire-server"
      server_port = "8081"
      
      # Retry settings
      retry_bootstrap = true
      
      # Telemetry
      telemetry {
        Prometheus {
          port = 9989
        }
      }
    }

    plugins {
      NodeAttestor "k8s_psat" {
        plugin_data {
          cluster = "{{ .Values.cluster.name | default "intelgraph-cluster" }}"
        }
      }

      KeyManager "memory" {
        plugin_data = {}
      }

      WorkloadAttestor "k8s" {
        plugin_data {
          skip_kubelet_verification = {{ .Values.spire.agent.skipKubeletVerification | default false }}
        }
      }

      WorkloadAttestor "unix" {
        plugin_data = {}
      }
    }

    health_checks {
      listener_enabled = true
      bind_address = "0.0.0.0"
      bind_port = "8088"
      live_path = "/live"
      ready_path = "/ready"
    }
