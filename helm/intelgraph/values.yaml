# Default values for IntelGraph
replicaCount: 1

image:
  server:
    repository: ghcr.io/brianlong/intelgraph/server
    tag: "dev"
    pullPolicy: IfNotPresent
  client:
    repository: ghcr.io/brianlong/intelgraph/client
    tag: "dev"
    pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations: {}

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 65532
  runAsGroup: 65532
  fsGroup: 65532

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 65532

service:
  server:
    type: ClusterIP
    port: 4000
    targetPort: 4000
  client:
    type: ClusterIP
    port: 80
    targetPort: 80

ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  host: intelgraph-dev.example.com
  path: /
  pathType: Prefix
  tls:
    enabled: true
    secretName: intelgraph-tls

resources:
  server:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 512Mi
  client:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 50m
      memory: 64Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# Environment configuration
environment: development

# Database configuration
database:
  postgresql:
    enabled: true
    host: postgresql
    port: 5432
    name: intelgraph
    username: intelgraph
    existingSecret: postgresql-credentials
  neo4j:
    enabled: true
    host: neo4j
    port: 7687
    username: neo4j
    existingSecret: neo4j-credentials
  redis:
    enabled: true
    host: redis
    port: 6379
    existingSecret: redis-credentials

# Monitoring
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
    path: /metrics
  prometheus:
    server: prometheus-server.monitoring.svc.cluster.local

# Health checks
healthCheck:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

# Preview environment specific settings
preview:
  enabled: false
  ttl: "24h"
  cleanup: true

rollout:
  enabled: true
  autoPromotionEnabled: false
  scaleDownDelaySeconds: 30
  progressDeadlineSeconds: 600
  canary:
    initialWeight: 10
    secondWeight: 50
    initialPause: 5m
    secondPause: 10m
    maxSurge: 1
    maxUnavailable: 0
  metrics:
    interval: "30s"
    count: 5
    successRate:
      successCondition: "result[0] >= 0.95"
      failureCondition: "result[0] < 0.90"
    errorRate:
      successCondition: "result[0] <= 0.05"
      failureCondition: "result[0] > 0.10"
    latency:
      successCondition: "result[0] <= 2000"
      failureCondition: "result[0] > 5000"
  tests:
    enabled: false
    image: curlimages/curl:8.4.0
