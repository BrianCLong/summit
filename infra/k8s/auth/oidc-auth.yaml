# OIDC Authentication and RBAC for Maestro/Conductor UI
apiVersion: v1
kind: ConfigMap
metadata:
  name: oidc-auth-config
  namespace: maestro
  labels:
    app.kubernetes.io/name: maestro-conductor
    app.kubernetes.io/component: authentication
    app.kubernetes.io/part-of: intelgraph
data:
  auth-config.json: |
    {
      "oidc": {
        "enabled": true,
        "issuer": "https://auth.intelgraph.io", # TODO: Replace with your OIDC issuer URL
        "clientId": "maestro-conductor-prod", # TODO: Replace with your OIDC client ID for production
        "scopes": ["openid", "profile", "email", "groups"],
        "responseType": "code",
        "redirectUri": "https://maestro.intelgraph.io/conductor/auth/callback", # TODO: Replace with your production redirect URI
        "postLogoutRedirectUri": "https://maestro.intelgraph.io/conductor", # TODO: Replace with your production post-logout redirect URI
        "automaticSilentRenew": true,
        "validateSubOnSilentRenew": true
      },
      "rbac": {
        "enabled": true,
        "rolesClaim": "groups",
        "roles": {
          "admin": {
            "description": "Full administrative access",
            "permissions": ["*"]
          },
          "operator": {
            "description": "Workflow and task management",
            "permissions": [
              "workflow:read",
              "workflow:execute", 
              "workflow:create",
              "task:read",
              "task:execute",
              "metrics:read"
            ]
          },
          "analyst": {
            "description": "Read-only access with execution rights",
            "permissions": [
              "workflow:read",
              "workflow:execute",
              "task:read",
              "metrics:read"
            ]
          },
          "viewer": {
            "description": "Read-only access",
            "permissions": [
              "workflow:read",
              "task:read",
              "metrics:read"
            ]
          }
        },
        "defaultRole": "viewer"
      },
      "session": {
        "timeout": 28800,
        "refreshThreshold": 300,
        "cookieSecure": true,
        "cookieSameSite": "strict"
      }
    }

---
apiVersion: v1
kind: Secret
metadata:
  name: oidc-auth-secret
  namespace: maestro
  labels:
    app.kubernetes.io/name: maestro-conductor
    app.kubernetes.io/component: authentication
    app.kubernetes.io/part-of: intelgraph
type: Opaque
data:
  # OIDC client secret - should be rotated regularly
  client-secret: bWFlc3Ryby1vaWRjLWNsaWVudC1zZWNyZXQ= # TODO: Replace with your base64 encoded OIDC client secret (prod)
  # JWT signing secret
  jwt-secret: aW50ZWxncmFwaC1qd3Qtc2lnbmluZy1zZWNyZXQ= # TODO: Replace with your base64 encoded JWT signing secret (prod)
  # Session encryption key
  session-key: c2Vzc2lvbi1lbmNyeXB0aW9uLWtleS1mb3I= # TODO: Replace with your base64 encoded session encryption key (prod)

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: oidc-auth-proxy
  namespace: maestro
  labels:
    app.kubernetes.io/name: oidc-auth-proxy
    app.kubernetes.io/component: authentication
    app.kubernetes.io/part-of: intelgraph
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: oidc-auth-proxy
  template:
    metadata:
      labels:
        app.kubernetes.io/name: oidc-auth-proxy
        app.kubernetes.io/component: authentication
        app.kubernetes.io/part-of: intelgraph
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '9090'
        prometheus.io/path: '/metrics'
    spec:
      serviceAccountName: maestro-conductor
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      containers:
        - name: oauth2-proxy
          image: quay.io/oauth2-proxy/oauth2-proxy:v7.4.0
          ports:
            - containerPort: 4180
              name: http
            - containerPort: 9090
              name: metrics
          env:
            - name: OAUTH2_PROXY_HTTP_ADDRESS
              value: '0.0.0.0:4180'
            - name: OAUTH2_PROXY_METRICS_ADDRESS
              value: '0.0.0.0:9090'
            - name: OAUTH2_PROXY_UPSTREAMS
              value: 'http://maestro-conductor:5000/'
            - name: OAUTH2_PROXY_PROVIDER
              value: 'oidc'
            - name: OAUTH2_PROXY_OIDC_ISSUER_URL
              value: 'https://auth.intelgraph.io' # TODO: Replace with your OIDC issuer URL
            - name: OAUTH2_PROXY_CLIENT_ID
              value: 'maestro-conductor-prod' # TODO: Replace with your OIDC client ID for production
            - name: OAUTH2_PROXY_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: oidc-auth-secret
                  key: client-secret
            - name: OAUTH2_PROXY_COOKIE_SECRET
              valueFrom:
                secretKeyRef:
                  name: oidc-auth-secret
                  key: session-key
            - name: OAUTH2_PROXY_COOKIE_DOMAINS
              value: '.intelgraph.io' # TODO: Replace with your production domain
            - name: OAUTH2_PROXY_REDIRECT_URL
              value: 'https://maestro.intelgraph.io/oauth2/callback' # TODO: Replace with your production redirect URI
            - name: OAUTH2_PROXY_EMAIL_DOMAINS
              value: '*'
            - name: OAUTH2_PROXY_SCOPE
              value: 'openid profile email groups'
            - name: OAUTH2_PROXY_SET_XAUTHREQUEST
              value: 'true'
            - name: OAUTH2_PROXY_PASS_ACCESS_TOKEN
              value: 'true'
            - name: OAUTH2_PROXY_PASS_USER_HEADERS
              value: 'true'
            - name: OAUTH2_PROXY_COOKIE_SECURE
              value: 'true'
            - name: OAUTH2_PROXY_COOKIE_SAMESITE
              value: 'strict'
            - name: OAUTH2_PROXY_SESSION_STORE_TYPE
              value: 'redis'
            - name: OAUTH2_PROXY_REDIS_CONNECTION_URL
              value: 'redis://redis-conductor:6379/1'
            - name: OAUTH2_PROXY_REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis-conductor-secret
                  key: password
          livenessProbe:
            httpGet:
              path: /ping
              port: 4180
            initialDelaySeconds: 30
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /ready
              port: 4180
            initialDelaySeconds: 10
            periodSeconds: 10
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 200m
              memory: 256Mi
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL

---
apiVersion: v1
kind: Service
metadata:
  name: oidc-auth-proxy
  namespace: maestro
  labels:
    app.kubernetes.io/name: oidc-auth-proxy
    app.kubernetes.io/component: authentication
    app.kubernetes.io/part-of: intelgraph
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: '9090'
    prometheus.io/path: '/metrics'
spec:
  type: ClusterIP
  ports:
    - port: 4180
      targetPort: 4180
      name: http
      protocol: TCP
    - port: 9090
      targetPort: 9090
      name: metrics
      protocol: TCP
  selector:
    app.kubernetes.io/name: oidc-auth-proxy

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: maestro-conductor-auth-ingress
  namespace: maestro
  labels:
    app.kubernetes.io/name: maestro-conductor
    app.kubernetes.io/component: ingress
    app.kubernetes.io/part-of: intelgraph
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: 'true'
    nginx.ingress.kubernetes.io/force-ssl-redirect: 'true'
    nginx.ingress.kubernetes.io/backend-protocol: HTTP
    nginx.ingress.kubernetes.io/auth-url: 'http://oidc-auth-proxy.maestro.svc.cluster.local:4180/oauth2/auth'
    nginx.ingress.kubernetes.io/auth-signin: 'https://maestro.intelgraph.io/oauth2/start?rd=$escaped_request_uri' # TODO: Replace with your production domain
    nginx.ingress.kubernetes.io/auth-response-headers: 'X-Auth-Request-User,X-Auth-Request-Email,X-Auth-Request-Groups,X-Auth-Request-Preferred-Username'
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
      more_set_headers "Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:;";
spec:
  tls:
    - hosts:
        - maestro.intelgraph.io
      secretName: maestro-conductor-auth-tls
  rules:
    - host: maestro.intelgraph.io
      http:
        paths:
          - path: /oauth2
            pathType: Prefix
            backend:
              service:
                name: oidc-auth-proxy
                port:
                  number: 4180
          - path: /conductor
            pathType: Prefix
            backend:
              service:
                name: maestro-conductor
                port:
                  number: 5000
          - path: /api
            pathType: Prefix
            backend:
              service:
                name: maestro-conductor
                port:
                  number: 8080

---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: oidc-auth-proxy
  namespace: maestro
  labels:
    app.kubernetes.io/name: oidc-auth-proxy
    app.kubernetes.io/component: authentication
    app.kubernetes.io/part-of: intelgraph
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: oidc-auth-proxy
  endpoints:
    - port: metrics
      interval: 30s
      path: /metrics
      honorLabels: true
