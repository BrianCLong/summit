# PostgreSQL StatefulSet for Conductor metadata and workflow state
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-conductor-config
  namespace: dev-orch
  labels:
    app.kubernetes.io/name: postgres-conductor
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: intelgraph
data:
  postgresql.conf: |
    # PostgreSQL configuration for Conductor
    listen_addresses = '*'
    port = 5432
    max_connections = 200
    shared_buffers = 256MB
    effective_cache_size = 1GB
    maintenance_work_mem = 64MB
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    default_statistics_target = 100
    random_page_cost = 1.1
    effective_io_concurrency = 200
    
    # Logging
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'pg_log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_rotation_age = 1d
    log_rotation_size = 100MB
    log_min_duration_statement = 1000
    log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
    log_statement = 'ddl'
    
    # Performance tuning
    synchronous_commit = on
    wal_level = replica
    archive_mode = on
    archive_command = 'test ! -f /var/lib/postgresql/archive/%f && cp %p /var/lib/postgresql/archive/%f'
    
  pg_hba.conf: |
    # PostgreSQL Client Authentication Configuration
    local   all             all                                     trust
    host    all             all             127.0.0.1/32            md5
    host    all             all             ::1/128                 md5
    host    all             all             0.0.0.0/0               md5
    host    replication     all             0.0.0.0/0               md5

---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-conductor-secret
  namespace: dev-orch
  labels:
    app.kubernetes.io/name: postgres-conductor
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: intelgraph
type: Opaque
data:
  # Default credentials - should be rotated in production
  postgres-password: aW50ZWxncmFwaC1kZXYtcGFzcw== # intelgraph-dev-pass
  conductor-password: Y29uZHVjdG9yLWRldi1wYXNz # conductor-dev-pass

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-conductor
  namespace: dev-orch
  labels:
    app.kubernetes.io/name: postgres-conductor
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: intelgraph
    app.kubernetes.io/version: '15.4'
spec:
  serviceName: postgres-conductor-headless
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres-conductor
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgres-conductor
        app.kubernetes.io/component: database
        app.kubernetes.io/part-of: intelgraph
        app.kubernetes.io/version: '15.4'
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '9187'
        prometheus.io/path: '/metrics'
    spec:
      serviceAccountName: postgres-operator
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsNonRoot: true
      initContainers:
        - name: init-postgres
          image: postgres:15.4-alpine
          command:
            - /bin/sh
            - -c
            - |
              set -ex
              # Create data directory
              mkdir -p /var/lib/postgresql/data
              mkdir -p /var/lib/postgresql/archive
              chown -R postgres:postgres /var/lib/postgresql
              
              # Copy configuration files
              cp /tmp/config/postgresql.conf /var/lib/postgresql/data/
              cp /tmp/config/pg_hba.conf /var/lib/postgresql/data/
              chown postgres:postgres /var/lib/postgresql/data/*.conf
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 200m
              memory: 256Mi
          volumeMounts:
            - name: config
              mountPath: /tmp/config
            - name: data
              mountPath: /var/lib/postgresql
          securityContext:
            runAsUser: 0
            runAsNonRoot: false
      containers:
        - name: postgres
          image: postgres:15.4-alpine
          ports:
            - containerPort: 5432
              name: postgres
          env:
            - name: POSTGRES_DB
              value: conductor
            - name: POSTGRES_USER
              value: conductor
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-conductor-secret
                  key: conductor-password
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U conductor -d conductor -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U conductor -d conductor -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          resources:
            requests:
              cpu: 200m
              memory: 512Mi
            limits:
              cpu: 400m
              memory: 1Gi
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql
            - name: config
              mountPath: /etc/postgresql
          securityContext:
            runAsUser: 999
            runAsNonRoot: true
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
        - name: postgres-exporter
          image: quay.io/prometheuscommunity/postgres-exporter:v0.11.1
          ports:
            - containerPort: 9187
              name: metrics
          env:
            - name: DATA_SOURCE_NAME
              value: postgresql://conductor:$(POSTGRES_PASSWORD)@localhost:5432/conductor?sslmode=disable
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-conductor-secret
                  key: conductor-password
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 200m
              memory: 256Mi
          securityContext:
            runAsUser: 999
            runAsNonRoot: true
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
      volumes:
        - name: config
          configMap:
            name: postgres-conductor-config
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/name: postgres-conductor
          app.kubernetes.io/component: database
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: standard
        resources:
          requests:
            storage: 50Gi

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-conductor-headless
  namespace: dev-orch
  labels:
    app.kubernetes.io/name: postgres-conductor
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: intelgraph
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 5432
      targetPort: 5432
      name: postgres
  selector:
    app.kubernetes.io/name: postgres-conductor

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-conductor
  namespace: dev-orch
  labels:
    app.kubernetes.io/name: postgres-conductor
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: intelgraph
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: '9187'
    prometheus.io/path: '/metrics'
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: 5432
      name: postgres
      protocol: TCP
    - port: 9187
      targetPort: 9187
      name: metrics
      protocol: TCP
  selector:
    app.kubernetes.io/name: postgres-conductor

---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: postgres-conductor
  namespace: dev-orch
  labels:
    app.kubernetes.io/name: postgres-conductor
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: intelgraph
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres-conductor
  endpoints:
    - port: metrics
      interval: 30s
      path: /metrics
      honorLabels: true