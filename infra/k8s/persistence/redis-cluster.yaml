---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-conductor-config
  namespace: dev-orch
  labels:
    app.kubernetes.io/name: redis-conductor
    app.kubernetes.io/component: queue
    app.kubernetes.io/part-of: intelgraph
data:
  redis.conf: |
    # Redis configuration for Conductor task queues
    port 6379
    bind 0.0.0.0
    protected-mode yes
    requirepass ${REDIS_PASSWORD}

    # Memory and persistence settings
    maxmemory 2gb
    maxmemory-policy allkeys-lru
    save 900 1
    save 300 10
    save 60 10000

    # Cluster settings
    cluster-enabled yes
    cluster-config-file nodes.conf
    cluster-node-timeout 5000
    cluster-announce-ip ${POD_IP}
    cluster-announce-port 6379
    cluster-announce-bus-port 16379

    # Performance tuning
    tcp-keepalive 300
    timeout 0
    databases 1

    # Logging
    loglevel notice
    logfile ""

    # Security
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    rename-command DEBUG ""

---
apiVersion: v1
kind: Secret
metadata:
  name: redis-conductor-secret
  namespace: dev-orch
  labels:
    app.kubernetes.io/name: redis-conductor
    app.kubernetes.io/component: queue
    app.kubernetes.io/part-of: intelgraph
type: Opaque
data:
  # Default password: "conductor-redis-dev-2024" (base64 encoded)
  password: Y29uZHVjdG9yLXJlZGlzLWRldi0yMDI0

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-conductor
  namespace: dev-orch
  labels:
    app.kubernetes.io/name: redis-conductor
    app.kubernetes.io/component: queue
    app.kubernetes.io/part-of: intelgraph
    app.kubernetes.io/version: '7.2'
spec:
  serviceName: redis-conductor-headless
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: redis-conductor
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis-conductor
        app.kubernetes.io/component: queue
        app.kubernetes.io/part-of: intelgraph
        app.kubernetes.io/version: '7.2'
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '9121'
        prometheus.io/path: '/metrics'
    spec:
      serviceAccountName: postgres-operator
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsNonRoot: true
      initContainers:
        - name: init-redis
          image: redis:7.2-alpine
          command:
            - /bin/sh
            - -c
            - |
              set -ex
              # Copy redis configuration
              cp /tmp/redis/redis.conf /etc/redis/redis.conf
              # Set proper permissions
              chown redis:redis /etc/redis/redis.conf
              chmod 640 /etc/redis/redis.conf
          volumeMounts:
            - name: config
              mountPath: /tmp/redis
            - name: config-writable
              mountPath: /etc/redis
          securityContext:
            runAsUser: 0
            runAsNonRoot: false
      containers:
        - name: redis
          image: redis:7.2-alpine
          ports:
            - containerPort: 6379
              name: client
            - containerPort: 16379
              name: gossip
          command:
            - redis-server
            - /etc/redis/redis.conf
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis-conductor-secret
                  key: password
          livenessProbe:
            exec:
              command:
                - redis-cli
                - --no-auth-warning
                - -a
                - $(REDIS_PASSWORD)
                - ping
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - redis-cli
                - --no-auth-warning
                - -a
                - $(REDIS_PASSWORD)
                - ping
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          resources:
            requests:
              cpu: 200m
              memory: 512Mi
            limits:
              cpu: 500m
              memory: 2Gi
          volumeMounts:
            - name: data
              mountPath: /data
            - name: config-writable
              mountPath: /etc/redis
          securityContext:
            runAsUser: 999
            runAsNonRoot: true
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
        - name: redis-exporter
          image: quay.io/oliver006/redis_exporter:v1.55.0
          ports:
            - containerPort: 9121
              name: metrics
          env:
            - name: REDIS_ADDR
              value: 'redis://localhost:6379'
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis-conductor-secret
                  key: password
          resources:
            requests:
              cpu: 50m
              memory: 64Mi
            limits:
              cpu: 100m
              memory: 128Mi
          securityContext:
            runAsUser: 999
            runAsNonRoot: true
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
      volumes:
        - name: config
          configMap:
            name: redis-conductor-config
        - name: config-writable
          emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - redis-conductor
                topologyKey: kubernetes.io/hostname
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/name: redis-conductor
          app.kubernetes.io/component: queue
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: fast-ssd
        resources:
          requests:
            storage: 10Gi

---
apiVersion: v1
kind: Service
metadata:
  name: redis-conductor-headless
  namespace: dev-orch
  labels:
    app.kubernetes.io/name: redis-conductor
    app.kubernetes.io/component: queue
    app.kubernetes.io/part-of: intelgraph
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 6379
      targetPort: 6379
      name: client
    - port: 16379
      targetPort: 16379
      name: gossip
  selector:
    app.kubernetes.io/name: redis-conductor

---
apiVersion: v1
kind: Service
metadata:
  name: redis-conductor
  namespace: dev-orch
  labels:
    app.kubernetes.io/name: redis-conductor
    app.kubernetes.io/component: queue
    app.kubernetes.io/part-of: intelgraph
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: '9121'
    prometheus.io/path: '/metrics'
spec:
  type: ClusterIP
  ports:
    - port: 6379
      targetPort: 6379
      name: client
      protocol: TCP
    - port: 9121
      targetPort: 9121
      name: metrics
      protocol: TCP
  selector:
    app.kubernetes.io/name: redis-conductor

---
apiVersion: batch/v1
kind: Job
metadata:
  name: redis-cluster-init
  namespace: dev-orch
  labels:
    app.kubernetes.io/name: redis-conductor
    app.kubernetes.io/component: init
    app.kubernetes.io/part-of: intelgraph
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
        - name: redis-cluster-init
          image: redis:7.2-alpine
          command:
            - /bin/sh
            - -c
            - |
              set -ex
              echo "Waiting for Redis pods to be ready..."
              sleep 30

              # Get pod IPs
              REDIS_NODES=""
              for i in 0 1 2; do
                POD_IP=$(nslookup redis-conductor-${i}.redis-conductor-headless.dev-orch.svc.cluster.local | grep Address | tail -1 | awk '{print $2}')
                if [ ! -z "$POD_IP" ]; then
                  REDIS_NODES="$REDIS_NODES $POD_IP:6379"
                fi
              done

              echo "Redis nodes: $REDIS_NODES"

              # Initialize cluster
              redis-cli --cluster create $REDIS_NODES \
                --cluster-replicas 0 \
                --cluster-yes \
                -a $REDIS_PASSWORD

              echo "Redis cluster initialized successfully"
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis-conductor-secret
                  key: password
      serviceAccountName: postgres-operator

---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: redis-conductor
  namespace: dev-orch
  labels:
    app.kubernetes.io/name: redis-conductor
    app.kubernetes.io/component: queue
    app.kubernetes.io/part-of: intelgraph
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: redis-conductor
  endpoints:
    - port: metrics
      interval: 30s
      path: /metrics
      honorLabels: true
