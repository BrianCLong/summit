# Default values for IntelGraph
replicaCount: 2

image:
  server:
    repository: ghcr.io/brianlong/intelgraph/server
    digest: "sha256:8a1b2c3d4e5f67890123456789abcdef0123456789abcdef0123456789abcdef"
    pullPolicy: IfNotPresent
  client:
    repository: ghcr.io/brianlong/intelgraph/client
    digest: "sha256:9f0e1d2c3b4a59687766554433221100ffeeddccbbaa99887766554433221100"
    pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations: {}

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 2000
  fsGroupChangePolicy: OnRootMismatch
  supplementalGroups:
    - 2000
  seccompProfile:
    type: RuntimeDefault

securityContext:
  runAsNonRoot: true
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop:
      - ALL

service:
  type: ClusterIP
  port: 80
  server:
    targetPort: 8080
  client:
    targetPort: 3000

ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: Prefix
  tls: []

resources:
  server:
    requests:
      cpu: 250m
      memory: 512Mi
    limits:
      cpu: 500m
      memory: 1Gi
  client:
    requests:
      cpu: 150m
      memory: 256Mi
    limits:
      cpu: 300m
      memory: 512Mi

autoscaling:
  server:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage: 75
    behavior:
      scaleDown:
        stabilizationWindowSeconds: 300
        policies:
          - type: Percent
            value: 50
            periodSeconds: 60
      scaleUp:
        stabilizationWindowSeconds: 60
        policies:
          - type: Percent
            value: 100
            periodSeconds: 60
  client:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage: 75

podDisruptionBudget:
  server:
    enabled: true
    minAvailable: 1
  client:
    enabled: true
    minAvailable: 1

topologySpreadConstraints:
  server:
    - maxSkew: 1
      topologyKey: topology.kubernetes.io/zone
      whenUnsatisfiable: DoNotSchedule
  client:
    - maxSkew: 1
      topologyKey: topology.kubernetes.io/zone
      whenUnsatisfiable: DoNotSchedule

nodeSelector: {}

tolerations: []

affinity:
  server: {}
  client: {}

database:
  postgresql:
    existingSecret: intelgraph-postgresql
    secretKeys:
      url: url
      username: username
      password: password
  neo4j:
    existingSecret: intelgraph-neo4j
    secretKeys:
      uri: uri
      username: username
      password: password
  redis:
    existingSecret: intelgraph-redis
    secretKeys:
      url: url

externalSecrets:
  enabled: true
  refreshInterval: 1h
  secretStoreRef:
    kind: ClusterSecretStore
    name: summit-cluster-secrets
  secrets:
    postgresql:
      name: intelgraph-postgresql
      data:
        - secretKey: url
          remoteRef:
            key: services/intelgraph/postgresql
            property: url
        - secretKey: username
          remoteRef:
            key: services/intelgraph/postgresql
            property: username
        - secretKey: password
          remoteRef:
            key: services/intelgraph/postgresql
            property: password
    neo4j:
      name: intelgraph-neo4j
      data:
        - secretKey: uri
          remoteRef:
            key: services/intelgraph/neo4j
            property: uri
        - secretKey: username
          remoteRef:
            key: services/intelgraph/neo4j
            property: username
        - secretKey: password
          remoteRef:
            key: services/intelgraph/neo4j
            property: password
    redis:
      name: intelgraph-redis
      data:
        - secretKey: url
          remoteRef:
            key: services/intelgraph/redis
            property: url

postgresql:
  enabled: false

redis:
  enabled: false

# Global configuration
global:
  environment: development
  prometheus:
    path: /metrics
  cluster:
    name: intelgraph-dev
  ingress:
    enabled: false
    tls:
      enabled: false
  podSecurityStandards: restricted

# ServiceMonitor configuration
serviceMonitor:
  enabled: false
  interval: 30s
  scrapeTimeout: 10s

# PrometheusRule configuration
prometheusRule:
  enabled: false

# SPIRE configuration for zero-trust mTLS
spire:
  enabled: false
  server:
    replicas: 1
  agent:
    replicas: 1
  helper:
    image: "ghcr.io/spiffe/spiffe-helper:0.6.0"

# Services configuration
services:
  apiGateway:
    enabled: false
    service:
      port: 80
  worker:
    enabled: false
  mobile:
    enabled: false
    name: mobile
    service:
      port: 80
  analytics:
    enabled: false
    name: analytics
    service:
      port: 80
  searchEngine:
    enabled: false
    name: search-engine
    service:
      port: 80
  graphAnalytics:
    enabled: false
    name: graph-analytics
    service:
      port: 80
  mlEngine:
    enabled: false
    name: ml-engine
    service:
      port: 80
  feedProcessor:
    enabled: false
    name: feed-processor
    service:
      port: 80
  workflowEngine:
    enabled: false
    name: workflow-engine
    service:
      port: 80

# Conductor configuration
conductor:
  replicas: 1

# Rollout configuration
rollout:
  autoPromotionEnabled: false
  tests:
    enabled: false

# Monitoring configuration
monitoring:
  prometheus:
    server: "prometheus.monitoring.svc.cluster.local:9090"
  prometheusRules:
    enabled: false

# Canary configuration
canary:
  enabled: false
  weight: 10
  maxWeight: 50
  stepWeight: 10
  interval: 30s

# OTEL configuration
otel:
  enabled: false
  sampling:
    percentage: 10
  memoryLimit: 256
  spikeLimit: 64
  debug: false
  replicas: 1

# Preview environment specific settings
preview:
  enabled: false
  ttl: "24h"
  cleanup: true
# Zero Trust configuration
zeroTrust:
  enabled: false

# Audit configuration
audit:
  wormEnabled: false
  bucket: "intelgraph-audit-logs"
  storageSize: "10Gi"
  worm:
    image: "amazon/aws-cli:2.13.32"

# mTLS configuration
mtls:
  enabled: false

# AWS configuration
aws:
  region: "us-east-1"

# Security configuration
security:
  podSecurityPolicy:
    enabled: false
  networkPolicies:
    enabled: false
    defaultDeny:
      enabled: false

# Federal configuration
federal:
  classification: "UNCLASSIFIED"
  airGap:
    enabled: false
  breakGlass:
    emergencyNetworkOverride: false
  fips:
    enforcementAction: "warn"
  enforcement:
    resourceLimits: false
  limits:
    maxCpu: 2
  hsm:
    provider: "none"
  storage:
    fipsCrypto: false

# Database configurations
databases:
  postgresql:
    enabled: false
    external:
      enabled: false
  neo4j:
    enabled: false
    external:
      enabled: false
  redis:
    enabled: false
    sentinel:
      enabled: false

# CORS configuration
cors:
  origins: []

# Network Policy configuration
networkPolicy:
  enabled: false

# Health check configuration
healthCheck:
  enabled: true
  path: /health
  port: 8080
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 3
  failureThreshold: 3
  successThreshold: 1
