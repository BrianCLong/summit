# Default values for IntelGraph
replicaCount: 1

image:
  server:
    repository: ghcr.io/brianlong/intelgraph/server
    tag: "dev"
    pullPolicy: IfNotPresent
  client:
    repository: ghcr.io/brianlong/intelgraph/client
    tag: "dev"
    pullPolicy: IfNotPresent

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations: {}

podSecurityContext:
  fsGroup: 2000

securityContext:
  runAsNonRoot: true
  runAsUser: 1000

server:
  enabled: true
  service:
    enabled: true
    type: ClusterIP
    port: 4000
    targetPort: 4000
  probes:
    enabled: true
    liveness:
      path: /health
      initialDelaySeconds: 10
      periodSeconds: 10
    readiness:
      path: /health
      initialDelaySeconds: 5
      periodSeconds: 5
  metrics:
    enabled: true
    prometheusScrape: true
    path: /metrics

dev:
  dummySecrets: false

database:
  postgresql:
    existingSecret: ""
    usernameKey: username
    passwordKey: password
    urlKey: url
  neo4j:
    existingSecret: ""
    username: neo4j
    usernameKey: username
    passwordKey: password
    uriKey: uri
  redis:
    existingSecret: ""
    username: redis
    usernameKey: username
    passwordKey: password
    urlKey: url

service:
  type: ClusterIP
  port: 4000
  client:
    targetPort: 3000

ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: Prefix
  tls: []

resources: {}

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# Database configurations
postgresql:
  enabled: true
  auth:
    postgresPassword: devpassword
    database: intelgraph_dev

redis:
  enabled: true
  auth:
    enabled: false

# Global configuration
global:
  environment: development
  prometheus:
    path: /metrics
    port: 4000
  cluster:
    name: intelgraph-dev
  ingress:
    enabled: false
    tls:
      enabled: false

# ServiceMonitor configuration
serviceMonitor:
  enabled: false
  interval: 30s
  scrapeTimeout: 10s

# PrometheusRule configuration
prometheusRule:
  enabled: false

# SPIRE configuration for zero-trust mTLS
spire:
  enabled: false
  server:
    replicas: 1
  agent:
    replicas: 1
  helper:
    image: "ghcr.io/spiffe/spiffe-helper:0.6.0"

# Services configuration
services:
  apiGateway:
    enabled: false
    service:
      port: 80
  worker:
    enabled: false
  mobile:
    enabled: false
    name: mobile
    service:
      port: 80
  analytics:
    enabled: false
    name: analytics
    service:
      port: 80
  searchEngine:
    enabled: false
    name: search-engine
    service:
      port: 80
  graphAnalytics:
    enabled: false
    name: graph-analytics
    service:
      port: 80
  mlEngine:
    enabled: false
    name: ml-engine
    service:
      port: 80
  feedProcessor:
    enabled: false
    name: feed-processor
    service:
      port: 80
  workflowEngine:
    enabled: false
    name: workflow-engine
    service:
      port: 80

# Conductor configuration
conductor:
  replicas: 1

# Rollout configuration
rollout:
  autoPromotionEnabled: false
  tests:
    enabled: false

# Monitoring configuration
monitoring:
  prometheus:
    server: "prometheus.monitoring.svc.cluster.local:9090"
  prometheusRules:
    enabled: false

# Canary configuration
canary:
  enabled: false
  weight: 10
  maxWeight: 50
  stepWeight: 10
  interval: 30s

# OTEL configuration
otel:
  enabled: false
  sampling:
    percentage: 10
  memoryLimit: 256
  spikeLimit: 64
  debug: false
  replicas: 1

# Preview environment specific settings
preview:
  enabled: false
  ttl: "24h"
  cleanup: true
# Zero Trust configuration
zeroTrust:
  enabled: false

# Audit configuration
audit:
  wormEnabled: false
  bucket: "intelgraph-audit-logs"
  storageSize: "10Gi"
  worm:
    image: "amazon/aws-cli:2.13.32"

# mTLS configuration
mtls:
  enabled: false

# AWS configuration
aws:
  region: "us-east-1"

# Security configuration
security:
  podSecurityPolicy:
    enabled: false
  networkPolicies:
    enabled: false
    defaultDeny:
      enabled: false

# Federal configuration
federal:
  classification: "UNCLASSIFIED"
  airGap:
    enabled: false
  breakGlass:
    emergencyNetworkOverride: false
  fips:
    enforcementAction: "warn"
  enforcement:
    resourceLimits: false
  limits:
    maxCpu: 2
  hsm:
    provider: "none"
  storage:
    fipsCrypto: false

# Database configurations
databases:
  postgresql:
    external:
      enabled: false
  neo4j:
    external:
      enabled: false
  redis:
    sentinel:
      enabled: false

# CORS configuration
cors:
  origins: []

# Network Policy configuration
networkPolicy:
  enabled: false

# Health check configuration
healthCheck:
  enabled: true
  path: /health
  port: 4000
