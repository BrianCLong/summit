# Production environment values
global:
  environment: production
  domain: topicality.co
  imageTag: REPLACED_AT_DEPLOY
  prometheus:
    path: /metrics
  cluster:
    name: intelgraph-prod
  ingress:
    enabled: true
    tls:
      enabled: true

replicaCount: 3

image:
  repository: ghcr.io/brianclong/intelgraph
  pullPolicy: IfNotPresent
  tag: "REPLACED_AT_DEPLOY"
  client:
    repository: ghcr.io/brianlong/intelgraph/client
    tag: "REPLACED_AT_DEPLOY"
  server:
    repository: ghcr.io/brianlong/intelgraph/server
    tag: "REPLACED_AT_DEPLOY"

securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 2000
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL

resources:
  requests:
    cpu: "200m"
    memory: "256Mi"
  limits:
    cpu: "1"
    memory: "1Gi"

# External services - disabled in prod (use external managed services)
postgresql:
  enabled: false

redis:
  enabled: false

neo4j:
  enabled: false
  name: intelgraph-neo4j  # Required by Neo4j Helm chart
  volumes:
    data:
      mode: defaultStorageClass  # Required by Neo4j Helm chart

# External service configuration (sealed secrets)
externalDatabase:
  host: POSTGRES_HOST_FROM_SEALED_SECRET
  port: 5432
  database: intelgraph_prod
  username: POSTGRES_USER_FROM_SEALED_SECRET
  password: POSTGRES_PASSWORD_FROM_SEALED_SECRET

externalRedis:
  host: REDIS_HOST_FROM_SEALED_SECRET
  port: 6379
  password: REDIS_PASSWORD_FROM_SEALED_SECRET

externalNeo4j:
  uri: NEO4J_URI_FROM_SEALED_SECRET
  username: NEO4J_USER_FROM_SEALED_SECRET
  password: NEO4J_PASSWORD_FROM_SEALED_SECRET

ingress:
  enabled: true
  className: nginx
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/hsts: "true"
    cert-manager.io/cluster-issuer: letsencrypt-dns
  hosts:
    - host: app.prod.topicality.co
      paths:
        - path: /
          pathType: Prefix
    - host: api.prod.topicality.co
      paths:
        - path: /api
          pathType: Prefix
  tls:
    - secretName: prod-topicality-tls
      hosts:
        - app.prod.topicality.co
        - api.prod.topicality.co

networkPolicy:
  enabled: true

podSecurityPolicy:
  enabled: true

monitoring:
  serviceMonitor: { enabled: true }
  prometheusRules: { enabled: true }
  grafanaDashboards: { enabled: true }
  prometheus:
    server: prometheus-server.monitoring.svc.cluster.local

zeroTrust:
  enabled: true

audit:
  wormEnabled: true
  bucket: "intelgraph-audit-logs"
  storageSize: "10Gi"
  worm:
    image: "amazon/aws-cli:2.13.32"

mtls:
  enabled: false

aws:
  region: "us-east-1"

security:
  podSecurityPolicy:
    enabled: true
  networkPolicies:
    enabled: true
    defaultDeny:
      enabled: true

federal:
  classification: "UNCLASSIFIED"
  airGap:
    enabled: false
  breakGlass:
    emergencyNetworkOverride: false
  fips:
    enforcementAction: "deny"
  enforcement:
    resourceLimits: false
  limits:
    maxCpu: 2
  hsm:
    provider: "none"
  storage:
    fipsCrypto: false

databases:
  postgresql:
    external:
      enabled: true
  neo4j:
    external:
      enabled: true
  redis:
    sentinel:
      enabled: false

canary:
  enabled: true
  weight: 10
  maxWeight: 50
  stepWeight: 10
  interval: 30s
<<<<<<< HEAD
  threshold: 5
  mirror: false
  mirrorWeight: 0
  maxUnavailable: "25%"
  skipAnalysis: false

  # Istio service mesh integration
  istio:
    enabled: false
    gateway: "intelgraph-gateway"

  # Webhook validation during canary
  webhooks:
    enabled: true
    healthUrl: "http://intelgraph-canary.intelgraph-prod.svc.cluster.local:8080/health"
    loadTestUrl: "http://flagger-loadtester.flagger-system/"
    integrationUrl: "http://flagger-loadtester.flagger-system/"
    targetUrl: "http://intelgraph-canary.intelgraph-prod.svc.cluster.local:8080/api/v1/health"

  # Custom business metrics for canary analysis
  customMetrics:
    - name: worker-job-success-rate
      min: 99
      interval: 1m
      query: |
        sum(
          rate(
            worker_jobs_processed_total{
              namespace="intelgraph-prod",
              job="intelgraph",
              status="success"
            }[1m]
          )
        )
        /
        sum(
          rate(
            worker_jobs_processed_total{
              namespace="intelgraph-prod",
              job="intelgraph"
            }[1m]
          )
        ) * 100

# SPIRE configuration for zero-trust mTLS
spire:
  enabled: false  # Disable for now, not needed for canary
  server:
    replicas: 2
  agent:
    replicas: 1
  helper:
    image: "ghcr.io/spiffe/spiffe-helper:0.6.0"

# Services configuration (minimal for preflight)
services:
  apiGateway:
    enabled: false
    service:
      port: 80
  worker:
    enabled: false
  mobile:
    enabled: false
    name: mobile
    service:
      port: 80
  analytics:
    enabled: false
    name: analytics
    service:
      port: 80
  searchEngine:
    enabled: false
    name: search-engine
    service:
      port: 80
  graphAnalytics:
    enabled: false
    name: graph-analytics
    service:
      port: 80
  mlEngine:
    enabled: false
    name: ml-engine
    service:
      port: 80
  feedProcessor:
    enabled: false
    name: feed-processor
    service:
      port: 80
  workflowEngine:
    enabled: false
    name: workflow-engine
=======

# SPIRE configuration (disabled in prod - use external)
spire:
  enabled: false
  server:
    replicas: 1
    logLevel: INFO
    storageSize: 1Gi
  agent:
    replicas: 1
    image: ghcr.io/spiffe/spire-agent:1.8.5
  helper:
    image: ghcr.io/spiffe/spire-helper:latest
  trustDomain: prod.topicality.co

# Neo4j values required by chart validation
neo4j:
  enabled: false
  name: intelgraph-neo4j
  volumes:
    data:
      mode: defaultStorageClass

# Services configuration
services:
  apiGateway:
    enabled: true
    name: intelgraph-api-gateway
    service:
      type: ClusterIP
      port: 80
      targetPort: 8080
  mobile:
    name: intelgraph-mobile
    service:
      port: 80
  analytics:
    name: intelgraph-analytics
    service:
      port: 80
  searchEngine:
    name: intelgraph-search-engine
    service:
      port: 80
  graphAnalytics:
    name: intelgraph-graph-analytics
    service:
      port: 80
  mlEngine:
    name: intelgraph-ml-engine
    service:
      port: 80
  feedProcessor:
    name: intelgraph-feed-processor
    service:
      port: 80
  workflowEngine:
    name: intelgraph-workflow-engine
>>>>>>> hotfix/workflow-pnpm-only
    service:
      port: 80

# Conductor configuration
conductor:
<<<<<<< HEAD
  replicas: 1
=======
  replicas: 3

# Cluster configuration
cluster:
  name: intelgraph-prod-cluster
>>>>>>> hotfix/workflow-pnpm-only

# Rollout configuration
rollout:
  autoPromotionEnabled: false
  tests:
<<<<<<< HEAD
    enabled: false

# Monitoring configuration
monitoring:
  prometheus:
    server: "prometheus-operated.monitoring.svc.cluster.local"
  prometheusRules:
    enabled: true

cors:
  origins: []
=======
    enabled: true

# Zero Trust configuration
zeroTrust:
  enabled: true

# Audit configuration
audit:
  wormEnabled: true
  worm:
    image: ghcr.io/intelgraph/worm:latest

# mTLS configuration
mtls:
  enabled: true

# AWS configuration
aws:
  region: us-east-1

# Security configuration (enhanced for production)
security:
  podSecurityPolicy:
    enabled: true
  networkPolicies:
    enabled: true

# Federal compliance configuration
federal:
  classification: UNCLASSIFIED
  airGap:
    enabled: false
  breakGlass:
    emergencyNetworkOverride: false
  fips:
    enforcementAction: deny
  enforcement:
    resourceLimits: enforce
  limits:
    maxCpu: 1000m
    maxMemory: 1Gi
  hsm:
    provider: none
  storage:
    fipsCrypto: true

# CORS configuration (production-restricted)
cors:
  origins: "https://app.prod.topicality.co,https://api.prod.topicality.co"
>>>>>>> hotfix/workflow-pnpm-only
