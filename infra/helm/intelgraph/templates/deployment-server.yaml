{{- if .Values.server.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "intelgraph.fullname" . }}-server
  labels:
    {{- include "intelgraph.labels" . | nindent 4 }}
    app.kubernetes.io/component: server
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "intelgraph.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: server
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "intelgraph.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: server
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "intelgraph.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: server
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.server.repository }}:{{ .Values.image.server.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.server.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ default .Values.server.service.port .Values.server.service.targetPort }}
              protocol: TCP
          {{- $probes := .Values.server.probes }}
          {{- $db := .Values.database | default dict }}
          {{- $pgVals := (get $db "postgresql") | default dict }}
          {{- $neoVals := (get $db "neo4j") | default dict }}
          {{- $redisVals := (get $db "redis") | default dict }}
          {{- $pgSecret := default "postgres" (get $pgVals "existingSecret") }}
          {{- $pgUrlKey := default "url" (get $pgVals "urlKey") }}
          {{- $neoSecret := default "neo4j" (get $neoVals "existingSecret") }}
          {{- $neoUriKey := default "uri" (get $neoVals "uriKey") }}
          {{- $neoUser := default "neo4j" (get $neoVals "username") }}
          {{- $neoPassKey := default "password" (get $neoVals "passwordKey") }}
          {{- $redisSecret := default "redis" (get $redisVals "existingSecret") }}
          {{- $redisUrlKey := default "url" (get $redisVals "urlKey") }}
          {{- if and $probes.enabled $probes.liveness }}
          livenessProbe:
            httpGet:
              path: {{ default "/health" $probes.liveness.path }}
              port: http
            initialDelaySeconds: {{ default 10 $probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ default 10 $probes.liveness.periodSeconds }}
            timeoutSeconds: {{ default 3 $probes.liveness.timeoutSeconds }}
            failureThreshold: {{ default 3 $probes.liveness.failureThreshold }}
          {{- end }}
          {{- if and $probes.enabled $probes.readiness }}
          readinessProbe:
            httpGet:
              path: {{ default "/health" $probes.readiness.path }}
              port: http
            initialDelaySeconds: {{ default 5 $probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ default 5 $probes.readiness.periodSeconds }}
            timeoutSeconds: {{ default 3 $probes.readiness.timeoutSeconds }}
            failureThreshold: {{ default 3 $probes.readiness.failureThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources.server | nindent 12 }}
          env:
            - name: NODE_ENV
              value: "production"
            - name: PORT
              value: "{{ .Values.server.service.targetPort }}"
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: {{ $pgSecret | quote }}
                  key: {{ $pgUrlKey | quote }}
            - name: NEO4J_URI
              valueFrom:
                secretKeyRef:
                  name: {{ $neoSecret | quote }}
                  key: {{ $neoUriKey | quote }}
            - name: NEO4J_USERNAME
              value: {{ $neoUser | quote }}
            - name: NEO4J_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $neoSecret | quote }}
                  key: {{ $neoPassKey | quote }}
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: {{ $redisSecret | quote }}
                  key: {{ $redisUrlKey | quote }}
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: var-cache
              mountPath: /var/cache
      volumes:
        - name: tmp
          emptyDir: {}
        - name: var-cache
          emptyDir: {}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
