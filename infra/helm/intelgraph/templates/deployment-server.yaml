apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "intelgraph.fullname" . }}-server
  labels:
    {{- include "intelgraph.labels" . | nindent 4 }}
    app.kubernetes.io/component: server
spec:
  {{- if not .Values.autoscaling.server.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "intelgraph.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: server
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "intelgraph.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: server
    spec:
      automountServiceAccountToken: false
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "intelgraph.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: server
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: {{ include "intelgraph.imageWithDigest" (dict "image" .Values.image.server "name" "server") }}
          imagePullPolicy: {{ .Values.image.server.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.server.targetPort }}
              protocol: TCP
          {{- if .Values.healthCheck.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.healthCheck.path }}
              port: http
            initialDelaySeconds: {{ .Values.healthCheck.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthCheck.periodSeconds }}
            timeoutSeconds: {{ .Values.healthCheck.timeoutSeconds }}
            failureThreshold: {{ .Values.healthCheck.failureThreshold }}
          readinessProbe:
            httpGet:
              path: {{ .Values.healthCheck.path }}
              port: http
            initialDelaySeconds: {{ .Values.healthCheck.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthCheck.periodSeconds }}
            timeoutSeconds: {{ .Values.healthCheck.timeoutSeconds }}
            failureThreshold: {{ .Values.healthCheck.failureThreshold }}
            successThreshold: {{ .Values.healthCheck.successThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources.server | nindent 12 }}
          env:
            - name: NODE_ENV
              value: '{{ .Values.global.environment | default "production" }}'
            - name: PORT
              value: "{{ .Values.service.server.targetPort }}"
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.postgresql.existingSecret }}
                  key: {{ .Values.database.postgresql.secretKeys.url }}
            - name: NEO4J_URI
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.neo4j.existingSecret }}
                  key: {{ .Values.database.neo4j.secretKeys.uri }}
            - name: NEO4J_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.neo4j.existingSecret }}
                  key: {{ .Values.database.neo4j.secretKeys.username }}
            - name: NEO4J_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.neo4j.existingSecret }}
                  key: {{ .Values.database.neo4j.secretKeys.password }}
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.redis.existingSecret }}
                  key: {{ .Values.database.redis.secretKeys.url }}
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: var-cache
              mountPath: /var/cache
      volumes:
        - name: tmp
          emptyDir: {}
        - name: var-cache
          emptyDir: {}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity.server }}
      affinity:
        {{- toYaml .Values.affinity.server | nindent 8 }}
      {{- else }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/instance
                      operator: In
                      values:
                        - {{ .Release.Name }}
                    - key: app.kubernetes.io/component
                      operator: In
                      values:
                        - server
                topologyKey: kubernetes.io/hostname
      {{- end }}
      {{- if .Values.topologySpreadConstraints.server }}
      topologySpreadConstraints:
        {{- $root := . }}
        {{- range .Values.topologySpreadConstraints.server }}
        {{- $constraint := dict "maxSkew" (default 1 .maxSkew) "topologyKey" (default "topology.kubernetes.io/zone" .topologyKey) "whenUnsatisfiable" (default "DoNotSchedule" .whenUnsatisfiable) }}
        {{- $selector := fromYaml (include "intelgraph.selectorLabels" $root) }}
        {{- $_ := set $selector "app.kubernetes.io/component" "server" }}
        {{- $_ := set $constraint "labelSelector" (dict "matchLabels" $selector) }}
        {{- toYaml $constraint | nindent 8 }}
        {{- end }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}