{{- $root := . }}
{{- range $index, $region := .Values.secondaryRegions }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "postgres.fullname" $root }}-replica-{{ $region.name | lower | replace "_" "-" }}
  labels:
    {{- include "postgres.labels" $root | nindent 4 }}
    app.kubernetes.io/component: replica
    summit.slo/region: {{ $region.name | quote }}
  annotations:
    replication.summit.sh/role: read-replica
    replication.summit.sh/upstream-region: {{ $root.Values.primaryRegion | quote }}
spec:
  serviceName: {{ include "postgres.fullname" $root }}-replicas
  replicas: {{ $region.replicas | default 1 }}
  selector:
    matchLabels:
      {{- include "postgres.matchLabels" (dict "root" $root "component" "replica") | nindent 6 }}
      summit.slo/region: {{ $region.name | quote }}
  template:
    metadata:
      labels:
        {{- include "postgres.matchLabels" (dict "root" $root "component" "replica") | nindent 8 }}
        summit.slo/region: {{ $region.name | quote }}
      annotations:
        replication.summit.sh/region: {{ $region.name | quote }}
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: topology.kubernetes.io/region
                    operator: In
                    values:
                      - {{ $region.name }}
        {{- with $root.Values.extraAffinity }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- if $root.Values.tolerations }}
      tolerations:
        {{- range $root.Values.tolerations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- end }}
      containers:
        - name: postgres
          image: {{ $root.Values.image.repository }}:{{ $root.Values.image.tag }}
          imagePullPolicy: {{ $root.Values.image.pullPolicy }}
          ports:
            - name: postgres
              containerPort: {{ $root.Values.service.port }}
          env:
            - name: POSTGRESQL_PORT_NUMBER
              value: {{ $root.Values.service.port | quote }}
            - name: POSTGRESQL_REPLICATION_MODE
              value: read
            - name: POSTGRESQL_PRIMARY_HOST
              value: {{ include "postgres.fullname" $root }}-writer
            - name: POSTGRESQL_PRIMARY_PORT_NUMBER
              value: {{ $root.Values.service.port | quote }}
            - name: POSTGRESQL_REPLICATION_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgres.fullname" $root }}-replication
                  key: username
            - name: POSTGRESQL_REPLICATION_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgres.fullname" $root }}-replication
                  key: password
            - name: AURORA_GLOBAL_DB_ID
              value: {{ $root.Values.clusterName | quote }}
            - name: AURORA_SOURCE_REGION
              value: {{ $root.Values.primaryRegion | quote }}
          envFrom:
            - configMapRef:
                name: {{ include "postgres.fullname" $root }}-config
          resources:
            {{- toYaml $root.Values.resources | nindent 12 }}
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
            - name: config
              mountPath: /conf
              readOnly: true
          args:
            - "-c"
            - "config_file=/conf/postgresql.conf"
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: {{ $root.Values.storage.className | quote }}
        resources:
          requests:
            storage: {{ $root.Values.storage.size | quote }}
---
{{- end }}
