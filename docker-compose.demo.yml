# IntelGraph Demo Stack with Full Observability
# Sprint 27C: Complete demo environment with metrics, alerts, and monitoring

version: '3.8'

services:
  # Core Application Services
  api:
    build:
      context: ./services/api
      dockerfile: Dockerfile
    ports:
      - '3001:3001'
    environment:
      - NODE_ENV=demo
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/intelgraph_demo
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=demo123
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=info
      - METRICS_ENABLED=true
      - PROMETHEUS_PORT=9464
    depends_on:
      - postgres
      - neo4j
      - redis
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3001/health']
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - 'prometheus.io/scrape=true'
      - 'prometheus.io/port=9464'
      - 'prometheus.io/path=/metrics'

  gateway:
    build:
      context: ./services/gateway
      dockerfile: Dockerfile
    ports:
      - '4000:4000'
    environment:
      - NODE_ENV=demo
      - API_SERVICE_URL=http://api:3001
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=demo123
      - MODEL_BUDGET_CONFIG=/app/config/model_budgets.yaml
      - OPA_POLICY_BUNDLE=/app/security/policy/bundle/policy-bundle.tgz
      - WEBAUTHN_ENABLED=true
      - AUDIT_LOG_ENABLED=true
      - METRICS_ENABLED=true
      - PROMETHEUS_PORT=9465
    volumes:
      - ./config/model_budgets.yaml:/app/config/model_budgets.yaml:ro
      - ./security/policy/bundle:/app/security/policy/bundle:ro
    depends_on:
      - api
      - neo4j
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:4000/health']
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - 'prometheus.io/scrape=true'
      - 'prometheus.io/port=9465'
      - 'prometheus.io/path=/metrics'

  # Infrastructure Services
  postgres:
    image: postgres:15-alpine
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_DB=intelgraph_demo
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -d intelgraph_demo']
      interval: 10s
      timeout: 5s
      retries: 5

  neo4j:
    image: neo4j:5.12-community
    ports:
      - '7474:7474' # HTTP
      - '7687:7687' # Bolt
    environment:
      - NEO4J_AUTH=neo4j/demo123
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=1G
    volumes:
      - neo4j_data:/data
    healthcheck:
      test: ['CMD', 'cypher-shell', '-u', 'neo4j', '-p', 'demo123', 'RETURN 1']
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 3

  # Observability Stack
  prometheus:
    image: prom/prometheus:v2.47.0
    ports:
      - '9090:9090'
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    volumes:
      - ./ops/observability/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./ops/alerts:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    depends_on:
      - api
      - gateway
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--quiet',
          '--tries=1',
          '--spider',
          'http://localhost:9090/-/healthy',
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:10.1.0
    ports:
      - '3001:3000'
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./ops/observability/grafana:/etc/grafana/provisioning:ro
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/api/health']
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  neo4j_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    driver: bridge
