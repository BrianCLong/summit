# Error Budget and Burn-Rate Alert Rules
# Implements multi-window burn-rate alerting for SLO protection

groups:
  - name: error_budget_burn_rate
    rules:
      # =======================
      # ERROR BUDGET TRACKING
      # =======================

      # Calculate availability SLI (Success Rate)
      - record: sli:availability:rate5m
        expr: |
          (
            sum(rate(http_requests_total{job="intelgraph-server",code!~"5.."}[5m])) /
            sum(rate(http_requests_total{job="intelgraph-server"}[5m]))
          )
        labels:
          service: "intelgraph-server"
          sli_type: "availability"

      - record: sli:availability:rate30m
        expr: |
          (
            sum(rate(http_requests_total{job="intelgraph-server",code!~"5.."}[30m])) /
            sum(rate(http_requests_total{job="intelgraph-server"}[30m]))
          )
        labels:
          service: "intelgraph-server"
          sli_type: "availability"

      - record: sli:availability:rate1h
        expr: |
          (
            sum(rate(http_requests_total{job="intelgraph-server",code!~"5.."}[1h])) /
            sum(rate(http_requests_total{job="intelgraph-server"}[1h]))
          )
        labels:
          service: "intelgraph-server"
          sli_type: "availability"

      - record: sli:availability:rate6h
        expr: |
          (
            sum(rate(http_requests_total{job="intelgraph-server",code!~"5.."}[6h])) /
            sum(rate(http_requests_total{job="intelgraph-server"}[6h]))
          )
        labels:
          service: "intelgraph-server"
          sli_type: "availability"

      # Calculate latency SLI (p95 < 200ms)
      - record: sli:latency:rate5m
        expr: |
          (
            histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket{job="intelgraph-server"}[5m])) by (le)) < 0.2
          )
        labels:
          service: "intelgraph-server"
          sli_type: "latency"

      - record: sli:latency:rate30m
        expr: |
          (
            histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket{job="intelgraph-server"}[30m])) by (le)) < 0.2
          )
        labels:
          service: "intelgraph-server"
          sli_type: "latency"

      - record: sli:latency:rate1h
        expr: |
          (
            histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket{job="intelgraph-server"}[1h])) by (le)) < 0.2
          )
        labels:
          service: "intelgraph-server"
          sli_type: "latency"

      - record: sli:latency:rate6h
        expr: |
          (
            histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket{job="intelgraph-server"}[6h])) by (le)) < 0.2
          )
        labels:
          service: "intelgraph-server"
          sli_type: "latency"

      # =======================
      # ERROR BUDGET CALCULATIONS
      # =======================

      # 99.9% SLO = 0.1% error budget per 30 days
      - record: error_budget:availability:remaining_ratio
        expr: |
          (
            (sli:availability:rate30d{service="intelgraph-server"} - 0.999) /
            (1 - 0.999)
          )
        labels:
          service: "intelgraph-server"
          slo: "99.9"

      # Error budget burn rate (how fast we're consuming error budget)
      - record: error_budget:burn_rate:5m
        expr: |
          (
            (1 - sli:availability:rate5m{service="intelgraph-server"}) /
            (1 - 0.999)
          )
        labels:
          service: "intelgraph-server"
          window: "5m"

      - record: error_budget:burn_rate:1h
        expr: |
          (
            (1 - sli:availability:rate1h{service="intelgraph-server"}) /
            (1 - 0.999)
          )
        labels:
          service: "intelgraph-server"
          window: "1h"

      # =======================
      # MULTI-WINDOW BURN RATE ALERTS
      # =======================

  - name: error_budget_alerts
    rules:
      # CRITICAL: 2% budget burn in 1 hour (would exhaust budget in ~2 days)
      - alert: ErrorBudgetBurnRateCritical
        expr: |
          (
            error_budget:burn_rate:1h{service="intelgraph-server"} > 14.4 and
            error_budget:burn_rate:5m{service="intelgraph-server"} > 14.4
          )
        for: 2m
        labels:
          severity: critical
          service: "{{ $labels.service }}"
          alert_type: "error_budget"
          action_required: "immediate"
        annotations:
          summary: "Critical error budget burn rate detected"
          description: |
            Service {{ $labels.service }} is burning error budget at {{ printf "%.2f" $value }}x
            the normal rate. At this rate, the monthly error budget will be exhausted in
            {{ printf "%.1f" (div 30 $value) }} days.

            Current burn rate: {{ printf "%.2f" $value }}x
            Time to budget exhaustion: {{ printf "%.1f" (div 720 $value) }} hours

            IMMEDIATE ACTION REQUIRED: Check for incidents, traffic spikes, or deployment issues.
          runbook_url: "https://docs.intelgraph.com/runbooks/error-budget-burn"
          dashboard_url: "https://grafana.intelgraph.com/d/error-budgets"

      # HIGH: 5% budget burn in 6 hours (would exhaust budget in ~6 days)
      - alert: ErrorBudgetBurnRateHigh
        expr: |
          (
            error_budget:burn_rate:6h{service="intelgraph-server"} > 6 and
            error_budget:burn_rate:30m{service="intelgraph-server"} > 6
          )
        for: 15m
        labels:
          severity: high
          service: "{{ $labels.service }}"
          alert_type: "error_budget"
          action_required: "soon"
        annotations:
          summary: "High error budget burn rate detected"
          description: |
            Service {{ $labels.service }} is burning error budget at {{ printf "%.2f" $value }}x
            the sustainable rate. Monitor closely and investigate if pattern continues.

            Current burn rate: {{ printf "%.2f" $value }}x
            Time to budget exhaustion: {{ printf "%.1f" (div 720 $value) }} hours
          runbook_url: "https://docs.intelgraph.com/runbooks/error-budget-burn"

      # MEDIUM: 10% budget burn in 3 days
      - alert: ErrorBudgetBurnRateMedium
        expr: |
          (
            error_budget:burn_rate:3d{service="intelgraph-server"} > 1 and
            error_budget:burn_rate:6h{service="intelgraph-server"} > 1
          )
        for: 1h
        labels:
          severity: medium
          service: "{{ $labels.service }}"
          alert_type: "error_budget"
          action_required: "investigate"
        annotations:
          summary: "Elevated error budget consumption"
          description: |
            Service {{ $labels.service }} is consuming error budget faster than sustainable.
            Review recent changes and monitor trends.

      # =======================
      # SLO BREACH ALERTS
      # =======================

      # Availability SLO breach
      - alert: SLOAvailabilityBreach
        expr: |
          sli:availability:rate5m{service="intelgraph-server"} < 0.999
        for: 5m
        labels:
          severity: critical
          service: "{{ $labels.service }}"
          alert_type: "slo_breach"
          slo_type: "availability"
          auto_rollback: "true"
        annotations:
          summary: "Availability SLO breach detected"
          description: |
            Service {{ $labels.service }} availability has fallen below 99.9% SLO.
            Current availability: {{ printf "%.3f" (mul $value 100) }}%

            This will trigger auto-rollback if in canary deployment.
          runbook_url: "https://docs.intelgraph.com/runbooks/slo-breach"

      # Latency SLO breach
      - alert: SLOLatencyBreach
        expr: |
          histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket{job="intelgraph-server"}[5m])) by (le)) > 0.2
        for: 5m
        labels:
          severity: critical
          service: "{{ $labels.service }}"
          alert_type: "slo_breach"
          slo_type: "latency"
          auto_rollback: "true"
        annotations:
          summary: "Latency SLO breach detected"
          description: |
            Service {{ $labels.service }} p95 latency has exceeded 200ms SLO.
            Current p95 latency: {{ printf "%.0f" (mul $value 1000) }}ms

            This will trigger auto-rollback if in canary deployment.
          runbook_url: "https://docs.intelgraph.com/runbooks/slo-breach"

      # =======================
      # QUEUE PERFORMANCE ALERTS
      # =======================

      - alert: MergeQueueBackup
        expr: |
          github_merge_queue_size > 5
        for: 10m
        labels:
          severity: high
          alert_type: "queue_performance"
        annotations:
          summary: "GitHub merge queue backup detected"
          description: |
            Merge queue has {{ $value }} entries waiting longer than expected.
            Review CI performance and queue configuration.

      - alert: CIPipelineDegradation
        expr: |
          histogram_quantile(0.95, sum(rate(github_workflow_duration_seconds_bucket[30m])) by (le)) > 480
        for: 15m
        labels:
          severity: medium
          alert_type: "ci_performance"
        annotations:
          summary: "CI pipeline performance degradation"
          description: |
            CI pipeline p95 duration has exceeded 8 minutes.
            Current p95 duration: {{ printf "%.1f" (div $value 60) }} minutes

      # =======================
      # ERROR BUDGET EXHAUSTION
      # =======================

      - alert: ErrorBudgetExhausted
        expr: |
          error_budget:availability:remaining_ratio{service="intelgraph-server"} <= 0
        for: 5m
        labels:
          severity: critical
          service: "{{ $labels.service }}"
          alert_type: "error_budget_exhausted"
          action_required: "immediate"
        annotations:
          summary: "Monthly error budget exhausted"
          description: |
            Service {{ $labels.service }} has exhausted its monthly error budget.

            All non-essential deployments should be halted until:
            1. Incident is resolved
            2. Error budget is replenished
            3. Post-incident review is completed

            This indicates significant reliability issues requiring immediate attention.
          runbook_url: "https://docs.intelgraph.com/runbooks/error-budget-exhausted"

      - alert: ErrorBudgetLow
        expr: |
          error_budget:availability:remaining_ratio{service="intelgraph-server"} < 0.1
        for: 15m
        labels:
          severity: high
          service: "{{ $labels.service }}"
          alert_type: "error_budget_low"
        annotations:
          summary: "Error budget running low"
          description: |
            Service {{ $labels.service }} has less than 10% of monthly error budget remaining.

            Remaining budget: {{ printf "%.1f" (mul $value 100) }}%

            Consider reducing deployment frequency and increasing change review rigor.
          runbook_url: "https://docs.intelgraph.com/runbooks/error-budget-low"