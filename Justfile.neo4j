set shell := ["/bin/bash", "-cu"]

# === ENHANCED NEO4J GUARD SYSTEM ===

# Run migrations against disposable Neo4j (enhanced version)
neo4j-guard:
    bash tools/neo4j_guard_enhanced.sh

# Legacy guard (original implementation)
neo4j-guard-legacy:
    bash tools/neo4j_guard.sh

# Keep database running for inspection
neo4j-guard-keep:
    KEEP_DB=1 bash tools/neo4j_guard_enhanced.sh

# Run with validation disabled (faster, less safe)
neo4j-guard-fast:
    VALIDATION_MODE=0 bash tools/neo4j_guard_enhanced.sh

# Test migrations without validation (dry-run style)
neo4j-guard-validate:
    VALIDATION_MODE=1 bash tools/neo4j_guard_enhanced.sh

# === DATABASE MANAGEMENT ===

# Start ephemeral Neo4j for manual testing
neo4j-up:
    docker compose -f docker-compose.neo4j.yml up -d neo4j-ephemeral
    @echo "Waiting for Neo4j to start..."
    @timeout=60; while [ $$timeout -gt 0 ] && ! docker exec neo4j-ephemeral cypher-shell -u neo4j -p testtest1 "RETURN 1;" >/dev/null 2>&1; do sleep 1; timeout=$$((timeout-1)); done
    @if docker exec neo4j-ephemeral cypher-shell -u neo4j -p testtest1 "RETURN 1;" >/dev/null 2>&1; then echo "✅ Neo4j ready at http://localhost:7474"; else echo "❌ Neo4j failed to start"; fi

# Tear down the disposable DB
neo4j-down:
    docker compose -f docker-compose.neo4j.yml down -v --remove-orphans || \
    docker-compose -f docker-compose.neo4j.yml down -v --remove-orphans || true

# Restart the disposable Neo4j (down + up)
neo4j-restart: neo4j-down neo4j-up

# === INSPECTION & DEBUGGING ===

# View logs from ephemeral container
neo4j-logs:
    docker logs -f neo4j-ephemeral

# View recent logs (last 50 lines)  
neo4j-logs-recent:
    docker logs --tail=50 neo4j-ephemeral

# Open interactive Cypher shell
neo4j-shell:
    docker exec -it neo4j-ephemeral cypher-shell -u neo4j -p testtest1

# Execute a single Cypher statement
neo4j-exec query='RETURN "Hello Neo4j" as greeting':
    docker exec neo4j-ephemeral cypher-shell -u neo4j -p testtest1 "{{query}}"

# Show database status and basic stats
neo4j-status:
    @echo "=== Container Status ==="
    @docker ps --filter name=neo4j-ephemeral --format "table {{{{.Names}}}}\t{{{{.Status}}}}\t{{{{.Ports}}}}" 2>/dev/null || echo "No Neo4j container found"
    @echo ""
    @echo "=== Database Status ==="
    @if docker exec neo4j-ephemeral cypher-shell -u neo4j -p testtest1 "CALL db.info() YIELD name, value RETURN name, value;" 2>/dev/null; then true; else echo "Database not accessible"; fi

# === MIGRATION UTILITIES ===

# Validate migration files without executing
neo4j-validate-migrations:
    @echo "Validating migration files in db/migrations..."
    @for f in db/migrations/*.cypher 2>/dev/null || true; do \
        if [ -f "$$f" ]; then \
            echo "Checking $(basename "$$f")..."; \
            if grep -q ";" "$$f"; then echo "  ✅ Contains statements"; else echo "  ⚠️  No statements found"; fi; \
        fi; \
    done
    @if [ ! -d db/migrations ] || [ -z "$$(ls -A db/migrations/*.cypher 2>/dev/null)" ]; then \
        echo "⚠️  No migration files found in db/migrations/"; \
    fi

# Create sample migration file
neo4j-create-sample-migration:
    @mkdir -p db/migrations
    @echo "// Sample Neo4j migration" > db/migrations/001_sample.cypher
    @echo "// Created: $$(date)" >> db/migrations/001_sample.cypher
    @echo "" >> db/migrations/001_sample.cypher
    @echo "// Create sample nodes and relationships" >> db/migrations/001_sample.cypher
    @echo "CREATE (u:User {id: 'user-1', name: 'Sample User'});" >> db/migrations/001_sample.cypher
    @echo "CREATE (p:Project {id: 'proj-1', name: 'Sample Project'});" >> db/migrations/001_sample.cypher
    @echo "CREATE (u)-[:OWNS]->(p);" >> db/migrations/001_sample.cypher
    @echo "✅ Created sample migration: db/migrations/001_sample.cypher"

# List migration files
neo4j-list-migrations:
    @echo "Migration files in db/migrations:"
    @if [ -d db/migrations ]; then \
        find db/migrations -name "*.cypher" -type f | sort | while read -r f; do \
            echo "  📄 $$(basename "$$f") ($$(wc -l < "$$f") lines)"; \
        done; \
    else \
        echo "  No db/migrations directory found"; \
    fi

# === CLEANUP & MAINTENANCE ===

# Force clean all Neo4j resources
neo4j-clean:
    @echo "Cleaning up Neo4j resources..."
    docker rm -f neo4j-ephemeral 2>/dev/null || true
    docker network rm $$(docker network ls --filter name=intelgraph --format "{{{{.Name}}}}" 2>/dev/null) 2>/dev/null || true
    @echo "✅ Cleanup complete"

# Health check for Neo4j setup
neo4j-health:
    @echo "=== Neo4j Health Check ==="
    @echo "Docker Compose available: $$(docker compose version >/dev/null 2>&1 && echo "✅ Yes" || echo "❌ No")"
    @echo "Compose file exists: $$([ -f docker-compose.neo4j.yml ] && echo "✅ Yes" || echo "❌ No")"
    @echo "Migration directory: $$([ -d db/migrations ] && echo "✅ Yes (db/migrations)" || echo "⚠️  No (db/migrations)")"
    @echo "Migration files: $$(find db/migrations -name "*.cypher" 2>/dev/null | wc -l | xargs echo) found"
    @echo ""
    @if docker exec neo4j-ephemeral cypher-shell -u neo4j -p testtest1 "RETURN 1;" >/dev/null 2>&1; then \
        echo "Database accessible: ✅ Yes (http://localhost:7474)"; \
    else \
        echo "Database accessible: ❌ No"; \
    fi

# === TESTING & DEVELOPMENT ===

# Run a quick smoke test against running database
neo4j-smoke-test:
    @echo "Running Neo4j smoke test..."
    docker exec neo4j-ephemeral cypher-shell -u neo4j -p testtest1 "RETURN 'connection_test' as test;"
    docker exec neo4j-ephemeral cypher-shell -u neo4j -p testtest1 "MATCH (n) RETURN count(n) as node_count;"
    docker exec neo4j-ephemeral cypher-shell -u neo4j -p testtest1 "MATCH ()-[r]->() RETURN count(r) as relationship_count;"
    @echo "✅ Smoke test complete"

# Performance test (create/query/delete cycle)
neo4j-perf-test:
    @echo "Running Neo4j performance test..."
    @echo "Creating test data..."
    docker exec neo4j-ephemeral cypher-shell -u neo4j -p testtest1 "CREATE (n:PerfTest {id: range(1, 1000)}) RETURN count(n);"
    @echo "Querying test data..."
    docker exec neo4j-ephemeral cypher-shell -u neo4j -p testtest1 "MATCH (n:PerfTest) RETURN count(n) as test_nodes;"
    @echo "Cleaning up test data..."
    docker exec neo4j-ephemeral cypher-shell -u neo4j -p testtest1 "MATCH (n:PerfTest) DELETE n;"
    @echo "✅ Performance test complete"
