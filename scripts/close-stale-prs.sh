#!/usr/bin/env bash
# Close 382 stale PRs from 3-day-old batch creation
# SAFE: Only closes PRs that are exactly 3 days old
# REVERSIBLE: Can be reopened if needed

set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

log() { echo -e "${GREEN}[$(date +'%H:%M:%S')]${NC} $*"; }
warn() { echo -e "${YELLOW}[$(date +'%H:%M:%S')]${NC} ‚ö†Ô∏è  $*"; }
error() { echo -e "${RED}[$(date +'%H:%M:%S')]${NC} ‚ùå $*"; }

echo "üßπ CLOSING STALE PRS FROM BATCH CREATION"
echo "========================================="
echo ""

# Safety check
read -p "This will close ~382 PRs that are 3 days old. Continue? (yes/no): " confirm
if [ "$confirm" != "yes" ]; then
  error "Aborted by user"
  exit 1
fi

REPORT_DIR="stale-pr-closure-$(date +%Y%m%d-%H%M%S)"
mkdir -p "$REPORT_DIR"

log "Identifying stale PRs (3 days old)..."

# Get PRs that are exactly 3 days old
STALE_PRS=$(gh pr list --state open --limit 500 --json number,createdAt,title | \
  jq -r '.[] | select(((now - (.createdAt | fromdateiso8601)) / 86400 | floor) == 3) | {pr: .number, title: .title} | "\(.pr),\(.title)"')

STALE_COUNT=$(echo "$STALE_PRS" | wc -l | xargs)

log "Found $STALE_COUNT stale PRs"

if [ "$STALE_COUNT" -eq 0 ]; then
  log "No stale PRs to close"
  exit 0
fi

# Save list
echo "$STALE_PRS" > "$REPORT_DIR/stale-prs.csv"

# Close message
CLOSE_MESSAGE="Closing stale automated PR from batch creation event.

This PR is being closed as part of repository cleanup to focus on getting main branch to green status.

**Why closed:**
- Part of 382-PR batch created 3 days ago
- Main branch currently has systematic CI failures
- All PRs inheriting broken state from main

**Next steps:**
- Main branch will be fixed first
- If this PR contains valuable work, it will be reopened after main is stabilized
- Check #1858 for main-to-green progress

**References:**
- Green-Lock execution: \`GREEN_LOCK_CRITICAL_FINDINGS.md\`
- Repository has 437 open PRs - focusing on high-value PRs first

This closure is reversible. Comment if this PR should be prioritized for reopening."

log "Closing $STALE_COUNT PRs..."
log "Close message:"
echo "---"
echo "$CLOSE_MESSAGE"
echo "---"
echo ""

CLOSED_COUNT=0
FAILED_COUNT=0

while IFS=',' read -r pr_num title; do
  log "Closing PR #$pr_num: $title"

  if gh pr close "$pr_num" --comment "$CLOSE_MESSAGE" 2>&1; then
    log "  ‚úÖ Closed PR #$pr_num"
    CLOSED_COUNT=$((CLOSED_COUNT + 1))
    echo "$pr_num,closed,$(date -Is)" >> "$REPORT_DIR/closed.csv"
  else
    warn "  ‚ö†Ô∏è  Failed to close PR #$pr_num"
    FAILED_COUNT=$((FAILED_COUNT + 1))
    echo "$pr_num,failed,$(date -Is)" >> "$REPORT_DIR/failed.csv"
  fi

  # Rate limiting: 1 PR every 2 seconds
  sleep 2

  # Status update every 50 PRs
  if [ $((CLOSED_COUNT % 50)) -eq 0 ] && [ $CLOSED_COUNT -gt 0 ]; then
    log "Progress: $CLOSED_COUNT/$STALE_COUNT PRs closed..."
  fi
done <<< "$STALE_PRS"

echo ""
log "‚úÖ CLOSURE COMPLETE"
echo "==================="
log "Closed: $CLOSED_COUNT PRs"
log "Failed: $FAILED_COUNT PRs"
log "Report: $REPORT_DIR/"
echo ""

# Generate summary report
cat > "$REPORT_DIR/SUMMARY.md" << EOF
# Stale PR Closure Report

**Date:** $(date)
**Total Stale PRs:** $STALE_COUNT
**Successfully Closed:** $CLOSED_COUNT
**Failed to Close:** $FAILED_COUNT

## Closure Criteria

- PRs exactly 3 days old
- Part of batch creation event
- All inheriting broken main branch state

## Files Generated

- \`stale-prs.csv\` - List of all stale PRs
- \`closed.csv\` - Successfully closed PRs with timestamps
- \`failed.csv\` - Failed closures (if any)

## Next Steps

1. Verify remaining open PR count: \`gh pr list --state open --json number --jq 'length'\`
2. Should be ~55 PRs remaining (437 - 382)
3. Continue with main branch fixes
4. Process remaining PRs via merge queue

## Reopening PRs

If a closed PR needs to be reopened:

\`\`\`bash
gh pr reopen <PR_NUMBER>
gh pr comment <PR_NUMBER> --body "Reopening: contains critical work needed for main"
\`\`\`

---

Generated by: \`scripts/close-stale-prs.sh\`
Report directory: $REPORT_DIR
EOF

cat "$REPORT_DIR/SUMMARY.md"

echo ""
log "üìä Check remaining PRs: gh pr list --state open --json number --jq 'length'"
log "üìÅ Full report: $REPORT_DIR/SUMMARY.md"