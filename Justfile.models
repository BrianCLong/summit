set shell := ["/bin/bash", "-cu"]

# === ENHANCED MODEL MANAGEMENT SYSTEM ===

# List all models with status and recommendations
models-list:
    python3 tools/model_manager.py list

# Show detailed model and system information
models-status:
    python3 tools/model_manager.py list --show-all

# Auto-install all needed models based on intelligence
models-install:
    python3 tools/model_manager.py auto-install

# Install a specific model
models-install-one model='':
    python3 tools/model_manager.py install "{{model}}"

# Update a specific model to latest version
models-update model='':
    python3 tools/model_manager.py update "{{model}}"

# Update all installed models
models-update-all:
    @echo "Updating all installed models..."
    @for model in $(python3 tools/model_manager.py list | grep "‚úÖ" | awk '{print $3}'); do \
        echo "Updating $$model..."; \
        python3 tools/model_manager.py update "$$model" || true; \
    done

# Remove a specific model
models-remove model='' force='':
    python3 tools/model_manager.py remove "{{model}}" {{if force != '' { '--force' } else { '' }}}

# Cleanup unused models (dry run)
models-cleanup-dry:
    python3 tools/model_manager.py cleanup --dry-run

# Cleanup unused models (execute)
models-cleanup:
    python3 tools/model_manager.py cleanup

# Comprehensive health check of model ecosystem
models-health:
    python3 tools/model_manager.py health

# === LEGACY COMPATIBILITY ===

# Legacy extra models installation (simple version)
models-extra:
    bash tools/models_extra.sh

# === MODEL MAINTENANCE WORKFLOWS ===

# Daily model maintenance routine
models-daily:
    @echo "üîÑ Running daily model maintenance..."
    python3 tools/model_manager.py health
    @echo ""
    @echo "üì¶ Checking for needed models..."
    python3 tools/model_manager.py auto-install
    @echo ""
    @echo "üßπ Checking for cleanup opportunities..."
    python3 tools/model_manager.py cleanup --dry-run

# Weekly model maintenance (includes updates)
models-weekly:
    @echo "üóìÔ∏è Running weekly model maintenance..."
    just models-daily
    @echo ""
    @echo "üîÑ Updating all models..."
    just models-update-all
    @echo ""
    @echo "‚úÖ Weekly maintenance complete"

# Emergency model reset (removes all non-essential models)
models-reset:
    @echo "‚ö†Ô∏è Emergency model reset - removing non-essential models"
    @echo "This will remove all priority 4+ models to free resources"
    @read -p "Continue? (y/N): " -n 1 -r; echo; \
    if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
        python3 tools/model_manager.py cleanup; \
    fi

# === RESOURCE MONITORING ===

# Check system resources before model operations
models-resources:
    @echo "üñ•Ô∏è System Resources:"
    @echo "Memory: $$(python3 -c "import psutil; print(f'{psutil.virtual_memory().available/1024**3:.1f}GB available')")"
    @echo "Disk: $$(df -BG . | tail -1 | awk '{print $$4}') available"
    @echo "CPU: $$(python3 -c "import psutil; print(f'{psutil.cpu_percent(interval=1):.1f}%')")"

# Monitor model resource usage
models-monitor:
    @echo "üìä Model Resource Monitor"
    @echo "Press Ctrl+C to stop"
    @while true; do \
        clear; \
        echo "$$(date): IntelGraph Model Resource Usage"; \
        echo "=========================================="; \
        just models-resources; \
        echo ""; \
        echo "Active Models:"; \
        ollama list | head -10; \
        echo ""; \
        echo "LiteLLM Status:"; \
        curl -s http://127.0.0.1:4000/health 2>/dev/null || echo "LiteLLM not responding"; \
        sleep 5; \
    done

# === INTEGRATION HELPERS ===

# Ensure required models for IntelGraph are installed
models-ensure-intelgraph:
    @echo "üéØ Ensuring IntelGraph required models..."
    python3 tools/model_manager.py install qwen2.5-coder:7b || true
    python3 tools/model_manager.py install nomic-embed-text || true
    python3 tools/model_manager.py install llama3.1:8b || true
    @echo "‚úÖ IntelGraph model check complete"

# Pre-flight check before major development sessions
models-preflight:
    @echo "‚úàÔ∏è Pre-flight model check..."
    just models-resources
    @echo ""
    just models-health | jq -r '.recommendations[]' 2>/dev/null || \
        python3 tools/model_manager.py health | grep -A 10 "recommendations" || \
        echo "No specific recommendations"
    @echo ""
    @echo "üöÄ Ready for development"

# === TROUBLESHOOTING ===

# Fix common model issues
models-fix:
    @echo "üîß Fixing common model issues..."
    @echo "1. Checking Ollama service..."
    ollama list >/dev/null 2>&1 || { echo "Starting Ollama..."; just ollama-up; }
    @echo "2. Verifying model integrity..."
    python3 tools/model_manager.py health
    @echo "3. Checking LiteLLM connection..."
    curl -s http://127.0.0.1:4000/v1/models >/dev/null || echo "‚ö†Ô∏è LiteLLM not responding"
    @echo "‚úÖ Fix routine complete"

# Model performance test
models-test:
    @echo "üß™ Testing model performance..."
    @for model in local/llama local/llama-cpu local/llama-small; do \
        echo "Testing $$model..."; \
        bash tools/ai_ask6.sh "$$model" "return exactly six words" || echo "$$model failed"; \
    done
    @echo "‚úÖ Model performance test complete"

# === CONFIGURATION ===

# Show current model configuration
models-config:
    @if [ -f tools/models.json ]; then \
        echo "üìã Current model configuration:"; \
        cat tools/models.json | jq . 2>/dev/null || cat tools/models.json; \
    else \
        echo "‚ö†Ô∏è No model configuration found - will be created on first run"; \
    fi

# Edit model configuration
models-config-edit:
    @if command -v code >/dev/null 2>&1; then \
        code tools/models.json; \
    elif command -v nano >/dev/null 2>&1; then \
        nano tools/models.json; \
    else \
        echo "üìù Edit tools/models.json manually"; \
        echo "Current path: $(pwd)/tools/models.json"; \
    fi

# === SHORTCUTS ===

# Quick aliases for common operations
m: models-list
mi: models-install  
ml: models-list
mh: models-health
mc: models-cleanup-dry