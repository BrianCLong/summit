{{- if .Values.externalSecrets.enabled }}
# SecretStore for AWS Secrets Manager (Production)
{{- if eq .Values.global.environment "production" }}
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: aws-secrets-manager
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "intelgraph-maestro.labels" . | nindent 4 }}
spec:
  provider:
    aws:
      service: SecretsManager
      region: {{ .Values.global.region }}
      auth:
        secretRef:
          accessKeyIDSecretRef:
            name: aws-credentials
            key: access-key-id
          secretAccessKeySecretRef:
            name: aws-credentials
            key: secret-access-key
---
{{- end }}

# SecretStore for development/staging using local secrets
{{- if ne .Values.global.environment "production" }}
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: local-secret-store
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "intelgraph-maestro.labels" . | nindent 4 }}
spec:
  provider:
    kubernetes:
      remoteNamespace: {{ .Release.Namespace }}
      auth:
        serviceAccount:
          name: external-secrets-sa
---
{{- end }}

# PostgreSQL Credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: postgresql-credentials
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "intelgraph-maestro.labels" . | nindent 4 }}
    component: database
spec:
  refreshInterval: 1h
  secretStoreRef:
    {{- if eq .Values.global.environment "production" }}
    name: aws-secrets-manager
    {{- else }}
    name: local-secret-store
    {{- end }}
    kind: SecretStore
  target:
    name: postgresql-secret
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        postgres-password: "{{ `{{ .postgresPassword }}` }}"
        postgres-user: "{{ .Values.postgresql.auth.username }}"
        postgres-db: "{{ .Values.postgresql.auth.database }}"
  data:
  - secretKey: postgresPassword
    remoteRef:
      {{- if eq .Values.global.environment "production" }}
      key: intelgraph/postgresql/master-password
      property: password
      {{- else }}
      key: postgresql-dev-secret
      property: postgres-password
      {{- end }}
---

# Neo4j Credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: neo4j-credentials
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "intelgraph-maestro.labels" . | nindent 4 }}
    component: database
spec:
  refreshInterval: 1h
  secretStoreRef:
    {{- if eq .Values.global.environment "production" }}
    name: aws-secrets-manager
    {{- else }}
    name: local-secret-store
    {{- end }}
    kind: SecretStore
  target:
    name: neo4j-secret
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        neo4j-password: "{{ `{{ .neo4jPassword }}` }}"
        neo4j-user: "neo4j"
  data:
  - secretKey: neo4jPassword
    remoteRef:
      {{- if eq .Values.global.environment "production" }}
      key: intelgraph/neo4j/auth-password
      property: password
      {{- else }}
      key: neo4j-dev-secret
      property: neo4j-password
      {{- end }}
---

# Redis Credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: redis-credentials
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "intelgraph-maestro.labels" . | nindent 4 }}
    component: cache
spec:
  refreshInterval: 1h
  secretStoreRef:
    {{- if eq .Values.global.environment "production" }}
    name: aws-secrets-manager
    {{- else }}
    name: local-secret-store
    {{- end }}
    kind: SecretStore
  target:
    name: redis-secret
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        redis-password: "{{ `{{ .redisPassword }}` }}"
  data:
  - secretKey: redisPassword
    remoteRef:
      {{- if eq .Values.global.environment "production" }}
      key: intelgraph/redis/auth-password
      property: password
      {{- else }}
      key: redis-dev-secret
      property: redis-password
      {{- end }}
---

# OIDC Configuration Secret
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: oidc-credentials
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "intelgraph-maestro.labels" . | nindent 4 }}
    component: auth
spec:
  refreshInterval: 1h
  secretStoreRef:
    {{- if eq .Values.global.environment "production" }}
    name: aws-secrets-manager
    {{- else }}
    name: local-secret-store
    {{- end }}
    kind: SecretStore
  target:
    name: oidc-secret
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        client-id: "{{ `{{ .clientId }}` }}"
        client-secret: "{{ `{{ .clientSecret }}` }}"
        issuer-url: "{{ `{{ .issuerUrl }}` }}"
        jwks-uri: "{{ `{{ .jwksUri }}` }}"
        audience: "{{ `{{ .audience }}` }}"
  data:
  - secretKey: clientId
    remoteRef:
      {{- if eq .Values.global.environment "production" }}
      key: intelgraph/oidc/client-credentials
      property: client_id
      {{- else }}
      key: oidc-dev-secret
      property: client-id
      {{- end }}
  - secretKey: clientSecret
    remoteRef:
      {{- if eq .Values.global.environment "production" }}
      key: intelgraph/oidc/client-credentials
      property: client_secret
      {{- else }}
      key: oidc-dev-secret
      property: client-secret
      {{- end }}
  - secretKey: issuerUrl
    remoteRef:
      {{- if eq .Values.global.environment "production" }}
      key: intelgraph/oidc/provider-config
      property: issuer_url
      {{- else }}
      key: oidc-dev-secret
      property: issuer-url
      {{- end }}
  - secretKey: jwksUri
    remoteRef:
      {{- if eq .Values.global.environment "production" }}
      key: intelgraph/oidc/provider-config
      property: jwks_uri
      {{- else }}
      key: oidc-dev-secret
      property: jwks-uri
      {{- end }}
  - secretKey: audience
    remoteRef:
      {{- if eq .Values.global.environment "production" }}
      key: intelgraph/oidc/provider-config
      property: audience
      {{- else }}
      key: oidc-dev-secret
      property: audience
      {{- end }}
---

# JWT Signing Keys for API
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: jwt-signing-keys
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "intelgraph-maestro.labels" . | nindent 4 }}
    component: auth
spec:
  refreshInterval: 6h  # More frequent refresh for signing keys
  secretStoreRef:
    {{- if eq .Values.global.environment "production" }}
    name: aws-secrets-manager
    {{- else }}
    name: local-secret-store
    {{- end }}
    kind: SecretStore
  target:
    name: jwt-signing-secret
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        private-key: "{{ `{{ .privateKey }}` }}"
        public-key: "{{ `{{ .publicKey }}` }}"
        kid: "{{ `{{ .keyId }}` }}"
  data:
  - secretKey: privateKey
    remoteRef:
      {{- if eq .Values.global.environment "production" }}
      key: intelgraph/jwt/signing-keys
      property: private_key
      {{- else }}
      key: jwt-dev-secret
      property: private-key
      {{- end }}
  - secretKey: publicKey
    remoteRef:
      {{- if eq .Values.global.environment "production" }}
      key: intelgraph/jwt/signing-keys
      property: public_key
      {{- else }}
      key: jwt-dev-secret
      property: public-key
      {{- end }}
  - secretKey: keyId
    remoteRef:
      {{- if eq .Values.global.environment "production" }}
      key: intelgraph/jwt/signing-keys
      property: key_id
      {{- else }}
      key: jwt-dev-secret
      property: kid
      {{- end }}
---

# API Keys for external services
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: api-keys
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "intelgraph-maestro.labels" . | nindent 4 }}
    component: api
spec:
  refreshInterval: 24h
  secretStoreRef:
    {{- if eq .Values.global.environment "production" }}
    name: aws-secrets-manager
    {{- else }}
    name: local-secret-store
    {{- end }}
    kind: SecretStore
  target:
    name: api-keys-secret
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        stripe-api-key: "{{ `{{ .stripeApiKey }}` }}"
        openai-api-key: "{{ `{{ .openaiApiKey }}` }}"
        webhook-secret: "{{ `{{ .webhookSecret }}` }}"
  data:
  - secretKey: stripeApiKey
    remoteRef:
      {{- if eq .Values.global.environment "production" }}
      key: intelgraph/integrations/stripe
      property: api_key
      {{- else }}
      key: api-keys-dev-secret
      property: stripe-api-key
      {{- end }}
  - secretKey: openaiApiKey
    remoteRef:
      {{- if eq .Values.global.environment "production" }}
      key: intelgraph/integrations/openai
      property: api_key
      {{- else }}
      key: api-keys-dev-secret
      property: openai-api-key
      {{- end }}
  - secretKey: webhookSecret
    remoteRef:
      {{- if eq .Values.global.environment "production" }}
      key: intelgraph/api/webhook-secret
      property: secret
      {{- else }}
      key: api-keys-dev-secret
      property: webhook-secret
      {{- end }}
---

# Service Account for External Secrets Operator
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets-sa
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "intelgraph-maestro.labels" . | nindent 4 }}
    component: external-secrets
  {{- if eq .Values.global.environment "production" }}
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::{{ .Values.aws.accountId }}:role/IntelGraphExternalSecretsRole
  {{- end }}
---

# ClusterRole for External Secrets Service Account
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: external-secrets-reader
  labels:
    {{- include "intelgraph-maestro.labels" . | nindent 4 }}
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "create", "update", "patch"]
- apiGroups: ["external-secrets.io"]
  resources: ["externalsecrets", "secretstores", "clustersecretstores"]
  verbs: ["get", "list", "watch"]
---

# ClusterRoleBinding for External Secrets
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: external-secrets-binding
  labels:
    {{- include "intelgraph-maestro.labels" . | nindent 4 }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-secrets-reader
subjects:
- kind: ServiceAccount
  name: external-secrets-sa
  namespace: {{ .Release.Namespace }}

{{- end }}