# Production Environment Overrides
# Full production configuration with high availability and performance

global:
  environment: production
  domain: intelgraph.ai
  subdomain: maestro

# Full production scaling and resources
api:
  replicaCount: 5
  resources:
    requests:
      cpu: 1000m
      memory: 2Gi
    limits:
      cpu: 4000m
      memory: 8Gi

  autoscaling:
    enabled: true
    minReplicas: 5
    maxReplicas: 50
    targetCPUUtilizationPercentage: 60  # More conservative in production
    targetMemoryUtilizationPercentage: 70

  # Strict production SLO targets
  slo:
    availability: 99.95
    latencyP95: 300  # ms - Stricter than design target
    latencyP99: 800  # ms
    writeLatencyP95: 600  # ms

client:
  replicaCount: 5
  resources:
    requests:
      cpu: 150m
      memory: 384Mi
    limits:
      cpu: 1000m
      memory: 2Gi

  cdn:
    enabled: true
    cachePolicy: "max-age=31536000, immutable"

gateway:
  replicaCount: 3

# Full production data layer with high availability
postgresql:
  architecture: replication
  primary:
    persistence:
      size: 500Gi
      storageClass: premium-ssd
    resources:
      requests:
        cpu: 2000m
        memory: 4Gi
      limits:
        cpu: 8000m
        memory: 16Gi

  readReplicas:
    replicaCount: 3
    persistence:
      size: 500Gi
      storageClass: premium-ssd
    resources:
      requests:
        cpu: 1000m
        memory: 2Gi
      limits:
        cpu: 4000m
        memory: 8Gi

neo4j:
  core:
    numberOfServers: 5
    persistentVolume:
      size: 1000Gi
      storageClass: premium-ssd
    resources:
      requests:
        cpu: 4000m
        memory: 8Gi
      limits:
        cpu: 16000m
        memory: 32Gi

  readReplica:
    numberOfServers: 3
    resources:
      requests:
        cpu: 2000m
        memory: 4Gi
      limits:
        cpu: 8000m
        memory: 16Gi

  # Optimized for large graphs
  config:
    dbms.memory.heap.initial_size: "8G"
    dbms.memory.heap.max_size: "16G"
    dbms.memory.pagecache.size: "8G"
    dbms.tx_log.rotation.retention_policy: "100M size"
    dbms.checkpoint.interval: "300s"

redis:
  architecture: replication
  master:
    persistence:
      size: 100Gi
      storageClass: premium-ssd
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        cpu: 2000m
        memory: 4Gi

  replica:
    replicaCount: 3
    persistence:
      size: 100Gi

kafka:
  replicaCount: 5
  persistence:
    size: 500Gi
    storageClass: premium-ssd

  resources:
    requests:
      cpu: 2000m
      memory: 4Gi
    limits:
      cpu: 8000m
      memory: 16Gi

  zookeeper:
    replicaCount: 5
    persistence:
      size: 100Gi

# Production ingress with multiple domains
ingress:
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "16k"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-burst: "2000"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"

  hosts:
    - host: maestro.intelgraph.ai
      paths:
        - path: /api
          pathType: Prefix
          service:
            name: intelgraph-api
            port: 4000
        - path: /
          pathType: Prefix
          service:
            name: intelgraph-client
            port: 80

  tls:
    - secretName: maestro-intelgraph-ai-tls
      hosts:
        - maestro.intelgraph.ai

# Full production observability stack
prometheus:
  server:
    retention: "90d"
    persistentVolume:
      size: 500Gi
      storageClass: premium-ssd
    resources:
      requests:
        cpu: 2000m
        memory: 4Gi
      limits:
        cpu: 8000m
        memory: 16Gi

  alertmanager:
    enabled: true
    persistentVolume:
      size: 10Gi

grafana:
  persistence:
    enabled: true
    size: 50Gi

  resources:
    requests:
      cpu: 500m
      memory: 1Gi
    limits:
      cpu: 2000m
      memory: 4Gi

jaeger:
  enabled: true
  storage:
    type: elasticsearch

  collector:
    resources:
      requests:
        cpu: 1000m
        memory: 2Gi
      limits:
        cpu: 4000m
        memory: 8Gi

# Maximum security in production
networkPolicies:
  enabled: true
  defaultDeny: true

podSecurityPolicy:
  enabled: true

securityContext:
  runAsNonRoot: true
  runAsUser: 65534
  runAsGroup: 65534
  fsGroup: 65534
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false

# Production feature flags - stable features only
featureFlags:
  v24:
    coherence: true
    multiRegion: true
    advancedPolicy: true
    chaosEngineering: false  # Disabled in production

  experimental:
    aiAssistant: false  # Disabled until fully validated
    federatedQuery: false
    edgeCompute: false

# Production multi-tenancy
multiTenant:
  enabled: true
  isolation: namespace

  tenants:
    - name: enterprise-alpha
      namespace: intelgraph-enterprise-alpha
      resources:
        requests:
          cpu: 4000m
          memory: 8Gi
        limits:
          cpu: 16000m
          memory: 32Gi

    - name: enterprise-beta
      namespace: intelgraph-enterprise-beta
      resources:
        requests:
          cpu: 2000m
          memory: 4Gi
        limits:
          cpu: 8000m
          memory: 16Gi

# Production cost management
costManagement:
  budgetAlerts:
    enabled: true
    monthlyBudget: 18000  # USD
    alertThresholds: [50, 80, 95]

  resourceQuotas:
    enabled: true
    cpu: "100000m"  # 100 cores
    memory: "400Gi"
    persistentVolumeClaims: "100"

# Production topology spread
topologySpreadConstraints:
  enabled: true
  maxSkew: 1
  topologyKey: topology.kubernetes.io/zone
  whenUnsatisfiable: DoNotSchedule

# Node affinity for production workloads
nodeAffinity:
  enabled: true
  requiredDuringSchedulingIgnoredDuringExecution:
    nodeSelectorTerms:
    - matchExpressions:
      - key: node-type
        operator: In
        values: ["compute-optimized"]

# Backup and disaster recovery
backup:
  enabled: true
  schedule: "0 2 * * *"  # Daily at 2 AM
  retention: "30d"

  destinations:
    - name: s3-primary
      type: s3
      bucket: intelgraph-maestro-backups
      region: us-east-1

    - name: s3-secondary
      type: s3
      bucket: intelgraph-maestro-backups-dr
      region: us-west-2