# IntelGraph Platform + Maestro Conductor
# Default values for ig-platform umbrella chart

global:
  imageRegistry: 'ghcr.io/brianlong'
  imagePullPolicy: IfNotPresent
  storageClass: ''

# Core Services
apiGateway:
  enabled: true
  image:
    repository: summit/api-gateway
    tag: ''
  service:
    type: ClusterIP
    port: 4000
  resources:
    requests:
      memory: '256Mi'
      cpu: '250m'
    limits:
      memory: '512Mi'
      cpu: '500m'
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70

graphXai:
  enabled: true
  image:
    repository: summit/graph-xai
    tag: ''
  service:
    port: 4011
  resources:
    requests:
      memory: '512Mi'
      cpu: '500m'
    limits:
      memory: '2Gi'
      cpu: '1000m'

provLedger:
  enabled: true
  image:
    repository: summit/prov-ledger
    tag: ''
  service:
    port: 4010
  resources:
    requests:
      memory: '256Mi'
      cpu: '250m'
    limits:
      memory: '512Mi'
      cpu: '500m'

agentRuntime:
  enabled: true
  image:
    repository: summit/agent-runtime
    tag: ''
  service:
    port: 4012
  resources:
    requests:
      memory: '256Mi'
      cpu: '250m'
    limits:
      memory: '512Mi'
      cpu: '500m'

predictiveSuite:
  enabled: true
  image:
    repository: summit/predictive-suite
    tag: ''
  service:
    port: 4013
  resources:
    requests:
      memory: '512Mi'
      cpu: '500m'
    limits:
      memory: '2Gi'
      cpu: '1000m'

feedProcessor:
  enabled: true
  image:
    repository: summit/feed-processor
    tag: ''
  replicas: 3
  resources:
    requests:
      memory: '256Mi'
      cpu: '250m'
    limits:
      memory: '512Mi'
      cpu: '500m'

licenseRegistry:
  enabled: true
  image:
    repository: summit/license-registry
    tag: ''
  service:
    port: 4030
  resources:
    requests:
      memory: '128Mi'
      cpu: '100m'
    limits:
      memory: '256Mi'
      cpu: '250m'

conductorApi:
  enabled: true
  image:
    repository: summit/conductor-api
    tag: ''
  service:
    port: 4020
  resources:
    requests:
      memory: '256Mi'
      cpu: '250m'
    limits:
      memory: '512Mi'
      cpu: '500m'

syncBroker:
  enabled: true
  image:
    repository: summit/sync-broker
    tag: ''
  replicas: 2
  resources:
    requests:
      memory: '128Mi'
      cpu: '100m'
    limits:
      memory: '256Mi'
      cpu: '250m'

# External Secrets Operator
externalSecrets:
  enabled: false # Enable for production
  refreshInterval: '5m'
  provider:
    vault:
      enabled: false
      server: 'https://vault.example.com'
      path: 'secret'
      auth:
        mountPath: 'kubernetes'
        role: 'intelgraph'
    aws:
      enabled: false
      region: 'us-west-2'
    gcp:
      enabled: false
      projectId: 'my-project'
      clusterLocation: 'us-central1'
      clusterName: 'my-cluster'
    azure:
      enabled: false
      vaultUrl: 'https://my-vault.vault.azure.net/'
      identityId: 'my-identity-id'
  secrets:
    database:
      postgresUser:
        key: 'database/postgres'
        property: 'username'
      postgresPassword:
        key: 'database/postgres'
        property: 'password'
      postgresDatabase:
        key: 'database/postgres'
        property: 'database'
      neo4jUser:
        key: 'database/neo4j'
        property: 'username'
      neo4jPassword:
        key: 'database/neo4j'
        property: 'password'
      redisPassword:
        key: 'database/redis'
        property: 'password'
      minioAccessKey:
        key: 'storage/minio'
        property: 'access_key'
      minioSecretKey:
        key: 'storage/minio'
        property: 'secret_key'
    auth:
      jwtSecret:
        key: 'auth/jwt'
        property: 'secret'
      oidcClientSecret:
        key: 'auth/oidc'
        property: 'client_secret'
    apiKeys:
      openai:
        key: 'api-keys/openai'
        property: 'api_key'
      slack:
        key: 'api-keys/slack'
        property: 'webhook_url'
      teams:
        key: 'api-keys/teams'
        property: 'webhook_url'
      pagerduty:
        key: 'api-keys/pagerduty'
        property: 'integration_key'

# Sealed Secrets
sealedSecrets:
  enabled: true # Enable for development/staging
  keyRenewPeriod: '30d'
  updateStatus: true
  logLevel: 'info'
  controller:
    image:
      repository: 'bitnami/sealed-secrets-controller'
      tag: 'v0.24.0'
      pullPolicy: IfNotPresent
    resources:
      requests:
        memory: '256Mi'
        cpu: '250m'
      limits:
        memory: '512Mi'
        cpu: '500m'
  developmentSecrets:
    enabled: true
    # These are base64-encoded placeholder values for development
    # Replace with actual sealed values in real deployments
    postgresUser: 'AgBH...base64-sealed-value'
    postgresPassword: 'AgBH...base64-sealed-value'
    postgresDatabase: 'AgBH...base64-sealed-value'
    neo4jUser: 'AgBH...base64-sealed-value'
    neo4jPassword: 'AgBH...base64-sealed-value'
    redisPassword: 'AgBH...base64-sealed-value'
    minioAccessKey: 'AgBH...base64-sealed-value'
    minioSecretKey: 'AgBH...base64-sealed-value'
    jwtSecret: 'AgBH...base64-sealed-value'
    oidcClientSecret: 'AgBH...base64-sealed-value'
    openaiApiKey: 'AgBH...base64-sealed-value'
    slackWebhookUrl: 'AgBH...base64-sealed-value'
    teamsWebhookUrl: 'AgBH...base64-sealed-value'
    pagerdutyIntegrationKey: 'AgBH...base64-sealed-value'

# Progressive Delivery
flagger:
  enabled: false # Enable for Istio-based canary deployments
  analysis:
    interval: '30s'
    iterations: 10
    threshold: 3
    stepWeight: 10
    maxWeight: 50
  metrics:
    successRate:
      min: 99
    latency:
      max: 500
    custom:
      enabled: false
      businessKpi:
        min: 95
  webhooks:
    slack:
      enabled: false
      url: ''

argoRollouts:
  enabled: true # Enable for blue/green and canary deployments
  strategy: 'canary' # canary or blueGreen
  blueGreen:
    autoPromotionEnabled: false
    scaleDownDelaySeconds: 30
  canary:
    steps:
      - weight: 20
        pause:
          duration: '1m'
      - weight: 40
        pause: {}
      - weight: 60
        pause:
          duration: '30s'
      - weight: 80
        pause: {}
  trafficRouting:
    istio:
      enabled: false
    nginx:
      enabled: true

progressiveDelivery:
  enabled: true
  trafficSplitting:
    enabled: true
    istio:
      enabled: false
    nginx:
      enabled: true
    stableWeight: 90
    canaryWeight: 10
  circuitBreaker:
    maxConnections: 10
    maxPendingRequests: 10
    maxRequests: 100
    maxRequestsPerConnection: 2
    maxRetries: 3
    consecutiveErrors: 5
    interval: '30s'
    baseEjectionTime: '30s'
    maxEjectionPercent: 50
    minHealthPercent: 30

# Backup and Disaster Recovery
backup:
  enabled: true
  timezone: 'UTC'
  s3:
    bucket: 'intelgraph-backups'
    region: 'us-west-2'
  postgres:
    enabled: true
    schedule: '0 2 * * *' # Daily at 2 AM
    retentionDays: 30
    historyLimit: 3
    version: '15'
    host: 'postgres'
    port: '5432'
    restoreFromBackup: false
    restoreBackupFile: ''
  neo4j:
    enabled: true
    schedule: '0 3 * * *' # Daily at 3 AM
    retentionDays: 30
    historyLimit: 3
    version: '5.15'
    host: 'neo4j'
    port: '7687'
    restoreFromBackup: false
    restoreBackupFile: ''
  minio:
    enabled: true
    schedule: '0 4 * * *' # Daily at 4 AM
    retentionDays: 30
    historyLimit: 3
  config:
    enabled: true
    schedule: '0 1 * * *' # Daily at 1 AM
    retentionDays: 90
    historyLimit: 5

disasterRecovery:
  enabled: true
  rto: '30m' # Recovery Time Objective
  rpo: '1h' # Recovery Point Objective
  drSite:
    enabled: false
    region: 'us-east-1'
    autoFailover: false
  monitoring:
    enabled: true
    healthCheckInterval: '30s'
    alertThreshold: '3'
  communication:
    statusPage: 'https://status.intelgraph.com'
    slack:
      enabled: true
      channel: '#incidents'
    email:
      enabled: true
      recipients: ['ops-team@company.com']

# Web Applications
web:
  enabled: true
  image:
    repository: summit/web
    tag: ''
  service:
    type: LoadBalancer
    port: 80
    targetPort: 3000
  ingress:
    enabled: false
    className: ''
    annotations: {}
    hosts:
      - host: intelgraph.local
        paths:
          - path: /
            pathType: Prefix
    tls: []
  resources:
    requests:
      memory: '256Mi'
      cpu: '250m'
    limits:
      memory: '512Mi'
      cpu: '500m'

offlineKit:
  enabled: false
  image:
    repository: summit/offline-kit
    tag: ''
  service:
    type: ClusterIP
    port: 3001
  resources:
    requests:
      memory: '128Mi'
      cpu: '100m'
    limits:
      memory: '256Mi'
      cpu: '250m'

jupyterkit:
  enabled: false
  image:
    repository: summit/jupyterkit
    tag: ''
  service:
    port: 8888
  resources:
    requests:
      memory: '1Gi'
      cpu: '500m'
    limits:
      memory: '4Gi'
      cpu: '2000m'

# Infrastructure Dependencies
neo4j:
  enabled: true
  image:
    repository: neo4j
    tag: '5.21'
  auth:
    username: neo4j
    password: 'changeme'
  service:
    ports:
      http: 7474
      bolt: 7687
  persistence:
    enabled: true
    size: 10Gi
  resources:
    requests:
      memory: '1Gi'
      cpu: '500m'
    limits:
      memory: '4Gi'
      cpu: '2000m'

postgresql:
  enabled: true
  auth:
    postgresPassword: 'changeme'
    database: 'intelgraph'
  primary:
    persistence:
      enabled: true
      size: 8Gi
    resources:
      requests:
        memory: '256Mi'
        cpu: '250m'
      limits:
        memory: '1Gi'
        cpu: '1000m'

redis:
  enabled: true
  auth:
    enabled: false
  master:
    persistence:
      enabled: true
      size: 8Gi
    resources:
      requests:
        memory: '256Mi'
        cpu: '250m'
      limits:
        memory: '1Gi'
        cpu: '500m'

kafka:
  enabled: false
  controller:
    replicaCount: 3
  persistence:
    enabled: true
    size: 8Gi

elasticsearch:
  enabled: false
  master:
    replicaCount: 3
  data:
    replicaCount: 3

minio:
  enabled: false
  mode: standalone
  persistence:
    enabled: true
    size: 10Gi

# Data Lineage
openlineage:
  enabled: true
  image:
    repository: openlineage/marquez
    tag: 'latest'
  service:
    port: 5000
  resources:
    requests:
      memory: '512Mi'
      cpu: '250m'
    limits:
      memory: '1Gi'
      cpu: '500m'

# Observability
observability:
  enabled: true

  otelCollector:
    enabled: true
    image:
      repository: otel/opentelemetry-collector-contrib
      tag: '0.99.0'
    service:
      ports:
        grpc: 4317
        http: 4318

  prometheus:
    enabled: true
    server:
      retention: '15d'
      persistentVolume:
        enabled: true
        size: 8Gi

  grafana:
    enabled: true
    adminPassword: 'admin'
    persistence:
      enabled: true
      size: 1Gi

  loki:
    enabled: true
    persistence:
      enabled: true
      size: 4Gi

# Security
security:
  enabled: true

  falco:
    enabled: true

  networkPolicies:
    enabled: true

  podSecurityStandards:
    enforced: true

  rbac:
    create: true

# Policy Configuration
policy:
  dryRun: false # Set to true for dev environments
  enforceAuthority: true
  enforceReasonForAccess: true

# Monitoring
monitoring:
  serviceMonitors:
    enabled: true
  podMonitors:
    enabled: true

# Node Selection
nodeSelector: {}
tolerations: []
affinity: {}
