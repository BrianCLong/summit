# Maestro Conductor v24.3.0 - US East 1 (Primary Region)
# Primary write region with full services

environment: production
region: us-east-1
isPrimaryRegion: true

# Global configuration
global:
  region: us-east-1
  isPrimary: true
  imageRegistry: ghcr.io
  imageTag: "24.3.0"

# Service configuration
service:
  type: LoadBalancer
  annotations:
    external-dns.alpha.kubernetes.io/hostname: api-us-east.maestro.dev
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing

# Ingress configuration
ingress:
  enabled: true
  className: nginx
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  hosts:
    - host: api-us-east.maestro.dev
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: maestro-us-east-tls
      hosts:
        - api-us-east.maestro.dev

# Database configuration - Primary region
database:
  postgresql:
    mode: primary
    host: maestro-postgres-primary.us-east-1.rds.amazonaws.com
    port: 5432
    database: maestro_production
    replication:
      enabled: true
      replicas:
        - region: us-west-2
          host: maestro-postgres-replica-us-west.us-west-2.rds.amazonaws.com
        - region: eu-west-1
          host: maestro-postgres-replica-eu-west.eu-west-1.rds.amazonaws.com
    backup:
      enabled: true
      schedule: "0 2 * * *" # Daily at 2 AM
      retention: "30d"
      pitr:
        enabled: true
        retentionDays: 7

  neo4j:
    mode: primary
    host: maestro-neo4j-primary.us-east-1.amazonaws.com
    port: 7687
    database: neo4j
    auth:
      username: neo4j
      existingSecret: maestro-neo4j-auth
    replication:
      enabled: true
      replicas:
        - region: us-west-2
          host: maestro-neo4j-replica-us-west.us-west-2.amazonaws.com
        - region: eu-west-1
          host: maestro-neo4j-replica-eu-west.eu-west-1.amazonaws.com
    backup:
      enabled: true
      schedule: "0 3 * * *" # Daily at 3 AM
      retention: "30d"

  redis:
    mode: primary
    host: maestro-redis-primary.cache.us-east-1.amazonaws.com
    port: 6379
    cluster:
      enabled: true
      replicas: 2

# Application configuration
app:
  replicas: 5
  image:
    repository: ghcr.io/maestro/conductor
    tag: "24.3.0"
    pullPolicy: IfNotPresent

  env:
    NODE_ENV: production
    CURRENT_REGION: us-east-1
    IS_PRIMARY_REGION: "true"
    LOG_LEVEL: info
    
    # Database connection strings
    DATABASE_URL: postgresql://maestro:${POSTGRES_PASSWORD}@maestro-postgres-primary.us-east-1.rds.amazonaws.com:5432/maestro_production?sslmode=require
    DATABASE_READ_URL: postgresql://maestro_reader:${POSTGRES_READ_PASSWORD}@maestro-postgres-primary.us-east-1.rds.amazonaws.com:5432/maestro_production?sslmode=require&options=-c%20default_transaction_isolation=repeatable_read
    
    NEO4J_URI: bolt://maestro-neo4j-primary.us-east-1.amazonaws.com:7687
    NEO4J_USER: neo4j
    NEO4J_PASSWORD: ${NEO4J_PASSWORD}
    NEO4J_READ_URI: bolt://maestro-neo4j-primary.us-east-1.amazonaws.com:7687
    
    REDIS_URL: redis://maestro-redis-primary.cache.us-east-1.amazonaws.com:6379
    REDIS_CLUSTER_NODES: maestro-redis-primary.cache.us-east-1.amazonaws.com:6379,maestro-redis-replica-1.cache.us-east-1.amazonaws.com:6379

    # Region routing
    US_EAST_API_URL: https://api-us-east.maestro.dev
    US_EAST_GRAPHQL_URL: https://api-us-east.maestro.dev/graphql
    US_WEST_API_URL: https://api-us-west.maestro.dev
    US_WEST_GRAPHQL_URL: https://api-us-west.maestro.dev/graphql
    EU_WEST_API_URL: https://api-eu-west.maestro.dev
    EU_WEST_GRAPHQL_URL: https://api-eu-west.maestro.dev/graphql

  resources:
    requests:
      cpu: 1000m
      memory: 2Gi
    limits:
      cpu: 4000m
      memory: 8Gi

  # Health checks
  livenessProbe:
    httpGet:
      path: /health
      port: 4000
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

  readinessProbe:
    httpGet:
      path: /ready
      port: 4000
    initialDelaySeconds: 15
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

# Monitoring and observability
monitoring:
  enabled: true
  prometheus:
    enabled: true
    serviceMonitor:
      enabled: true
      interval: 30s
  grafana:
    enabled: true
    dashboards:
      enabled: true

# Autoscaling configuration
autoscaling:
  enabled: true
  api:
    minReplicas: 5
    maxReplicas: 20
    targetRPS: 100
    targetLatencyP95: 350
    targetCPU: 70
  ingest:
    minReplicas: 3
    maxReplicas: 15
    targetQueueDepth: 5000
    targetLagMs: 100

# Cost monitoring
costMonitoring:
  enabled: true
  alertInterval: 1m
  thresholds:
    dbCostPerHour: 10.0
    computeCostPerHour: 20.0
    storageCostPerHour: 5.0
    networkCostPerHour: 2.0
    aiCostPerHour: 30.0
    monthlyBudget: 5000.0

# Backup and DR
backupDrills:
  enabled: true
  schedule: "0 2 * * 1" # Weekly on Monday at 2 AM
  drillType: full
  s3Bucket: maestro-backups-us-east-1
  awsRegion: us-east-1
  slo:
    rtoSeconds: 1800 # 30 minutes
    rpoSeconds: 300  # 5 minutes

# Security configuration
security:
  networkPolicies:
    enabled: true
  podSecurityPolicy:
    enabled: true
  serviceAccount:
    create: true
    annotations:
      eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/maestro-us-east-role

# Regional failover
failover:
  enabled: true
  dns:
    provider: route53
    hostedZoneId: Z123456789ABCDEF
    healthCheck:
      enabled: true
      path: /health
      interval: 30s
  readOnlyMode:
    enabled: false # Primary never goes read-only
    banner: false