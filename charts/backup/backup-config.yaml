# Main Backup Configuration for IntelGraph Platform
apiVersion: v1
kind: ConfigMap
metadata:
  name: backup-config
  namespace: backup-system
  labels:
    app.kubernetes.io/name: backup-system
    app.kubernetes.io/component: configuration
data:
  # AWS Configuration
  aws-region: "us-west-2"
  dr-aws-region: "us-east-1"
  aws-account-id: "123456789012"
  
  # S3 Backup Buckets
  backup-bucket: "intelgraph-backups-prod"
  dr-backup-bucket: "intelgraph-backups-dr"
  artifact-bucket: "intelgraph-artifacts-prod"
  dr-artifact-bucket: "intelgraph-artifacts-dr"
  
  # Cluster Configuration
  cluster-name: "intelgraph-prod"
  dr-cluster-name: "intelgraph-dr"
  
  # Backup Schedules (cron format)
  neo4j-backup-schedule: "0 2 * * *"      # Daily at 2 AM
  postgres-backup-schedule: "0 1 * * *"   # Daily at 1 AM
  redis-backup-schedule: "0 */6 * * *"    # Every 6 hours
  k8s-config-schedule: "0 3 * * *"        # Daily at 3 AM
  validation-schedule: "0 4 * * 0"        # Weekly on Sunday at 4 AM
  
  # Retention Policies (days)
  neo4j-retention: "30"
  postgres-retention: "30"
  redis-retention: "7"
  k8s-config-retention: "30"
  validation-retention: "90"
  
  # Database Connection Settings
  neo4j-host: "neo4j.database"
  neo4j-port: "7687"
  postgres-host: "postgres.database"
  postgres-port: "5432"
  redis-host: "redis.database"
  redis-port: "6379"
  
  # Security Settings
  encryption-enabled: "true"
  encryption-algorithm: "AES256"
  integrity-verification: "true"
  
  # Compliance Settings
  gdpr-enabled: "true"
  sox-enabled: "true"
  audit-logging: "true"
  
---
# Backup System Secrets Template (Values should be populated via external-secrets)
apiVersion: v1
kind: Secret
metadata:
  name: backup-secrets
  namespace: backup-system
  labels:
    app.kubernetes.io/name: backup-system
    app.kubernetes.io/component: secrets
type: Opaque
stringData:
  # AWS Credentials (Use IAM roles in production)
  aws-access-key-id: "PLACEHOLDER_AWS_ACCESS_KEY"
  aws-secret-access-key: "PLACEHOLDER_AWS_SECRET_KEY"
  
  # Database Credentials
  neo4j-username: "neo4j"
  neo4j-password: "PLACEHOLDER_NEO4J_PASSWORD"
  postgres-username: "intelgraph"
  postgres-password: "PLACEHOLDER_POSTGRES_PASSWORD"
  
  # Notification Webhooks
  slack-webhook-url: "https://hooks.slack.com/services/PLACEHOLDER"
  pagerduty-integration-key: "PLACEHOLDER_PAGERDUTY_KEY"
  
  # Encryption Keys
  kms-key-id: "arn:aws:kms:us-west-2:123456789012:key/12345678-1234-1234-1234-123456789012"
  backup-encryption-key: "PLACEHOLDER_32_BYTE_ENCRYPTION_KEY"
  
---
# Individual Database Backup Secrets
apiVersion: v1
kind: Secret
metadata:
  name: neo4j-backup-secrets
  namespace: database
type: Opaque
stringData:
  username: "neo4j"
  password: "PLACEHOLDER_NEO4J_PASSWORD"
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-backup-secrets
  namespace: database
type: Opaque
stringData:
  username: "intelgraph"
  password: "PLACEHOLDER_POSTGRES_PASSWORD"
---
apiVersion: v1
kind: Secret
metadata:
  name: backup-encryption-secrets
  namespace: backup-system
type: Opaque
stringData:
  kms-key-id: "arn:aws:kms:us-west-2:123456789012:key/12345678-1234-1234-1234-123456789012"
  encryption-key: "PLACEHOLDER_ENCRYPTION_KEY"
---
# TLS Certificate for Backup Encryption Service
apiVersion: v1
kind: Secret
metadata:
  name: backup-encryption-tls
  namespace: backup-system
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t  # Base64 encoded certificate
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t  # Base64 encoded private key
---
# Namespace Creation
apiVersion: v1
kind: Namespace
metadata:
  name: backup-system
  labels:
    app.kubernetes.io/name: backup-system
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted
---
# Storage Class for Backup Operations
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: backup-storage
  labels:
    app.kubernetes.io/name: backup-storage
provisioner: ebs.csi.aws.com
parameters:
  type: gp3
  encrypted: "true"
  throughput: "250"
  iops: "3000"
reclaimPolicy: Delete
volumeBindingMode: WaitForFirstConsumer
allowVolumeExpansion: true
---
# Priority Class for Backup Jobs
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: backup-priority
  labels:
    app.kubernetes.io/name: backup-priority
value: 1000
globalDefault: false
description: "Priority class for backup and recovery operations"
---
# Resource Quotas for Backup System
apiVersion: v1
kind: ResourceQuota
metadata:
  name: backup-system-quota
  namespace: backup-system
spec:
  hard:
    requests.cpu: "20"
    requests.memory: "40Gi"
    limits.cpu: "40"
    limits.memory: "80Gi"
    persistentvolumeclaims: "10"
    requests.storage: "500Gi"
---
# Limit Range for Backup Pods
apiVersion: v1
kind: LimitRange
metadata:
  name: backup-system-limits
  namespace: backup-system
spec:
  limits:
  - default:
      memory: "2Gi"
      cpu: "1000m"
    defaultRequest:
      memory: "512Mi"
      cpu: "250m"
    type: Container
  - max:
      storage: "100Gi"
    type: PersistentVolumeClaim