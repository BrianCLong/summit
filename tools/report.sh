#!/usr/bin/env bash
set -euo pipefail
[ -f ".orchestra.env" ] && set -a && . ./.orchestra.env && set +a

# Generate Symphony platform report
TS="$(date +%Y%m%d-%H%M%S)"
REPORT_DIR="reports"
REPORT_FILE="$REPORT_DIR/symphony-report-$TS.md"

mkdir -p "$REPORT_DIR"

cat > "$REPORT_FILE" << 'EOF'
# IntelGraph Symphony Platform Report

**Generated:** `DATE_PLACEHOLDER`
**Profile:** `PROFILE_PLACEHOLDER`

## Executive Summary

- **System Health:** `HEALTH_STATUS`
- **AI Models:** `MODEL_COUNT` available
- **Knowledge Base:** `RAG_DOCS` documents, `RAG_FILES` files
- **Autonomy Level:** LOA-`AUTONOMY_LEVEL`

## Service Status

| Service | Status | Endpoint |
|---------|--------|----------|
| Ollama | `OLLAMA_STATUS` | :11434 |
| LiteLLM | `LITELLM_STATUS` | :4000 |
| Neo4j (ephemeral) | `NEO4J_STATUS` | - |

## Configuration

- **Profile:** `PROFILE_PLACEHOLDER`
- **Autonomy:** `AUTONOMY_LEVEL`
- **RAG Top-K:** `RAG_TOPK`
- **Models:**
  - General: `MODEL_GENERAL`
  - Code: `MODEL_CODE`
  - Graph: `MODEL_GRAPH`

## Recent Activity

`ACTIVITY_PLACEHOLDER`

## Recommendations

`RECOMMENDATIONS_PLACEHOLDER`

---

*Generated by IntelGraph Symphony Platform*
EOF

# Generate status JSON for data
python3 tools/status_json.py >/dev/null 2>&1

# Read status data
if [ -f "dashboard/status.json" ]; then
    # Extract values from status JSON
    PROFILE=$(python3 -c "import json; data=json.load(open('dashboard/status.json')); print(data.get('environment',{}).get('profile','unknown'))")
    AUTONOMY=$(python3 -c "import json; data=json.load(open('dashboard/status.json')); print(data.get('environment',{}).get('autonomy','?'))")
    RAG_TOPK=$(python3 -c "import json; data=json.load(open('dashboard/status.json')); print(data.get('environment',{}).get('rag_topk','?'))")
    MODEL_COUNT=$(python3 -c "import json; data=json.load(open('dashboard/status.json')); print(data.get('models',{}).get('count','?'))")
    RAG_DOCS=$(python3 -c "import json; data=json.load(open('dashboard/status.json')); print(data.get('rag',{}).get('rows','?'))")
    RAG_FILES=$(python3 -c "import json; data=json.load(open('dashboard/status.json')); print(data.get('rag',{}).get('files','?'))")
    
    # Service statuses
    OLLAMA_STATUS=$(python3 -c "import json; data=json.load(open('dashboard/status.json')); print('🟢 Online' if data.get('services',{}).get('ollama') else '🔴 Offline')")
    LITELLM_STATUS=$(python3 -c "import json; data=json.load(open('dashboard/status.json')); print('🟢 Online' if data.get('services',{}).get('litellm') else '🔴 Offline')")
    NEO4J_STATUS=$(python3 -c "import json; data=json.load(open('dashboard/status.json')); print('🟢 Online' if data.get('services',{}).get('neo4j_ephemeral') else '🔴 Offline')")
else
    PROFILE="unknown"
    AUTONOMY="?"
    RAG_TOPK="?"
    MODEL_COUNT="?"
    RAG_DOCS="?"
    RAG_FILES="?"
    OLLAMA_STATUS="❓ Unknown"
    LITELLM_STATUS="❓ Unknown"
    NEO4J_STATUS="❓ Unknown"
fi

# Determine overall health
if [[ "$OLLAMA_STATUS" == *"Online"* && "$LITELLM_STATUS" == *"Online"* ]]; then
    HEALTH_STATUS="🟢 Healthy"
elif [[ "$OLLAMA_STATUS" == *"Online"* || "$LITELLM_STATUS" == *"Online"* ]]; then
    HEALTH_STATUS="🟡 Partial"
else
    HEALTH_STATUS="🔴 Degraded"
fi

# Get model info from config
MODEL_GENERAL=$(grep "MODEL_GENERAL" .orchestra.env 2>/dev/null | cut -d'=' -f2 || echo "local/llama")
MODEL_CODE=$(grep "MODEL_CODE" .orchestra.env 2>/dev/null | cut -d'=' -f2 || echo "local/llama-cpu")
MODEL_GRAPH=$(grep "MODEL_GRAPH" .orchestra.env 2>/dev/null | cut -d'=' -f2 || echo "local/llama")

# Recent activity (last 5 git commits) 
ACTIVITY=$(git log --oneline -5 2>/dev/null | sed 's/^/* /' | head -3 || echo "* No recent activity")

# Generate recommendations
RECOMMENDATIONS=""
if [[ "$OLLAMA_STATUS" == *"Offline"* ]]; then
    RECOMMENDATIONS+="- Start Ollama: \`just --justfile Justfile.ai ai-up\`\n"
fi
if [[ "$LITELLM_STATUS" == *"Offline"* ]]; then
    RECOMMENDATIONS+="- Start LiteLLM gateway\n"
fi
if [[ "$RAG_DOCS" == "0" || "$RAG_DOCS" == "?" ]]; then
    RECOMMENDATIONS+="- Build RAG knowledge base: \`symphony source refresh\`\n"
fi
if [[ "$AUTONOMY" == "0" ]]; then
    RECOMMENDATIONS+="- Consider increasing autonomy level for productivity\n"
fi
if [[ -z "$RECOMMENDATIONS" ]]; then
    RECOMMENDATIONS="- System operating normally"
fi

# Apply substitutions  
sed -i.bak \
    -e "s/DATE_PLACEHOLDER/$(date)/" \
    -e "s/PROFILE_PLACEHOLDER/$PROFILE/g" \
    -e "s/HEALTH_STATUS/$HEALTH_STATUS/" \
    -e "s/MODEL_COUNT/$MODEL_COUNT/" \
    -e "s/RAG_DOCS/$RAG_DOCS/" \
    -e "s/RAG_FILES/$RAG_FILES/" \
    -e "s/AUTONOMY_LEVEL/$AUTONOMY/g" \
    -e "s/RAG_TOPK/$RAG_TOPK/" \
    -e "s|OLLAMA_STATUS|$OLLAMA_STATUS|" \
    -e "s|LITELLM_STATUS|$LITELLM_STATUS|" \
    -e "s|NEO4J_STATUS|$NEO4J_STATUS|" \
    -e "s|MODEL_GENERAL|$MODEL_GENERAL|" \
    -e "s|MODEL_CODE|$MODEL_CODE|" \
    -e "s|MODEL_GRAPH|$MODEL_GRAPH|" \
    -e "s|ACTIVITY_PLACEHOLDER|$ACTIVITY|" \
    -e "s|RECOMMENDATIONS_PLACEHOLDER|$RECOMMENDATIONS|" \
    "$REPORT_FILE"

rm "$REPORT_FILE.bak"

echo "📊 Report generated: $REPORT_FILE"
echo ""
echo "To view:"
echo "  cat $REPORT_FILE"
echo ""
echo "To publish to docs:"
echo "  cp $REPORT_FILE docs/platform/status.md"