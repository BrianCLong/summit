const { escapeHtml } = require('./fs-utils');
const { slugify } = require('./sanitizers');

function renderParagraphs(text) {
  if (!text) {
    return '';
  }
  const paragraphs = text
    .split(/\n{2,}/)
    .map((block) => block.trim())
    .filter(Boolean);
  return paragraphs
    .map((paragraph) => `<p>${escapeHtml(paragraph).replace(/\n/g, '<br />')}</p>`)
    .join('\n');
}

function renderLayout({ title, body, breadcrumbs = [], version }) {
  const breadcrumbHtml = breadcrumbs
    .map((crumb, index) => {
      if (!crumb.href || index === breadcrumbs.length - 1) {
        return `<span>${escapeHtml(crumb.label)}</span>`;
      }
      return `<a href="${crumb.href}">${escapeHtml(crumb.label)}</a>`;
    })
    .join(' / ');

  return `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>${escapeHtml(title)}</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <style>
    :root { font-family: system-ui, sans-serif; color: #1a1a1a; background: #f9fafb; }
    body { margin: 0 auto; max-width: 960px; padding: 2rem; line-height: 1.6; }
    header { border-bottom: 1px solid #e5e7eb; margin-bottom: 2rem; padding-bottom: 1rem; }
    nav { font-size: 0.9rem; color: #4b5563; margin-bottom: 0.5rem; }
    h1 { font-size: 2rem; margin: 0 0 1rem; }
    h2 { font-size: 1.5rem; margin-top: 1.5rem; }
    table { width: 100%; border-collapse: collapse; margin-top: 1rem; }
    th, td { border: 1px solid #e5e7eb; padding: 0.5rem; text-align: left; vertical-align: top; }
    th { background: #f3f4f6; }
    article { background: #ffffff; border: 1px solid #e5e7eb; border-radius: 8px; padding: 1rem; margin-bottom: 1.5rem; box-shadow: 0 1px 2px rgba(15, 23, 42, 0.08); }
    code { background: #f3f4f6; padding: 0.1rem 0.3rem; border-radius: 4px; font-size: 0.95rem; }
    ul { padding-left: 1.25rem; }
    a { color: #2563eb; text-decoration: none; }
    a:hover { text-decoration: underline; }
    footer { margin-top: 3rem; font-size: 0.85rem; color: #6b7280; }
  </style>
</head>
<body>
  <header>
    <nav>${breadcrumbHtml}</nav>
    <h1>${escapeHtml(title)}</h1>
    ${version ? `<p>Version: <strong>${escapeHtml(version)}</strong></p>` : ''}
  </header>
  <main>
    ${body}
  </main>
  <footer>
    Generated by DocForge.
  </footer>
</body>
</html>`;
}

function renderIndexPage({ version, modules, adrs, versionScoped, versions = [] }) {
  const moduleRows = modules
    .map(
      (module) => `<tr>
        <td><a href="./${versionScoped ? 'modules' : version + '/modules'}/${module.id}.html">${escapeHtml(module.path)}</a></td>
        <td>${escapeHtml(module.language)}</td>
        <td>${escapeHtml(module.entries[0]?.summary || '')}</td>
      </tr>`
    )
    .join('\n');

  const adrRows = adrs
    .map(
      (adr) => `<tr>
        <td><a href="./${versionScoped ? 'adrs' : version + '/adrs'}/${adr.id}.html">${escapeHtml(adr.title)}</a></td>
        <td>${escapeHtml(adr.summary)}</td>
      </tr>`
    )
    .join('\n');

  const versionsList = versions
    .map((entry) => `<li><a href="./${entry.version}/index.html">${escapeHtml(entry.version)}</a></li>`)
    .join('\n');

  const bodySections = [];

  if (!versionScoped) {
    bodySections.push('<section>');
    bodySections.push('<h2>Available Versions</h2>');
    bodySections.push(`<ul>${versionsList}</ul>`);
    bodySections.push('</section>');
  }

  bodySections.push('<section id="modules">');
  bodySections.push('<h2>API Modules</h2>');
  bodySections.push('<table>');
  bodySections.push('<thead><tr><th>Module</th><th>Language</th><th>Summary</th></tr></thead>');
  bodySections.push(`<tbody>${moduleRows}</tbody>`);
  bodySections.push('</table>');
  bodySections.push('</section>');

  bodySections.push('<section id="adrs">');
  bodySections.push('<h2>Architecture Decision Records</h2>');
  bodySections.push('<table>');
  bodySections.push('<thead><tr><th>ADR</th><th>Summary</th></tr></thead>');
  bodySections.push(`<tbody>${adrRows}</tbody>`);
  bodySections.push('</table>');
  bodySections.push('</section>');

  return renderLayout({
    title: versionScoped ? `DocForge ${version} Documentation` : 'DocForge Documentation',
    version: versionScoped ? version : undefined,
    body: bodySections.join('\n'),
    breadcrumbs: versionScoped
      ? [
          { label: 'Home', href: '../index.html' },
          { label: `Version ${version}` }
        ]
      : [{ label: 'Home' }]
  });
}

function renderModulePage(module, version) {
  const body = [
    '<section>',
    `<h2>${escapeHtml(module.path)}</h2>`,
    `<p><strong>Language:</strong> ${escapeHtml(module.language)}</p>`,
    ...module.entries.map((entry) => {
      const anchor = slugify(entry.name);
      return `<article id="${anchor}">
        <h3>${escapeHtml(entry.name)}</h3>
        <p><strong>Kind:</strong> ${escapeHtml(entry.kind)}</p>
        <p><strong>Signature:</strong> <code>${escapeHtml(entry.signature)}</code></p>
        ${renderParagraphs(entry.description)}
      </article>`;
    }),
    '</section>'
  ].join('\n');

  return renderLayout({
    title: `${module.path} – DocForge`,
    version,
    body,
    breadcrumbs: [
      { label: 'Home', href: '../index.html' },
      { label: 'Modules', href: '../index.html#modules' },
      { label: module.path }
    ]
  });
}

function renderAdrPage(adr, version) {
  const body = [
    '<section>',
    `<h2>${escapeHtml(adr.title)}</h2>`,
    adr.html,
    '</section>'
  ].join('\n');

  return renderLayout({
    title: `${adr.title} – DocForge`,
    version,
    body,
    breadcrumbs: [
      { label: 'Home', href: '../index.html' },
      { label: 'ADRs', href: '../index.html#adrs' },
      { label: adr.title }
    ]
  });
}

module.exports = {
  renderIndexPage,
  renderModulePage,
  renderAdrPage
};
