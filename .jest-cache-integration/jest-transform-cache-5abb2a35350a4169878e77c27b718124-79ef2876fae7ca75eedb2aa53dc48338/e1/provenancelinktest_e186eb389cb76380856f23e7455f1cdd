07a5ce74630c3062a1f58bfd27894edf
const { createGraphQLClient } = require('../integration/utils/graphqlClient');
const { createGraphQLTestApp } = require('../integration/utils/graphqlTestServer');
const { contentTypeStartsWith } = require('../integration/graphql-helpers');
describe('provenance link', () => {
    let app;
    beforeAll(() => {
        app = createGraphQLTestApp();
    });
    it('returns ok + version', async () => {
        const client = await createGraphQLClient(app);
        const res = await client.query({ query: '{ ok version }' });
        expect(res.status).toBe(200);
        expect(contentTypeStartsWith(res.headers['content-type'], 'application/json')).toBe(true);
        expect(res.body.data).toMatchObject({ ok: true, version: expect.any(String) });
    });
    it('surfaces an error path with a stable code', async () => {
        const client = await createGraphQLClient(app);
        const res = await client.query({ query: 'query BAD { notAField }' });
        expect(res.status).toBe(200);
        expect(contentTypeStartsWith(res.headers['content-type'], 'application/json')).toBe(true);
        expect(res.body.errors?.[0]).toBeTruthy();
        // Don't assert full message; check presence + stable shape
        expect(res.body.errors[0]).toEqual(expect.objectContaining({ message: expect.any(String) }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3Rlc3RzL2dyYXBocWwvcHJvdmVuYW5jZS5saW5rLnRlc3QudHMiLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxFQUFFLG1CQUFtQixFQUFFLEdBQUcsT0FBTyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7QUFDOUUsTUFBTSxFQUFFLG9CQUFvQixFQUFFLEdBQUcsT0FBTyxDQUFDLHdDQUF3QyxDQUFDLENBQUM7QUFDbkYsTUFBTSxFQUFFLHFCQUFxQixFQUFFLEdBQUcsT0FBTyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7QUFFNUUsUUFBUSxDQUFDLGlCQUFpQixFQUFFLEdBQUcsRUFBRTtJQUMvQixJQUFJLEdBQUcsQ0FBQztJQUVSLFNBQVMsQ0FBQyxHQUFHLEVBQUU7UUFDYixHQUFHLEdBQUcsb0JBQW9CLEVBQUUsQ0FBQztJQUMvQixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxzQkFBc0IsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNwQyxNQUFNLE1BQU0sR0FBRyxNQUFNLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzlDLE1BQU0sR0FBRyxHQUFHLE1BQU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLEtBQUssRUFBRSxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7UUFDNUQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDN0IsTUFBTSxDQUFDLHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLEVBQUUsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxRixNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxhQUFhLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNqRixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQywyQ0FBMkMsRUFBRSxLQUFLLElBQUksRUFBRTtRQUN6RCxNQUFNLE1BQU0sR0FBRyxNQUFNLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzlDLE1BQU0sR0FBRyxHQUFHLE1BQU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLEtBQUssRUFBRSx5QkFBeUIsRUFBRSxDQUFDLENBQUM7UUFDckUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDN0IsTUFBTSxDQUFDLHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLEVBQUUsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxRixNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQzFDLDJEQUEyRDtRQUMzRCxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDL0YsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvYnJpYW5sb25nL0RldmVsb3Blci9zdW1taXQvdGVzdHMvZ3JhcGhxbC9wcm92ZW5hbmNlLmxpbmsudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IGNyZWF0ZUdyYXBoUUxDbGllbnQgfSA9IHJlcXVpcmUoJy4uL2ludGVncmF0aW9uL3V0aWxzL2dyYXBocWxDbGllbnQnKTtcbmNvbnN0IHsgY3JlYXRlR3JhcGhRTFRlc3RBcHAgfSA9IHJlcXVpcmUoJy4uL2ludGVncmF0aW9uL3V0aWxzL2dyYXBocWxUZXN0U2VydmVyJyk7XG5jb25zdCB7IGNvbnRlbnRUeXBlU3RhcnRzV2l0aCB9ID0gcmVxdWlyZSgnLi4vaW50ZWdyYXRpb24vZ3JhcGhxbC1oZWxwZXJzJyk7XG5cbmRlc2NyaWJlKCdwcm92ZW5hbmNlIGxpbmsnLCAoKSA9PiB7XG4gIGxldCBhcHA7XG5cbiAgYmVmb3JlQWxsKCgpID0+IHtcbiAgICBhcHAgPSBjcmVhdGVHcmFwaFFMVGVzdEFwcCgpO1xuICB9KTtcblxuICBpdCgncmV0dXJucyBvayArIHZlcnNpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgY2xpZW50ID0gYXdhaXQgY3JlYXRlR3JhcGhRTENsaWVudChhcHApO1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGNsaWVudC5xdWVyeSh7IHF1ZXJ5OiAneyBvayB2ZXJzaW9uIH0nIH0pO1xuICAgIGV4cGVjdChyZXMuc3RhdHVzKS50b0JlKDIwMCk7XG4gICAgZXhwZWN0KGNvbnRlbnRUeXBlU3RhcnRzV2l0aChyZXMuaGVhZGVyc1snY29udGVudC10eXBlJ10sICdhcHBsaWNhdGlvbi9qc29uJykpLnRvQmUodHJ1ZSk7XG4gICAgZXhwZWN0KHJlcy5ib2R5LmRhdGEpLnRvTWF0Y2hPYmplY3QoeyBvazogdHJ1ZSwgdmVyc2lvbjogZXhwZWN0LmFueShTdHJpbmcpIH0pO1xuICB9KTtcblxuICBpdCgnc3VyZmFjZXMgYW4gZXJyb3IgcGF0aCB3aXRoIGEgc3RhYmxlIGNvZGUnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgY2xpZW50ID0gYXdhaXQgY3JlYXRlR3JhcGhRTENsaWVudChhcHApO1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGNsaWVudC5xdWVyeSh7IHF1ZXJ5OiAncXVlcnkgQkFEIHsgbm90QUZpZWxkIH0nIH0pO1xuICAgIGV4cGVjdChyZXMuc3RhdHVzKS50b0JlKDIwMCk7XG4gICAgZXhwZWN0KGNvbnRlbnRUeXBlU3RhcnRzV2l0aChyZXMuaGVhZGVyc1snY29udGVudC10eXBlJ10sICdhcHBsaWNhdGlvbi9qc29uJykpLnRvQmUodHJ1ZSk7XG4gICAgZXhwZWN0KHJlcy5ib2R5LmVycm9ycz8uWzBdKS50b0JlVHJ1dGh5KCk7XG4gICAgLy8gRG9uJ3QgYXNzZXJ0IGZ1bGwgbWVzc2FnZTsgY2hlY2sgcHJlc2VuY2UgKyBzdGFibGUgc2hhcGVcbiAgICBleHBlY3QocmVzLmJvZHkuZXJyb3JzWzBdKS50b0VxdWFsKGV4cGVjdC5vYmplY3RDb250YWluaW5nKHsgbWVzc2FnZTogZXhwZWN0LmFueShTdHJpbmcpIH0pKTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==