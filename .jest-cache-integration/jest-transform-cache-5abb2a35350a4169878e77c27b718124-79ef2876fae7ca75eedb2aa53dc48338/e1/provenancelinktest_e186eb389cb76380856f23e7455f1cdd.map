{"file":"/Users/brianlong/Developer/summit/tests/graphql/provenance.link.test.ts","mappings":"AAAA,MAAM,EAAE,mBAAmB,EAAE,GAAG,OAAO,CAAC,oCAAoC,CAAC,CAAC;AAC9E,MAAM,EAAE,oBAAoB,EAAE,GAAG,OAAO,CAAC,wCAAwC,CAAC,CAAC;AACnF,MAAM,EAAE,qBAAqB,EAAE,GAAG,OAAO,CAAC,gCAAgC,CAAC,CAAC;AAE5E,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,IAAI,GAAG,CAAC;IAER,SAAS,CAAC,GAAG,EAAE;QACb,GAAG,GAAG,oBAAoB,EAAE,CAAC;IAC/B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sBAAsB,EAAE,KAAK,IAAI,EAAE;QACpC,MAAM,MAAM,GAAG,MAAM,mBAAmB,CAAC,GAAG,CAAC,CAAC;QAC9C,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,gBAAgB,EAAE,CAAC,CAAC;QAC5D,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC7B,MAAM,CAAC,qBAAqB,CAAC,GAAG,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1F,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,aAAa,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IACjF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;QACzD,MAAM,MAAM,GAAG,MAAM,mBAAmB,CAAC,GAAG,CAAC,CAAC;QAC9C,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,yBAAyB,EAAE,CAAC,CAAC;QACrE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC7B,MAAM,CAAC,qBAAqB,CAAC,GAAG,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1F,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;QAC1C,2DAA2D;QAC3D,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,gBAAgB,CAAC,EAAE,OAAO,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/F,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/tests/graphql/provenance.link.test.ts"],"sourcesContent":["const { createGraphQLClient } = require('../integration/utils/graphqlClient');\nconst { createGraphQLTestApp } = require('../integration/utils/graphqlTestServer');\nconst { contentTypeStartsWith } = require('../integration/graphql-helpers');\n\ndescribe('provenance link', () => {\n  let app;\n\n  beforeAll(() => {\n    app = createGraphQLTestApp();\n  });\n\n  it('returns ok + version', async () => {\n    const client = await createGraphQLClient(app);\n    const res = await client.query({ query: '{ ok version }' });\n    expect(res.status).toBe(200);\n    expect(contentTypeStartsWith(res.headers['content-type'], 'application/json')).toBe(true);\n    expect(res.body.data).toMatchObject({ ok: true, version: expect.any(String) });\n  });\n\n  it('surfaces an error path with a stable code', async () => {\n    const client = await createGraphQLClient(app);\n    const res = await client.query({ query: 'query BAD { notAField }' });\n    expect(res.status).toBe(200);\n    expect(contentTypeStartsWith(res.headers['content-type'], 'application/json')).toBe(true);\n    expect(res.body.errors?.[0]).toBeTruthy();\n    // Don't assert full message; check presence + stable shape\n    expect(res.body.errors[0]).toEqual(expect.objectContaining({ message: expect.any(String) }));\n  });\n});\n"],"version":3}