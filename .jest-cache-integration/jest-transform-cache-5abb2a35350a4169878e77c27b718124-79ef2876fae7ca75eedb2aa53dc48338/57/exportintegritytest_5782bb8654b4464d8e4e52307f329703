811eca8a118dd37182877556cbb00a46
"use strict";
/**
 * Integration tests for deterministic export integrity verification
 * GA Core requirement: export -> unzip -> recompute hashes -> assert integrity
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const DeterministicExportService_1 = require("../../server/src/services/DeterministicExportService");
const database_1 = require("../../server/src/config/database");
const database_2 = require("../../server/src/config/database");
const fs_1 = require("fs");
const path_1 = require("path");
(0, globals_1.describe)('Export Integrity Verification', () => {
    let exportService;
    let neo4jSession;
    (0, globals_1.beforeEach)(async () => {
        exportService = new DeterministicExportService_1.DeterministicExportService();
        neo4jSession = (0, database_1.getNeo4jDriver)().session();
        // Create test data in Neo4j
        await neo4jSession.run(`
      CREATE 
        (p1:Entity {id: 'person-1', name: 'Alice Smith', type: 'PERSON', created_at: datetime('2025-01-01T00:00:00Z')}),
        (p2:Entity {id: 'person-2', name: 'Bob Jones', type: 'PERSON', created_at: datetime('2025-01-02T00:00:00Z')}),
        (o1:Entity {id: 'org-1', name: 'ACME Corp', type: 'ORG', created_at: datetime('2025-01-03T00:00:00Z')}),
        (p1)-[:RELATIONSHIP {id: 'rel-1', type: 'WORKS_FOR', created_at: datetime('2025-01-04T00:00:00Z')}]->(o1),
        (p2)-[:RELATIONSHIP {id: 'rel-2', type: 'WORKS_FOR', created_at: datetime('2025-01-05T00:00:00Z')}]->(o1)
    `);
    });
    (0, globals_1.afterEach)(async () => {
        // Clean up test data
        await neo4jSession.run('MATCH (n) DETACH DELETE n');
        await neo4jSession.close();
        // Clean up test files
        const testDir = (0, path_1.join)(process.cwd(), 'tmp', 'exports');
        if ((0, fs_1.existsSync)(testDir)) {
            (0, fs_1.rmSync)(testDir, { recursive: true, force: true });
        }
    });
    (0, globals_1.it)('should create deterministic export with consistent hashes', async () => {
        const request = {
            format: 'bundle',
            userId: 'test-user',
            includeManifest: true,
            includeProvenance: true
        };
        // Create first export
        const export1 = await exportService.createExportBundle(request, neo4jSession);
        // Create second export with same parameters
        const export2 = await exportService.createExportBundle(request, neo4jSession);
        // Manifests should have different IDs but same data hashes
        (0, globals_1.expect)(export1.manifest.exportId).not.toBe(export2.manifest.exportId);
        (0, globals_1.expect)(export1.manifest.files.length).toBe(export2.manifest.files.length);
        // File content hashes should be identical (deterministic ordering)
        const getFileHash = (manifest, filename) => manifest.files.find((f) => f.filename === filename)?.sha256;
        (0, globals_1.expect)(getFileHash(export1.manifest, 'entities.json'))
            .toBe(getFileHash(export2.manifest, 'entities.json'));
        (0, globals_1.expect)(getFileHash(export1.manifest, 'relationships.json'))
            .toBe(getFileHash(export2.manifest, 'relationships.json'));
        console.log('âœ… Deterministic export produces consistent hashes');
    });
    (0, globals_1.it)('should verify export bundle integrity end-to-end', async () => {
        const request = {
            format: 'bundle',
            userId: 'test-user',
            includeManifest: true,
            includeProvenance: true
        };
        // Step 1: Create export bundle
        const { exportId, bundlePath, manifest } = await exportService.createExportBundle(request, neo4jSession);
        (0, globals_1.expect)((0, fs_1.existsSync)(bundlePath)).toBe(true);
        (0, globals_1.expect)(manifest.integrity.totalFiles).toBeGreaterThan(0);
        (0, globals_1.expect)(manifest.integrity.bundleHash).toBeTruthy();
        (0, globals_1.expect)(manifest.integrity.manifestHash).toBeTruthy();
        console.log(`ðŸ“¦ Created bundle: ${bundlePath}`);
        console.log(`ðŸ“Š Files: ${manifest.integrity.totalFiles}, Bytes: ${manifest.integrity.totalBytes}`);
        // Step 2: Verify bundle integrity
        const verificationResult = await exportService.verifyExportBundle(bundlePath);
        (0, globals_1.expect)(verificationResult.verification.verified).toBe(true);
        (0, globals_1.expect)(verificationResult.verification.verificationErrors).toHaveLength(0);
        (0, globals_1.expect)(verificationResult.exportId).toBe(exportId);
        console.log('âœ… Bundle integrity verification passed');
        // Step 3: Assert integrity requirements
        (0, globals_1.expect)(verificationResult.integrity.bundleHash).toBeTruthy();
        (0, globals_1.expect)(verificationResult.integrity.manifestHash).toBeTruthy();
        (0, globals_1.expect)(verificationResult.files.length).toBeGreaterThanOrEqual(3); // entities, relationships, transforms
        // Step 4: Verify all files have SHA256 hashes
        for (const file of verificationResult.files) {
            (0, globals_1.expect)(file.sha256).toMatch(/^[a-f0-9]{64}$/);
            (0, globals_1.expect)(file.bytes).toBeGreaterThan(0);
            (0, globals_1.expect)(file.filename).toBeTruthy();
            (0, globals_1.expect)(file.transforms).toBeInstanceOf(Array);
        }
        console.log('âœ… All files have valid SHA256 hashes and metadata');
        // Step 5: Verify transform provenance
        (0, globals_1.expect)(verificationResult.transforms.length).toBeGreaterThan(0);
        for (const transform of verificationResult.transforms) {
            (0, globals_1.expect)(transform.id).toBeTruthy();
            (0, globals_1.expect)(transform.type).toMatch(/^(REDACTION|FILTERING|ANONYMIZATION|AGGREGATION)$/);
            (0, globals_1.expect)(transform.inputHash).toMatch(/^[a-f0-9]{64}$/);
            (0, globals_1.expect)(transform.outputHash).toMatch(/^[a-f0-9]{64}$/);
            (0, globals_1.expect)(transform.appliedAt).toBeTruthy();
        }
        console.log('âœ… Transform provenance chain verified');
    });
    (0, globals_1.it)('should detect bundle tampering', async () => {
        const request = {
            format: 'bundle',
            userId: 'test-user',
            includeManifest: true
        };
        // Create legitimate bundle
        const { bundlePath } = await exportService.createExportBundle(request, neo4jSession);
        // Tamper with bundle (simulate corruption)
        const fs = await Promise.resolve().then(() => __importStar(require('fs/promises')));
        const originalData = await fs.readFile(bundlePath);
        const tamperedData = Buffer.concat([originalData, Buffer.from('TAMPERED')]);
        await fs.writeFile(bundlePath, tamperedData);
        // Verification should detect tampering
        const verificationResult = await exportService.verifyExportBundle(bundlePath);
        (0, globals_1.expect)(verificationResult.verification.verified).toBe(false);
        (0, globals_1.expect)(verificationResult.verification.verificationErrors.length).toBeGreaterThan(0);
        (0, globals_1.expect)(verificationResult.verification.verificationErrors[0]).toContain('Bundle hash mismatch');
        console.log('âœ… Bundle tampering detected successfully');
    });
    (0, globals_1.it)('should track export metrics for GA Core dashboard', async () => {
        const pool = (0, database_2.getPostgresPool)();
        // Create multiple exports to generate metrics
        const requests = [
            { format: 'bundle', userId: 'user1' },
            { format: 'bundle', userId: 'user2' },
            { format: 'json', userId: 'user3' }
        ];
        for (const request of requests) {
            await exportService.createExportBundle(request, neo4jSession);
        }
        // Check GA metrics function
        const metricsResult = await pool.query('SELECT get_ga_export_metrics(1) as metrics');
        const metrics = metricsResult.rows[0].metrics;
        (0, globals_1.expect)(metrics.total_exports).toBeGreaterThanOrEqual(3);
        (0, globals_1.expect)(metrics.manifests_with_integrity).toBeGreaterThanOrEqual(2); // Bundle exports
        (0, globals_1.expect)(metrics.integrity_rate).toBeGreaterThanOrEqual(0.66); // 2/3 bundle exports
        (0, globals_1.expect)(metrics.ga_threshold).toBe(0.95);
        (0, globals_1.expect)(metrics.days_evaluated).toBe(1);
        console.log('ðŸ“Š Export metrics:', JSON.stringify(metrics, null, 2));
        // Check real-time metrics view
        const realtimeResult = await pool.query(`
      SELECT * FROM export_metrics_realtime 
      WHERE export_date = CURRENT_DATE
    `);
        (0, globals_1.expect)(realtimeResult.rows.length).toBeGreaterThanOrEqual(1);
        const realtime = realtimeResult.rows[0];
        (0, globals_1.expect)(realtime.total_exports).toBeGreaterThanOrEqual(3);
        (0, globals_1.expect)(realtime.bundle_exports).toBeGreaterThanOrEqual(2);
        (0, globals_1.expect)(realtime.bundle_integrity_rate).toBeGreaterThan(0);
        console.log('âœ… GA Core export metrics tracking functional');
    });
    (0, globals_1.it)('should handle export size limits and validation', async () => {
        // Test with minimal request
        const smallRequest = {
            format: 'json',
            userId: 'test-user',
            entityType: 'PERSON' // Limit to persons only
        };
        const export1 = await exportService.createExportBundle(smallRequest, neo4jSession);
        (0, globals_1.expect)(export1.manifest.integrity.totalBytes).toBeLessThan(10 * 1024); // < 10KB
        // Test bundle format includes all necessary files
        const bundleRequest = {
            format: 'bundle',
            userId: 'test-user',
            includeManifest: true,
            includeProvenance: true
        };
        const export2 = await exportService.createExportBundle(bundleRequest, neo4jSession);
        const requiredFiles = ['entities.json', 'relationships.json', 'transforms.json', 'entities.csv', 'relationships.csv'];
        for (const filename of requiredFiles) {
            const fileExists = export2.manifest.files.some(f => f.filename === filename);
            (0, globals_1.expect)(fileExists).toBe(true);
        }
        console.log('âœ… Export validation and file requirements verified');
    });
    (0, globals_1.it)('should provide complete audit trail', async () => {
        const request = {
            format: 'bundle',
            userId: 'audit-test-user',
            investigationId: 'test-investigation',
            includeProvenance: true
        };
        const { manifest } = await exportService.createExportBundle(request, neo4jSession);
        // Verify audit trail completeness
        (0, globals_1.expect)(manifest.createdBy).toBe('audit-test-user');
        (0, globals_1.expect)(manifest.createdAt).toBeTruthy();
        (0, globals_1.expect)(manifest.request).toBeTruthy();
        // Verify transform chain is complete
        for (let i = 0; i < manifest.transforms.length - 1; i++) {
            const current = manifest.transforms[i];
            const next = manifest.transforms[i + 1];
            // Output hash of current should match input hash of next
            (0, globals_1.expect)(current.outputHash).toBe(next.inputHash);
        }
        // Check database storage
        const pool = (0, database_2.getPostgresPool)();
        const dbResult = await pool.query('SELECT * FROM export_manifests WHERE id = $1', [manifest.exportId]);
        (0, globals_1.expect)(dbResult.rows.length).toBe(1);
        const dbRecord = dbResult.rows[0];
        (0, globals_1.expect)(dbRecord.created_by).toBe('audit-test-user');
        (0, globals_1.expect)(dbRecord.manifest_hash).toBe(manifest.integrity.manifestHash);
        (0, globals_1.expect)(dbRecord.bundle_hash).toBe(manifest.integrity.bundleHash);
        (0, globals_1.expect)(JSON.parse(dbRecord.transforms)).toEqual(manifest.transforms);
        console.log('âœ… Complete audit trail verified');
    });
});
/**
 * Performance benchmark test
 */
(0, globals_1.describe)('Export Performance Benchmarks', () => {
    let exportService;
    let neo4jSession;
    (0, globals_1.beforeEach)(async () => {
        exportService = new DeterministicExportService_1.DeterministicExportService();
        neo4jSession = (0, database_1.getNeo4jDriver)().session();
        // Create larger dataset for performance testing
        await neo4jSession.run(`
      WITH range(1, 100) AS ids
      UNWIND ids AS id
      CREATE (p:Entity {
        id: 'perf-person-' + toString(id),
        name: 'Person ' + toString(id),
        type: 'PERSON',
        created_at: datetime('2025-01-01T00:00:00Z') + duration({hours: id})
      })
    `);
    });
    (0, globals_1.afterEach)(async () => {
        await neo4jSession.run('MATCH (n:Entity) WHERE n.id STARTS WITH "perf-" DETACH DELETE n');
        await neo4jSession.close();
    });
    (0, globals_1.it)('should export large datasets within performance budgets', async () => {
        const request = {
            format: 'bundle',
            userId: 'perf-test-user'
        };
        const startTime = Date.now();
        const result = await exportService.createExportBundle(request, neo4jSession);
        const exportTime = Date.now() - startTime;
        // Performance assertions
        (0, globals_1.expect)(exportTime).toBeLessThan(30000); // < 30 seconds
        (0, globals_1.expect)(result.manifest.integrity.totalFiles).toBeGreaterThan(0);
        (0, globals_1.expect)(result.manifest.integrity.totalBytes).toBeGreaterThan(0);
        console.log(`ðŸ“Š Performance: Exported ${result.manifest.integrity.totalFiles} files (${result.manifest.integrity.totalBytes} bytes) in ${exportTime}ms`);
        // Verify deterministic ordering performance
        const startVerify = Date.now();
        const verification = await exportService.verifyExportBundle(result.bundlePath);
        const verifyTime = Date.now() - startVerify;
        (0, globals_1.expect)(verifyTime).toBeLessThan(10000); // < 10 seconds verification
        (0, globals_1.expect)(verification.verification.verified).toBe(true);
        console.log(`âœ… Verification completed in ${verifyTime}ms`);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,