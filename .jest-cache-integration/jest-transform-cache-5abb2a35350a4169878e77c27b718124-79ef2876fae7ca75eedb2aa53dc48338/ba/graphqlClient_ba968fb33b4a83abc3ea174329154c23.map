{"file":"/Users/brianlong/Developer/summit/tests/integration/utils/graphqlClient.ts","mappings":";;;AAAA,2CAAmF;AAgBnF,MAAM,SAAS,GAAG,CAAC,KAAmB,EAAkB,EAAE,CACxD,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;AAEhD,MAAM,mBAAmB,GAAG,KAAK,EACtC,OAAsC,EACV,EAAE;IAC9B,MAAM,MAAM,GAAG,IAAI,qBAAY,CAAC,OAAO,CAAC,CAAC;IACzC,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC;IAErB,MAAM,OAAO,GAAG,KAAK,EAAE,KAAmB,EAAmC,EAAE;QAC7E,MAAM,OAAO,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;QACjC,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;QACxD,MAAM,OAAO,GAAG,QAAQ,CAAC,IAAI,EAAE,OAAO;YACpC,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC;YAC3C,CAAC,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC;QAE3C,OAAO;YACL,MAAM,EAAE,QAAQ,CAAC,IAAI,EAAE,MAAM,IAAI,GAAG;YACpC,IAAI,EAAE,QAAQ,CAAC,IAAI;YACnB,OAAO;SACR,CAAC;IACJ,CAAC,CAAC;IAEF,OAAO;QACL,KAAK,EAAE,OAAO;QACd,MAAM,EAAE,OAAO;QACf,KAAK,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE;KAC3B,CAAC;AACJ,CAAC,CAAC;AAzBW,QAAA,mBAAmB,uBAyB9B","names":[],"sources":["/Users/brianlong/Developer/summit/tests/integration/utils/graphqlClient.ts"],"sourcesContent":["import { ApolloServer, ApolloServerOptions, GraphQLRequest } from '@apollo/server';\n\ntype RequestInput = string | GraphQLRequest;\n\ntype GraphQLResponsePayload = {\n  status: number;\n  body: any;\n  headers: Record<string, string>;\n};\n\ntype GraphQLTestClient = {\n  query: (input: RequestInput) => Promise<GraphQLResponsePayload>;\n  mutate: (input: RequestInput) => Promise<GraphQLResponsePayload>;\n  close: () => Promise<void>;\n};\n\nconst toPayload = (input: RequestInput): GraphQLRequest =>\n  typeof input === 'string' ? { query: input } : input;\n\nexport const createGraphQLClient = async <TContext = unknown>(\n  options: ApolloServerOptions<TContext>,\n): Promise<GraphQLTestClient> => {\n  const server = new ApolloServer(options);\n  await server.start();\n\n  const execute = async (input: RequestInput): Promise<GraphQLResponsePayload> => {\n    const payload = toPayload(input);\n    const response = await server.executeOperation(payload);\n    const headers = response.http?.headers\n      ? Object.fromEntries(response.http.headers)\n      : { 'content-type': 'application/json' };\n\n    return {\n      status: response.http?.status ?? 200,\n      body: response.body,\n      headers,\n    };\n  };\n\n  return {\n    query: execute,\n    mutate: execute,\n    close: () => server.stop(),\n  };\n};\n"],"version":3}