{"file":"/Users/brianlong/Developer/summit/server/src/config/database.ts","mappings":"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","names":[],"sources":["/Users/brianlong/Developer/summit/server/src/config/database.ts"],"sourcesContent":["import neo4j, { Driver, Session } from \"neo4j-driver\";\nimport { Pool, PoolClient } from \"pg\";\nimport Redis from \"ioredis\";\nimport config from \"./index.js\";\nimport logger from \"../utils/logger.js\";\n\nlet neo4jDriver: Driver | null = null;\nlet postgresPool: Pool | null = null;\nlet redisClient: Redis | null = null;\n\n// Neo4j Connection\nasync function connectNeo4j(): Promise<Driver> {\n  try {\n    neo4jDriver = neo4j.driver(\n      config.neo4j.uri,\n      neo4j.auth.basic(config.neo4j.username, config.neo4j.password),\n    );\n\n    // Test connection\n    const session = neo4jDriver.session();\n    await session.run(\"RETURN 1\");\n    await session.close();\n\n    // Run migrations to set up constraints and indexes\n    await runNeo4jMigrations();\n\n    logger.info(\"✅ Connected to Neo4j\");\n    return neo4jDriver;\n  } catch (error) {\n    logger.error(\"❌ Failed to connect to Neo4j:\", error);\n    throw error;\n  }\n}\n\nasync function runNeo4jMigrations(): Promise<void> {\n  try {\n    // Import migration manager lazily to avoid circular dependencies\n    const { migrationManager } = await import(\"../db/migrations/index.js\");\n    await migrationManager.migrate();\n    logger.info(\"Neo4j migrations completed successfully\");\n  } catch (error) {\n    logger.warn(\n      \"Migration system not available, falling back to legacy constraints\",\n    );\n    await createNeo4jConstraints();\n  }\n}\n\nasync function createNeo4jConstraints(): Promise<void> {\n  if (!neo4jDriver) throw new Error(\"Neo4j driver not initialized\");\n  const session = neo4jDriver.session();\n\n  try {\n    const constraints = [\n      \"CREATE CONSTRAINT entity_id IF NOT EXISTS FOR (e:Entity) REQUIRE e.id IS UNIQUE\",\n      \"CREATE CONSTRAINT entity_uuid IF NOT EXISTS FOR (e:Entity) REQUIRE e.uuid IS UNIQUE\",\n      \"CREATE CONSTRAINT user_id IF NOT EXISTS FOR (u:User) REQUIRE u.id IS UNIQUE\",\n      \"CREATE CONSTRAINT user_email IF NOT EXISTS FOR (u:User) REQUIRE u.email IS UNIQUE\",\n      \"CREATE CONSTRAINT investigation_id IF NOT EXISTS FOR (i:Investigation) REQUIRE i.id IS UNIQUE\",\n      \"CREATE CONSTRAINT relationship_id IF NOT EXISTS FOR ()-[r:RELATIONSHIP]-() REQUIRE r.id IS UNIQUE\",\n    ];\n\n    for (const constraint of constraints) {\n      try {\n        await session.run(constraint);\n      } catch (error: any) {\n        if (!error.message.includes(\"already exists\")) {\n          logger.warn(\n            \"Failed to create constraint:\",\n            constraint,\n            error.message,\n          );\n        }\n      }\n    }\n\n    const indexes = [\n      \"CREATE INDEX entity_type IF NOT EXISTS FOR (e:Entity) ON (e.type)\",\n      \"CREATE INDEX entity_label IF NOT EXISTS FOR (e:Entity) ON (e.label)\",\n      \"CREATE INDEX entity_created IF NOT EXISTS FOR (e:Entity) ON (e.createdAt)\",\n      \"CREATE INDEX investigation_status IF NOT EXISTS FOR (i:Investigation) ON (i.status)\",\n      \"CREATE INDEX user_username IF NOT EXISTS FOR (u:User) ON (u.username)\",\n      \"CREATE FULLTEXT INDEX entity_search IF NOT EXISTS FOR (e:Entity) ON EACH [e.label, e.description]\",\n      \"CREATE FULLTEXT INDEX investigation_search IF NOT EXISTS FOR (i:Investigation) ON EACH [i.title, i.description]\",\n    ];\n\n    for (const index of indexes) {\n      try {\n        await session.run(index);\n      } catch (error: any) {\n        if (!error.message.includes(\"already exists\")) {\n          logger.warn(\"Failed to create index:\", index, error.message);\n        }\n      }\n    }\n\n    logger.info(\"Neo4j constraints and indexes created\");\n  } catch (error) {\n    logger.error(\"Failed to create Neo4j constraints:\", error);\n  } finally {\n    await session.close();\n  }\n}\n\n// PostgreSQL Connection\nasync function connectPostgres(): Promise<Pool> {\n  try {\n    postgresPool = new Pool({\n      host: config.postgres.host,\n      port: config.postgres.port,\n      database: config.postgres.database,\n      user: config.postgres.username,\n      password: config.postgres.password,\n      max: 20,\n      idleTimeoutMillis: 30000,\n      connectionTimeoutMillis: 2000,\n    });\n\n    const client = await postgresPool.connect();\n    await client.query(\"SELECT NOW()\");\n    client.release();\n\n    await createPostgresTables();\n\n    logger.info(\"✅ Connected to PostgreSQL\");\n    return postgresPool;\n  } catch (error) {\n    logger.error(\"❌ Failed to connect to PostgreSQL:\", error);\n    throw error;\n  }\n}\n\nasync function createPostgresTables(): Promise<void> {\n  if (!postgresPool) throw new Error(\"PostgreSQL pool not initialized\");\n  const client = await postgresPool.connect();\n\n  try {\n    // Users table\n    await client.query(`\n      CREATE TABLE IF NOT EXISTS users (\n        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n        email VARCHAR(255) UNIQUE NOT NULL,\n        username VARCHAR(100) UNIQUE NOT NULL,\n        password_hash VARCHAR(255) NOT NULL,\n        first_name VARCHAR(100) NOT NULL,\n        last_name VARCHAR(100) NOT NULL,\n        role VARCHAR(50) NOT NULL DEFAULT 'ANALYST',\n        is_active BOOLEAN DEFAULT true,\n        last_login TIMESTAMP,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n\n    // Audit logs table\n    await client.query(`\n      CREATE TABLE IF NOT EXISTS audit_logs (\n        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n        user_id UUID REFERENCES users(id),\n        action VARCHAR(100) NOT NULL,\n        resource_type VARCHAR(100) NOT NULL,\n        resource_id VARCHAR(255),\n        details JSONB,\n        ip_address INET,\n        user_agent TEXT,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n\n    // Sessions table\n    await client.query(`\n      CREATE TABLE IF NOT EXISTS user_sessions (\n        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n        user_id UUID REFERENCES users(id) ON DELETE CASCADE,\n        refresh_token VARCHAR(500) UNIQUE NOT NULL,\n        expires_at TIMESTAMP NOT NULL,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        last_used TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n\n    // Analysis results table\n    await client.query(`\n      CREATE TABLE IF NOT EXISTS analysis_results (\n        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n        investigation_id VARCHAR(255) NOT NULL,\n        analysis_type VARCHAR(100) NOT NULL,\n        algorithm VARCHAR(100) NOT NULL,\n        results JSONB NOT NULL,\n        confidence_score DECIMAL(3,2),\n        created_by UUID REFERENCES users(id),\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n\n    await client.query(\n      \"CREATE INDEX IF NOT EXISTS idx_audit_logs_user_id ON audit_logs(user_id)\",\n    );\n    await client.query(\n      \"CREATE INDEX IF NOT EXISTS idx_audit_logs_created_at ON audit_logs(created_at)\",\n    );\n    await client.query(\n      \"CREATE INDEX IF NOT EXISTS idx_sessions_user_id ON user_sessions(user_id)\",\n    );\n    await client.query(\n      \"CREATE INDEX IF NOT EXISTS idx_analysis_investigation ON analysis_results(investigation_id)\",\n    );\n\n    logger.info(\"PostgreSQL tables created\");\n  } catch (error) {\n    logger.error(\"Failed to create PostgreSQL tables:\", error);\n  } finally {\n    client.release();\n  }\n}\n\n// Redis Connection\nasync function connectRedis(): Promise<Redis | null> {\n  try {\n    const redisConfig: any = {\n      host: config.redis.host,\n      port: config.redis.port,\n      db: config.redis.db,\n      retryDelayOnFailover: 100,\n      maxRetriesPerRequest: 3,\n      connectTimeout: 10000,\n      lazyConnect: true,\n      keepAlive: 30000,\n      family: 4,\n      enableOfflineQueue: false,\n      reconnectOnError: (err: Error) => {\n        const targetError = \"READONLY\";\n        return err.message.includes(targetError);\n      },\n      retryStrategy: (times: number) => {\n        const delay = Math.min(times * 50, 2000);\n        return delay;\n      },\n    };\n\n    // Add password if provided\n    if (config.redis.password) {\n      redisConfig.password = config.redis.password;\n    }\n\n    redisClient = new Redis(redisConfig);\n\n    redisClient.on(\"error\", (error) => {\n      logger.error(\"Redis error:\", error.message);\n    });\n\n    redisClient.on(\"connect\", () => {\n      logger.info(\"Redis connected\");\n    });\n\n    redisClient.on(\"ready\", () => {\n      logger.info(\"✅ Redis ready\");\n    });\n\n    redisClient.on(\"reconnecting\", () => {\n      logger.info(\"Redis reconnecting...\");\n    });\n\n    redisClient.on(\"end\", () => {\n      logger.warn(\"Redis connection ended\");\n    });\n\n    await redisClient.connect();\n    await redisClient.ping();\n\n    logger.info(\"✅ Connected to Redis\");\n    return redisClient;\n  } catch (error: any) {\n    logger.error(\"❌ Failed to connect to Redis:\", error.message);\n    // Don't throw error to allow server to start without Redis if needed\n    logger.warn(\"Server will continue without Redis caching\");\n    return null;\n  }\n}\n\nfunction getNeo4jDriver(): Driver {\n  if (!neo4jDriver) throw new Error(\"Neo4j driver not initialized\");\n  return neo4jDriver;\n}\n\nfunction getPostgresPool(): Pool {\n  if (!postgresPool) throw new Error(\"PostgreSQL pool not initialized\");\n  return postgresPool;\n}\n\nfunction getRedisClient(): Redis | null {\n  if (!redisClient) {\n    logger.warn(\"Redis client not available\");\n    return null;\n  }\n  return redisClient;\n}\n\nasync function closeConnections(): Promise<void> {\n  if (neo4jDriver) {\n    await neo4jDriver.close();\n    logger.info(\"Neo4j connection closed\");\n  }\n  if (postgresPool) {\n    await postgresPool.end();\n    logger.info(\"PostgreSQL connection closed\");\n  }\n  if (redisClient) {\n    redisClient.disconnect();\n    logger.info(\"Redis connection closed\");\n  }\n}\n\nexport {\n  connectNeo4j,\n  connectPostgres,\n  connectRedis,\n  getNeo4jDriver,\n  getPostgresPool,\n  getRedisClient,\n  closeConnections,\n};\n"],"version":3}