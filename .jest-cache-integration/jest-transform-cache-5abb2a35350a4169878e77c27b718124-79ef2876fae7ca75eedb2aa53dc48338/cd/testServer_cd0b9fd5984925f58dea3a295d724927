bba178359614004dde89cc781fd019c6
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTestApp = createTestApp;
const express = require('express');
async function createTestApp() {
    const app = express();
    app.use(express.json());
    const flows = new Map();
    let seq = 0;
    // Kick off a flow (async orchestration simulated)
    app.post('/api/flows', (req, res) => {
        const id = `f_${++seq}`;
        const kind = req.body?.kind ?? 'maestro';
        const rec = { id, kind, state: 'queued' };
        flows.set(id, rec);
        return res.status(202).json(rec);
    });
    // Deterministic tick endpoint to advance all flows one step
    // queued -> running -> complete
    app.post('/__tick', (_req, res) => {
        for (const rec of flows.values()) {
            if (rec.state === 'queued')
                rec.state = 'running';
            else if (rec.state === 'running')
                rec.state = 'complete';
        }
        return res.sendStatus(204);
    });
    // Inspect a specific flow by id
    app.get('/api/flows/:id', (req, res) => {
        const rec = flows.get(req.params.id);
        if (!rec)
            return res.status(404).json({ error: 'not_found' });
        return res.json(rec);
    });
    app.get('/__health', (_req, res) => res.status(200).send('ok'));
    return app; // <-- supertest will wrap this directly (no listen())
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3Rlc3RzL2ludGVncmF0aW9uL3V0aWxzL3Rlc3RTZXJ2ZXIudHMiLCJtYXBwaW5ncyI6Ijs7QUFFQSxzQ0FzQ0M7QUF4Q0QsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBNkIsQ0FBQztBQUV4RCxLQUFLLFVBQVUsYUFBYTtJQUNqQyxNQUFNLEdBQUcsR0FBRyxPQUFPLEVBQUUsQ0FBQztJQUN0QixHQUFHLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBSXhCLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxFQUEwRCxDQUFDO0lBQ2hGLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztJQUVaLGtEQUFrRDtJQUNsRCxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtRQUNsQyxNQUFNLEVBQUUsR0FBRyxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDeEIsTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLElBQUksU0FBUyxDQUFDO1FBQ3pDLE1BQU0sR0FBRyxHQUFHLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsUUFBcUIsRUFBRSxDQUFDO1FBQ3ZELEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ25CLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbkMsQ0FBQyxDQUFDLENBQUM7SUFFSCw0REFBNEQ7SUFDNUQsZ0NBQWdDO0lBQ2hDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQ2hDLEtBQUssTUFBTSxHQUFHLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUM7WUFDakMsSUFBSSxHQUFHLENBQUMsS0FBSyxLQUFLLFFBQVE7Z0JBQUUsR0FBRyxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUM7aUJBQzdDLElBQUksR0FBRyxDQUFDLEtBQUssS0FBSyxTQUFTO2dCQUFFLEdBQUcsQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDO1FBQzNELENBQUM7UUFDRCxPQUFPLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDN0IsQ0FBQyxDQUFDLENBQUM7SUFFSCxnQ0FBZ0M7SUFDaEMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtRQUNyQyxNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLEdBQUc7WUFBRSxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUM7UUFDOUQsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3ZCLENBQUMsQ0FBQyxDQUFDO0lBRUgsR0FBRyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBRWhFLE9BQU8sR0FBRyxDQUFDLENBQUMsc0RBQXNEO0FBQ3BFLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3Rlc3RzL2ludGVncmF0aW9uL3V0aWxzL3Rlc3RTZXJ2ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKSBhcyB0eXBlb2YgaW1wb3J0KCdleHByZXNzJyk7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVUZXN0QXBwKCkge1xuICBjb25zdCBhcHAgPSBleHByZXNzKCk7XG4gIGFwcC51c2UoZXhwcmVzcy5qc29uKCkpO1xuXG4gIC8vIC0tLSBNaW5pbWFsIGluLW1lbW9yeSBmbG93IGVuZ2luZSBmb3IgdGVzdHMgLS0tIC8vXG4gIHR5cGUgRmxvd1N0YXRlID0gJ3F1ZXVlZCcgfCAncnVubmluZycgfCAnY29tcGxldGUnO1xuICBjb25zdCBmbG93cyA9IG5ldyBNYXA8c3RyaW5nLCB7IGlkOiBzdHJpbmc7IGtpbmQ6IHN0cmluZzsgc3RhdGU6IEZsb3dTdGF0ZSB9PigpO1xuICBsZXQgc2VxID0gMDtcblxuICAvLyBLaWNrIG9mZiBhIGZsb3cgKGFzeW5jIG9yY2hlc3RyYXRpb24gc2ltdWxhdGVkKVxuICBhcHAucG9zdCgnL2FwaS9mbG93cycsIChyZXEsIHJlcykgPT4ge1xuICAgIGNvbnN0IGlkID0gYGZfJHsrK3NlcX1gO1xuICAgIGNvbnN0IGtpbmQgPSByZXEuYm9keT8ua2luZCA/PyAnbWFlc3Rybyc7XG4gICAgY29uc3QgcmVjID0geyBpZCwga2luZCwgc3RhdGU6ICdxdWV1ZWQnIGFzIEZsb3dTdGF0ZSB9O1xuICAgIGZsb3dzLnNldChpZCwgcmVjKTtcbiAgICByZXR1cm4gcmVzLnN0YXR1cygyMDIpLmpzb24ocmVjKTtcbiAgfSk7XG5cbiAgLy8gRGV0ZXJtaW5pc3RpYyB0aWNrIGVuZHBvaW50IHRvIGFkdmFuY2UgYWxsIGZsb3dzIG9uZSBzdGVwXG4gIC8vIHF1ZXVlZCAtPiBydW5uaW5nIC0+IGNvbXBsZXRlXG4gIGFwcC5wb3N0KCcvX190aWNrJywgKF9yZXEsIHJlcykgPT4ge1xuICAgIGZvciAoY29uc3QgcmVjIG9mIGZsb3dzLnZhbHVlcygpKSB7XG4gICAgICBpZiAocmVjLnN0YXRlID09PSAncXVldWVkJykgcmVjLnN0YXRlID0gJ3J1bm5pbmcnO1xuICAgICAgZWxzZSBpZiAocmVjLnN0YXRlID09PSAncnVubmluZycpIHJlYy5zdGF0ZSA9ICdjb21wbGV0ZSc7XG4gICAgfVxuICAgIHJldHVybiByZXMuc2VuZFN0YXR1cygyMDQpO1xuICB9KTtcblxuICAvLyBJbnNwZWN0IGEgc3BlY2lmaWMgZmxvdyBieSBpZFxuICBhcHAuZ2V0KCcvYXBpL2Zsb3dzLzppZCcsIChyZXEsIHJlcykgPT4ge1xuICAgIGNvbnN0IHJlYyA9IGZsb3dzLmdldChyZXEucGFyYW1zLmlkKTtcbiAgICBpZiAoIXJlYykgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgZXJyb3I6ICdub3RfZm91bmQnIH0pO1xuICAgIHJldHVybiByZXMuanNvbihyZWMpO1xuICB9KTtcblxuICBhcHAuZ2V0KCcvX19oZWFsdGgnLCAoX3JlcSwgcmVzKSA9PiByZXMuc3RhdHVzKDIwMCkuc2VuZCgnb2snKSk7XG5cbiAgcmV0dXJuIGFwcDsgLy8gPC0tIHN1cGVydGVzdCB3aWxsIHdyYXAgdGhpcyBkaXJlY3RseSAobm8gbGlzdGVuKCkpXG59Il0sInZlcnNpb24iOjN9