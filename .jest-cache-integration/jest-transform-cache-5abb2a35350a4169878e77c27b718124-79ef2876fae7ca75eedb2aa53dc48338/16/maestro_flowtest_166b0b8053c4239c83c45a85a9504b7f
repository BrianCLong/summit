13a2b427fb3adb1a04517122f90098f7
const { http } = require('./utils/httpClient');
const { createTestApp } = require('./utils/testServer');
describe('maestro flow', () => {
    let app;
    beforeAll(async () => {
        app = await createTestApp();
    });
    it('kicks off and completes a flow via deterministic ticks', async () => {
        const client = http(app); // prefer in-process app; never a URL here
        // 1) Kick off
        const start = await client.post('/api/flows').send({ kind: 'maestro' });
        expect(start.status).toBe(202);
        expect(start.body).toEqual(expect.objectContaining({ kind: 'maestro', state: 'queued', id: expect.any(String) }));
        // 2) Advance queued -> running
        await client.post('/__tick');
        const mid = await client.get(`/api/flows/${start.body.id}`);
        expect(mid.status).toBe(200);
        expect(mid.body.state).toBe('running');
        // 3) Advance running -> complete
        await client.post('/__tick');
        const done = await client.get(`/api/flows/${start.body.id}`);
        expect(done.status).toBe(200);
        expect(done.body.state).toBe('complete');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3Rlc3RzL2ludGVncmF0aW9uL21hZXN0cm9fZmxvdy50ZXN0LnRzIiwibWFwcGluZ3MiOiJBQUFBLE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUMvQyxNQUFNLEVBQUUsYUFBYSxFQUFFLEdBQUcsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFFeEQsUUFBUSxDQUFDLGNBQWMsRUFBRSxHQUFHLEVBQUU7SUFDNUIsSUFBSSxHQUFRLENBQUM7SUFFYixTQUFTLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDbkIsR0FBRyxHQUFHLE1BQU0sYUFBYSxFQUFFLENBQUM7SUFDOUIsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsd0RBQXdELEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDdEUsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsMENBQTBDO1FBRXBFLGNBQWM7UUFDZCxNQUFNLEtBQUssR0FBRyxNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7UUFDeEUsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDL0IsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQ3hCLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQ3RGLENBQUM7UUFFRiwrQkFBK0I7UUFDL0IsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzdCLE1BQU0sR0FBRyxHQUFHLE1BQU0sTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM1RCxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM3QixNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFdkMsaUNBQWlDO1FBQ2pDLE1BQU0sTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM3QixNQUFNLElBQUksR0FBRyxNQUFNLE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDN0QsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDOUIsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzNDLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3Rlc3RzL2ludGVncmF0aW9uL21hZXN0cm9fZmxvdy50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgaHR0cCB9ID0gcmVxdWlyZSgnLi91dGlscy9odHRwQ2xpZW50Jyk7XG5jb25zdCB7IGNyZWF0ZVRlc3RBcHAgfSA9IHJlcXVpcmUoJy4vdXRpbHMvdGVzdFNlcnZlcicpO1xuXG5kZXNjcmliZSgnbWFlc3RybyBmbG93JywgKCkgPT4ge1xuICBsZXQgYXBwOiBhbnk7XG5cbiAgYmVmb3JlQWxsKGFzeW5jICgpID0+IHtcbiAgICBhcHAgPSBhd2FpdCBjcmVhdGVUZXN0QXBwKCk7XG4gIH0pO1xuXG4gIGl0KCdraWNrcyBvZmYgYW5kIGNvbXBsZXRlcyBhIGZsb3cgdmlhIGRldGVybWluaXN0aWMgdGlja3MnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgY2xpZW50ID0gaHR0cChhcHApOyAvLyBwcmVmZXIgaW4tcHJvY2VzcyBhcHA7IG5ldmVyIGEgVVJMIGhlcmVcblxuICAgIC8vIDEpIEtpY2sgb2ZmXG4gICAgY29uc3Qgc3RhcnQgPSBhd2FpdCBjbGllbnQucG9zdCgnL2FwaS9mbG93cycpLnNlbmQoeyBraW5kOiAnbWFlc3RybycgfSk7XG4gICAgZXhwZWN0KHN0YXJ0LnN0YXR1cykudG9CZSgyMDIpO1xuICAgIGV4cGVjdChzdGFydC5ib2R5KS50b0VxdWFsKFxuICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoeyBraW5kOiAnbWFlc3RybycsIHN0YXRlOiAncXVldWVkJywgaWQ6IGV4cGVjdC5hbnkoU3RyaW5nKSB9KVxuICAgICk7XG5cbiAgICAvLyAyKSBBZHZhbmNlIHF1ZXVlZCAtPiBydW5uaW5nXG4gICAgYXdhaXQgY2xpZW50LnBvc3QoJy9fX3RpY2snKTtcbiAgICBjb25zdCBtaWQgPSBhd2FpdCBjbGllbnQuZ2V0KGAvYXBpL2Zsb3dzLyR7c3RhcnQuYm9keS5pZH1gKTtcbiAgICBleHBlY3QobWlkLnN0YXR1cykudG9CZSgyMDApO1xuICAgIGV4cGVjdChtaWQuYm9keS5zdGF0ZSkudG9CZSgncnVubmluZycpO1xuXG4gICAgLy8gMykgQWR2YW5jZSBydW5uaW5nIC0+IGNvbXBsZXRlXG4gICAgYXdhaXQgY2xpZW50LnBvc3QoJy9fX3RpY2snKTtcbiAgICBjb25zdCBkb25lID0gYXdhaXQgY2xpZW50LmdldChgL2FwaS9mbG93cy8ke3N0YXJ0LmJvZHkuaWR9YCk7XG4gICAgZXhwZWN0KGRvbmUuc3RhdHVzKS50b0JlKDIwMCk7XG4gICAgZXhwZWN0KGRvbmUuYm9keS5zdGF0ZSkudG9CZSgnY29tcGxldGUnKTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==