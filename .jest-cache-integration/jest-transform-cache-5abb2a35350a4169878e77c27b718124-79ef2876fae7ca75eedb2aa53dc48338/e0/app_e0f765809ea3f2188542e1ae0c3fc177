08cc7bb3f88ba9e5fc4e832414d78111
const express = require('express');
const createApp = jest.fn(async () => {
    const app = express();
    app.use(express.json());
    app.get('/health', (_req, res) => {
        res.json({ status: 'healthy', timestamp: new Date().toISOString(), version: 'integration-test' });
    });
    app.get('/metrics', (_req, res) => {
        res.json({ uptime: 1, memory: { rss: 0 }, timestamp: new Date().toISOString() });
    });
    app.post('/graphql', (req, res) => {
        const { query = '', variables = {} } = req.body ?? {};
        if (query.includes('createEntity')) {
            res.json({
                data: {
                    createEntity: {
                        id: 'entity-123',
                        name: variables.input?.name ?? 'John Doe',
                        type: variables.input?.type ?? 'PERSON',
                        confidence: 1,
                        properties: variables.input?.properties ?? {},
                    },
                },
            });
            return;
        }
        if (query.includes('entity(')) {
            res.json({
                data: {
                    entity: {
                        id: variables.id ?? 'entity-123',
                        name: 'John Doe',
                        type: 'PERSON',
                        properties: { age: 30, location: 'New York' },
                    },
                },
            });
            return;
        }
        if (query.includes('__schema')) {
            res.json({ data: { __schema: { queryType: { name: 'Query' } } } });
            return;
        }
        res.json({ data: {} });
    });
    return app;
});
module.exports = { createApp };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3Rlc3RzL2ludGVncmF0aW9uL19fbW9ja3NfXy9zZXJ2aWNlcy1hcGkvc3JjL2FwcC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFFbkMsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLElBQUksRUFBRTtJQUNuQyxNQUFNLEdBQUcsR0FBRyxPQUFPLEVBQUUsQ0FBQztJQUN0QixHQUFHLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBRXhCLEdBQUcsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQy9CLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxFQUFFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxDQUFDLENBQUM7SUFDcEcsQ0FBQyxDQUFDLENBQUM7SUFFSCxHQUFHLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRTtRQUNoQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ25GLENBQUMsQ0FBQyxDQUFDO0lBRUgsR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7UUFDaEMsTUFBTSxFQUFFLEtBQUssR0FBRyxFQUFFLEVBQUUsU0FBUyxHQUFHLEVBQUUsRUFBRSxHQUFHLEdBQUcsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDO1FBRXRELElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDO1lBQ25DLEdBQUcsQ0FBQyxJQUFJLENBQUM7Z0JBQ1AsSUFBSSxFQUFFO29CQUNKLFlBQVksRUFBRTt3QkFDWixFQUFFLEVBQUUsWUFBWTt3QkFDaEIsSUFBSSxFQUFFLFNBQVMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxJQUFJLFVBQVU7d0JBQ3pDLElBQUksRUFBRSxTQUFTLENBQUMsS0FBSyxFQUFFLElBQUksSUFBSSxRQUFRO3dCQUN2QyxVQUFVLEVBQUUsQ0FBQzt3QkFDYixVQUFVLEVBQUUsU0FBUyxDQUFDLEtBQUssRUFBRSxVQUFVLElBQUksRUFBRTtxQkFDOUM7aUJBQ0Y7YUFDRixDQUFDLENBQUM7WUFDSCxPQUFPO1FBQ1QsQ0FBQztRQUVELElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDO1lBQzlCLEdBQUcsQ0FBQyxJQUFJLENBQUM7Z0JBQ1AsSUFBSSxFQUFFO29CQUNKLE1BQU0sRUFBRTt3QkFDTixFQUFFLEVBQUUsU0FBUyxDQUFDLEVBQUUsSUFBSSxZQUFZO3dCQUNoQyxJQUFJLEVBQUUsVUFBVTt3QkFDaEIsSUFBSSxFQUFFLFFBQVE7d0JBQ2QsVUFBVSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFO3FCQUM5QztpQkFDRjthQUNGLENBQUMsQ0FBQztZQUNILE9BQU87UUFDVCxDQUFDO1FBRUQsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUM7WUFDL0IsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLFNBQVMsRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ25FLE9BQU87UUFDVCxDQUFDO1FBRUQsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3pCLENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxPQUFPLEdBQUcsRUFBRSxTQUFTLEVBQUUsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvYnJpYW5sb25nL0RldmVsb3Blci9zdW1taXQvdGVzdHMvaW50ZWdyYXRpb24vX19tb2Nrc19fL3NlcnZpY2VzLWFwaS9zcmMvYXBwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJyk7XG5cbmNvbnN0IGNyZWF0ZUFwcCA9IGplc3QuZm4oYXN5bmMgKCkgPT4ge1xuICBjb25zdCBhcHAgPSBleHByZXNzKCk7XG4gIGFwcC51c2UoZXhwcmVzcy5qc29uKCkpO1xuXG4gIGFwcC5nZXQoJy9oZWFsdGgnLCAoX3JlcSwgcmVzKSA9PiB7XG4gICAgcmVzLmpzb24oeyBzdGF0dXM6ICdoZWFsdGh5JywgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksIHZlcnNpb246ICdpbnRlZ3JhdGlvbi10ZXN0JyB9KTtcbiAgfSk7XG5cbiAgYXBwLmdldCgnL21ldHJpY3MnLCAoX3JlcSwgcmVzKSA9PiB7XG4gICAgcmVzLmpzb24oeyB1cHRpbWU6IDEsIG1lbW9yeTogeyByc3M6IDAgfSwgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkgfSk7XG4gIH0pO1xuXG4gIGFwcC5wb3N0KCcvZ3JhcGhxbCcsIChyZXEsIHJlcykgPT4ge1xuICAgIGNvbnN0IHsgcXVlcnkgPSAnJywgdmFyaWFibGVzID0ge30gfSA9IHJlcS5ib2R5ID8/IHt9O1xuXG4gICAgaWYgKHF1ZXJ5LmluY2x1ZGVzKCdjcmVhdGVFbnRpdHknKSkge1xuICAgICAgcmVzLmpzb24oe1xuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgY3JlYXRlRW50aXR5OiB7XG4gICAgICAgICAgICBpZDogJ2VudGl0eS0xMjMnLFxuICAgICAgICAgICAgbmFtZTogdmFyaWFibGVzLmlucHV0Py5uYW1lID8/ICdKb2huIERvZScsXG4gICAgICAgICAgICB0eXBlOiB2YXJpYWJsZXMuaW5wdXQ/LnR5cGUgPz8gJ1BFUlNPTicsXG4gICAgICAgICAgICBjb25maWRlbmNlOiAxLFxuICAgICAgICAgICAgcHJvcGVydGllczogdmFyaWFibGVzLmlucHV0Py5wcm9wZXJ0aWVzID8/IHt9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocXVlcnkuaW5jbHVkZXMoJ2VudGl0eSgnKSkge1xuICAgICAgcmVzLmpzb24oe1xuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgZW50aXR5OiB7XG4gICAgICAgICAgICBpZDogdmFyaWFibGVzLmlkID8/ICdlbnRpdHktMTIzJyxcbiAgICAgICAgICAgIG5hbWU6ICdKb2huIERvZScsXG4gICAgICAgICAgICB0eXBlOiAnUEVSU09OJyxcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHsgYWdlOiAzMCwgbG9jYXRpb246ICdOZXcgWW9yaycgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHF1ZXJ5LmluY2x1ZGVzKCdfX3NjaGVtYScpKSB7XG4gICAgICByZXMuanNvbih7IGRhdGE6IHsgX19zY2hlbWE6IHsgcXVlcnlUeXBlOiB7IG5hbWU6ICdRdWVyeScgfSB9IH0gfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmVzLmpzb24oeyBkYXRhOiB7fSB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIGFwcDtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHsgY3JlYXRlQXBwIH07XG4iXSwidmVyc2lvbiI6M30=