{"file":"/Users/brianlong/Developer/summit/tests/integration/__mocks__/services-api/src/app.js","mappings":"AAAA,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AAEnC,MAAM,SAAS,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,IAAI,EAAE;IACnC,MAAM,GAAG,GAAG,OAAO,EAAE,CAAC;IACtB,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;IAExB,GAAG,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE;QAC/B,GAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,EAAE,OAAO,EAAE,kBAAkB,EAAE,CAAC,CAAC;IACpG,CAAC,CAAC,CAAC;IAEH,GAAG,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE;QAChC,GAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;IACnF,CAAC,CAAC,CAAC;IAEH,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QAChC,MAAM,EAAE,KAAK,GAAG,EAAE,EAAE,SAAS,GAAG,EAAE,EAAE,GAAG,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC;QAEtD,IAAI,KAAK,CAAC,QAAQ,CAAC,cAAc,CAAC,EAAE,CAAC;YACnC,GAAG,CAAC,IAAI,CAAC;gBACP,IAAI,EAAE;oBACJ,YAAY,EAAE;wBACZ,EAAE,EAAE,YAAY;wBAChB,IAAI,EAAE,SAAS,CAAC,KAAK,EAAE,IAAI,IAAI,UAAU;wBACzC,IAAI,EAAE,SAAS,CAAC,KAAK,EAAE,IAAI,IAAI,QAAQ;wBACvC,UAAU,EAAE,CAAC;wBACb,UAAU,EAAE,SAAS,CAAC,KAAK,EAAE,UAAU,IAAI,EAAE;qBAC9C;iBACF;aACF,CAAC,CAAC;YACH,OAAO;QACT,CAAC;QAED,IAAI,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,CAAC;YAC9B,GAAG,CAAC,IAAI,CAAC;gBACP,IAAI,EAAE;oBACJ,MAAM,EAAE;wBACN,EAAE,EAAE,SAAS,CAAC,EAAE,IAAI,YAAY;wBAChC,IAAI,EAAE,UAAU;wBAChB,IAAI,EAAE,QAAQ;wBACd,UAAU,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,QAAQ,EAAE,UAAU,EAAE;qBAC9C;iBACF;aACF,CAAC,CAAC;YACH,OAAO;QACT,CAAC;QAED,IAAI,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;YAC/B,GAAG,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,EAAE,SAAS,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;YACnE,OAAO;QACT,CAAC;QAED,GAAG,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC;IACzB,CAAC,CAAC,CAAC;IAEH,OAAO,GAAG,CAAC;AACb,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,OAAO,GAAG,EAAE,SAAS,EAAE,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/tests/integration/__mocks__/services-api/src/app.js"],"sourcesContent":["const express = require('express');\n\nconst createApp = jest.fn(async () => {\n  const app = express();\n  app.use(express.json());\n\n  app.get('/health', (_req, res) => {\n    res.json({ status: 'healthy', timestamp: new Date().toISOString(), version: 'integration-test' });\n  });\n\n  app.get('/metrics', (_req, res) => {\n    res.json({ uptime: 1, memory: { rss: 0 }, timestamp: new Date().toISOString() });\n  });\n\n  app.post('/graphql', (req, res) => {\n    const { query = '', variables = {} } = req.body ?? {};\n\n    if (query.includes('createEntity')) {\n      res.json({\n        data: {\n          createEntity: {\n            id: 'entity-123',\n            name: variables.input?.name ?? 'John Doe',\n            type: variables.input?.type ?? 'PERSON',\n            confidence: 1,\n            properties: variables.input?.properties ?? {},\n          },\n        },\n      });\n      return;\n    }\n\n    if (query.includes('entity(')) {\n      res.json({\n        data: {\n          entity: {\n            id: variables.id ?? 'entity-123',\n            name: 'John Doe',\n            type: 'PERSON',\n            properties: { age: 30, location: 'New York' },\n          },\n        },\n      });\n      return;\n    }\n\n    if (query.includes('__schema')) {\n      res.json({ data: { __schema: { queryType: { name: 'Query' } } } });\n      return;\n    }\n\n    res.json({ data: {} });\n  });\n\n  return app;\n});\n\nmodule.exports = { createApp };\n"],"version":3}