{"file":"/Users/brianlong/Developer/summit/tests/integration/utils/graphqlClient.ts","mappings":"AAAA,MAAM,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AAEzC,KAAK,UAAU,mBAAmB,CAAC,GAAG;IACpC,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,sFAAsF;IAEhH,OAAO;QACL,KAAK,EAAE,KAAK,WAAU,OAAO,GAAG,EAAE;YAChC,MAAM,EAAE,KAAK,GAAG,EAAE,EAAE,SAAS,EAAE,GAAG,OAAO,CAAC;YAC1C,yFAAyF;YACzF,MAAM,WAAW,GAAG,KAAK,IAAI,mBAAmB,CAAC;YACjD,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,WAAW,EAAE,SAAS,EAAE,CAAC,CAAC;YAClF,OAAO;gBACL,MAAM,EAAE,GAAG,CAAC,MAAM;gBAClB,IAAI,EAAE,GAAG,CAAC,IAAI;gBACd,OAAO,EAAE,GAAG,CAAC,OAAO;aACrB,CAAC;QACJ,CAAC;QACD,MAAM,EAAE,KAAK,WAAU,OAAO,GAAG,EAAE;YACjC,MAAM,EAAE,KAAK,GAAG,EAAE,EAAE,SAAS,EAAE,GAAG,OAAO,CAAC;YAC1C,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC,CAAC;YACrE,OAAO;gBACL,MAAM,EAAE,GAAG,CAAC,MAAM;gBAClB,IAAI,EAAE,GAAG,CAAC,IAAI;gBACd,OAAO,EAAE,GAAG,CAAC,OAAO;aACrB,CAAC;QACJ,CAAC;QACD,KAAK,EAAE,KAAK;YACV,OAAO,SAAS,CAAC;QACnB,CAAC;KACF,CAAC;AACJ,CAAC;AAED,sCAAsC;AACtC,MAAM,CAAC,OAAO,GAAG,EAAE,mBAAmB,EAAE,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/tests/integration/utils/graphqlClient.ts"],"sourcesContent":["const { http } = require('./httpClient');\n\nasync function createGraphQLClient(app) {\n  const client = http(app); // Will work for both cases: app provided (in-process) or TEST_BASE_URL set (external)\n\n  return {\n    query: async function(options = {}) {\n      const { query = '', variables } = options;\n      // If no query is provided, use a default (for backward compatibility with existing test)\n      const actualQuery = query || '{ entity { id } }'; \n      const res = await client.post('/graphql').send({ query: actualQuery, variables });\n      return {\n        status: res.status,\n        body: res.body,\n        headers: res.headers,\n      };\n    },\n    mutate: async function(options = {}) {\n      const { query = '', variables } = options;\n      const res = await client.post('/graphql').send({ query, variables });\n      return {\n        status: res.status,\n        body: res.body,\n        headers: res.headers,\n      };\n    },\n    close: async function() {\n      return undefined;\n    },\n  };\n}\n\n// For ES module compatibility as well\nmodule.exports = { createGraphQLClient };\n"],"version":3}