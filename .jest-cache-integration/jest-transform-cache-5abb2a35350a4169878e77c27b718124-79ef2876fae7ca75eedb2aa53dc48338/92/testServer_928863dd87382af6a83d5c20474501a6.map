{"file":"/Users/brianlong/Developer/summit/tests/integration/utils/testServer.ts","mappings":";AAAA,wEAAwE;AACxE,wDAAwD;;AAExD,sCA+BC;AA/BM,KAAK,UAAU,aAAa;IACjC,kFAAkF;IAClF,OAAO;QACL,yCAAyC;QACzC,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;QACd,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;QACf,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;QACd,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,CAAC,KAAK,EAAE,QAAQ,EAAE,EAAE;YACvD,IAAI,QAAQ;gBAAE,QAAQ,EAAE,CAAC;YACzB,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC;QAC9B,CAAC,CAAC;QAEF,kFAAkF;QAClF,cAAc,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;YACnC,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,IAAI,IAAI,SAAS,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;QACpG,CAAC,CAAC;QAEF,SAAS,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;YAC9B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC,CAAC;QACtE,CAAC,CAAC;QAEF,UAAU,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;YAC/B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,KAAK,EAAE,GAAG,CAAC,MAAM,CAAC,KAAK;gBACvB,MAAM,EAAE,WAAW;gBACnB,WAAW,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;aACtC,CAAC,CAAC;QACL,CAAC,CAAC;QAEF,YAAY,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACjE,CAAC;AACJ,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/tests/integration/utils/testServer.ts"],"sourcesContent":["// Simple mock server for integration tests that doesn't rely on express\n// This avoids version conflicts between express 4 and 5\n\nexport async function createTestApp() {\n  // Return a simple mock app object that mimics the express API needed by supertest\n  return {\n    // Mock express methods used by supertest\n    use: jest.fn(),\n    post: jest.fn(),\n    get: jest.fn(),\n    listen: jest.fn().mockImplementation((_port, callback) => {\n      if (callback) callback();\n      return { close: jest.fn() };\n    }),\n    \n    // Mock the route handlers for the specific endpoints used in maestro_flow.test.ts\n    handleApiFlows: jest.fn((req, res) => {\n      return res.status(202).json({ id: 'flow_1', kind: req.body?.kind ?? 'maestro', state: 'queued' });\n    }),\n    \n    handleRun: jest.fn((req, res) => {\n      return res.status(202).json({ runId: 'run_1', status: 'ACCEPTED' });\n    }),\n    \n    handleRuns: jest.fn((req, res) => {\n      return res.status(200).json({ \n        runId: req.params.runId, \n        status: 'SUCCEEDED', \n        completedAt: new Date().toISOString() \n      });\n    }),\n    \n    handleHealth: jest.fn((_req, res) => res.status(200).send('ok'))\n  };\n}"],"version":3}