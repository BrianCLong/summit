{"file":"/Users/brianlong/Developer/summit/tests/integration/api.test.js","mappings":"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","names":[],"sources":["/Users/brianlong/Developer/summit/tests/integration/api.test.js"],"sourcesContent":["/**\n * IntelGraph API Integration Tests\n *\n * MIT License\n * Copyright (c) 2025 IntelGraph\n */\n\nconst request = require('supertest');\nconst { createApp } = require('../../services/api/src/app.js');\nconst { neo4jConnection } = require('../../services/api/src/db/neo4j.js');\nconst { postgresConnection } = require('../../services/api/src/db/postgres.js');\nconst { redisConnection } = require('../../services/api/src/db/redis.js');\n\ndescribe('IntelGraph API Integration Tests', () => {\n  let app;\n  let authToken;\n  const testTenantId = 'test-tenant-123';\n\n  beforeAll(async () => {\n    // Initialize test environment\n    process.env.NODE_ENV = 'test';\n    process.env.JWT_SECRET = 'test-secret-key';\n    process.env.OIDC_ISSUER = 'https://test.auth.com';\n\n    // Create application\n    app = await createApp();\n\n    // Setup test data and authentication\n    authToken = 'Bearer test-jwt-token';\n\n    // Clear test data\n    await clearTestData();\n  });\n\n  afterAll(async () => {\n    // Cleanup connections\n    await neo4jConnection.close();\n    await postgresConnection.close();\n    await redisConnection.close();\n  });\n\n  beforeEach(async () => {\n    // Reset test state before each test\n    await clearTestData();\n  });\n\n  async function clearTestData() {\n    try {\n      // Clear Neo4j test data\n      await neo4jConnection.executeQuery('MATCH (n {tenantId: $tenantId}) DETACH DELETE n', {\n        tenantId: testTenantId,\n      });\n\n      // Clear PostgreSQL test data\n      await postgresConnection.query('DELETE FROM entity_metadata WHERE tenant_id = $1', [\n        testTenantId,\n      ]);\n      await postgresConnection.query('DELETE FROM investigations WHERE tenant_id = $1', [\n        testTenantId,\n      ]);\n    } catch (error) {\n      console.error('Failed to clear test data:', error);\n    }\n  }\n\n  describe('Health Checks', () => {\n    test('GET /health should return service status', async () => {\n      const response = await request(app).get('/health').expect(200);\n\n      expect(response.body).toHaveProperty('status', 'healthy');\n      expect(response.body).toHaveProperty('timestamp');\n      expect(response.body).toHaveProperty('version');\n    });\n\n    test('GET /metrics should return monitoring data', async () => {\n      const response = await request(app).get('/metrics').expect(200);\n\n      expect(response.body).toHaveProperty('uptime');\n      expect(response.body).toHaveProperty('memory');\n      expect(response.body).toHaveProperty('timestamp');\n    });\n  });\n\n  describe('GraphQL API', () => {\n    test('should handle GraphQL queries', async () => {\n      const query = `\n        query {\n          __schema {\n            queryType {\n              name\n            }\n          }\n        }\n      `;\n\n      const response = await request(app)\n        .post('/graphql')\n        .set('Authorization', authToken)\n        .set('X-Tenant-ID', testTenantId)\n        .send({ query })\n        .expect(200);\n\n      expect(response.body).toHaveProperty('data');\n      expect(response.body.data.__schema.queryType.name).toBe('Query');\n    });\n\n    test('should create and query entities', async () => {\n      // Create entity mutation\n      const createMutation = `\n        mutation CreateEntity($input: CreateEntityInput!) {\n          createEntity(input: $input) {\n            id\n            name\n            type\n            confidence\n          }\n        }\n      `;\n\n      const entityInput = {\n        type: 'PERSON',\n        name: 'John Doe',\n        description: 'Test person',\n        properties: { age: 30, location: 'New York' },\n        sourceIds: [],\n      };\n\n      const createResponse = await request(app)\n        .post('/graphql')\n        .set('Authorization', authToken)\n        .set('X-Tenant-ID', testTenantId)\n        .send({\n          query: createMutation,\n          variables: { input: entityInput },\n        })\n        .expect(200);\n\n      expect(createResponse.body.data.createEntity).toMatchObject({\n        name: 'John Doe',\n        type: 'PERSON',\n        confidence: 1,\n      });\n\n      const entityId = createResponse.body.data.createEntity.id;\n\n      // Query entity\n      const queryEntity = `\n        query GetEntity($id: ID!) {\n          entity(id: $id) {\n            id\n            name\n            type\n            properties\n          }\n        }\n      `;\n\n      const queryResponse = await request(app)\n        .post('/graphql')\n        .set('Authorization', authToken)\n        .set('X-Tenant-ID', testTenantId)\n        .send({\n          query: queryEntity,\n          variables: { id: entityId },\n        })\n        .expect(200);\n\n      expect(queryResponse.body.data.entity).toMatchObject({\n        id: entityId,\n        name: 'John Doe',\n        type: 'PERSON',\n      });\n    });\n\n    test('should enforce tenant isolation', async () => {\n      const differentTenantId = 'different-tenant-456';\n\n      // Create entity in one tenant\n      const createMutation = `\n        mutation CreateEntity($input: CreateEntityInput!) {\n          createEntity(input: $input) {\n            id\n            name\n          }\n        }\n      `;\n\n      const entityInput = {\n        type: 'ORGANIZATION',\n        name: 'Secret Corp',\n        sourceIds: [],\n      };\n\n      const createResponse = await request(app)\n        .post('/graphql')\n        .set('Authorization', authToken)\n        .set('X-Tenant-ID', testTenantId)\n        .send({\n          query: createMutation,\n          variables: { input: entityInput },\n        })\n        .expect(200);\n\n      const entityId = createResponse.body.data.createEntity.id;\n\n      // Try to query from different tenant\n      const queryEntity = `\n        query GetEntity($id: ID!) {\n          entity(id: $id) {\n            id\n            name\n          }\n        }\n      `;\n\n      const queryResponse = await request(app)\n        .post('/graphql')\n        .set('Authorization', authToken)\n        .set('X-Tenant-ID', differentTenantId)\n        .send({\n          query: queryEntity,\n          variables: { id: entityId },\n        })\n        .expect(200);\n\n      // Should not find entity from different tenant\n      expect(queryResponse.body.data.entity).toBeNull();\n    });\n  });\n\n  describe('Real-time Features', () => {\n    test('should handle WebSocket connections', (done) => {\n      const io = require('socket.io-client');\n      const client = io('http://localhost:4000', {\n        auth: {\n          token: 'test-token',\n        },\n      });\n\n      client.on('connect', () => {\n        client.emit('investigation:join', 'test-investigation-123');\n      });\n\n      client.on('investigation:state', (state) => {\n        expect(state).toHaveProperty('investigation');\n        expect(state).toHaveProperty('timestamp');\n        client.disconnect();\n        done();\n      });\n\n      client.on('connect_error', (error) => {\n        console.error('Socket connection error:', error);\n        done(error);\n      });\n    });\n  });\n\n  describe('Authentication & Authorization', () => {\n    test('should reject requests without authentication', async () => {\n      const query = `\n        query {\n          entities {\n            id\n            name\n          }\n        }\n      `;\n\n      await request(app).post('/graphql').send({ query }).expect(401);\n    });\n\n    test('should enforce role-based permissions', async () => {\n      const restrictedMutation = `\n        mutation DeleteEntity($id: ID!) {\n          deleteEntity(id: $id)\n        }\n      `;\n\n      // Mock viewer role token (should not have delete permissions)\n      const viewerToken = 'Bearer viewer-jwt-token';\n\n      await request(app)\n        .post('/graphql')\n        .set('Authorization', viewerToken)\n        .set('X-Tenant-ID', testTenantId)\n        .send({\n          query: restrictedMutation,\n          variables: { id: 'test-entity-id' },\n        })\n        .expect(403);\n    });\n  });\n\n  describe('Performance & Reliability', () => {\n    test('should handle concurrent requests', async () => {\n      const query = `\n        query {\n          entities(limit: 10) {\n            id\n            name\n            type\n          }\n        }\n      `;\n\n      // Create multiple concurrent requests\n      const requests = Array.from({ length: 10 }, () =>\n        request(app)\n          .post('/graphql')\n          .set('Authorization', authToken)\n          .set('X-Tenant-ID', testTenantId)\n          .send({ query }),\n      );\n\n      const responses = await Promise.all(requests);\n\n      // All requests should succeed\n      responses.forEach((response) => {\n        expect(response.status).toBe(200);\n        expect(response.body).toHaveProperty('data');\n      });\n    });\n\n    test('should handle malformed GraphQL queries gracefully', async () => {\n      const malformedQuery = `\n        query {\n          entities {\n            id\n            nonExistentField\n            invalidNesting {\n              anotherInvalidField\n            }\n          }\n        }\n      `;\n\n      const response = await request(app)\n        .post('/graphql')\n        .set('Authorization', authToken)\n        .set('X-Tenant-ID', testTenantId)\n        .send({ query: malformedQuery })\n        .expect(400);\n\n      expect(response.body).toHaveProperty('errors');\n      expect(response.body.errors).toHaveLength(1);\n      expect(response.body.errors[0]).toHaveProperty('message');\n    });\n  });\n\n  describe('Data Validation', () => {\n    test('should validate entity input data', async () => {\n      const createMutation = `\n        mutation CreateEntity($input: CreateEntityInput!) {\n          createEntity(input: $input) {\n            id\n            name\n            type\n          }\n        }\n      `;\n\n      // Invalid entity type\n      const invalidInput = {\n        type: 'INVALID_TYPE',\n        name: 'Test Entity',\n        sourceIds: [],\n      };\n\n      const response = await request(app)\n        .post('/graphql')\n        .set('Authorization', authToken)\n        .set('X-Tenant-ID', testTenantId)\n        .send({\n          query: createMutation,\n          variables: { input: invalidInput },\n        })\n        .expect(400);\n\n      expect(response.body).toHaveProperty('errors');\n    });\n\n    test('should validate confidence scores', async () => {\n      const createMutation = `\n        mutation CreateEntity($input: CreateEntityInput!) {\n          createEntity(input: $input) {\n            id\n            confidence\n          }\n        }\n      `;\n\n      // Invalid confidence score (> 1.0)\n      const invalidInput = {\n        type: 'PERSON',\n        name: 'Test Person',\n        confidence: 1.5,\n        sourceIds: [],\n      };\n\n      const response = await request(app)\n        .post('/graphql')\n        .set('Authorization', authToken)\n        .set('X-Tenant-ID', testTenantId)\n        .send({\n          query: createMutation,\n          variables: { input: invalidInput },\n        })\n        .expect(400);\n\n      expect(response.body).toHaveProperty('errors');\n    });\n  });\n\n  describe('Analytics Integration', () => {\n    test('should perform pathfinding between entities', async () => {\n      // First create two entities and a relationship\n      const createEntityMutation = `\n        mutation CreateEntity($input: CreateEntityInput!) {\n          createEntity(input: $input) {\n            id\n          }\n        }\n      `;\n\n      const entity1Response = await request(app)\n        .post('/graphql')\n        .set('Authorization', authToken)\n        .set('X-Tenant-ID', testTenantId)\n        .send({\n          query: createEntityMutation,\n          variables: {\n            input: {\n              type: 'PERSON',\n              name: 'Alice',\n              sourceIds: [],\n            },\n          },\n        })\n        .expect(200);\n\n      const entity2Response = await request(app)\n        .post('/graphql')\n        .set('Authorization', authToken)\n        .set('X-Tenant-ID', testTenantId)\n        .send({\n          query: createEntityMutation,\n          variables: {\n            input: {\n              type: 'PERSON',\n              name: 'Bob',\n              sourceIds: [],\n            },\n          },\n        })\n        .expect(200);\n\n      const entity1Id = entity1Response.body.data.createEntity.id;\n      const entity2Id = entity2Response.body.data.createEntity.id;\n\n      // Create relationship\n      const createRelationshipMutation = `\n        mutation CreateRelationship($input: CreateRelationshipInput!) {\n          createRelationship(input: $input) {\n            id\n          }\n        }\n      `;\n\n      await request(app)\n        .post('/graphql')\n        .set('Authorization', authToken)\n        .set('X-Tenant-ID', testTenantId)\n        .send({\n          query: createRelationshipMutation,\n          variables: {\n            input: {\n              type: 'CONNECTED_TO',\n              sourceId: entity1Id,\n              targetId: entity2Id,\n              sourceIds: [],\n            },\n          },\n        })\n        .expect(200);\n\n      // Test pathfinding\n      const pathfindingQuery = `\n        query FindPaths($input: PathfindingInput!) {\n          findPaths(input: $input) {\n            paths {\n              length\n              nodes {\n                id\n                name\n              }\n            }\n            totalPaths\n          }\n        }\n      `;\n\n      const pathResponse = await request(app)\n        .post('/graphql')\n        .set('Authorization', authToken)\n        .set('X-Tenant-ID', testTenantId)\n        .send({\n          query: pathfindingQuery,\n          variables: {\n            input: {\n              sourceId: entity1Id,\n              targetId: entity2Id,\n              algorithm: 'SHORTEST_PATH',\n            },\n          },\n        })\n        .expect(200);\n\n      expect(pathResponse.body.data.findPaths.paths).toHaveLength(1);\n      expect(pathResponse.body.data.findPaths.paths[0].length).toBe(1);\n    });\n  });\n});\n"],"version":3}