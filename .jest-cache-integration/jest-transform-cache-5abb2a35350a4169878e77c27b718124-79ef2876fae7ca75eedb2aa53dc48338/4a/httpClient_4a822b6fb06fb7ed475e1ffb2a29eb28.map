{"file":"/Users/brianlong/Developer/summit/tests/integration/utils/httpClient.ts","mappings":"AAAA,MAAM,OAAO,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AAErC,SAAS,IAAI,CAAC,GAAG;IACf,IAAI,GAAG;QAAE,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,iBAAiB;IAC/C,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAoB,2BAA2B;IACtF,IAAI,CAAC,IAAI,EAAE,CAAC;QACV,uFAAuF;QACvF,6EAA6E;QAC7E,OAAO;YACL,IAAI,EAAE,UAAS,IAAI;gBACjB,yDAAyD;gBACzD,IAAI,IAAI,KAAK,UAAU,EAAE,CAAC;oBACxB,OAAO;wBACL,IAAI,EAAE,KAAK,WAAU,IAAI;4BACvB,uDAAuD;4BACvD,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;gCACxD,OAAO;oCACL,MAAM,EAAE,GAAG;oCACX,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,yBAAyB;oCAC3D,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;iCAChD,CAAC;4BACJ,CAAC;iCAAM,CAAC;gCACN,OAAO;oCACL,MAAM,EAAE,GAAG;oCACX,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,EAAE,EAAE,mBAAmB;oCACnE,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;iCAChD,CAAC;4BACJ,CAAC;wBACH,CAAC;qBACF,CAAC;gBACJ,CAAC;gBACD,yCAAyC;gBACzC,OAAO;oBACL,IAAI,EAAE,KAAK,WAAU,IAAI;wBACvB,OAAO;4BACL,MAAM,EAAE,GAAG;4BACX,IAAI,EAAE,EAAE;4BACR,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;yBAChD,CAAC;oBACJ,CAAC;iBACF,CAAC;YACJ,CAAC;YACD,GAAG,EAAE,UAAS,IAAI;gBAChB,OAAO;oBACL,IAAI,EAAE,KAAK;wBACT,OAAO;4BACL,MAAM,EAAE,GAAG;4BACX,IAAI,EAAE,EAAE;4BACR,OAAO,EAAE,EAAE;yBACZ,CAAC;oBACJ,CAAC;iBACF,CAAC;YACJ,CAAC;SACF,CAAC;IACJ,CAAC;IACD,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC;AACvB,CAAC;AAED,MAAM,CAAC,OAAO,GAAG,EAAE,IAAI,EAAE,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/tests/integration/utils/httpClient.ts"],"sourcesContent":["const request = require('supertest');\n\nfunction http(app) {\n  if (app) return request(app); // in-process app\n  const base = process.env.TEST_BASE_URL;                    // external server (opt-in)\n  if (!base) {\n    // Return a mock client that simulates the expected behavior for backward compatibility\n    // This maintains compatibility with existing tests that don't provide an app\n    return {\n      post: function(path) {\n        // Return a mock request-like object for GraphQL endpoint\n        if (path === '/graphql') {\n          return {\n            send: async function(data) {\n              // Simulate GraphQL response for backward compatibility\n              if (data && data.query && data.query.includes('entity')) {\n                return {\n                  status: 200,\n                  body: { data: { entity: null } }, // Match original default\n                  headers: { 'content-type': 'application/json' }\n                };\n              } else {\n                return {\n                  status: 200,\n                  body: { data: { ok: true, version: '1.0.0' } }, // Default response\n                  headers: { 'content-type': 'application/json' }\n                };\n              }\n            }\n          };\n        }\n        // For other paths, return a generic mock\n        return {\n          send: async function(data) {\n            return {\n              status: 200,\n              body: {},\n              headers: { 'content-type': 'application/json' }\n            };\n          }\n        };\n      },\n      get: function(path) {\n        return {\n          send: async function() {\n            return {\n              status: 200,\n              body: {},\n              headers: {}\n            };\n          }\n        };\n      }\n    };\n  }\n  return request(base);\n}\n\nmodule.exports = { http };"],"version":3}