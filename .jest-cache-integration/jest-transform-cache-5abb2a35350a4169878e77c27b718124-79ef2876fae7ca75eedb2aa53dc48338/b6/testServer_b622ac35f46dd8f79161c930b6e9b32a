f32b9a988945cdf3866475a643e537f4
"use strict";
// Simple test server that creates a minimal express app for integration tests
// Working around express version conflicts between express 4 and 5
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTestApp = createTestApp;
// Mock express to avoid version conflicts
const mockExpress = () => {
    const app = {
        use: jest.fn().mockReturnThis(),
        post: jest.fn().mockReturnThis(),
        get: jest.fn().mockReturnThis(),
        listen: jest.fn().mockImplementation((port, callback) => {
            if (callback)
                callback();
            return { close: jest.fn() };
        }),
        address: jest.fn(() => ({ port: 4000, family: 'IPv4', address: '127.0.0.1' })),
        _routes: {},
        _middleware: []
    };
    // Mock the route registration methods
    app.post.mockImplementation((path, handler) => {
        app._routes[path] = handler;
        return app;
    });
    app.get.mockImplementation((path, handler) => {
        app._routes[path] = handler;
        return app;
    });
    app.use.mockImplementation((middleware) => {
        app._middleware.push(middleware);
        return app;
    });
    return app;
};
// Mock express.json() middleware
mockExpress.json = () => jest.fn();
async function createTestApp() {
    const app = mockExpress();
    app.use(mockExpress.json());
    // Minimal stub routes needed by maestro_flow.test.ts
    app.post('/api/flows', (req, res) => {
        // return 202 Accepted to simulate async orchestration kickoff
        return res.status(202).json({ id: 'flow_1', kind: req.body?.kind ?? 'maestro', state: 'queued' });
    });
    app.post('/run', (req, res) => {
        // For maestro_flow.test.ts compatibility
        return res.status(202).json({ runId: 'run_1', status: 'ACCEPTED' });
    });
    app.get('/runs/:runId', (req, res) => {
        // For maestro_flow.test.ts status checking
        return res.status(200).json({
            runId: req.params.runId,
            status: 'SUCCEEDED',
            completedAt: new Date().toISOString()
        });
    });
    app.get('/__health', (_req, res) => res.status(200).send('ok'));
    // Return the app directly (supertest can use it without listening)
    return app;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3Rlc3RzL2ludGVncmF0aW9uL3V0aWxzL3Rlc3RTZXJ2ZXIudHMiLCJtYXBwaW5ncyI6IjtBQUFBLDhFQUE4RTtBQUM5RSxtRUFBbUU7O0FBdUNuRSxzQ0E0QkM7QUFqRUQsMENBQTBDO0FBQzFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsRUFBRTtJQUN2QixNQUFNLEdBQUcsR0FBUTtRQUNmLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsY0FBYyxFQUFFO1FBQy9CLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsY0FBYyxFQUFFO1FBQ2hDLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsY0FBYyxFQUFFO1FBQy9CLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLEVBQUU7WUFDdEQsSUFBSSxRQUFRO2dCQUFFLFFBQVEsRUFBRSxDQUFDO1lBQ3pCLE9BQU8sRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7UUFDOUIsQ0FBQyxDQUFDO1FBQ0YsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQztRQUM5RSxPQUFPLEVBQUUsRUFBRTtRQUNYLFdBQVcsRUFBRSxFQUFFO0tBQ2hCLENBQUM7SUFFRixzQ0FBc0M7SUFDdEMsR0FBRyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsRUFBRTtRQUM1QyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQztRQUM1QixPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUMsQ0FBQyxDQUFDO0lBRUgsR0FBRyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsRUFBRTtRQUMzQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQztRQUM1QixPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUMsQ0FBQyxDQUFDO0lBRUgsR0FBRyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFFO1FBQ3hDLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2pDLE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUMsQ0FBQztBQUVGLGlDQUFpQztBQUNqQyxXQUFXLENBQUMsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQztBQUU1QixLQUFLLFVBQVUsYUFBYTtJQUNqQyxNQUFNLEdBQUcsR0FBRyxXQUFXLEVBQUUsQ0FBQztJQUMxQixHQUFHLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBRTVCLHFEQUFxRDtJQUNyRCxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLEdBQVEsRUFBRSxHQUFRLEVBQUUsRUFBRTtRQUM1Qyw4REFBOEQ7UUFDOUQsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxJQUFJLFNBQVMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUNwRyxDQUFDLENBQUMsQ0FBQztJQUVILEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBUSxFQUFFLEdBQVEsRUFBRSxFQUFFO1FBQ3RDLHlDQUF5QztRQUN6QyxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztJQUN0RSxDQUFDLENBQUMsQ0FBQztJQUVILEdBQUcsQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLENBQUMsR0FBUSxFQUFFLEdBQVEsRUFBRSxFQUFFO1FBQzdDLDJDQUEyQztRQUMzQyxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQzFCLEtBQUssRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUs7WUFDdkIsTUFBTSxFQUFFLFdBQVc7WUFDbkIsV0FBVyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFO1NBQ3RDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsR0FBRyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFTLEVBQUUsR0FBUSxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBRTFFLG1FQUFtRTtJQUNuRSxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3Rlc3RzL2ludGVncmF0aW9uL3V0aWxzL3Rlc3RTZXJ2ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU2ltcGxlIHRlc3Qgc2VydmVyIHRoYXQgY3JlYXRlcyBhIG1pbmltYWwgZXhwcmVzcyBhcHAgZm9yIGludGVncmF0aW9uIHRlc3RzXG4vLyBXb3JraW5nIGFyb3VuZCBleHByZXNzIHZlcnNpb24gY29uZmxpY3RzIGJldHdlZW4gZXhwcmVzcyA0IGFuZCA1XG5cbi8vIE1vY2sgZXhwcmVzcyB0byBhdm9pZCB2ZXJzaW9uIGNvbmZsaWN0c1xuY29uc3QgbW9ja0V4cHJlc3MgPSAoKSA9PiB7XG4gIGNvbnN0IGFwcDogYW55ID0ge1xuICAgIHVzZTogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXG4gICAgcG9zdDogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXG4gICAgZ2V0OiBqZXN0LmZuKCkubW9ja1JldHVyblRoaXMoKSxcbiAgICBsaXN0ZW46IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKHBvcnQsIGNhbGxiYWNrKSA9PiB7XG4gICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKCk7XG4gICAgICByZXR1cm4geyBjbG9zZTogamVzdC5mbigpIH07XG4gICAgfSksXG4gICAgYWRkcmVzczogamVzdC5mbigoKSA9PiAoeyBwb3J0OiA0MDAwLCBmYW1pbHk6ICdJUHY0JywgYWRkcmVzczogJzEyNy4wLjAuMScgfSkpLFxuICAgIF9yb3V0ZXM6IHt9LFxuICAgIF9taWRkbGV3YXJlOiBbXVxuICB9O1xuICBcbiAgLy8gTW9jayB0aGUgcm91dGUgcmVnaXN0cmF0aW9uIG1ldGhvZHNcbiAgYXBwLnBvc3QubW9ja0ltcGxlbWVudGF0aW9uKChwYXRoLCBoYW5kbGVyKSA9PiB7XG4gICAgYXBwLl9yb3V0ZXNbcGF0aF0gPSBoYW5kbGVyO1xuICAgIHJldHVybiBhcHA7XG4gIH0pO1xuICBcbiAgYXBwLmdldC5tb2NrSW1wbGVtZW50YXRpb24oKHBhdGgsIGhhbmRsZXIpID0+IHtcbiAgICBhcHAuX3JvdXRlc1twYXRoXSA9IGhhbmRsZXI7XG4gICAgcmV0dXJuIGFwcDtcbiAgfSk7XG4gIFxuICBhcHAudXNlLm1vY2tJbXBsZW1lbnRhdGlvbigobWlkZGxld2FyZSkgPT4ge1xuICAgIGFwcC5fbWlkZGxld2FyZS5wdXNoKG1pZGRsZXdhcmUpO1xuICAgIHJldHVybiBhcHA7XG4gIH0pO1xuICBcbiAgcmV0dXJuIGFwcDtcbn07XG5cbi8vIE1vY2sgZXhwcmVzcy5qc29uKCkgbWlkZGxld2FyZVxubW9ja0V4cHJlc3MuanNvbiA9ICgpID0+IGplc3QuZm4oKTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVRlc3RBcHAoKSB7XG4gIGNvbnN0IGFwcCA9IG1vY2tFeHByZXNzKCk7XG4gIGFwcC51c2UobW9ja0V4cHJlc3MuanNvbigpKTtcbiAgXG4gIC8vIE1pbmltYWwgc3R1YiByb3V0ZXMgbmVlZGVkIGJ5IG1hZXN0cm9fZmxvdy50ZXN0LnRzXG4gIGFwcC5wb3N0KCcvYXBpL2Zsb3dzJywgKHJlcTogYW55LCByZXM6IGFueSkgPT4ge1xuICAgIC8vIHJldHVybiAyMDIgQWNjZXB0ZWQgdG8gc2ltdWxhdGUgYXN5bmMgb3JjaGVzdHJhdGlvbiBraWNrb2ZmXG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAyKS5qc29uKHsgaWQ6ICdmbG93XzEnLCBraW5kOiByZXEuYm9keT8ua2luZCA/PyAnbWFlc3RybycsIHN0YXRlOiAncXVldWVkJyB9KTtcbiAgfSk7XG5cbiAgYXBwLnBvc3QoJy9ydW4nLCAocmVxOiBhbnksIHJlczogYW55KSA9PiB7XG4gICAgLy8gRm9yIG1hZXN0cm9fZmxvdy50ZXN0LnRzIGNvbXBhdGliaWxpdHlcbiAgICByZXR1cm4gcmVzLnN0YXR1cygyMDIpLmpzb24oeyBydW5JZDogJ3J1bl8xJywgc3RhdHVzOiAnQUNDRVBURUQnIH0pO1xuICB9KTtcblxuICBhcHAuZ2V0KCcvcnVucy86cnVuSWQnLCAocmVxOiBhbnksIHJlczogYW55KSA9PiB7XG4gICAgLy8gRm9yIG1hZXN0cm9fZmxvdy50ZXN0LnRzIHN0YXR1cyBjaGVja2luZ1xuICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbih7IFxuICAgICAgcnVuSWQ6IHJlcS5wYXJhbXMucnVuSWQsIFxuICAgICAgc3RhdHVzOiAnU1VDQ0VFREVEJywgXG4gICAgICBjb21wbGV0ZWRBdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpIFxuICAgIH0pO1xuICB9KTtcblxuICBhcHAuZ2V0KCcvX19oZWFsdGgnLCAoX3JlcTogYW55LCByZXM6IGFueSkgPT4gcmVzLnN0YXR1cygyMDApLnNlbmQoJ29rJykpO1xuICBcbiAgLy8gUmV0dXJuIHRoZSBhcHAgZGlyZWN0bHkgKHN1cGVydGVzdCBjYW4gdXNlIGl0IHdpdGhvdXQgbGlzdGVuaW5nKVxuICByZXR1cm4gYXBwO1xufSJdLCJ2ZXJzaW9uIjozfQ==