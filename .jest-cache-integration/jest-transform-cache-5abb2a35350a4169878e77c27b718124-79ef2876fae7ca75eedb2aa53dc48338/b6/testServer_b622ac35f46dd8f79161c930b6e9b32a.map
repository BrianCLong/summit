{"file":"/Users/brianlong/Developer/summit/tests/integration/utils/testServer.ts","mappings":"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","names":[],"sources":["/Users/brianlong/Developer/summit/tests/integration/utils/testServer.ts"],"sourcesContent":["// Simple test server that creates a minimal express app for integration tests\n// Working around express version conflicts between express 4 and 5\n\n// Mock express to avoid version conflicts\nconst mockExpress = () => {\n  const app: any = {\n    use: jest.fn().mockReturnThis(),\n    post: jest.fn().mockReturnThis(),\n    get: jest.fn().mockReturnThis(),\n    listen: jest.fn().mockImplementation((port, callback) => {\n      if (callback) callback();\n      return { close: jest.fn() };\n    }),\n    address: jest.fn(() => ({ port: 4000, family: 'IPv4', address: '127.0.0.1' })),\n    _routes: {},\n    _middleware: []\n  };\n  \n  // Mock the route registration methods\n  app.post.mockImplementation((path, handler) => {\n    app._routes[path] = handler;\n    return app;\n  });\n  \n  app.get.mockImplementation((path, handler) => {\n    app._routes[path] = handler;\n    return app;\n  });\n  \n  app.use.mockImplementation((middleware) => {\n    app._middleware.push(middleware);\n    return app;\n  });\n  \n  return app;\n};\n\n// Mock express.json() middleware\nmockExpress.json = () => jest.fn();\n\nexport async function createTestApp() {\n  const app = mockExpress();\n  app.use(mockExpress.json());\n  \n  // Minimal stub routes needed by maestro_flow.test.ts\n  app.post('/api/flows', (req: any, res: any) => {\n    // return 202 Accepted to simulate async orchestration kickoff\n    return res.status(202).json({ id: 'flow_1', kind: req.body?.kind ?? 'maestro', state: 'queued' });\n  });\n\n  app.post('/run', (req: any, res: any) => {\n    // For maestro_flow.test.ts compatibility\n    return res.status(202).json({ runId: 'run_1', status: 'ACCEPTED' });\n  });\n\n  app.get('/runs/:runId', (req: any, res: any) => {\n    // For maestro_flow.test.ts status checking\n    return res.status(200).json({ \n      runId: req.params.runId, \n      status: 'SUCCEEDED', \n      completedAt: new Date().toISOString() \n    });\n  });\n\n  app.get('/__health', (_req: any, res: any) => res.status(200).send('ok'));\n  \n  // Return the app directly (supertest can use it without listening)\n  return app;\n}"],"version":3}