30dbbe77ae3fc624a7d08ee240493908
// Mock for services/api - returns consistent response format with status codes
const createClientMock = jest.fn(() => ({
    get: jest.fn(async (params) => {
        // Default response for GET requests
        return {
            status: 200,
            data: {
                message: 'success',
                timestamp: new Date().toISOString(),
                method: 'GET',
                path: params?.path || '/default'
            }
        };
    }),
    post: jest.fn(async (params) => {
        // Default response for POST requests
        return {
            status: 202,
            data: {
                message: 'accepted',
                timestamp: new Date().toISOString(),
                method: 'POST',
                path: params?.path || '/default',
                body: params?.body || {}
            }
        };
    }),
    put: jest.fn(async (params) => {
        // Default response for PUT requests
        return {
            status: 200,
            data: {
                message: 'updated',
                timestamp: new Date().toISOString(),
                method: 'PUT',
                path: params?.path || '/default',
                body: params?.body || {}
            }
        };
    }),
    delete: jest.fn(async (params) => {
        // Default response for DELETE requests
        return {
            status: 204,
            data: {
                message: 'deleted',
                timestamp: new Date().toISOString(),
                method: 'DELETE',
                path: params?.path || '/default'
            }
        };
    }),
}));
// For CommonJS compatibility
module.exports = { createClient: createClientMock };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3Rlc3RzL2ludGVncmF0aW9uL19fbW9ja3NfXy9zZXJ2aWNlcy1hcGkudHMiLCJtYXBwaW5ncyI6IkFBQUEsK0VBQStFO0FBQy9FLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ3RDLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxNQUFZLEVBQUUsRUFBRTtRQUNsQyxvQ0FBb0M7UUFDcEMsT0FBTztZQUNMLE1BQU0sRUFBRSxHQUFHO1lBQ1gsSUFBSSxFQUFFO2dCQUNKLE9BQU8sRUFBRSxTQUFTO2dCQUNsQixTQUFTLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUU7Z0JBQ25DLE1BQU0sRUFBRSxLQUFLO2dCQUNiLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxJQUFJLFVBQVU7YUFDakM7U0FDRixDQUFDO0lBQ0osQ0FBQyxDQUFDO0lBQ0YsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLE1BQVksRUFBRSxFQUFFO1FBQ25DLHFDQUFxQztRQUNyQyxPQUFPO1lBQ0wsTUFBTSxFQUFFLEdBQUc7WUFDWCxJQUFJLEVBQUU7Z0JBQ0osT0FBTyxFQUFFLFVBQVU7Z0JBQ25CLFNBQVMsRUFBRSxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRTtnQkFDbkMsTUFBTSxFQUFFLE1BQU07Z0JBQ2QsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLElBQUksVUFBVTtnQkFDaEMsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLElBQUksRUFBRTthQUN6QjtTQUNGLENBQUM7SUFDSixDQUFDLENBQUM7SUFDRixHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsTUFBWSxFQUFFLEVBQUU7UUFDbEMsb0NBQW9DO1FBQ3BDLE9BQU87WUFDTCxNQUFNLEVBQUUsR0FBRztZQUNYLElBQUksRUFBRTtnQkFDSixPQUFPLEVBQUUsU0FBUztnQkFDbEIsU0FBUyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFO2dCQUNuQyxNQUFNLEVBQUUsS0FBSztnQkFDYixJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksSUFBSSxVQUFVO2dCQUNoQyxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksSUFBSSxFQUFFO2FBQ3pCO1NBQ0YsQ0FBQztJQUNKLENBQUMsQ0FBQztJQUNGLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxNQUFZLEVBQUUsRUFBRTtRQUNyQyx1Q0FBdUM7UUFDdkMsT0FBTztZQUNMLE1BQU0sRUFBRSxHQUFHO1lBQ1gsSUFBSSxFQUFFO2dCQUNKLE9BQU8sRUFBRSxTQUFTO2dCQUNsQixTQUFTLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUU7Z0JBQ25DLE1BQU0sRUFBRSxRQUFRO2dCQUNoQixJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksSUFBSSxVQUFVO2FBQ2pDO1NBQ0YsQ0FBQztJQUNKLENBQUMsQ0FBQztDQUNILENBQUMsQ0FBQyxDQUFDO0FBRUosNkJBQTZCO0FBQzdCLE1BQU0sQ0FBQyxPQUFPLEdBQUcsRUFBRSxZQUFZLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvYnJpYW5sb25nL0RldmVsb3Blci9zdW1taXQvdGVzdHMvaW50ZWdyYXRpb24vX19tb2Nrc19fL3NlcnZpY2VzLWFwaS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNb2NrIGZvciBzZXJ2aWNlcy9hcGkgLSByZXR1cm5zIGNvbnNpc3RlbnQgcmVzcG9uc2UgZm9ybWF0IHdpdGggc3RhdHVzIGNvZGVzXG5jb25zdCBjcmVhdGVDbGllbnRNb2NrID0gamVzdC5mbigoKSA9PiAoe1xuICBnZXQ6IGplc3QuZm4oYXN5bmMgKHBhcmFtcz86IGFueSkgPT4ge1xuICAgIC8vIERlZmF1bHQgcmVzcG9uc2UgZm9yIEdFVCByZXF1ZXN0c1xuICAgIHJldHVybiB7IFxuICAgICAgc3RhdHVzOiAyMDAsIFxuICAgICAgZGF0YTogeyBcbiAgICAgICAgbWVzc2FnZTogJ3N1Y2Nlc3MnLCBcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgIHBhdGg6IHBhcmFtcz8ucGF0aCB8fCAnL2RlZmF1bHQnXG4gICAgICB9IFxuICAgIH07XG4gIH0pLFxuICBwb3N0OiBqZXN0LmZuKGFzeW5jIChwYXJhbXM/OiBhbnkpID0+IHtcbiAgICAvLyBEZWZhdWx0IHJlc3BvbnNlIGZvciBQT1NUIHJlcXVlc3RzXG4gICAgcmV0dXJuIHsgXG4gICAgICBzdGF0dXM6IDIwMiwgXG4gICAgICBkYXRhOiB7IFxuICAgICAgICBtZXNzYWdlOiAnYWNjZXB0ZWQnLCBcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBwYXRoOiBwYXJhbXM/LnBhdGggfHwgJy9kZWZhdWx0JyxcbiAgICAgICAgYm9keTogcGFyYW1zPy5ib2R5IHx8IHt9XG4gICAgICB9IFxuICAgIH07XG4gIH0pLFxuICBwdXQ6IGplc3QuZm4oYXN5bmMgKHBhcmFtcz86IGFueSkgPT4ge1xuICAgIC8vIERlZmF1bHQgcmVzcG9uc2UgZm9yIFBVVCByZXF1ZXN0c1xuICAgIHJldHVybiB7IFxuICAgICAgc3RhdHVzOiAyMDAsIFxuICAgICAgZGF0YTogeyBcbiAgICAgICAgbWVzc2FnZTogJ3VwZGF0ZWQnLCBcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIG1ldGhvZDogJ1BVVCcsXG4gICAgICAgIHBhdGg6IHBhcmFtcz8ucGF0aCB8fCAnL2RlZmF1bHQnLFxuICAgICAgICBib2R5OiBwYXJhbXM/LmJvZHkgfHwge31cbiAgICAgIH0gXG4gICAgfTtcbiAgfSksXG4gIGRlbGV0ZTogamVzdC5mbihhc3luYyAocGFyYW1zPzogYW55KSA9PiB7XG4gICAgLy8gRGVmYXVsdCByZXNwb25zZSBmb3IgREVMRVRFIHJlcXVlc3RzXG4gICAgcmV0dXJuIHsgXG4gICAgICBzdGF0dXM6IDIwNCwgXG4gICAgICBkYXRhOiB7IFxuICAgICAgICBtZXNzYWdlOiAnZGVsZXRlZCcsIFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgbWV0aG9kOiAnREVMRVRFJyxcbiAgICAgICAgcGF0aDogcGFyYW1zPy5wYXRoIHx8ICcvZGVmYXVsdCdcbiAgICAgIH0gXG4gICAgfTtcbiAgfSksXG59KSk7XG5cbi8vIEZvciBDb21tb25KUyBjb21wYXRpYmlsaXR5XG5tb2R1bGUuZXhwb3J0cyA9IHsgY3JlYXRlQ2xpZW50OiBjcmVhdGVDbGllbnRNb2NrIH07Il0sInZlcnNpb24iOjN9