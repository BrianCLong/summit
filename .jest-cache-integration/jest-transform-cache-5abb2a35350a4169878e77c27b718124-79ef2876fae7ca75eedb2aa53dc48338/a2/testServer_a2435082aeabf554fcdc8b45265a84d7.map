{"file":"/Users/brianlong/Developer/summit/tests/integration/utils/testServer.ts","mappings":";;;;;AAEA,sCAsCC;AAxCD,sDAA8B,CAAC,mCAAmC;AAE3D,KAAK,UAAU,aAAa;IACjC,MAAM,GAAG,GAAG,IAAA,iBAAO,GAAE,CAAC;IACtB,GAAG,CAAC,GAAG,CAAC,iBAAO,CAAC,IAAI,EAAE,CAAC,CAAC;IAIxB,MAAM,KAAK,GAAG,IAAI,GAAG,EAA0D,CAAC;IAChF,IAAI,GAAG,GAAG,CAAC,CAAC;IAEZ,kDAAkD;IAClD,GAAG,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QAClC,MAAM,EAAE,GAAG,KAAK,EAAE,GAAG,EAAE,CAAC;QACxB,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,IAAI,IAAI,SAAS,CAAC;QACzC,MAAM,GAAG,GAAG,EAAE,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,QAAqB,EAAE,CAAC;QACvD,KAAK,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;QACnB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACnC,CAAC,CAAC,CAAC;IAEH,4DAA4D;IAC5D,gCAAgC;IAChC,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE;QAChC,KAAK,MAAM,GAAG,IAAI,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC;YACjC,IAAI,GAAG,CAAC,KAAK,KAAK,QAAQ;gBAAE,GAAG,CAAC,KAAK,GAAG,SAAS,CAAC;iBAC7C,IAAI,GAAG,CAAC,KAAK,KAAK,SAAS;gBAAE,GAAG,CAAC,KAAK,GAAG,UAAU,CAAC;QAC3D,CAAC;QACD,OAAO,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;IAEH,gCAAgC;IAChC,GAAG,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QACrC,MAAM,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QACrC,IAAI,CAAC,GAAG;YAAE,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC,CAAC;QAC9D,OAAO,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,GAAG,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAEhE,OAAO,GAAG,CAAC,CAAC,sDAAsD;AACpE,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/tests/integration/utils/testServer.ts"],"sourcesContent":["import express from 'express'; // requires \"esModuleInterop\": true\n\nexport async function createTestApp() {\n  const app = express();\n  app.use(express.json());\n\n  // --- Minimal in-memory flow engine for tests --- //\n  type FlowState = 'queued' | 'running' | 'complete';\n  const flows = new Map<string, { id: string; kind: string; state: FlowState }>();\n  let seq = 0;\n\n  // Kick off a flow (async orchestration simulated)\n  app.post('/api/flows', (req, res) => {\n    const id = `f_${++seq}`;\n    const kind = req.body?.kind ?? 'maestro';\n    const rec = { id, kind, state: 'queued' as FlowState };\n    flows.set(id, rec);\n    return res.status(202).json(rec);\n  });\n\n  // Deterministic tick endpoint to advance all flows one step\n  // queued -> running -> complete\n  app.post('/__tick', (_req, res) => {\n    for (const rec of flows.values()) {\n      if (rec.state === 'queued') rec.state = 'running';\n      else if (rec.state === 'running') rec.state = 'complete';\n    }\n    return res.sendStatus(204);\n  });\n\n  // Inspect a specific flow by id\n  app.get('/api/flows/:id', (req, res) => {\n    const rec = flows.get(req.params.id);\n    if (!rec) return res.status(404).json({ error: 'not_found' });\n    return res.json(rec);\n  });\n\n  app.get('/__health', (_req, res) => res.status(200).send('ok'));\n\n  return app; // <-- supertest will wrap this directly (no listen())\n}"],"version":3}