7daa30cdfaa10c8b1d9b50af0fac0f22
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTestApp = createTestApp;
const express_1 = __importDefault(require("express")); // requires "esModuleInterop": true
async function createTestApp() {
    const app = (0, express_1.default)();
    app.use(express_1.default.json());
    const flows = new Map();
    let seq = 0;
    // Kick off a flow (async orchestration simulated)
    app.post('/api/flows', (req, res) => {
        const id = `f_${++seq}`;
        const kind = req.body?.kind ?? 'maestro';
        const rec = { id, kind, state: 'queued' };
        flows.set(id, rec);
        return res.status(202).json(rec);
    });
    // Deterministic tick endpoint to advance all flows one step
    // queued -> running -> complete
    app.post('/__tick', (_req, res) => {
        for (const rec of flows.values()) {
            if (rec.state === 'queued')
                rec.state = 'running';
            else if (rec.state === 'running')
                rec.state = 'complete';
        }
        return res.sendStatus(204);
    });
    // Inspect a specific flow by id
    app.get('/api/flows/:id', (req, res) => {
        const rec = flows.get(req.params.id);
        if (!rec)
            return res.status(404).json({ error: 'not_found' });
        return res.json(rec);
    });
    app.get('/__health', (_req, res) => res.status(200).send('ok'));
    return app; // <-- supertest will wrap this directly (no listen())
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3Rlc3RzL2ludGVncmF0aW9uL3V0aWxzL3Rlc3RTZXJ2ZXIudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQSxzQ0FzQ0M7QUF4Q0Qsc0RBQThCLENBQUMsbUNBQW1DO0FBRTNELEtBQUssVUFBVSxhQUFhO0lBQ2pDLE1BQU0sR0FBRyxHQUFHLElBQUEsaUJBQU8sR0FBRSxDQUFDO0lBQ3RCLEdBQUcsQ0FBQyxHQUFHLENBQUMsaUJBQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBSXhCLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxFQUEwRCxDQUFDO0lBQ2hGLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztJQUVaLGtEQUFrRDtJQUNsRCxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtRQUNsQyxNQUFNLEVBQUUsR0FBRyxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDeEIsTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLElBQUksU0FBUyxDQUFDO1FBQ3pDLE1BQU0sR0FBRyxHQUFHLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsUUFBcUIsRUFBRSxDQUFDO1FBQ3ZELEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ25CLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbkMsQ0FBQyxDQUFDLENBQUM7SUFFSCw0REFBNEQ7SUFDNUQsZ0NBQWdDO0lBQ2hDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQ2hDLEtBQUssTUFBTSxHQUFHLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUM7WUFDakMsSUFBSSxHQUFHLENBQUMsS0FBSyxLQUFLLFFBQVE7Z0JBQUUsR0FBRyxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUM7aUJBQzdDLElBQUksR0FBRyxDQUFDLEtBQUssS0FBSyxTQUFTO2dCQUFFLEdBQUcsQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDO1FBQzNELENBQUM7UUFDRCxPQUFPLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDN0IsQ0FBQyxDQUFDLENBQUM7SUFFSCxnQ0FBZ0M7SUFDaEMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtRQUNyQyxNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLEdBQUc7WUFBRSxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUM7UUFDOUQsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3ZCLENBQUMsQ0FBQyxDQUFDO0lBRUgsR0FBRyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBRWhFLE9BQU8sR0FBRyxDQUFDLENBQUMsc0RBQXNEO0FBQ3BFLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3Rlc3RzL2ludGVncmF0aW9uL3V0aWxzL3Rlc3RTZXJ2ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7IC8vIHJlcXVpcmVzIFwiZXNNb2R1bGVJbnRlcm9wXCI6IHRydWVcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVRlc3RBcHAoKSB7XG4gIGNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcbiAgYXBwLnVzZShleHByZXNzLmpzb24oKSk7XG5cbiAgLy8gLS0tIE1pbmltYWwgaW4tbWVtb3J5IGZsb3cgZW5naW5lIGZvciB0ZXN0cyAtLS0gLy9cbiAgdHlwZSBGbG93U3RhdGUgPSAncXVldWVkJyB8ICdydW5uaW5nJyB8ICdjb21wbGV0ZSc7XG4gIGNvbnN0IGZsb3dzID0gbmV3IE1hcDxzdHJpbmcsIHsgaWQ6IHN0cmluZzsga2luZDogc3RyaW5nOyBzdGF0ZTogRmxvd1N0YXRlIH0+KCk7XG4gIGxldCBzZXEgPSAwO1xuXG4gIC8vIEtpY2sgb2ZmIGEgZmxvdyAoYXN5bmMgb3JjaGVzdHJhdGlvbiBzaW11bGF0ZWQpXG4gIGFwcC5wb3N0KCcvYXBpL2Zsb3dzJywgKHJlcSwgcmVzKSA9PiB7XG4gICAgY29uc3QgaWQgPSBgZl8keysrc2VxfWA7XG4gICAgY29uc3Qga2luZCA9IHJlcS5ib2R5Py5raW5kID8/ICdtYWVzdHJvJztcbiAgICBjb25zdCByZWMgPSB7IGlkLCBraW5kLCBzdGF0ZTogJ3F1ZXVlZCcgYXMgRmxvd1N0YXRlIH07XG4gICAgZmxvd3Muc2V0KGlkLCByZWMpO1xuICAgIHJldHVybiByZXMuc3RhdHVzKDIwMikuanNvbihyZWMpO1xuICB9KTtcblxuICAvLyBEZXRlcm1pbmlzdGljIHRpY2sgZW5kcG9pbnQgdG8gYWR2YW5jZSBhbGwgZmxvd3Mgb25lIHN0ZXBcbiAgLy8gcXVldWVkIC0+IHJ1bm5pbmcgLT4gY29tcGxldGVcbiAgYXBwLnBvc3QoJy9fX3RpY2snLCAoX3JlcSwgcmVzKSA9PiB7XG4gICAgZm9yIChjb25zdCByZWMgb2YgZmxvd3MudmFsdWVzKCkpIHtcbiAgICAgIGlmIChyZWMuc3RhdGUgPT09ICdxdWV1ZWQnKSByZWMuc3RhdGUgPSAncnVubmluZyc7XG4gICAgICBlbHNlIGlmIChyZWMuc3RhdGUgPT09ICdydW5uaW5nJykgcmVjLnN0YXRlID0gJ2NvbXBsZXRlJztcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5zZW5kU3RhdHVzKDIwNCk7XG4gIH0pO1xuXG4gIC8vIEluc3BlY3QgYSBzcGVjaWZpYyBmbG93IGJ5IGlkXG4gIGFwcC5nZXQoJy9hcGkvZmxvd3MvOmlkJywgKHJlcSwgcmVzKSA9PiB7XG4gICAgY29uc3QgcmVjID0gZmxvd3MuZ2V0KHJlcS5wYXJhbXMuaWQpO1xuICAgIGlmICghcmVjKSByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oeyBlcnJvcjogJ25vdF9mb3VuZCcgfSk7XG4gICAgcmV0dXJuIHJlcy5qc29uKHJlYyk7XG4gIH0pO1xuXG4gIGFwcC5nZXQoJy9fX2hlYWx0aCcsIChfcmVxLCByZXMpID0+IHJlcy5zdGF0dXMoMjAwKS5zZW5kKCdvaycpKTtcblxuICByZXR1cm4gYXBwOyAvLyA8LS0gc3VwZXJ0ZXN0IHdpbGwgd3JhcCB0aGlzIGRpcmVjdGx5IChubyBsaXN0ZW4oKSlcbn0iXSwidmVyc2lvbiI6M30=