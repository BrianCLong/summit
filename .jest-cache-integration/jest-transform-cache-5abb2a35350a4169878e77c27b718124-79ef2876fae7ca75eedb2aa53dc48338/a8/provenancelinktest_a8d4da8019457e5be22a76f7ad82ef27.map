{"file":"/Users/brianlong/Developer/summit/tests/graphql/provenance.link.test.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2CAAqC;AAGrC,uDAAuD;AACvD,cAAI,CAAC,IAAI,CAAC,mDAAmD,EAAE,GAAG,EAAE,CAAC,CAAC;IACpE,aAAa,EAAE,cAAI,CAAC,EAAE,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,OAAO,EAAE,CAAC,UAAU,CAAC,EAAE,UAAU,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;IACpJ,gBAAgB,EAAE,cAAI,CAAC,EAAE,CAAC,KAAK,IAAI,EAAE,CAAC,UAAU,CAAC;CAClD,CAAC,CAAC,CAAC;AAEJ,cAAI,CAAC,IAAI,CAAC,kDAAkD,EAAE,GAAG,EAAE,CAAC,CAAC;IACnE,iBAAiB,EAAE,cAAI,CAAC,EAAE,CAAC,KAAK,IAAI,EAAE,CAAC,EAAE,CAAC;IAC1C,YAAY,EAAE,cAAI,CAAC,EAAE,CAAC,KAAK,IAAI,EAAE,CAAC,EAAE,CAAC;CACtC,CAAC,CAAC,CAAC;AAXJ,sEAAyE;AAazE,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,EAAE,CAAC,sBAAsB,EAAE,KAAK,IAAI,EAAE;QACpC,MAAM,MAAM,GAAG,MAAM,IAAA,mCAAmB,GAAE,CAAC;QAC3C,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;QACjD,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC7B,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,aAAa,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IACjF,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,iCAAiC,EAAE,GAAG,EAAE;IAC/C,EAAE,CAAC,qEAAqE,EAAE,KAAK,IAAI,EAAE;QACnF,MAAM,EAAE,mBAAmB,EAAE,GAAG,wDAAa,+CAA+C,GAAC,CAAC;QAC9F,MAAM,MAAM,GAAG,MAAM,mBAAmB,CAAC,QAAQ,CAAC,sBAAsB,CAAC,EAAE,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC,CAAC;QACtI,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;QACnC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjD,MAAM,CAAC,OAAO,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/tests/graphql/provenance.link.test.ts"],"sourcesContent":["import { jest } from '@jest/globals';\nimport { createGraphQLClient } from '../integration/utils/graphqlClient';\n\n// Mock the repositories to handle missing dependencies\njest.mock('../../server/src/db/repositories/trustRiskRepo.ts', () => ({\n  getTrustScore: jest.fn(async () => ({ tenant_id: 't0', subject_id: 's1', score: 0.8, reasons: ['baseline'], updated_at: new Date().toISOString() })),\n  upsertTrustScore: jest.fn(async () => 'ts_t0_s1'),\n}));\n\njest.mock('../../server/src/db/repositories/evidenceRepo.ts', () => ({\n  getLatestEvidence: jest.fn(async () => []),\n  listEvidence: jest.fn(async () => []),\n}));\n\ndescribe('provenance link', () => {\n  it('returns ok + version', async () => {\n    const client = await createGraphQLClient();\n    const res = await client.query('{ ok version }');\n    expect(res.status).toBe(200);\n    expect(res.body.data).toMatchObject({ ok: true, version: expect.any(String) });\n  });\n});\n\ndescribe('linkTrustScoreEvidence resolver', () => {\n  it('updates trust score with evidence id and returns updated TrustScore', async () => {\n    const { provenanceResolvers } = await import('../../server/src/graphql/resolvers/provenance');\n    const result = await provenanceResolvers.Mutation.linkTrustScoreEvidence({}, { tenantId: 't0', subjectId: 's1', evidenceId: 'ev_1' });\n    expect(result.subjectId).toBe('s1');\n    expect(result.score).toBeDefined();\n    expect(Array.isArray(result.reasons)).toBe(true);\n    expect(typeof result.updatedAt).toBe('string');\n  });\n});\n\n"],"version":3}