{"file":"/Users/brianlong/Developer/summit/tests/integration/utils/testServer.ts","mappings":"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","names":[],"sources":["/Users/brianlong/Developer/summit/tests/integration/utils/testServer.ts"],"sourcesContent":["// Simple test server that creates a minimal express-like app for integration tests\n// Avoiding express version conflicts by creating a mock that implements the supertest interface\n\nexport async function createTestApp() {\n  // Create a minimal mock app that implements the express interface needed by supertest\n  const app: any = {\n    // Express methods used by supertest\n    use: jest.fn().mockReturnThis(),\n    post: jest.fn().mockReturnThis(),\n    get: jest.fn().mockReturnThis(),\n    listen: jest.fn().mockImplementation((_port, callback) => {\n      if (callback) callback();\n      return { close: jest.fn() };\n    }),\n    \n    // Supertest needs the address function to determine where to connect\n    address: jest.fn(() => ({ port: 4000, family: 'IPv4', address: '127.0.0.1' })),\n    \n    // Mock middleware storage\n    _middleware: [],\n    _routes: {},\n  };\n  \n  // Implement route registration methods\n  app.use.mockImplementation((middleware: Function) => {\n    app._middleware.push(middleware);\n    return app;\n  });\n  \n  app.post.mockImplementation((path: string, handler: Function) => {\n    app._routes[`POST:${path}`] = handler;\n    return app;\n  });\n  \n  app.get.mockImplementation((path: string, handler: Function) => {\n    app._routes[`GET:${path}`] = handler;\n    return app;\n  });\n  \n  // Mock express.json() middleware\n  app.use.mockImplementationOnce(() => app); // For express.json() mock\n  \n  // Minimal stub routes needed by maestro_flow.test.ts\n  app.post.mockImplementation((path: string, handler: Function) => {\n    if (path === '/api/flows') {\n      app._routes['POST:/api/flows'] = handler;\n    } else if (path === '/run') {\n      app._routes['POST:/run'] = handler;\n    }\n    return app;\n  });\n  \n  app.get.mockImplementation((path: string, handler: Function) => {\n    if (path === '/runs/:runId') {\n      app._routes['GET:/runs/:runId'] = handler;\n    } else if (path === '/__health') {\n      app._routes['GET:/__health'] = handler;\n    }\n    return app;\n  });\n\n  // Mock route handlers\n  app._routes['POST:/api/flows'] = (req: any, res: any) => {\n    // return 202 Accepted to simulate async orchestration kickoff\n    return res.status(202).json({ id: 'flow_1', kind: req.body?.kind ?? 'maestro', state: 'queued' });\n  };\n\n  app._routes['POST:/run'] = (req: any, res: any) => {\n    // For maestro_flow.test.ts compatibility\n    return res.status(202).json({ runId: 'run_1', status: 'ACCEPTED' });\n  };\n\n  app._routes['GET:/runs/:runId'] = (req: any, res: any) => {\n    // For maestro_flow.test.ts status checking\n    return res.status(200).json({ \n      runId: req.params.runId, \n      status: 'SUCCEEDED', \n      completedAt: new Date().toISOString() \n    });\n  };\n\n  app._routes['GET:/__health'] = (_req: any, res: any) => res.status(200).send('ok');\n  \n  return app;\n}"],"version":3}