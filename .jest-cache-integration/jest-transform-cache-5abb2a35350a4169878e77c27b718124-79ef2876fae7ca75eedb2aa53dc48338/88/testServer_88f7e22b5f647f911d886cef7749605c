cd18b050fc211028d52172fc08716b2b
"use strict";
// Simple test server that creates a minimal express-like app for integration tests
// Avoiding express version conflicts by creating a mock that implements the supertest interface
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTestApp = createTestApp;
async function createTestApp() {
    // Create a minimal mock app that implements the express interface needed by supertest
    const app = {
        // Express methods used by supertest
        use: jest.fn().mockReturnThis(),
        post: jest.fn().mockReturnThis(),
        get: jest.fn().mockReturnThis(),
        listen: jest.fn().mockImplementation((_port, callback) => {
            if (callback)
                callback();
            return { close: jest.fn() };
        }),
        // Supertest needs the address function to determine where to connect
        address: jest.fn(() => ({ port: 4000, family: 'IPv4', address: '127.0.0.1' })),
        // Mock middleware storage
        _middleware: [],
        _routes: {},
    };
    // Implement route registration methods
    app.use.mockImplementation((middleware) => {
        app._middleware.push(middleware);
        return app;
    });
    app.post.mockImplementation((path, handler) => {
        app._routes[`POST:${path}`] = handler;
        return app;
    });
    app.get.mockImplementation((path, handler) => {
        app._routes[`GET:${path}`] = handler;
        return app;
    });
    // Mock express.json() middleware
    app.use.mockImplementationOnce(() => app); // For express.json() mock
    // Minimal stub routes needed by maestro_flow.test.ts
    app.post.mockImplementation((path, handler) => {
        if (path === '/api/flows') {
            app._routes['POST:/api/flows'] = handler;
        }
        else if (path === '/run') {
            app._routes['POST:/run'] = handler;
        }
        return app;
    });
    app.get.mockImplementation((path, handler) => {
        if (path === '/runs/:runId') {
            app._routes['GET:/runs/:runId'] = handler;
        }
        else if (path === '/__health') {
            app._routes['GET:/__health'] = handler;
        }
        return app;
    });
    // Mock route handlers
    app._routes['POST:/api/flows'] = (req, res) => {
        // return 202 Accepted to simulate async orchestration kickoff
        return res.status(202).json({ id: 'flow_1', kind: req.body?.kind ?? 'maestro', state: 'queued' });
    };
    app._routes['POST:/run'] = (req, res) => {
        // For maestro_flow.test.ts compatibility
        return res.status(202).json({ runId: 'run_1', status: 'ACCEPTED' });
    };
    app._routes['GET:/runs/:runId'] = (req, res) => {
        // For maestro_flow.test.ts status checking
        return res.status(200).json({
            runId: req.params.runId,
            status: 'SUCCEEDED',
            completedAt: new Date().toISOString()
        });
    };
    app._routes['GET:/__health'] = (_req, res) => res.status(200).send('ok');
    return app;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3Rlc3RzL2ludGVncmF0aW9uL3V0aWxzL3Rlc3RTZXJ2ZXIudHMiLCJtYXBwaW5ncyI6IjtBQUFBLG1GQUFtRjtBQUNuRixnR0FBZ0c7O0FBRWhHLHNDQWlGQztBQWpGTSxLQUFLLFVBQVUsYUFBYTtJQUNqQyxzRkFBc0Y7SUFDdEYsTUFBTSxHQUFHLEdBQVE7UUFDZixvQ0FBb0M7UUFDcEMsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxjQUFjLEVBQUU7UUFDL0IsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxjQUFjLEVBQUU7UUFDaEMsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxjQUFjLEVBQUU7UUFDL0IsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsRUFBRTtZQUN2RCxJQUFJLFFBQVE7Z0JBQUUsUUFBUSxFQUFFLENBQUM7WUFDekIsT0FBTyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUM5QixDQUFDLENBQUM7UUFFRixxRUFBcUU7UUFDckUsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQztRQUU5RSwwQkFBMEI7UUFDMUIsV0FBVyxFQUFFLEVBQUU7UUFDZixPQUFPLEVBQUUsRUFBRTtLQUNaLENBQUM7SUFFRix1Q0FBdUM7SUFDdkMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFVBQW9CLEVBQUUsRUFBRTtRQUNsRCxHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNqQyxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUMsQ0FBQyxDQUFDO0lBRUgsR0FBRyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLElBQVksRUFBRSxPQUFpQixFQUFFLEVBQUU7UUFDOUQsR0FBRyxDQUFDLE9BQU8sQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDO1FBQ3RDLE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQyxDQUFDLENBQUM7SUFFSCxHQUFHLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUMsSUFBWSxFQUFFLE9BQWlCLEVBQUUsRUFBRTtRQUM3RCxHQUFHLENBQUMsT0FBTyxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUM7UUFDckMsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDLENBQUMsQ0FBQztJQUVILGlDQUFpQztJQUNqQyxHQUFHLENBQUMsR0FBRyxDQUFDLHNCQUFzQixDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsMEJBQTBCO0lBRXJFLHFEQUFxRDtJQUNyRCxHQUFHLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUMsSUFBWSxFQUFFLE9BQWlCLEVBQUUsRUFBRTtRQUM5RCxJQUFJLElBQUksS0FBSyxZQUFZLEVBQUUsQ0FBQztZQUMxQixHQUFHLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsT0FBTyxDQUFDO1FBQzNDLENBQUM7YUFBTSxJQUFJLElBQUksS0FBSyxNQUFNLEVBQUUsQ0FBQztZQUMzQixHQUFHLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxHQUFHLE9BQU8sQ0FBQztRQUNyQyxDQUFDO1FBQ0QsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDLENBQUMsQ0FBQztJQUVILEdBQUcsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxJQUFZLEVBQUUsT0FBaUIsRUFBRSxFQUFFO1FBQzdELElBQUksSUFBSSxLQUFLLGNBQWMsRUFBRSxDQUFDO1lBQzVCLEdBQUcsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsR0FBRyxPQUFPLENBQUM7UUFDNUMsQ0FBQzthQUFNLElBQUksSUFBSSxLQUFLLFdBQVcsRUFBRSxDQUFDO1lBQ2hDLEdBQUcsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLEdBQUcsT0FBTyxDQUFDO1FBQ3pDLENBQUM7UUFDRCxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUMsQ0FBQyxDQUFDO0lBRUgsc0JBQXNCO0lBQ3RCLEdBQUcsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLEdBQVEsRUFBRSxHQUFRLEVBQUUsRUFBRTtRQUN0RCw4REFBOEQ7UUFDOUQsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxJQUFJLFNBQVMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUNwRyxDQUFDLENBQUM7SUFFRixHQUFHLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBUSxFQUFFLEdBQVEsRUFBRSxFQUFFO1FBQ2hELHlDQUF5QztRQUN6QyxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztJQUN0RSxDQUFDLENBQUM7SUFFRixHQUFHLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxHQUFRLEVBQUUsR0FBUSxFQUFFLEVBQUU7UUFDdkQsMkNBQTJDO1FBQzNDLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDMUIsS0FBSyxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSztZQUN2QixNQUFNLEVBQUUsV0FBVztZQUNuQixXQUFXLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUU7U0FDdEMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0lBRUYsR0FBRyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLElBQVMsRUFBRSxHQUFRLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRW5GLE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvYnJpYW5sb25nL0RldmVsb3Blci9zdW1taXQvdGVzdHMvaW50ZWdyYXRpb24vdXRpbHMvdGVzdFNlcnZlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTaW1wbGUgdGVzdCBzZXJ2ZXIgdGhhdCBjcmVhdGVzIGEgbWluaW1hbCBleHByZXNzLWxpa2UgYXBwIGZvciBpbnRlZ3JhdGlvbiB0ZXN0c1xuLy8gQXZvaWRpbmcgZXhwcmVzcyB2ZXJzaW9uIGNvbmZsaWN0cyBieSBjcmVhdGluZyBhIG1vY2sgdGhhdCBpbXBsZW1lbnRzIHRoZSBzdXBlcnRlc3QgaW50ZXJmYWNlXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVUZXN0QXBwKCkge1xuICAvLyBDcmVhdGUgYSBtaW5pbWFsIG1vY2sgYXBwIHRoYXQgaW1wbGVtZW50cyB0aGUgZXhwcmVzcyBpbnRlcmZhY2UgbmVlZGVkIGJ5IHN1cGVydGVzdFxuICBjb25zdCBhcHA6IGFueSA9IHtcbiAgICAvLyBFeHByZXNzIG1ldGhvZHMgdXNlZCBieSBzdXBlcnRlc3RcbiAgICB1c2U6IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpLFxuICAgIHBvc3Q6IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpLFxuICAgIGdldDogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXG4gICAgbGlzdGVuOiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKChfcG9ydCwgY2FsbGJhY2spID0+IHtcbiAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcbiAgICAgIHJldHVybiB7IGNsb3NlOiBqZXN0LmZuKCkgfTtcbiAgICB9KSxcbiAgICBcbiAgICAvLyBTdXBlcnRlc3QgbmVlZHMgdGhlIGFkZHJlc3MgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIHdoZXJlIHRvIGNvbm5lY3RcbiAgICBhZGRyZXNzOiBqZXN0LmZuKCgpID0+ICh7IHBvcnQ6IDQwMDAsIGZhbWlseTogJ0lQdjQnLCBhZGRyZXNzOiAnMTI3LjAuMC4xJyB9KSksXG4gICAgXG4gICAgLy8gTW9jayBtaWRkbGV3YXJlIHN0b3JhZ2VcbiAgICBfbWlkZGxld2FyZTogW10sXG4gICAgX3JvdXRlczoge30sXG4gIH07XG4gIFxuICAvLyBJbXBsZW1lbnQgcm91dGUgcmVnaXN0cmF0aW9uIG1ldGhvZHNcbiAgYXBwLnVzZS5tb2NrSW1wbGVtZW50YXRpb24oKG1pZGRsZXdhcmU6IEZ1bmN0aW9uKSA9PiB7XG4gICAgYXBwLl9taWRkbGV3YXJlLnB1c2gobWlkZGxld2FyZSk7XG4gICAgcmV0dXJuIGFwcDtcbiAgfSk7XG4gIFxuICBhcHAucG9zdC5tb2NrSW1wbGVtZW50YXRpb24oKHBhdGg6IHN0cmluZywgaGFuZGxlcjogRnVuY3Rpb24pID0+IHtcbiAgICBhcHAuX3JvdXRlc1tgUE9TVDoke3BhdGh9YF0gPSBoYW5kbGVyO1xuICAgIHJldHVybiBhcHA7XG4gIH0pO1xuICBcbiAgYXBwLmdldC5tb2NrSW1wbGVtZW50YXRpb24oKHBhdGg6IHN0cmluZywgaGFuZGxlcjogRnVuY3Rpb24pID0+IHtcbiAgICBhcHAuX3JvdXRlc1tgR0VUOiR7cGF0aH1gXSA9IGhhbmRsZXI7XG4gICAgcmV0dXJuIGFwcDtcbiAgfSk7XG4gIFxuICAvLyBNb2NrIGV4cHJlc3MuanNvbigpIG1pZGRsZXdhcmVcbiAgYXBwLnVzZS5tb2NrSW1wbGVtZW50YXRpb25PbmNlKCgpID0+IGFwcCk7IC8vIEZvciBleHByZXNzLmpzb24oKSBtb2NrXG4gIFxuICAvLyBNaW5pbWFsIHN0dWIgcm91dGVzIG5lZWRlZCBieSBtYWVzdHJvX2Zsb3cudGVzdC50c1xuICBhcHAucG9zdC5tb2NrSW1wbGVtZW50YXRpb24oKHBhdGg6IHN0cmluZywgaGFuZGxlcjogRnVuY3Rpb24pID0+IHtcbiAgICBpZiAocGF0aCA9PT0gJy9hcGkvZmxvd3MnKSB7XG4gICAgICBhcHAuX3JvdXRlc1snUE9TVDovYXBpL2Zsb3dzJ10gPSBoYW5kbGVyO1xuICAgIH0gZWxzZSBpZiAocGF0aCA9PT0gJy9ydW4nKSB7XG4gICAgICBhcHAuX3JvdXRlc1snUE9TVDovcnVuJ10gPSBoYW5kbGVyO1xuICAgIH1cbiAgICByZXR1cm4gYXBwO1xuICB9KTtcbiAgXG4gIGFwcC5nZXQubW9ja0ltcGxlbWVudGF0aW9uKChwYXRoOiBzdHJpbmcsIGhhbmRsZXI6IEZ1bmN0aW9uKSA9PiB7XG4gICAgaWYgKHBhdGggPT09ICcvcnVucy86cnVuSWQnKSB7XG4gICAgICBhcHAuX3JvdXRlc1snR0VUOi9ydW5zLzpydW5JZCddID0gaGFuZGxlcjtcbiAgICB9IGVsc2UgaWYgKHBhdGggPT09ICcvX19oZWFsdGgnKSB7XG4gICAgICBhcHAuX3JvdXRlc1snR0VUOi9fX2hlYWx0aCddID0gaGFuZGxlcjtcbiAgICB9XG4gICAgcmV0dXJuIGFwcDtcbiAgfSk7XG5cbiAgLy8gTW9jayByb3V0ZSBoYW5kbGVyc1xuICBhcHAuX3JvdXRlc1snUE9TVDovYXBpL2Zsb3dzJ10gPSAocmVxOiBhbnksIHJlczogYW55KSA9PiB7XG4gICAgLy8gcmV0dXJuIDIwMiBBY2NlcHRlZCB0byBzaW11bGF0ZSBhc3luYyBvcmNoZXN0cmF0aW9uIGtpY2tvZmZcbiAgICByZXR1cm4gcmVzLnN0YXR1cygyMDIpLmpzb24oeyBpZDogJ2Zsb3dfMScsIGtpbmQ6IHJlcS5ib2R5Py5raW5kID8/ICdtYWVzdHJvJywgc3RhdGU6ICdxdWV1ZWQnIH0pO1xuICB9O1xuXG4gIGFwcC5fcm91dGVzWydQT1NUOi9ydW4nXSA9IChyZXE6IGFueSwgcmVzOiBhbnkpID0+IHtcbiAgICAvLyBGb3IgbWFlc3Ryb19mbG93LnRlc3QudHMgY29tcGF0aWJpbGl0eVxuICAgIHJldHVybiByZXMuc3RhdHVzKDIwMikuanNvbih7IHJ1bklkOiAncnVuXzEnLCBzdGF0dXM6ICdBQ0NFUFRFRCcgfSk7XG4gIH07XG5cbiAgYXBwLl9yb3V0ZXNbJ0dFVDovcnVucy86cnVuSWQnXSA9IChyZXE6IGFueSwgcmVzOiBhbnkpID0+IHtcbiAgICAvLyBGb3IgbWFlc3Ryb19mbG93LnRlc3QudHMgc3RhdHVzIGNoZWNraW5nXG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHsgXG4gICAgICBydW5JZDogcmVxLnBhcmFtcy5ydW5JZCwgXG4gICAgICBzdGF0dXM6ICdTVUNDRUVERUQnLCBcbiAgICAgIGNvbXBsZXRlZEF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkgXG4gICAgfSk7XG4gIH07XG5cbiAgYXBwLl9yb3V0ZXNbJ0dFVDovX19oZWFsdGgnXSA9IChfcmVxOiBhbnksIHJlczogYW55KSA9PiByZXMuc3RhdHVzKDIwMCkuc2VuZCgnb2snKTtcbiAgXG4gIHJldHVybiBhcHA7XG59Il0sInZlcnNpb24iOjN9