{"file":"/Users/brianlong/Developer/summit/src/memory/promptCache.ts","mappings":"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","names":[],"sources":["/Users/brianlong/Developer/summit/src/memory/promptCache.ts"],"sourcesContent":["import { createHash } from 'crypto';\nimport { readFile, writeFile, mkdir, access, readdir, stat } from 'fs/promises';\nimport { join } from 'path';\nimport { LRUCache } from 'lru-cache';\n\ninterface CacheEntry {\n  id: string;\n  prompt: string;\n  response: string;\n  model: string;\n  metadata: {\n    timestamp: string;\n    cost: number;\n    tokens: {\n      input: number;\n      output: number;\n    };\n    latency: number;\n    success: boolean;\n    context: Record<string, any>;\n  };\n  tags: string[];\n  ttl: number; // Time to live in seconds\n}\n\ninterface CacheStats {\n  hits: number;\n  misses: number;\n  totalQueries: number;\n  hitRate: number;\n  totalCostSaved: number;\n  totalTokensSaved: number;\n  size: number;\n  diskSize: number;\n}\n\nexport class PromptCache {\n  private cache: LRUCache<string, CacheEntry>;\n  private persistPath: string;\n  private stats: CacheStats;\n  private defaultTTL: number = 7 * 24 * 60 * 60; // 7 days\n  private maxCacheSize: number = 1000;\n  private similarityThreshold: number = 0.85;\n\n  constructor(projectRoot: string = process.cwd(), maxSize: number = 1000) {\n    this.persistPath = join(projectRoot, '.maestro', 'cache');\n    this.maxCacheSize = maxSize;\n    \n    this.cache = new LRUCache({\n      max: maxSize,\n      ttl: this.defaultTTL * 1000, // LRU cache expects milliseconds\n      updateAgeOnGet: true,\n      allowStale: true\n    });\n\n    this.stats = {\n      hits: 0,\n      misses: 0,\n      totalQueries: 0,\n      hitRate: 0,\n      totalCostSaved: 0,\n      totalTokensSaved: 0,\n      size: 0,\n      diskSize: 0\n    };\n  }\n\n  async initialize(): Promise<void> {\n    try {\n      await mkdir(this.persistPath, { recursive: true });\n      await this.loadCache();\n      await this.loadStats();\n    } catch (error) {\n      console.warn('Failed to initialize prompt cache:', error.message);\n    }\n  }\n\n  async get(\n    prompt: string, \n    model: string = 'default',\n    context: Record<string, any> = {}\n  ): Promise<CacheEntry | null> {\n    this.stats.totalQueries++;\n\n    const cacheKey = this.generateCacheKey(prompt, model, context);\n    let entry = this.cache.get(cacheKey);\n\n    // Check for exact match first\n    if (entry && this.isEntryValid(entry)) {\n      this.stats.hits++;\n      this.updateStats();\n      entry.metadata.timestamp = new Date().toISOString(); // Update access time\n      return entry;\n    }\n\n    // Check for similar prompts\n    const similarEntry = await this.findSimilarPrompt(prompt, model, context);\n    if (similarEntry && this.isEntryValid(similarEntry)) {\n      this.stats.hits++;\n      this.updateStats();\n      \n      // Cache the similar entry under the new key for faster future access\n      const newEntry: CacheEntry = {\n        ...similarEntry,\n        id: cacheKey,\n        prompt: prompt, // Update to exact prompt\n        metadata: {\n          ...similarEntry.metadata,\n          timestamp: new Date().toISOString()\n        }\n      };\n      \n      this.cache.set(cacheKey, newEntry);\n      return newEntry;\n    }\n\n    this.stats.misses++;\n    this.updateStats();\n    return null;\n  }\n\n  async set(\n    prompt: string,\n    response: string,\n    model: string = 'default',\n    metadata: Partial<CacheEntry['metadata']> = {},\n    context: Record<string, any> = {},\n    ttl?: number\n  ): Promise<string> {\n    const cacheKey = this.generateCacheKey(prompt, model, context);\n    \n    const entry: CacheEntry = {\n      id: cacheKey,\n      prompt,\n      response,\n      model,\n      metadata: {\n        timestamp: new Date().toISOString(),\n        cost: 0,\n        tokens: { input: 0, output: 0 },\n        latency: 0,\n        success: true,\n        context,\n        ...metadata\n      },\n      tags: this.extractTags(prompt, response, context),\n      ttl: ttl || this.defaultTTL\n    };\n\n    this.cache.set(cacheKey, entry);\n    await this.persistEntry(entry);\n    \n    return cacheKey;\n  }\n\n  async invalidate(pattern: string | RegExp): Promise<number> {\n    let count = 0;\n    const keysToDelete: string[] = [];\n\n    for (const [key, entry] of this.cache.entries()) {\n      if (typeof pattern === 'string') {\n        if (entry.prompt.includes(pattern) || entry.tags.some(tag => tag.includes(pattern))) {\n          keysToDelete.push(key);\n          count++;\n        }\n      } else if (pattern instanceof RegExp) {\n        if (pattern.test(entry.prompt) || entry.tags.some(tag => pattern.test(tag))) {\n          keysToDelete.push(key);\n          count++;\n        }\n      }\n    }\n\n    for (const key of keysToDelete) {\n      this.cache.delete(key);\n    }\n\n    if (count > 0) {\n      await this.persistCache();\n    }\n\n    return count;\n  }\n\n  async clear(): Promise<void> {\n    this.cache.clear();\n    await this.persistCache();\n    \n    // Reset stats but keep hit/miss history\n    this.stats.size = 0;\n    this.stats.diskSize = 0;\n    await this.persistStats();\n  }\n\n  async cleanup(): Promise<{ expired: number; invalidated: number }> {\n    const now = Date.now();\n    let expired = 0;\n    let invalidated = 0;\n    const keysToDelete: string[] = [];\n\n    for (const [key, entry] of this.cache.entries()) {\n      const entryAge = now - new Date(entry.metadata.timestamp).getTime();\n      \n      // Remove expired entries\n      if (entryAge > entry.ttl * 1000) {\n        keysToDelete.push(key);\n        expired++;\n        continue;\n      }\n\n      // Remove entries with failed responses\n      if (!entry.metadata.success) {\n        keysToDelete.push(key);\n        invalidated++;\n      }\n    }\n\n    for (const key of keysToDelete) {\n      this.cache.delete(key);\n    }\n\n    if (keysToDelete.length > 0) {\n      await this.persistCache();\n    }\n\n    return { expired, invalidated };\n  }\n\n  async getStats(): Promise<CacheStats> {\n    this.stats.size = this.cache.size;\n    \n    try {\n      const files = await readdir(this.persistPath);\n      let diskSize = 0;\n      \n      for (const file of files) {\n        if (file.endsWith('.json')) {\n          const filePath = join(this.persistPath, file);\n          const stats = await stat(filePath);\n          diskSize += stats.size;\n        }\n      }\n      \n      this.stats.diskSize = diskSize;\n    } catch {\n      this.stats.diskSize = 0;\n    }\n\n    return { ...this.stats };\n  }\n\n  async warmCache(prompts: { prompt: string; model?: string; context?: Record<string, any> }[]): Promise<void> {\n    console.log(`🔥 Warming cache with ${prompts.length} prompts...`);\n    \n    for (const { prompt, model = 'default', context = {} } of prompts) {\n      const cacheKey = this.generateCacheKey(prompt, model, context);\n      \n      // Only warm if not already cached\n      if (!this.cache.has(cacheKey)) {\n        // This would trigger actual API calls in a real implementation\n        // For now, we'll just mark them as needing computation\n        console.log(`Cache miss for: ${prompt.substring(0, 50)}...`);\n      }\n    }\n  }\n\n  async optimizeCache(): Promise<{ removed: number; compacted: number }> {\n    const before = this.cache.size;\n    \n    // Remove least successful entries if cache is full\n    if (this.cache.size >= this.maxCacheSize * 0.9) {\n      const entries = Array.from(this.cache.entries())\n        .map(([key, entry]) => ({ key, entry }))\n        .sort((a, b) => {\n          // Score based on success, cost saved, and recency\n          const scoreA = (a.entry.metadata.success ? 1 : 0) + \n                        a.entry.metadata.cost * 0.1 +\n                        (Date.now() - new Date(a.entry.metadata.timestamp).getTime()) / (1000 * 60 * 60 * 24);\n          const scoreB = (b.entry.metadata.success ? 1 : 0) + \n                        b.entry.metadata.cost * 0.1 +\n                        (Date.now() - new Date(b.entry.metadata.timestamp).getTime()) / (1000 * 60 * 60 * 24);\n          return scoreA - scoreB;\n        });\n\n      const toRemove = Math.floor(this.maxCacheSize * 0.1);\n      for (let i = 0; i < toRemove && i < entries.length; i++) {\n        this.cache.delete(entries[i].key);\n      }\n    }\n\n    await this.persistCache();\n    \n    return {\n      removed: before - this.cache.size,\n      compacted: this.cache.size\n    };\n  }\n\n  private generateCacheKey(prompt: string, model: string, context: Record<string, any>): string {\n    const contextStr = Object.keys(context)\n      .sort()\n      .map(key => `${key}:${JSON.stringify(context[key])}`)\n      .join('|');\n    \n    const combined = `${prompt}|${model}|${contextStr}`;\n    \n    return createHash('sha256')\n      .update(combined)\n      .digest('hex')\n      .substring(0, 32);\n  }\n\n  private async findSimilarPrompt(\n    prompt: string, \n    model: string,\n    context: Record<string, any>\n  ): Promise<CacheEntry | null> {\n    const promptTokens = this.tokenize(prompt.toLowerCase());\n    let bestMatch: CacheEntry | null = null;\n    let bestSimilarity = 0;\n\n    for (const entry of this.cache.values()) {\n      // Must match model and have similar context\n      if (entry.model !== model) continue;\n      \n      const contextSimilarity = this.contextSimilarity(context, entry.metadata.context);\n      if (contextSimilarity < 0.8) continue;\n\n      const entryTokens = this.tokenize(entry.prompt.toLowerCase());\n      const similarity = this.jaccardSimilarity(promptTokens, entryTokens);\n      \n      const combinedSimilarity = similarity * 0.7 + contextSimilarity * 0.3;\n      \n      if (combinedSimilarity > bestSimilarity && combinedSimilarity >= this.similarityThreshold) {\n        bestSimilarity = combinedSimilarity;\n        bestMatch = entry;\n      }\n    }\n\n    return bestMatch;\n  }\n\n  private tokenize(text: string): Set<string> {\n    return new Set(\n      text\n        .replace(/[^\\w\\s]/g, ' ')\n        .split(/\\s+/)\n        .filter(token => token.length > 2)\n    );\n  }\n\n  private jaccardSimilarity(set1: Set<string>, set2: Set<string>): number {\n    const intersection = new Set([...set1].filter(x => set2.has(x)));\n    const union = new Set([...set1, ...set2]);\n    \n    return union.size === 0 ? 0 : intersection.size / union.size;\n  }\n\n  private contextSimilarity(ctx1: Record<string, any>, ctx2: Record<string, any>): number {\n    const keys1 = Object.keys(ctx1);\n    const keys2 = Object.keys(ctx2);\n    \n    if (keys1.length === 0 && keys2.length === 0) return 1;\n    if (keys1.length === 0 || keys2.length === 0) return 0;\n    \n    const commonKeys = keys1.filter(key => keys2.includes(key));\n    const totalKeys = new Set([...keys1, ...keys2]).size;\n    \n    let matches = 0;\n    for (const key of commonKeys) {\n      if (JSON.stringify(ctx1[key]) === JSON.stringify(ctx2[key])) {\n        matches++;\n      }\n    }\n    \n    return matches / totalKeys;\n  }\n\n  private extractTags(prompt: string, response: string, context: Record<string, any>): string[] {\n    const tags: string[] = [];\n    \n    // Extract from context\n    if (context.type) tags.push(context.type);\n    if (context.language) tags.push(context.language);\n    if (context.framework) tags.push(context.framework);\n    \n    // Extract from prompt content\n    const patterns = {\n      'code-generation': /generate|create|write.*code|implement/i,\n      'debugging': /debug|error|fix|problem|issue/i,\n      'explanation': /explain|what.*is|how.*does|describe/i,\n      'review': /review|check|validate|analyze/i,\n      'optimization': /optimize|improve|performance|speed/i,\n      'testing': /test|spec|unittest|coverage/i,\n      'documentation': /document|comment|readme|doc/i\n    };\n\n    for (const [tag, pattern] of Object.entries(patterns)) {\n      if (pattern.test(prompt)) {\n        tags.push(tag);\n      }\n    }\n\n    return [...new Set(tags)]; // Remove duplicates\n  }\n\n  private isEntryValid(entry: CacheEntry): boolean {\n    const now = Date.now();\n    const entryTime = new Date(entry.metadata.timestamp).getTime();\n    const age = now - entryTime;\n    \n    return age <= entry.ttl * 1000 && entry.metadata.success;\n  }\n\n  private updateStats(): void {\n    this.stats.hitRate = this.stats.totalQueries > 0 ? \n      (this.stats.hits / this.stats.totalQueries) : 0;\n  }\n\n  private async loadCache(): Promise<void> {\n    try {\n      const files = await readdir(this.persistPath);\n      const cacheFiles = files.filter(f => f.startsWith('cache-') && f.endsWith('.json'));\n      \n      for (const file of cacheFiles) {\n        try {\n          const filePath = join(this.persistPath, file);\n          const data = await readFile(filePath, 'utf8');\n          const entry: CacheEntry = JSON.parse(data);\n          \n          if (this.isEntryValid(entry)) {\n            this.cache.set(entry.id, entry);\n          }\n        } catch (error) {\n          console.warn(`Failed to load cache entry from ${file}:`, error.message);\n        }\n      }\n    } catch (error) {\n      // Cache directory doesn't exist yet\n    }\n  }\n\n  private async persistEntry(entry: CacheEntry): Promise<void> {\n    try {\n      const filename = `cache-${entry.id}.json`;\n      const filePath = join(this.persistPath, filename);\n      await writeFile(filePath, JSON.stringify(entry, null, 2));\n    } catch (error) {\n      console.warn('Failed to persist cache entry:', error.message);\n    }\n  }\n\n  private async persistCache(): Promise<void> {\n    try {\n      // Remove old cache files\n      const files = await readdir(this.persistPath);\n      const cacheFiles = files.filter(f => f.startsWith('cache-') && f.endsWith('.json'));\n      \n      for (const file of cacheFiles) {\n        const filePath = join(this.persistPath, file);\n        try {\n          await import('fs/promises').then(fs => fs.unlink(filePath));\n        } catch {} // Ignore errors\n      }\n\n      // Write current cache entries\n      for (const entry of this.cache.values()) {\n        await this.persistEntry(entry);\n      }\n    } catch (error) {\n      console.warn('Failed to persist cache:', error.message);\n    }\n  }\n\n  private async loadStats(): Promise<void> {\n    try {\n      const statsPath = join(this.persistPath, 'stats.json');\n      await access(statsPath);\n      \n      const data = await readFile(statsPath, 'utf8');\n      const savedStats = JSON.parse(data);\n      \n      // Merge with current stats\n      this.stats = {\n        ...this.stats,\n        ...savedStats,\n        size: this.cache.size // Always use current size\n      };\n    } catch {\n      // Stats file doesn't exist, use defaults\n    }\n  }\n\n  private async persistStats(): Promise<void> {\n    try {\n      const statsPath = join(this.persistPath, 'stats.json');\n      await writeFile(statsPath, JSON.stringify(this.stats, null, 2));\n    } catch (error) {\n      console.warn('Failed to persist stats:', error.message);\n    }\n  }\n}"],"version":3}