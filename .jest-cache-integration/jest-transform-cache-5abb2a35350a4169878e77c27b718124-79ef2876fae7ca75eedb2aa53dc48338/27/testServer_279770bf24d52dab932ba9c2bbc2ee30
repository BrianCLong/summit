d2a9ed345887adfe2c4ab160b8df4777
"use strict";
// Simple mock server for integration tests that doesn't rely on express
// This avoids version conflicts between express 4 and 5
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTestApp = createTestApp;
async function createTestApp() {
    // Return a simple mock app object that mimics the express API needed by supertest
    return {
        // Mock express methods used by supertest
        use: jest.fn(),
        post: jest.fn(),
        get: jest.fn(),
        listen: jest.fn().mockImplementation((_port, callback) => {
            if (callback)
                callback();
            return { close: jest.fn() };
        }),
        // Supertest needs the address function
        address: jest.fn(() => ({ port: 4000, family: 'IPv4', address: '127.0.0.1' })),
        // Mock the route handlers for the specific endpoints used in maestro_flow.test.ts
        handleApiFlows: jest.fn((req, res) => {
            return res.status(202).json({ id: 'flow_1', kind: req.body?.kind ?? 'maestro', state: 'queued' });
        }),
        handleRun: jest.fn((req, res) => {
            return res.status(202).json({ runId: 'run_1', status: 'ACCEPTED' });
        }),
        handleRuns: jest.fn((req, res) => {
            return res.status(200).json({
                runId: req.params.runId,
                status: 'SUCCEEDED',
                completedAt: new Date().toISOString()
            });
        }),
        handleHealth: jest.fn((_req, res) => res.status(200).send('ok'))
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3Rlc3RzL2ludGVncmF0aW9uL3V0aWxzL3Rlc3RTZXJ2ZXIudHMiLCJtYXBwaW5ncyI6IjtBQUFBLHdFQUF3RTtBQUN4RSx3REFBd0Q7O0FBRXhELHNDQWtDQztBQWxDTSxLQUFLLFVBQVUsYUFBYTtJQUNqQyxrRkFBa0Y7SUFDbEYsT0FBTztRQUNMLHlDQUF5QztRQUN6QyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNkLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO1FBQ2YsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7UUFDZCxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixDQUFDLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxFQUFFO1lBQ3ZELElBQUksUUFBUTtnQkFBRSxRQUFRLEVBQUUsQ0FBQztZQUN6QixPQUFPLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQzlCLENBQUMsQ0FBQztRQUVGLHVDQUF1QztRQUN2QyxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBRTlFLGtGQUFrRjtRQUNsRixjQUFjLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUNuQyxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLElBQUksU0FBUyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQ3BHLENBQUMsQ0FBQztRQUVGLFNBQVMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO1lBQzlCLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO1FBQ3RFLENBQUMsQ0FBQztRQUVGLFVBQVUsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO1lBQy9CLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQzFCLEtBQUssRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUs7Z0JBQ3ZCLE1BQU0sRUFBRSxXQUFXO2dCQUNuQixXQUFXLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUU7YUFDdEMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDO1FBRUYsWUFBWSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUNqRSxDQUFDO0FBQ0osQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvYnJpYW5sb25nL0RldmVsb3Blci9zdW1taXQvdGVzdHMvaW50ZWdyYXRpb24vdXRpbHMvdGVzdFNlcnZlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTaW1wbGUgbW9jayBzZXJ2ZXIgZm9yIGludGVncmF0aW9uIHRlc3RzIHRoYXQgZG9lc24ndCByZWx5IG9uIGV4cHJlc3Ncbi8vIFRoaXMgYXZvaWRzIHZlcnNpb24gY29uZmxpY3RzIGJldHdlZW4gZXhwcmVzcyA0IGFuZCA1XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVUZXN0QXBwKCkge1xuICAvLyBSZXR1cm4gYSBzaW1wbGUgbW9jayBhcHAgb2JqZWN0IHRoYXQgbWltaWNzIHRoZSBleHByZXNzIEFQSSBuZWVkZWQgYnkgc3VwZXJ0ZXN0XG4gIHJldHVybiB7XG4gICAgLy8gTW9jayBleHByZXNzIG1ldGhvZHMgdXNlZCBieSBzdXBlcnRlc3RcbiAgICB1c2U6IGplc3QuZm4oKSxcbiAgICBwb3N0OiBqZXN0LmZuKCksXG4gICAgZ2V0OiBqZXN0LmZuKCksXG4gICAgbGlzdGVuOiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKChfcG9ydCwgY2FsbGJhY2spID0+IHtcbiAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcbiAgICAgIHJldHVybiB7IGNsb3NlOiBqZXN0LmZuKCkgfTtcbiAgICB9KSxcbiAgICBcbiAgICAvLyBTdXBlcnRlc3QgbmVlZHMgdGhlIGFkZHJlc3MgZnVuY3Rpb25cbiAgICBhZGRyZXNzOiBqZXN0LmZuKCgpID0+ICh7IHBvcnQ6IDQwMDAsIGZhbWlseTogJ0lQdjQnLCBhZGRyZXNzOiAnMTI3LjAuMC4xJyB9KSksXG4gICAgXG4gICAgLy8gTW9jayB0aGUgcm91dGUgaGFuZGxlcnMgZm9yIHRoZSBzcGVjaWZpYyBlbmRwb2ludHMgdXNlZCBpbiBtYWVzdHJvX2Zsb3cudGVzdC50c1xuICAgIGhhbmRsZUFwaUZsb3dzOiBqZXN0LmZuKChyZXEsIHJlcykgPT4ge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAyKS5qc29uKHsgaWQ6ICdmbG93XzEnLCBraW5kOiByZXEuYm9keT8ua2luZCA/PyAnbWFlc3RybycsIHN0YXRlOiAncXVldWVkJyB9KTtcbiAgICB9KSxcbiAgICBcbiAgICBoYW5kbGVSdW46IGplc3QuZm4oKHJlcSwgcmVzKSA9PiB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDIpLmpzb24oeyBydW5JZDogJ3J1bl8xJywgc3RhdHVzOiAnQUNDRVBURUQnIH0pO1xuICAgIH0pLFxuICAgIFxuICAgIGhhbmRsZVJ1bnM6IGplc3QuZm4oKHJlcSwgcmVzKSA9PiB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24oeyBcbiAgICAgICAgcnVuSWQ6IHJlcS5wYXJhbXMucnVuSWQsIFxuICAgICAgICBzdGF0dXM6ICdTVUNDRUVERUQnLCBcbiAgICAgICAgY29tcGxldGVkQXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSBcbiAgICAgIH0pO1xuICAgIH0pLFxuICAgIFxuICAgIGhhbmRsZUhlYWx0aDogamVzdC5mbigoX3JlcSwgcmVzKSA9PiByZXMuc3RhdHVzKDIwMCkuc2VuZCgnb2snKSlcbiAgfTtcbn0iXSwidmVyc2lvbiI6M30=