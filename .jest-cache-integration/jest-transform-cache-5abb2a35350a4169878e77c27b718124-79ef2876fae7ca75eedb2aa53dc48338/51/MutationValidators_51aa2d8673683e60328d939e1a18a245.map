{"file":"/Users/brianlong/Developer/summit/server/src/validation/MutationValidators.ts","mappings":";AAAA;;;GAGG;;;AAEH,6BAAwB;AAExB,0BAA0B;AACb,QAAA,cAAc,GAAG,OAAC,CAAC,MAAM,EAAE;KACrC,GAAG,CAAC,CAAC,EAAE,oBAAoB,CAAC;KAC5B,KAAK,CAAC,kBAAkB,EAAE,+EAA+E,CAAC,CAAC;AAEjG,QAAA,cAAc,GAAG,OAAC,CAAC,MAAM,EAAE;KACrC,GAAG,CAAC,CAAC,EAAE,oBAAoB,CAAC;KAC5B,IAAI,CAAC,gCAAgC,CAAC,CAAC;AAE7B,QAAA,gBAAgB,GAAG,OAAC,CAAC,MAAM,EAAE;KACvC,GAAG,CAAC,CAAC,EAAE,yBAAyB,CAAC;KACjC,GAAG,CAAC,CAAC,EAAE,yBAAyB,CAAC,CAAC;AAExB,QAAA,eAAe,GAAG,OAAC,CAAC,MAAM,EAAE;KACtC,QAAQ,CAAC,8BAA8B,CAAC;KACxC,MAAM,CACL,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,EAAE,EACtC,mCAAmC,CACpC,CAAC;AAEJ,oBAAoB;AACP,QAAA,gBAAgB,GAAG,OAAC,CAAC,MAAM,EAAE;KACvC,GAAG,CAAC,CAAC,EAAE,sBAAsB,CAAC;KAC9B,GAAG,CAAC,EAAE,EAAE,sBAAsB,CAAC;KAC/B,KAAK,CAAC,yBAAyB,EAAE,kFAAkF,CAAC,CAAC;AAE3G,QAAA,kBAAkB,GAAG,OAAC,CAAC,KAAK,CAAC,OAAC,CAAC,MAAM,EAAE,CAAC;KAClD,GAAG,CAAC,EAAE,EAAE,2BAA2B,CAAC;KACpC,MAAM,CACL,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,KAAK,MAAM,CAAC,MAAM,EAClD,8BAA8B,CAC/B,CAAC;AAES,QAAA,iBAAiB,GAAG,OAAC,CAAC,MAAM,CAAC,OAAC,CAAC,GAAG,EAAE,CAAC;KAC/C,MAAM,CACL,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,MAAM,IAAI,KAAK,EAChD,wCAAwC,CACzC;KACA,MAAM,CACL,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,UAAU,CAAC,EAC3E,8CAA8C,CAC/C,CAAC;AAEJ,0BAA0B;AACb,QAAA,sBAAsB,GAAG,OAAC,CAAC,MAAM,EAAE;KAC7C,GAAG,CAAC,CAAC,EAAE,4BAA4B,CAAC;KACpC,GAAG,CAAC,GAAG,EAAE,4BAA4B,CAAC;KACtC,KAAK,CAAC,mBAAmB,EAAE,sDAAsD,CAAC,CAAC;AAEtF,2BAA2B;AACd,QAAA,uBAAuB,GAAG,OAAC,CAAC,MAAM,EAAE;KAC9C,GAAG,CAAC,CAAC,EAAE,6BAA6B,CAAC;KACrC,GAAG,CAAC,GAAG,EAAE,6BAA6B,CAAC;KACvC,MAAM,CACL,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EACpD,6CAA6C,CAC9C,CAAC;AAES,QAAA,yBAAyB,GAAG,OAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,UAAU,EAAE,WAAW,EAAE,OAAO,CAAC,CAAC,CAAC;AAE9F,6BAA6B;AAChB,QAAA,oBAAoB,GAAG,OAAC,CAAC,MAAM,CAAC,OAAC,CAAC,GAAG,EAAE,CAAC;KAClD,MAAM,CACL,CAAC,QAAQ,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,MAAM,IAAI,KAAK,EACtD,sCAAsC,CACvC;KACA,MAAM,CACL,CAAC,QAAQ,EAAE,EAAE;IACX,0CAA0C;IAC1C,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IACrC,MAAM,iBAAiB,GAAG;QACxB,UAAU;QACV,cAAc;QACd,YAAY;QACZ,gBAAgB;KACjB,CAAC;IACF,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;AAC/D,CAAC,EACD,wDAAwD,CACzD,CAAC;AAEJ,6BAA6B;AAChB,QAAA,iBAAiB,GAAG,OAAC,CAAC,MAAM,EAAE;KACxC,QAAQ,CAAC,+BAA+B,CAAC;KACzC,GAAG,CAAC,OAAO,EAAE,iCAAiC,CAAC,CAAC;AAEtC,QAAA,kBAAkB,GAAG,OAAC,CAAC,MAAM,EAAE;KACzC,WAAW,CAAC,kCAAkC,CAAC;KAC/C,GAAG,CAAC,KAAK,EAAE,iDAAiD,CAAC,CAAC;AAEjE,yBAAyB;AACZ,QAAA,gBAAgB,GAAG,OAAC,CAAC,MAAM,EAAE;KACvC,GAAG,CAAC,gCAAgC,CAAC;KACrC,WAAW,CAAC,gCAAgC,CAAC;KAC7C,GAAG,CAAC,OAAO,EAAE,sCAAsC,CAAC,CAAC;AAExD,2BAA2B;AAC3B,MAAa,qBAAqB;IAChC;;OAEG;IACH,MAAM,CAAC,sBAAsB,CAAC,MAAW,EAAE,OAAY;QACrD,MAAM,MAAM,GAAa,EAAE,CAAC;QAE5B,8CAA8C;QAC9C,IAAI,MAAM,CAAC,eAAe,IAAI,OAAO,CAAC,WAAW,IAAI,KAAK,EAAE,CAAC;YAC3D,MAAM,CAAC,IAAI,CAAC,yDAAyD,CAAC,CAAC;QACzE,CAAC;QAED,uCAAuC;QACvC,IAAI,MAAM,CAAC,IAAI,KAAK,IAAI,IAAI,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;YACjD,MAAM,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC;YAChC,IAAI,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE,CAAC;gBAC/E,qDAAqD;gBACrD,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,EAAE,CAAC;gBAC1C,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,uCAAuC,CAAC,CAAC;YACjE,CAAC;QACH,CAAC;QAED,mCAAmC;QACnC,MAAM,eAAe,GAAG,CAAC,YAAY,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC;QAC3D,IAAI,eAAe,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,kBAAkB,CAAC,EAAE,CAAC;YACpG,MAAM,CAAC,IAAI,CAAC,6CAA6C,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;QAC1E,CAAC;QAED,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,MAAM,EAAE,CAAC;IAChD,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,4BAA4B,CAAC,YAAiB,EAAE,OAAY;QACjE,MAAM,MAAM,GAAa,EAAE,CAAC;QAE5B,yCAAyC;QACzC,IAAI,YAAY,CAAC,KAAK,KAAK,YAAY,CAAC,KAAK,EAAE,CAAC;YAC9C,MAAM,CAAC,IAAI,CAAC,4CAA4C,CAAC,CAAC;QAC5D,CAAC;QAED,kCAAkC;QAClC,IAAI,OAAO,CAAC,iBAAiB,IAAI,MAAM,EAAE,CAAC;YACxC,MAAM,CAAC,IAAI,CAAC,gEAAgE,CAAC,CAAC;QAChF,CAAC;QAED,yCAAyC;QACzC,IAAI,YAAY,CAAC,UAAU,GAAG,GAAG,IAAI,YAAY,CAAC,MAAM,KAAK,WAAW,EAAE,CAAC;YACzE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,8BAA8B,CAAC,EAAE,CAAC;gBACvE,MAAM,CAAC,IAAI,CAAC,sEAAsE,CAAC,CAAC;YACtF,CAAC;QACH,CAAC;QAED,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,MAAM,EAAE,CAAC;IAChD,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,8BAA8B,CAAC,aAAkB,EAAE,SAAiB,EAAE,OAAY;QACvF,MAAM,MAAM,GAAa,EAAE,CAAC;QAE5B,wCAAwC;QACxC,IAAI,SAAS,KAAK,QAAQ,IAAI,OAAO,CAAC,kBAAkB,IAAI,IAAI,EAAE,CAAC;YACjE,MAAM,CAAC,IAAI,CAAC,wDAAwD,CAAC,CAAC;QACxE,CAAC;QAED,8BAA8B;QAC9B,IAAI,SAAS,KAAK,QAAQ,IAAI,aAAa,CAAC,MAAM,EAAE,CAAC;YACnD,MAAM,gBAAgB,GAA6B;gBACjD,OAAO,EAAE,CAAC,QAAQ,CAAC;gBACnB,QAAQ,EAAE,CAAC,WAAW,EAAE,UAAU,CAAC;gBACnC,WAAW,EAAE,CAAC,QAAQ,EAAE,UAAU,CAAC;gBACnC,UAAU,EAAE,CAAC,QAAQ,CAAC;aACvB,CAAC;YAEF,MAAM,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC;YAC5C,IAAI,aAAa,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,EAAE,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,CAAC;gBACtF,MAAM,CAAC,IAAI,CAAC,kCAAkC,aAAa,OAAO,aAAa,CAAC,MAAM,EAAE,CAAC,CAAC;YAC5F,CAAC;QACH,CAAC;QAED,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,MAAM,EAAE,CAAC;IAChD,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,kBAAkB,CAAC,MAAc,EAAE,OAAY;QACpD,MAAM,MAAM,GAAa,EAAE,CAAC;QAE5B,gCAAgC;QAChC,MAAM,mBAAmB,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,sBAAsB,IAAI,MAAM,CAAC,CAAC;QACjF,IAAI,MAAM,GAAG,mBAAmB,EAAE,CAAC;YACjC,MAAM,CAAC,IAAI,CAAC,0CAA0C,MAAM,MAAM,mBAAmB,EAAE,CAAC,CAAC;QAC3F,CAAC;QAED,oCAAoC;QACpC,IAAI,OAAO,CAAC,eAAe,GAAG,MAAM,GAAG,OAAO,CAAC,gBAAgB,EAAE,CAAC;YAChE,MAAM,CAAC,IAAI,CAAC,yCAAyC,CAAC,CAAC;QACzD,CAAC;QAED,4BAA4B;QAC5B,IAAI,OAAO,CAAC,gBAAgB,GAAG,MAAM,GAAG,OAAO,CAAC,iBAAiB,EAAE,CAAC;YAClE,MAAM,CAAC,IAAI,CAAC,0CAA0C,CAAC,CAAC;QAC1D,CAAC;QAED,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,MAAM,EAAE,CAAC;IAChD,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,qBAAqB,CAAC,KAAY,EAAE,SAAiB,EAAE,OAAY;QACxE,MAAM,MAAM,GAAa,EAAE,CAAC;QAE5B,8BAA8B;QAC9B,MAAM,WAAW,GAAG,SAAS,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC;QACxD,IAAI,KAAK,CAAC,MAAM,GAAG,WAAW,EAAE,CAAC;YAC/B,MAAM,CAAC,IAAI,CAAC,6BAA6B,KAAK,CAAC,MAAM,MAAM,WAAW,EAAE,CAAC,CAAC;QAC5E,CAAC;QAED,0BAA0B;QAC1B,MAAM,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC,QAAQ,EAAE,CAAC;QAC1C,MAAM,eAAe,GAAG,OAAO,CAAC,sBAAsB,IAAI,CAAC,CAAC;QAC5D,IAAI,eAAe,IAAI,GAAG,EAAE,CAAC;YAC3B,MAAM,CAAC,IAAI,CAAC,4CAA4C,CAAC,CAAC;QAC5D,CAAC;QAED,gCAAgC;QAChC,IAAI,SAAS,KAAK,QAAQ,EAAE,CAAC;YAC3B,MAAM,IAAI,GAAG,IAAI,GAAG,EAAE,CAAC;YACvB,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;gBACzB,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;gBACzD,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC;oBAClB,MAAM,CAAC,IAAI,CAAC,4CAA4C,CAAC,CAAC;oBAC1D,MAAM;gBACR,CAAC;gBACD,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAChB,CAAC;QACH,CAAC;QAED,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,MAAM,EAAE,CAAC;IAChD,CAAC;CACF;AAjJD,sDAiJC;AAED,2BAA2B;AAC3B,MAAa,kBAAkB;IACrB,MAAM,CAAC,UAAU,GAA0B,IAAI,GAAG,EAAE,CAAC;IAE7D;;OAEG;IACH,MAAM,CAAC,cAAc,CACnB,GAAW,EACX,aAAqB,EACrB,QAAgB;QAEhB,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACvB,MAAM,WAAW,GAAG,GAAG,GAAG,QAAQ,CAAC;QAEnC,uCAAuC;QACvC,IAAI,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;QAEhD,2CAA2C;QAC3C,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,WAAW,CAAC,CAAC;QAEvD,kCAAkC;QAClC,IAAI,UAAU,CAAC,MAAM,IAAI,aAAa,EAAE,CAAC;YACvC,MAAM,SAAS,GAAG,UAAU,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC;YAC3C,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC;QACvC,CAAC;QAED,wBAAwB;QACxB,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACrB,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;QAErC,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;IAC3B,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,kBAAkB,CAAC,GAAW,EAAE,QAAgB;QACrD,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACvB,MAAM,WAAW,GAAG,GAAG,GAAG,QAAQ,CAAC;QACnC,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;QAClD,MAAM,gBAAgB,GAAG,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,WAAW,CAAC,CAAC;QAEnE,OAAO;YACL,UAAU,EAAE,gBAAgB,CAAC,MAAM;YACnC,eAAe,EAAE,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC,IAAI;YACnF,WAAW;YACX,SAAS,EAAE,GAAG;SACf,CAAC;IACJ,CAAC;;AAhDH,gDAiDC;AAED,sBAAsB;AACtB,MAAa,iBAAiB;IAC5B;;OAEG;IACH,MAAM,CAAC,aAAa,CAAC,KAAU;QAC7B,MAAM,MAAM,GAAa,EAAE,CAAC;QAE5B,yCAAyC;QACzC,MAAM,QAAQ,GAAG,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAE3E,wCAAwC;QACxC,MAAM,oBAAoB,GAAG;YAC3B,yBAAyB;YACzB,0BAA0B;YAC1B,wBAAwB;YACxB,yBAAyB;SAC1B,CAAC;QAEF,MAAM,uBAAuB,GAAG;YAC9B,0BAA0B;YAC1B,yBAAyB;YACzB,yBAAyB;SAC1B,CAAC;QAEF,MAAM,WAAW,GAAG;YAClB,8BAA8B;YAC9B,eAAe;YACf,aAAa;SACd,CAAC;QAEF,IAAI,oBAAoB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC;YACjE,MAAM,CAAC,IAAI,CAAC,kCAAkC,CAAC,CAAC;QAClD,CAAC;QAED,IAAI,uBAAuB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC;YACpE,MAAM,CAAC,IAAI,CAAC,qCAAqC,CAAC,CAAC;QACrD,CAAC;QAED,IAAI,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC;YACxD,MAAM,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;QAChD,CAAC;QAED,oDAAoD;QACpD,IAAI,QAAQ,CAAC,MAAM,GAAG,OAAO,EAAE,CAAC,CAAC,YAAY;YAC3C,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;QACtC,CAAC;QAED,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,MAAM,EAAE,CAAC;IAChD,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,mBAAmB,CACxB,IAAS,EACT,SAAiB,EACjB,QAAgB,EAChB,OAAa;QAEb,MAAM,MAAM,GAAa,EAAE,CAAC;QAE5B,wCAAwC;QACxC,IAAI,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;YACnC,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC;QACrC,CAAC;QAED,4BAA4B;QAC5B,MAAM,kBAAkB,GAAG,GAAG,QAAQ,IAAI,SAAS,EAAE,CAAC;QACtD,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,kBAAkB,CAAC,EAAE,CAAC;YACnD,MAAM,CAAC,IAAI,CAAC,uBAAuB,kBAAkB,EAAE,CAAC,CAAC;QAC3D,CAAC;QAED,yBAAyB;QACzB,IAAI,OAAO,EAAE,QAAQ,IAAI,OAAO,CAAC,QAAQ,KAAK,IAAI,CAAC,QAAQ,EAAE,CAAC;YAC5D,MAAM,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;QACjD,CAAC;QAED,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,MAAM,EAAE,CAAC;IAChD,CAAC;CACF;AA/ED,8CA+EC","names":[],"sources":["/Users/brianlong/Developer/summit/server/src/validation/MutationValidators.ts"],"sourcesContent":["/**\n * Comprehensive validation schemas and safety checks for mutations\n * Implements defense-in-depth validation with business rule enforcement\n */\n\nimport { z } from 'zod';\n\n// Base validation schemas\nexport const TenantIdSchema = z.string()\n  .min(1, 'Tenant ID required')\n  .regex(/^[a-zA-Z0-9_-]+$/, 'Tenant ID must contain only alphanumeric characters, underscores, and hyphens');\n\nexport const EntityIdSchema = z.string()\n  .min(1, 'Entity ID required')\n  .uuid('Entity ID must be a valid UUID');\n\nexport const ConfidenceSchema = z.number()\n  .min(0, 'Confidence must be >= 0')\n  .max(1, 'Confidence must be <= 1');\n\nexport const TimestampSchema = z.string()\n  .datetime('Must be a valid ISO datetime')\n  .refine(\n    (date) => new Date(date) <= new Date(),\n    'Timestamp cannot be in the future'\n  );\n\n// Entity validation\nexport const EntityKindSchema = z.string()\n  .min(1, 'Entity kind required')\n  .max(50, 'Entity kind too long')\n  .regex(/^[a-zA-Z][a-zA-Z0-9_]*$/, 'Entity kind must start with letter and contain only alphanumeric and underscores');\n\nexport const EntityLabelsSchema = z.array(z.string())\n  .max(20, 'Maximum 20 labels allowed')\n  .refine(\n    (labels) => new Set(labels).size === labels.length,\n    'Duplicate labels not allowed'\n  );\n\nexport const EntityPropsSchema = z.record(z.any())\n  .refine(\n    (props) => JSON.stringify(props).length <= 32768,\n    'Entity properties too large (max 32KB)'\n  )\n  .refine(\n    (props) => !props.hasOwnProperty('id') && !props.hasOwnProperty('tenantId'),\n    'Reserved property names not allowed in props'\n  );\n\n// Relationship validation\nexport const RelationshipTypeSchema = z.string()\n  .min(1, 'Relationship type required')\n  .max(100, 'Relationship type too long')\n  .regex(/^[A-Z][A-Z0-9_]*$/, 'Relationship type must be uppercase with underscores');\n\n// Investigation validation\nexport const InvestigationNameSchema = z.string()\n  .min(1, 'Investigation name required')\n  .max(200, 'Investigation name too long')\n  .refine(\n    (name) => !name.includes('<') && !name.includes('>'),\n    'Investigation name cannot contain HTML tags'\n  );\n\nexport const InvestigationStatusSchema = z.enum(['ACTIVE', 'ARCHIVED', 'COMPLETED', 'DRAFT']);\n\n// Custom metadata validation\nexport const CustomMetadataSchema = z.record(z.any())\n  .refine(\n    (metadata) => JSON.stringify(metadata).length <= 16384,\n    'Custom metadata too large (max 16KB)'\n  )\n  .refine(\n    (metadata) => {\n      // Check for potentially dangerous content\n      const str = JSON.stringify(metadata);\n      const dangerousPatterns = [\n        /<script/i,\n        /javascript:/i,\n        /on\\w+\\s*=/i,\n        /data:.*base64/i\n      ];\n      return !dangerousPatterns.some(pattern => pattern.test(str));\n    },\n    'Custom metadata contains potentially dangerous content'\n  );\n\n// Budget and cost validation\nexport const BudgetLimitSchema = z.number()\n  .positive('Budget limit must be positive')\n  .max(1000000, 'Budget limit too high (max $1M)');\n\nexport const CostEstimateSchema = z.number()\n  .nonnegative('Cost estimate cannot be negative')\n  .max(10000, 'Cost estimate too high (max $10K per operation)');\n\n// Token count validation\nexport const TokenCountSchema = z.number()\n  .int('Token count must be an integer')\n  .nonnegative('Token count cannot be negative')\n  .max(2000000, 'Token count too high (max 2M tokens)');\n\n// Business rule validators\nexport class BusinessRuleValidator {\n  /**\n   * Validates entity creation against business rules\n   */\n  static validateEntityCreation(entity: any, context: any): { valid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    // Check entity count limits per investigation\n    if (entity.investigationId && context.entityCount >= 50000) {\n      errors.push('Investigation has reached maximum entity limit (50,000)');\n    }\n\n    // Check for suspicious entity patterns\n    if (entity.kind === 'IP' && entity.props.address) {\n      const ip = entity.props.address;\n      if (ip.startsWith('127.') || ip.startsWith('169.254.') || ip.startsWith('10.')) {\n        // These might be internal IPs - warn but don't block\n        context.warnings = context.warnings || [];\n        context.warnings.push('Entity represents internal IP address');\n      }\n    }\n\n    // Validate entity kind permissions\n    const restrictedKinds = ['CLASSIFIED', 'PII', 'FINANCIAL'];\n    if (restrictedKinds.includes(entity.kind) && !context.user.permissions.includes('entity:sensitive')) {\n      errors.push(`Insufficient permissions for entity kind: ${entity.kind}`);\n    }\n\n    return { valid: errors.length === 0, errors };\n  }\n\n  /**\n   * Validates relationship creation against business rules\n   */\n  static validateRelationshipCreation(relationship: any, context: any): { valid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    // Prevent self-referential relationships\n    if (relationship.srcId === relationship.dstId) {\n      errors.push('Self-referential relationships not allowed');\n    }\n\n    // Check relationship count limits\n    if (context.relationshipCount >= 100000) {\n      errors.push('Investigation has reached maximum relationship limit (100,000)');\n    }\n\n    // Validate high-confidence relationships\n    if (relationship.confidence > 0.9 && relationship.source === 'automated') {\n      if (!context.user.permissions.includes('relationship:high_confidence')) {\n        errors.push('Insufficient permissions for high-confidence automated relationships');\n      }\n    }\n\n    return { valid: errors.length === 0, errors };\n  }\n\n  /**\n   * Validates investigation operations\n   */\n  static validateInvestigationOperation(investigation: any, operation: string, context: any): { valid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    // Check investigation limits per tenant\n    if (operation === 'create' && context.investigationCount >= 1000) {\n      errors.push('Tenant has reached maximum investigation limit (1,000)');\n    }\n\n    // Validate status transitions\n    if (operation === 'update' && investigation.status) {\n      const validTransitions: Record<string, string[]> = {\n        'DRAFT': ['ACTIVE'],\n        'ACTIVE': ['COMPLETED', 'ARCHIVED'],\n        'COMPLETED': ['ACTIVE', 'ARCHIVED'],\n        'ARCHIVED': ['ACTIVE']\n      };\n\n      const currentStatus = context.currentStatus;\n      if (currentStatus && !validTransitions[currentStatus]?.includes(investigation.status)) {\n        errors.push(`Invalid status transition from ${currentStatus} to ${investigation.status}`);\n      }\n    }\n\n    return { valid: errors.length === 0, errors };\n  }\n\n  /**\n   * Validates token usage against budgets and limits\n   */\n  static validateTokenUsage(tokens: number, context: any): { valid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    // Check per-request token limit\n    const maxTokensPerRequest = Number(process.env.MAX_TOKENS_PER_REQUEST || 500000);\n    if (tokens > maxTokensPerRequest) {\n      errors.push(`Token count exceeds per-request limit: ${tokens} > ${maxTokensPerRequest}`);\n    }\n\n    // Check daily token budget for user\n    if (context.dailyTokenUsage + tokens > context.dailyTokenBudget) {\n      errors.push('Request would exceed daily token budget');\n    }\n\n    // Check tenant-level limits\n    if (context.tenantTokenUsage + tokens > context.tenantTokenBudget) {\n      errors.push('Request would exceed tenant token budget');\n    }\n\n    return { valid: errors.length === 0, errors };\n  }\n\n  /**\n   * Validates bulk operations\n   */\n  static validateBulkOperation(items: any[], operation: string, context: any): { valid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    // Check bulk operation limits\n    const maxBulkSize = operation === 'entity' ? 1000 : 500;\n    if (items.length > maxBulkSize) {\n      errors.push(`Bulk operation too large: ${items.length} > ${maxBulkSize}`);\n    }\n\n    // Check for rate limiting\n    const currentHour = new Date().getHours();\n    const bulkOpsThisHour = context.bulkOperationsThisHour || 0;\n    if (bulkOpsThisHour >= 100) {\n      errors.push('Hourly bulk operation limit exceeded (100)');\n    }\n\n    // Validate unique items in bulk\n    if (operation === 'entity') {\n      const seen = new Set();\n      for (const item of items) {\n        const key = `${item.kind}:${JSON.stringify(item.props)}`;\n        if (seen.has(key)) {\n          errors.push('Duplicate items detected in bulk operation');\n          break;\n        }\n        seen.add(key);\n      }\n    }\n\n    return { valid: errors.length === 0, errors };\n  }\n}\n\n// Rate limiting validators\nexport class RateLimitValidator {\n  private static operations: Map<string, number[]> = new Map();\n\n  /**\n   * Check rate limit for a specific operation\n   */\n  static checkRateLimit(\n    key: string, \n    maxOperations: number, \n    windowMs: number\n  ): { allowed: boolean; resetTime?: number } {\n    const now = Date.now();\n    const windowStart = now - windowMs;\n    \n    // Get existing operations for this key\n    let timestamps = this.operations.get(key) || [];\n    \n    // Remove old timestamps outside the window\n    timestamps = timestamps.filter(ts => ts > windowStart);\n    \n    // Check if we're within the limit\n    if (timestamps.length >= maxOperations) {\n      const resetTime = timestamps[0] + windowMs;\n      return { allowed: false, resetTime };\n    }\n    \n    // Add current operation\n    timestamps.push(now);\n    this.operations.set(key, timestamps);\n    \n    return { allowed: true };\n  }\n\n  /**\n   * Get rate limit status\n   */\n  static getRateLimitStatus(key: string, windowMs: number) {\n    const now = Date.now();\n    const windowStart = now - windowMs;\n    const timestamps = this.operations.get(key) || [];\n    const recentOperations = timestamps.filter(ts => ts > windowStart);\n    \n    return {\n      operations: recentOperations.length,\n      oldestOperation: recentOperations.length > 0 ? Math.min(...recentOperations) : null,\n      windowStart,\n      windowEnd: now,\n    };\n  }\n}\n\n// Security validators\nexport class SecurityValidator {\n  /**\n   * Validate input for potential security issues\n   */\n  static validateInput(input: any): { valid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    // Convert to string for pattern matching\n    const inputStr = typeof input === 'string' ? input : JSON.stringify(input);\n\n    // Check for potential injection attacks\n    const sqlInjectionPatterns = [\n      /(\\bSELECT\\b.*\\bFROM\\b)/i,\n      /(\\bUNION\\b.*\\bSELECT\\b)/i,\n      /(\\bDROP\\b.*\\bTABLE\\b)/i,\n      /(\\bINSERT\\b.*\\bINTO\\b)/i,\n    ];\n\n    const cypherInjectionPatterns = [\n      /(\\bMATCH\\b.*\\bRETURN\\b)/i,\n      /(\\bCREATE\\b.*\\bNODE\\b)/i,\n      /(\\bDELETE\\b.*\\bNODE\\b)/i,\n    ];\n\n    const xssPatterns = [\n      /<script[^>]*>.*?<\\/script>/gi,\n      /javascript:/gi,\n      /on\\w+\\s*=/gi,\n    ];\n\n    if (sqlInjectionPatterns.some(pattern => pattern.test(inputStr))) {\n      errors.push('Potential SQL injection detected');\n    }\n\n    if (cypherInjectionPatterns.some(pattern => pattern.test(inputStr))) {\n      errors.push('Potential Cypher injection detected');\n    }\n\n    if (xssPatterns.some(pattern => pattern.test(inputStr))) {\n      errors.push('Potential XSS content detected');\n    }\n\n    // Check for excessively long inputs (potential DoS)\n    if (inputStr.length > 1048576) { // 1MB limit\n      errors.push('Input size too large');\n    }\n\n    return { valid: errors.length === 0, errors };\n  }\n\n  /**\n   * Validate user permissions for operation\n   */\n  static validatePermissions(\n    user: any,\n    operation: string,\n    resource: string,\n    context?: any\n  ): { valid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    // Check if user has wildcard permission\n    if (user.permissions.includes('*')) {\n      return { valid: true, errors: [] };\n    }\n\n    // Check specific permission\n    const requiredPermission = `${resource}:${operation}`;\n    if (!user.permissions.includes(requiredPermission)) {\n      errors.push(`Missing permission: ${requiredPermission}`);\n    }\n\n    // Check tenant isolation\n    if (context?.tenantId && context.tenantId !== user.tenantId) {\n      errors.push('Cross-tenant access not allowed');\n    }\n\n    return { valid: errors.length === 0, errors };\n  }\n}"],"version":3}