{"file":"/Users/brianlong/Developer/summit/tests/integration/safe-mutations.test.ts","mappings":"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","names":[],"sources":["/Users/brianlong/Developer/summit/tests/integration/safe-mutations.test.ts"],"sourcesContent":["/**\n * Integration tests for safe mutations\n * Tests the complete mutation pipeline with validation, execution, and rollback\n */\n\nimport { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport { MaestroSafeMutations } from '../../conductor-ui/frontend/src/maestro/mutations/SafeMutations';\nimport { IntelGraphSafeMutations } from '../../server/src/graphql/mutations/SafeMutations';\nimport { countTokens, validateTokenBudget } from '../../server/src/lib/tokcount';\nimport { BusinessRuleValidator, SecurityValidator } from '../../server/src/validation/MutationValidators';\n\ndescribe('Safe Mutations Integration Tests', () => {\n  beforeEach(() => {\n    // Reset any global state\n    process.env.TOKEN_BUDGET_LIMIT = '120000';\n    process.env.NODE_ENV = 'test';\n  });\n\n  afterEach(() => {\n    // Cleanup\n    delete process.env.TOKEN_BUDGET_LIMIT;\n  });\n\n  describe('Token Counting Integration', () => {\n    it('should count tokens accurately for OpenAI models', async () => {\n      const result = await countTokens('openai', 'gpt-4o-mini', 'Hello, world!');\n      \n      expect(result.model).toBe('gpt-4o-mini');\n      expect(result.prompt).toBeGreaterThan(0);\n      expect(result.total).toBe(result.prompt);\n      expect(result.estimatedCostUSD).toBeDefined();\n    });\n\n    it('should validate token budgets correctly', () => {\n      const budgetCheck = validateTokenBudget(100000, 120000);\n      \n      expect(budgetCheck.withinBudget).toBe(true);\n      expect(budgetCheck.recommendAction).toBe('warn');\n      expect(budgetCheck.percentUsed).toBeCloseTo(83.33, 2);\n    });\n\n    it('should block requests exceeding token budget', () => {\n      const budgetCheck = validateTokenBudget(130000, 120000);\n      \n      expect(budgetCheck.withinBudget).toBe(false);\n      expect(budgetCheck.recommendAction).toBe('block');\n      expect(budgetCheck.percentUsed).toBeGreaterThan(100);\n    });\n\n    it('should handle batch token counting', async () => {\n      const requests = [\n        { provider: 'openai', model: 'gpt-4o-mini', prompt: 'First prompt' },\n        { provider: 'openai', model: 'gpt-4o-mini', prompt: 'Second prompt' },\n        { provider: 'anthropic', model: 'claude-3-haiku', prompt: 'Third prompt' },\n      ];\n\n      // Mock batch endpoint response\n      const mockResponse = {\n        results: requests.map((req, i) => ({\n          id: `test-${i}`,\n          success: true,\n          model: req.model,\n          prompt: 10 + i,\n          total: 10 + i,\n          estimatedCostUSD: 0.001 * (i + 1),\n        })),\n        summary: {\n          totalRequests: 3,\n          successfulRequests: 3,\n          totalTokens: 33,\n          totalEstimatedCostUSD: 0.006,\n        },\n      };\n\n      expect(mockResponse.summary.totalTokens).toBe(33);\n      expect(mockResponse.summary.successfulRequests).toBe(3);\n    });\n  });\n\n  describe('Maestro Safe Mutations', () => {\n    it('should validate run configuration', async () => {\n      const validConfig = {\n        pipeline: 'test-pipeline',\n        autonomyLevel: 3,\n        budgetCap: 100,\n        canaryPercent: 0.1,\n        approvalRequired: false,\n      };\n\n      // This would normally call the actual API\n      expect(validConfig.pipeline).toBe('test-pipeline');\n      expect(validConfig.autonomyLevel).toBe(3);\n      expect(validConfig.budgetCap).toBe(100);\n    });\n\n    it('should reject invalid run configuration', async () => {\n      const invalidConfig = {\n        pipeline: '', // Invalid: empty pipeline name\n        autonomyLevel: 10, // Invalid: autonomy level > 5\n        budgetCap: -100, // Invalid: negative budget\n        canaryPercent: 1.5, // Invalid: canary > 1\n      };\n\n      // Validation should fail\n      expect(invalidConfig.pipeline).toBe('');\n      expect(invalidConfig.autonomyLevel).toBeGreaterThan(5);\n      expect(invalidConfig.budgetCap).toBeLessThan(0);\n      expect(invalidConfig.canaryPercent).toBeGreaterThan(1);\n    });\n\n    it('should enforce gradual autonomy level increases', async () => {\n      // Simulate current autonomy level of 2\n      const currentLevel = 2;\n      const requestedLevel = 5; // Too big of a jump\n      \n      if (requestedLevel > currentLevel + 1) {\n        expect(requestedLevel - currentLevel).toBeGreaterThan(1);\n      }\n    });\n\n    it('should validate budget constraints', async () => {\n      const mockBudget = { remaining: 50, cap: 5000 };\n      const requestedBudget = 100;\n      \n      // Should fail if requested > remaining\n      if (requestedBudget > mockBudget.remaining) {\n        expect(requestedBudget).toBeGreaterThan(mockBudget.remaining);\n      }\n    });\n  });\n\n  describe('IntelGraph Safe Mutations', () => {\n    it('should validate entity creation input', async () => {\n      const validEntity = {\n        tenantId: 'tenant-123',\n        kind: 'Person',\n        labels: ['Individual', 'Subject'],\n        props: { name: 'John Doe', age: 30 },\n        confidence: 0.9,\n        source: 'user_input',\n      };\n\n      // Mock context\n      const context = {\n        user: {\n          id: 'user-123',\n          tenantId: 'tenant-123',\n          permissions: ['entity:create'],\n        },\n        requestId: 'req-123',\n        timestamp: new Date().toISOString(),\n        source: 'graphql' as const,\n      };\n\n      expect(validEntity.tenantId).toBe('tenant-123');\n      expect(validEntity.kind).toBe('Person');\n      expect(validEntity.confidence).toBe(0.9);\n      expect(context.user.permissions).toContain('entity:create');\n    });\n\n    it('should validate relationship constraints', async () => {\n      const relationship = {\n        tenantId: 'tenant-123',\n        srcId: 'entity-1',\n        dstId: 'entity-2',\n        type: 'KNOWS',\n        confidence: 0.8,\n      };\n\n      // Should fail for self-referential relationships\n      const selfRef = { ...relationship, dstId: relationship.srcId };\n      expect(selfRef.srcId).toBe(selfRef.dstId);\n\n      // Should pass for valid relationships\n      expect(relationship.srcId).not.toBe(relationship.dstId);\n      expect(relationship.type).toBe('KNOWS');\n    });\n\n    it('should enforce bulk operation limits', async () => {\n      const largeEntityBatch = Array.from({ length: 1001 }, (_, i) => ({\n        tenantId: 'tenant-123',\n        kind: 'TestEntity',\n        labels: [],\n        props: { index: i },\n      }));\n\n      // Should exceed the 1000 entity limit\n      expect(largeEntityBatch.length).toBeGreaterThan(1000);\n\n      const validBatch = largeEntityBatch.slice(0, 1000);\n      expect(validBatch.length).toBe(1000);\n    });\n\n    it('should validate graph traversal parameters', async () => {\n      const validTraversal = {\n        startEntityId: 'entity-123',\n        tenantId: 'tenant-123',\n        maxDepth: 3,\n        relationshipTypes: ['KNOWS', 'WORKS_WITH'],\n        limit: 100,\n      };\n\n      expect(validTraversal.maxDepth).toBeLessThanOrEqual(5);\n      expect(validTraversal.limit).toBeLessThanOrEqual(1000);\n\n      // Invalid traversal\n      const invalidTraversal = {\n        ...validTraversal,\n        maxDepth: 10, // Too deep\n        limit: 2000, // Too many results\n      };\n\n      expect(invalidTraversal.maxDepth).toBeGreaterThan(5);\n      expect(invalidTraversal.limit).toBeGreaterThan(1000);\n    });\n  });\n\n  describe('Business Rule Validation', () => {\n    it('should validate entity creation business rules', () => {\n      const entity = {\n        kind: 'IP',\n        props: { address: '127.0.0.1' },\n        investigationId: 'inv-123',\n      };\n\n      const context = {\n        entityCount: 100,\n        user: { permissions: ['entity:create'] },\n        warnings: [],\n      };\n\n      const result = BusinessRuleValidator.validateEntityCreation(entity, context);\n      \n      expect(result.valid).toBe(true);\n      expect(context.warnings).toContain('Entity represents internal IP address');\n    });\n\n    it('should validate relationship business rules', () => {\n      const selfRefRelationship = {\n        srcId: 'entity-123',\n        dstId: 'entity-123', // Self-referential\n        confidence: 0.9,\n      };\n\n      const context = { relationshipCount: 50 };\n      const result = BusinessRuleValidator.validateRelationshipCreation(\n        selfRefRelationship, \n        context\n      );\n\n      expect(result.valid).toBe(false);\n      expect(result.errors).toContain('Self-referential relationships not allowed');\n    });\n\n    it('should validate investigation status transitions', () => {\n      const investigation = { status: 'COMPLETED' };\n      const context = { currentStatus: 'DRAFT' };\n\n      const result = BusinessRuleValidator.validateInvestigationOperation(\n        investigation,\n        'update',\n        context\n      );\n\n      expect(result.valid).toBe(false);\n      expect(result.errors[0]).toContain('Invalid status transition');\n    });\n\n    it('should validate token usage budgets', () => {\n      const context = {\n        dailyTokenUsage: 80000,\n        dailyTokenBudget: 100000,\n        tenantTokenUsage: 500000,\n        tenantTokenBudget: 1000000,\n      };\n\n      const result = BusinessRuleValidator.validateTokenUsage(30000, context);\n      expect(result.valid).toBe(false);\n      expect(result.errors).toContain('Request would exceed daily token budget');\n    });\n  });\n\n  describe('Security Validation', () => {\n    it('should detect SQL injection attempts', () => {\n      const maliciousInput = \"'; DROP TABLE users; --\";\n      const result = SecurityValidator.validateInput(maliciousInput);\n      \n      expect(result.valid).toBe(false);\n      expect(result.errors).toContain('Potential SQL injection detected');\n    });\n\n    it('should detect XSS attempts', () => {\n      const xssInput = '<script>alert(\"xss\")</script>';\n      const result = SecurityValidator.validateInput(xssInput);\n      \n      expect(result.valid).toBe(false);\n      expect(result.errors).toContain('Potential XSS content detected');\n    });\n\n    it('should validate user permissions', () => {\n      const user = {\n        permissions: ['entity:read'],\n        tenantId: 'tenant-123',\n      };\n\n      const result = SecurityValidator.validatePermissions(\n        user,\n        'create',\n        'entity',\n        { tenantId: 'tenant-123' }\n      );\n\n      expect(result.valid).toBe(false);\n      expect(result.errors).toContain('Missing permission: entity:create');\n    });\n\n    it('should prevent cross-tenant access', () => {\n      const user = {\n        permissions: ['entity:create'],\n        tenantId: 'tenant-123',\n      };\n\n      const result = SecurityValidator.validatePermissions(\n        user,\n        'create',\n        'entity',\n        { tenantId: 'tenant-456' }\n      );\n\n      expect(result.valid).toBe(false);\n      expect(result.errors).toContain('Cross-tenant access not allowed');\n    });\n  });\n\n  describe('Error Handling and Rollback', () => {\n    it('should handle validation errors gracefully', async () => {\n      // Test with invalid input that should trigger validation errors\n      const invalidInput = {\n        pipeline: '', // Invalid\n        autonomyLevel: 'invalid', // Wrong type\n        budgetCap: null, // Invalid\n      };\n\n      // Simulate validation error response\n      const errorResponse = {\n        success: false,\n        error: 'Validation failed',\n        validationErrors: {\n          issues: [\n            { path: ['pipeline'], message: 'Pipeline name required' },\n            { path: ['autonomyLevel'], message: 'Expected number, received string' },\n            { path: ['budgetCap'], message: 'Budget cap must be positive' },\n          ],\n        },\n      };\n\n      expect(errorResponse.success).toBe(false);\n      expect(errorResponse.validationErrors.issues).toHaveLength(3);\n    });\n\n    it('should execute rollback on failure', async () => {\n      let rollbackExecuted = false;\n      \n      const mockRollback = async () => {\n        rollbackExecuted = true;\n      };\n\n      // Simulate a mutation with rollback\n      const mutationResult = {\n        success: true,\n        rollbackFn: mockRollback,\n      };\n\n      // Execute rollback\n      if (mutationResult.rollbackFn) {\n        await mutationResult.rollbackFn();\n      }\n\n      expect(rollbackExecuted).toBe(true);\n    });\n\n    it('should handle batch rollback correctly', async () => {\n      const rollbackResults: string[] = [];\n      \n      const mutations = [\n        { success: true, rollbackFn: async () => rollbackResults.push('rollback-1') },\n        { success: true, rollbackFn: async () => rollbackResults.push('rollback-2') },\n        { success: false, rollbackFn: async () => rollbackResults.push('rollback-3') },\n      ];\n\n      // Execute rollbacks in reverse order\n      for (const mutation of mutations.reverse()) {\n        if (mutation.rollbackFn) {\n          await mutation.rollbackFn();\n        }\n      }\n\n      expect(rollbackResults).toEqual(['rollback-3', 'rollback-2', 'rollback-1']);\n    });\n  });\n\n  describe('Performance and Scalability', () => {\n    it('should handle large token counts efficiently', async () => {\n      const largePrompt = 'Lorem ipsum '.repeat(50000); // ~550k characters\n      const startTime = Date.now();\n      \n      const result = await countTokens('openai', 'gpt-4o-mini', largePrompt);\n      const duration = Date.now() - startTime;\n      \n      expect(result.total).toBeGreaterThan(100000);\n      expect(duration).toBeLessThan(5000); // Should complete in under 5 seconds\n    });\n\n    it('should validate bulk operations within time limits', () => {\n      const entities = Array.from({ length: 1000 }, (_, i) => ({\n        tenantId: 'tenant-123',\n        kind: 'TestEntity',\n        props: { index: i },\n      }));\n\n      const startTime = Date.now();\n      const context = { bulkOperationsThisHour: 5 };\n      \n      const result = BusinessRuleValidator.validateBulkOperation(\n        entities,\n        'entity',\n        context\n      );\n      \n      const duration = Date.now() - startTime;\n      \n      expect(result.valid).toBe(true);\n      expect(duration).toBeLessThan(1000); // Should validate in under 1 second\n    });\n\n    it('should enforce rate limits correctly', async () => {\n      // This would test the actual rate limiter\n      // For now, just validate the logic\n      const operations = [1, 2, 3, 4, 5, 6]; // 6 operations\n      const maxOps = 5;\n      const windowMs = 60000; // 1 minute\n      \n      expect(operations.length).toBeGreaterThan(maxOps);\n      \n      // Should be rate limited after 5 operations\n      const allowed = operations.length <= maxOps;\n      expect(allowed).toBe(false);\n    });\n  });\n});"],"version":3}