{"file":"/Users/brianlong/Developer/summit/tests/integration/example.graphql.test.ts","mappings":";AAAA,oDAAoD;AACpD,8DAA8D;;AAE9D,0DAAiE;AAEjE,QAAQ,CAAC,kCAAkC,EAAE,GAAG,EAAE;IAChD,IAAI,MAAW,CAAC;IAEhB,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,6BAA6B;QAC7B,MAAM,GAAG,MAAM,IAAA,uCAAuB,GAAE,CAAC;IAC3C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;QAC5C,qBAAqB;QACrB,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC;;;;;KAKnC,CAAC,CAAC;QAEH,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAClC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,aAAa,CAAC;YACvC,EAAE,EAAE,IAAI;YACR,OAAO,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC;SAC5B,CAAC,CAAC;QAEH,sCAAsC;QACtC,MAAM,CAAC,MAAM,CAAC,qBAAqB,CACjC,QAAQ,CAAC,OAAO,CAAC,cAAc,CAAC,EAChC,kBAAkB,CACnB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAChB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;QAC/C,wBAAwB;QACxB,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC;;;;;KAKpC,CAAC,CAAC;QAEH,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAClC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,aAAa,CAAC;YACvC,EAAE,EAAE,IAAI;YACR,IAAI,EAAE,UAAU;SACjB,CAAC,CAAC;QAEH,sCAAsC;QACtC,MAAM,CAAC,MAAM,CAAC,qBAAqB,CACjC,QAAQ,CAAC,OAAO,CAAC,cAAc,CAAC,EAChC,kBAAkB,CACnB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAChB,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/tests/integration/example.graphql.test.ts"],"sourcesContent":["// Example GraphQL test using the shared test client\n// Shows how to replace per-spec mocks with the unified client\n\nimport { createGraphQLTestClient } from '../utils/graphqlClient';\n\ndescribe('GraphQL Contract Tests (Example)', () => {\n  let client: any;\n\n  beforeAll(async () => {\n    // Initialize the test client\n    client = await createGraphQLTestClient();\n  });\n\n  it('should execute a basic query', async () => {\n    // Example query test\n    const response = await client.query(`\n      query {\n        ok\n        version\n      }\n    `);\n    \n    expect(response.status).toBe(200);\n    expect(response.body.data).toMatchObject({ \n      ok: true, \n      version: expect.any(String) \n    });\n    \n    // Use tolerant content-type assertion\n    expect(client.contentTypeStartsWith(\n      response.headers['content-type'], \n      'application/json'\n    )).toBe(true);\n  });\n\n  it('should execute a basic mutation', async () => {\n    // Example mutation test\n    const response = await client.mutate(`\n      mutation {\n        ok\n        __op\n      }\n    `);\n    \n    expect(response.status).toBe(200);\n    expect(response.body.data).toMatchObject({ \n      ok: true, \n      __op: 'mutation' \n    });\n    \n    // Use tolerant content-type assertion\n    expect(client.contentTypeStartsWith(\n      response.headers['content-type'], \n      'application/json'\n    )).toBe(true);\n  });\n});"],"version":3}