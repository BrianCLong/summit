{"file":"/Users/brianlong/Developer/summit/tests/integration/utils/graphqlTestServer.ts","mappings":"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","names":[],"sources":["/Users/brianlong/Developer/summit/tests/integration/utils/graphqlTestServer.ts"],"sourcesContent":["const http = require('http');\nconst url = require('url');\n\n// Create a simple HTTP server that simulates GraphQL endpoints needed for testing\nfunction createGraphQLTestApp() {\n  const server = http.createServer((req, res) => {\n    const parsedUrl = url.parse(req.url, true);\n    const path = parsedUrl.pathname;\n\n    // Enable CORS and set content type\n    res.setHeader('Content-Type', 'application/json');\n    res.setHeader('Access-Control-Allow-Origin', '*');\n    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE');\n    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\n\n    // Handle POST /graphql\n    if (req.method === 'POST' && path === '/graphql') {\n      let body = '';\n      req.on('data', chunk => {\n        body += chunk.toString();\n      });\n      \n      req.on('end', () => {\n        let reqBody = {};\n        try {\n          reqBody = JSON.parse(body);\n        } catch (e) {\n          // If JSON parsing fails, keep empty object\n        }\n\n        const query = reqBody.query;\n        \n        // Handle the specific queries from the test\n        if (query && query.includes('ok') && query.includes('version')) {\n          // Happy path: return ok and version\n          res.writeHead(200);\n          res.end(JSON.stringify({ \n            data: { \n              ok: true, \n              version: '1.0.0' \n            } \n          }));\n        } else if (query && query.includes('notAField')) {\n          // Error path: return GraphQL error\n          res.writeHead(200); // GraphQL returns 200 even for errors\n          res.end(JSON.stringify({ \n            data: null,\n            errors: [{ \n              message: \"Cannot query field \\\"notAField\\\" on type \\\"Query\\\".\",\n              locations: [{ line: 1, column: 3 }]\n            }]\n          }));\n        } else if (query && query.includes('__schema')) {\n          // Schema introspection query\n          res.writeHead(200);\n          res.end(JSON.stringify({ \n            data: { \n              __schema: { \n                types: [\n                  { name: 'Query' },\n                  { name: 'Mutation' },\n                  { name: 'String' },\n                  { name: 'Boolean' }\n                ]\n              } \n            } \n          }));\n        } else {\n          // Default response for other queries\n          res.writeHead(200);\n          res.end(JSON.stringify({ \n            data: { \n              ok: true,\n              version: 'default-1.0.0' \n            } \n          }));\n        }\n      });\n      return;\n    }\n\n    // 404 for other routes\n    res.writeHead(404);\n    res.end(JSON.stringify({ error: 'not found' }));\n  });\n\n  return server;\n}\n\nmodule.exports = { createGraphQLTestApp };"],"version":3}