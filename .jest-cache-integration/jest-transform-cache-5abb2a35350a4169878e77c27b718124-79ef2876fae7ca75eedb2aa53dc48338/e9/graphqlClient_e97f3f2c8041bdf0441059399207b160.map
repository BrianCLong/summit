{"file":"/Users/brianlong/Developer/summit/tests/integration/utils/graphqlClient.ts","mappings":";AAAA,mDAAmD;AACnD,sDAAsD;;AAQtD,kDA4DC;AASD,sDAEC;AA7ED;;;;;GAKG;AACI,KAAK,UAAU,mBAAmB,CAAC,OAA+B;IACvE,wDAAwD;IACxD,OAAO;QACL;;;;;WAKG;QACH,KAAK,CAAC,KAAK,CAAC,KAAkE;YAC5E,MAAM,WAAW,GAAG,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC;YACpE,MAAM,SAAS,GAAG,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,IAAI,EAAE,CAAC;YAEzE,8BAA8B;YAC9B,OAAO;gBACL,MAAM,EAAE,GAAG;gBACX,IAAI,EAAE;oBACJ,IAAI,EAAE;wBACJ,EAAE,EAAE,IAAI;wBACR,IAAI,EAAE,OAAO;wBACb,MAAM,EAAE,EAAE,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE;wBAC3C,OAAO,EAAE,YAAY;qBACtB;oBACD,MAAM,EAAE,SAAS;oBACjB,UAAU,EAAE,EAAE;iBACf;gBACD,OAAO,EAAE;oBACP,cAAc,EAAE,iCAAiC;iBAClD;aACF,CAAC;QACJ,CAAC;QAED;;;;;WAKG;QACH,KAAK,CAAC,MAAM,CAAC,QAAwE;YACnF,MAAM,cAAc,GAAG,OAAO,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC;YACnF,MAAM,SAAS,GAAG,OAAO,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,SAAS,IAAI,EAAE,CAAC;YAE/E,8BAA8B;YAC9B,OAAO;gBACL,MAAM,EAAE,GAAG;gBACX,IAAI,EAAE;oBACJ,IAAI,EAAE;wBACJ,EAAE,EAAE,IAAI;wBACR,IAAI,EAAE,UAAU;wBAChB,MAAM,EAAE,EAAE,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE;qBAC5C;oBACD,MAAM,EAAE,SAAS;oBACjB,UAAU,EAAE,EAAE;iBACf;gBACD,OAAO,EAAE;oBACP,cAAc,EAAE,iCAAiC;iBAClD;aACF,CAAC;QACJ,CAAC;KACF,CAAC;AACJ,CAAC;AAED;;;;;;GAMG;AACH,SAAgB,qBAAqB,CAAC,KAAa,EAAE,QAAgB;IACnE,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC;AACxE,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/tests/integration/utils/graphqlClient.ts"],"sourcesContent":["// Shared GraphQL test client for integration tests\n// Provides a consistent interface for GraphQL testing\n\n/**\n * Creates a GraphQL test client for integration testing\n * \n * @param options - Optional configuration for the GraphQL client\n * @returns GraphQL test client with query and mutate methods\n */\nexport async function createGraphQLClient(options?: { endpoint?: string }) {\n  // Return a mock client that simulates GraphQL responses\n  return {\n    /**\n     * Execute a GraphQL query\n     * \n     * @param query - GraphQL query string or object\n     * @returns Mock response with status, body, and headers\n     */\n    async query(query: string | { query: string, variables?: Record<string, any> }) {\n      const queryString = typeof query === 'string' ? query : query.query;\n      const variables = typeof query === 'string' ? {} : query.variables || {};\n      \n      // Simulate a GraphQL response\n      return {\n        status: 200,\n        body: { \n          data: { \n            ok: true, \n            __op: 'query',\n            result: { id: 'test_1', status: 'SUCCESS' },\n            version: 'test-1.0.0'\n          },\n          errors: undefined,\n          extensions: {}\n        },\n        headers: { \n          'content-type': 'application/json; charset=utf-8'\n        }\n      };\n    },\n    \n    /**\n     * Execute a GraphQL mutation\n     * \n     * @param mutation - GraphQL mutation string or object\n     * @returns Mock response with status, body, and headers\n     */\n    async mutate(mutation: string | { mutation: string, variables?: Record<string, any> }) {\n      const mutationString = typeof mutation === 'string' ? mutation : mutation.mutation;\n      const variables = typeof mutation === 'string' ? {} : mutation.variables || {};\n      \n      // Simulate a GraphQL response\n      return {\n        status: 200,\n        body: { \n          data: { \n            ok: true, \n            __op: 'mutation',\n            result: { id: 'mut_1', status: 'ACCEPTED' }\n          },\n          errors: undefined,\n          extensions: {}\n        },\n        headers: { \n          'content-type': 'application/json; charset=utf-8'\n        }\n      };\n    }\n  };\n}\n\n/**\n * Helper method for tolerant content-type assertions\n * \n * @param value - Actual content-type header value\n * @param expected - Expected content-type prefix\n * @returns boolean indicating if content-type starts with expected value\n */\nexport function contentTypeStartsWith(value: string, expected: string) {\n  return (value || '').toLowerCase().startsWith(expected.toLowerCase());\n}"],"version":3}