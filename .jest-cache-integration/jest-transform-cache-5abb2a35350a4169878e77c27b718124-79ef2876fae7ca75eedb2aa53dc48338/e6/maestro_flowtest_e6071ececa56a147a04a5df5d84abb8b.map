{"file":"/Users/brianlong/Developer/summit/tests/integration/maestro_flow.test.ts","mappings":";AAAA,wDAAwD;;AAExD,mDAAmD;AACnD,mDAA0C;AAC1C,+BAAkC;AAElC,QAAQ,CAAC,0BAA0B,EAAE,GAAG,EAAE;IACxC,IAAI,GAAQ,CAAC;IACb,IAAI,SAAiB,CAAC;IAEtB,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,GAAG,GAAG,MAAM,IAAA,0BAAa,GAAE,CAAC;QAE5B,0CAA0C;QAC1C,SAAS,GAAG,IAAA,SAAI,GAAE,CAAC;QACnB,OAAO,CAAC,GAAG,CAAC,wCAAwC,SAAS,EAAE,CAAC,CAAC;IACnE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mEAAmE,EAAE,KAAK,IAAI,EAAE;QACjF,kBAAkB;QAClB,MAAM,cAAc,GAAG,MAAM,IAAA,iBAAI,EAAC,GAAG,CAAC;aACnC,IAAI,CAAC,MAAM,CAAC;aACZ,GAAG,CAAC,iBAAiB,EAAE,IAAA,SAAI,GAAE,CAAC;aAC9B,IAAI,CAAC;YACJ,SAAS,EAAE,SAAS;YACpB,QAAQ,EAAE,aAAa;YACvB,MAAM,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE;SAC7B,CAAC,CAAC;QAEL,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACxC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;QAChD,MAAM,KAAK,GAAG,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC;QAExC,kFAAkF;QAClF,MAAM,iBAAiB,GAAG,MAAM,IAAA,iBAAI,EAAC,GAAG,CAAC,CAAC,GAAG,CAAC,SAAS,KAAK,EAAE,CAAC,CAAC;QAChE,MAAM,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC3C,OAAO,CAAC,GAAG,CAAC,OAAO,KAAK,YAAY,iBAAiB,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;QAErE,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,kCAAkC;QAC3F,qCAAqC;IACvC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,yDAAyD;AACtE,CAAC,CAAC,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/tests/integration/maestro_flow.test.ts"],"sourcesContent":["// Maestro Integration Flow (using Express test harness)\n\nimport { createTestApp } from './utils/testServer';\nimport { http } from './utils/httpClient';\nimport { v4 as uuid } from 'uuid';\n\ndescribe('Maestro Integration Flow', () => {\n  let app: any;\n  let runbookId: string;\n\n  beforeAll(async () => {\n    app = await createTestApp();\n\n    // Simulate creating a runbook for testing\n    runbookId = uuid();\n    console.log(`Simulating runbook creation with ID: ${runbookId}`);\n  });\n\n  it('should launch a run, transition states, and complete successfully', async () => {\n    // 1. Launch a run\n    const launchResponse = await http(app)\n      .post('/run')\n      .set('Idempotency-Key', uuid())\n      .send({\n        runbookId: runbookId,\n        tenantId: 'test-tenant',\n        params: { message: 'hello' }\n      });\n\n    expect(launchResponse.status).toBe(202);\n    expect(launchResponse.body.runId).toBeDefined();\n    const runId = launchResponse.body.runId;\n\n    // 2. Check run status (the test server returns SUCCEEDED immediately for testing)\n    const runStatusResponse = await http(app).get(`/runs/${runId}`);\n    expect(runStatusResponse.status).toBe(200);\n    console.log(`Run ${runId} status: ${runStatusResponse.body.status}`);\n\n    expect(runStatusResponse.body.status).toBe('SUCCEEDED'); // Expecting success for this test\n    // TODO: Verify artifacts, logs, etc.\n  }, 10000); // Reduced timeout since test server responds immediately\n});"],"version":3}