48c5814eb361c14b214db0151218863f
// Mock the services/api module before importing
jest.mock('services/api');
describe('api client contracts', () => {
    const { createClient } = require('services/api');
    beforeEach(() => {
        // Reset mocks before each test
        jest.clearAllMocks();
    });
    it('POST returns 202 and body', async () => {
        const api = createClient();
        const res = await api.post({ path: '/v1/jobs', body: { foo: 1 } });
        expect(res.status).toBe(202);
        expect(res.data).toEqual(expect.objectContaining({
            method: 'POST',
            path: '/v1/jobs',
            body: { foo: 1 }
        }));
    });
    it('handles 4xx gracefully', async () => {
        const api = createClient();
        // Mock a rejection for this specific test
        api.get.mockRejectedValueOnce(Object.assign(new Error('not found'), { status: 404 }));
        await expect(api.get({ path: '/v1/missing' })).rejects.toMatchObject({ status: 404 });
    });
    it('GET returns 200 and expected payload', async () => {
        const api = createClient();
        const res = await api.get({ path: '/v1/health' });
        expect(res.status).toBe(200);
        expect(res.data).toEqual(expect.objectContaining({
            method: 'GET',
            path: '/v1/health'
        }));
    });
    it('PUT returns 200 and updated payload', async () => {
        const api = createClient();
        const res = await api.put({ path: '/v1/entities/123', body: { name: 'updated' } });
        expect(res.status).toBe(200);
        expect(res.data).toEqual(expect.objectContaining({
            method: 'PUT',
            path: '/v1/entities/123',
            body: { name: 'updated' }
        }));
    });
    it('DELETE returns 204 and confirmation', async () => {
        const api = createClient();
        const res = await api.delete({ path: '/v1/entities/123' });
        expect(res.status).toBe(204);
        expect(res.data).toEqual(expect.objectContaining({
            method: 'DELETE',
            path: '/v1/entities/123'
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3Rlc3RzL2ludGVncmF0aW9uL2FwaS50ZXN0LmpzIiwibWFwcGluZ3MiOiJBQUFBLGdEQUFnRDtBQUNoRCxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBRTFCLFFBQVEsQ0FBQyxzQkFBc0IsRUFBRSxHQUFHLEVBQUU7SUFDcEMsTUFBTSxFQUFFLFlBQVksRUFBRSxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUVqRCxVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsK0JBQStCO1FBQy9CLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQywyQkFBMkIsRUFBRSxLQUFLLElBQUksRUFBRTtRQUN6QyxNQUFNLEdBQUcsR0FBRyxZQUFZLEVBQUUsQ0FBQztRQUMzQixNQUFNLEdBQUcsR0FBRyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDbkUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDN0IsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDO1lBQy9DLE1BQU0sRUFBRSxNQUFNO1lBQ2QsSUFBSSxFQUFFLFVBQVU7WUFDaEIsSUFBSSxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRTtTQUNqQixDQUFDLENBQUMsQ0FBQztJQUNOLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHdCQUF3QixFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3RDLE1BQU0sR0FBRyxHQUFHLFlBQVksRUFBRSxDQUFDO1FBRTNCLDBDQUEwQztRQUMxQyxHQUFHLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRXRGLE1BQU0sTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUN4RixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxzQ0FBc0MsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNwRCxNQUFNLEdBQUcsR0FBRyxZQUFZLEVBQUUsQ0FBQztRQUMzQixNQUFNLEdBQUcsR0FBRyxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQztRQUNsRCxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM3QixNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUM7WUFDL0MsTUFBTSxFQUFFLEtBQUs7WUFDYixJQUFJLEVBQUUsWUFBWTtTQUNuQixDQUFDLENBQUMsQ0FBQztJQUNOLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHFDQUFxQyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ25ELE1BQU0sR0FBRyxHQUFHLFlBQVksRUFBRSxDQUFDO1FBQzNCLE1BQU0sR0FBRyxHQUFHLE1BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksRUFBRSxrQkFBa0IsRUFBRSxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ25GLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzdCLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztZQUMvQyxNQUFNLEVBQUUsS0FBSztZQUNiLElBQUksRUFBRSxrQkFBa0I7WUFDeEIsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRTtTQUMxQixDQUFDLENBQUMsQ0FBQztJQUNOLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHFDQUFxQyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ25ELE1BQU0sR0FBRyxHQUFHLFlBQVksRUFBRSxDQUFDO1FBQzNCLE1BQU0sR0FBRyxHQUFHLE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxrQkFBa0IsRUFBRSxDQUFDLENBQUM7UUFDM0QsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDN0IsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDO1lBQy9DLE1BQU0sRUFBRSxRQUFRO1lBQ2hCLElBQUksRUFBRSxrQkFBa0I7U0FDekIsQ0FBQyxDQUFDLENBQUM7SUFDTixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9icmlhbmxvbmcvRGV2ZWxvcGVyL3N1bW1pdC90ZXN0cy9pbnRlZ3JhdGlvbi9hcGkudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNb2NrIHRoZSBzZXJ2aWNlcy9hcGkgbW9kdWxlIGJlZm9yZSBpbXBvcnRpbmdcbmplc3QubW9jaygnc2VydmljZXMvYXBpJyk7XG5cbmRlc2NyaWJlKCdhcGkgY2xpZW50IGNvbnRyYWN0cycsICgpID0+IHtcbiAgY29uc3QgeyBjcmVhdGVDbGllbnQgfSA9IHJlcXVpcmUoJ3NlcnZpY2VzL2FwaScpO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIC8vIFJlc2V0IG1vY2tzIGJlZm9yZSBlYWNoIHRlc3RcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgaXQoJ1BPU1QgcmV0dXJucyAyMDIgYW5kIGJvZHknLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgYXBpID0gY3JlYXRlQ2xpZW50KCk7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgYXBpLnBvc3QoeyBwYXRoOiAnL3YxL2pvYnMnLCBib2R5OiB7IGZvbzogMSB9IH0pO1xuICAgIGV4cGVjdChyZXMuc3RhdHVzKS50b0JlKDIwMik7XG4gICAgZXhwZWN0KHJlcy5kYXRhKS50b0VxdWFsKGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgcGF0aDogJy92MS9qb2JzJyxcbiAgICAgIGJvZHk6IHsgZm9vOiAxIH1cbiAgICB9KSk7XG4gIH0pO1xuXG4gIGl0KCdoYW5kbGVzIDR4eCBncmFjZWZ1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGFwaSA9IGNyZWF0ZUNsaWVudCgpO1xuICAgIFxuICAgIC8vIE1vY2sgYSByZWplY3Rpb24gZm9yIHRoaXMgc3BlY2lmaWMgdGVzdFxuICAgIGFwaS5nZXQubW9ja1JlamVjdGVkVmFsdWVPbmNlKE9iamVjdC5hc3NpZ24obmV3IEVycm9yKCdub3QgZm91bmQnKSwgeyBzdGF0dXM6IDQwNCB9KSk7XG4gICAgXG4gICAgYXdhaXQgZXhwZWN0KGFwaS5nZXQoeyBwYXRoOiAnL3YxL21pc3NpbmcnIH0pKS5yZWplY3RzLnRvTWF0Y2hPYmplY3QoeyBzdGF0dXM6IDQwNCB9KTtcbiAgfSk7XG5cbiAgaXQoJ0dFVCByZXR1cm5zIDIwMCBhbmQgZXhwZWN0ZWQgcGF5bG9hZCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBhcGkgPSBjcmVhdGVDbGllbnQoKTtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBhcGkuZ2V0KHsgcGF0aDogJy92MS9oZWFsdGgnIH0pO1xuICAgIGV4cGVjdChyZXMuc3RhdHVzKS50b0JlKDIwMCk7XG4gICAgZXhwZWN0KHJlcy5kYXRhKS50b0VxdWFsKGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICBwYXRoOiAnL3YxL2hlYWx0aCdcbiAgICB9KSk7XG4gIH0pO1xuXG4gIGl0KCdQVVQgcmV0dXJucyAyMDAgYW5kIHVwZGF0ZWQgcGF5bG9hZCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBhcGkgPSBjcmVhdGVDbGllbnQoKTtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBhcGkucHV0KHsgcGF0aDogJy92MS9lbnRpdGllcy8xMjMnLCBib2R5OiB7IG5hbWU6ICd1cGRhdGVkJyB9IH0pO1xuICAgIGV4cGVjdChyZXMuc3RhdHVzKS50b0JlKDIwMCk7XG4gICAgZXhwZWN0KHJlcy5kYXRhKS50b0VxdWFsKGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgIG1ldGhvZDogJ1BVVCcsXG4gICAgICBwYXRoOiAnL3YxL2VudGl0aWVzLzEyMycsXG4gICAgICBib2R5OiB7IG5hbWU6ICd1cGRhdGVkJyB9XG4gICAgfSkpO1xuICB9KTtcblxuICBpdCgnREVMRVRFIHJldHVybnMgMjA0IGFuZCBjb25maXJtYXRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgYXBpID0gY3JlYXRlQ2xpZW50KCk7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgYXBpLmRlbGV0ZSh7IHBhdGg6ICcvdjEvZW50aXRpZXMvMTIzJyB9KTtcbiAgICBleHBlY3QocmVzLnN0YXR1cykudG9CZSgyMDQpO1xuICAgIGV4cGVjdChyZXMuZGF0YSkudG9FcXVhbChleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICBtZXRob2Q6ICdERUxFVEUnLFxuICAgICAgcGF0aDogJy92MS9lbnRpdGllcy8xMjMnXG4gICAgfSkpO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9