{"file":"/Users/brianlong/Developer/summit/tests/integration/export-integrity.test.ts","mappings":"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","names":[],"sources":["/Users/brianlong/Developer/summit/tests/integration/export-integrity.test.ts"],"sourcesContent":["/**\n * Integration tests for deterministic export integrity verification\n * GA Core requirement: export -> unzip -> recompute hashes -> assert integrity\n */\n\nimport { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport { DeterministicExportService, ExportRequest } from '../../server/src/services/DeterministicExportService';\nimport { getNeo4jDriver } from '../../server/src/config/database';\nimport { getPostgresPool } from '../../server/src/config/database';\nimport { existsSync, rmSync, mkdirSync } from 'fs';\nimport { join } from 'path';\nimport { createHash } from 'crypto';\n\ndescribe('Export Integrity Verification', () => {\n  let exportService: DeterministicExportService;\n  let neo4jSession: any;\n  \n  beforeEach(async () => {\n    exportService = new DeterministicExportService();\n    neo4jSession = getNeo4jDriver().session();\n    \n    // Create test data in Neo4j\n    await neo4jSession.run(`\n      CREATE \n        (p1:Entity {id: 'person-1', name: 'Alice Smith', type: 'PERSON', created_at: datetime('2025-01-01T00:00:00Z')}),\n        (p2:Entity {id: 'person-2', name: 'Bob Jones', type: 'PERSON', created_at: datetime('2025-01-02T00:00:00Z')}),\n        (o1:Entity {id: 'org-1', name: 'ACME Corp', type: 'ORG', created_at: datetime('2025-01-03T00:00:00Z')}),\n        (p1)-[:RELATIONSHIP {id: 'rel-1', type: 'WORKS_FOR', created_at: datetime('2025-01-04T00:00:00Z')}]->(o1),\n        (p2)-[:RELATIONSHIP {id: 'rel-2', type: 'WORKS_FOR', created_at: datetime('2025-01-05T00:00:00Z')}]->(o1)\n    `);\n  });\n  \n  afterEach(async () => {\n    // Clean up test data\n    await neo4jSession.run('MATCH (n) DETACH DELETE n');\n    await neo4jSession.close();\n    \n    // Clean up test files\n    const testDir = join(process.cwd(), 'tmp', 'exports');\n    if (existsSync(testDir)) {\n      rmSync(testDir, { recursive: true, force: true });\n    }\n  });\n  \n  it('should create deterministic export with consistent hashes', async () => {\n    const request: ExportRequest = {\n      format: 'bundle',\n      userId: 'test-user',\n      includeManifest: true,\n      includeProvenance: true\n    };\n    \n    // Create first export\n    const export1 = await exportService.createExportBundle(request, neo4jSession);\n    \n    // Create second export with same parameters\n    const export2 = await exportService.createExportBundle(request, neo4jSession);\n    \n    // Manifests should have different IDs but same data hashes\n    expect(export1.manifest.exportId).not.toBe(export2.manifest.exportId);\n    expect(export1.manifest.files.length).toBe(export2.manifest.files.length);\n    \n    // File content hashes should be identical (deterministic ordering)\n    const getFileHash = (manifest: any, filename: string) => \n      manifest.files.find((f: any) => f.filename === filename)?.sha256;\n    \n    expect(getFileHash(export1.manifest, 'entities.json'))\n      .toBe(getFileHash(export2.manifest, 'entities.json'));\n    \n    expect(getFileHash(export1.manifest, 'relationships.json'))\n      .toBe(getFileHash(export2.manifest, 'relationships.json'));\n    \n    console.log('✅ Deterministic export produces consistent hashes');\n  });\n  \n  it('should verify export bundle integrity end-to-end', async () => {\n    const request: ExportRequest = {\n      format: 'bundle',\n      userId: 'test-user',\n      includeManifest: true,\n      includeProvenance: true\n    };\n    \n    // Step 1: Create export bundle\n    const { exportId, bundlePath, manifest } = await exportService.createExportBundle(\n      request, \n      neo4jSession\n    );\n    \n    expect(existsSync(bundlePath)).toBe(true);\n    expect(manifest.integrity.totalFiles).toBeGreaterThan(0);\n    expect(manifest.integrity.bundleHash).toBeTruthy();\n    expect(manifest.integrity.manifestHash).toBeTruthy();\n    \n    console.log(`📦 Created bundle: ${bundlePath}`);\n    console.log(`📊 Files: ${manifest.integrity.totalFiles}, Bytes: ${manifest.integrity.totalBytes}`);\n    \n    // Step 2: Verify bundle integrity\n    const verificationResult = await exportService.verifyExportBundle(bundlePath);\n    \n    expect(verificationResult.verification.verified).toBe(true);\n    expect(verificationResult.verification.verificationErrors).toHaveLength(0);\n    expect(verificationResult.exportId).toBe(exportId);\n    \n    console.log('✅ Bundle integrity verification passed');\n    \n    // Step 3: Assert integrity requirements\n    expect(verificationResult.integrity.bundleHash).toBeTruthy();\n    expect(verificationResult.integrity.manifestHash).toBeTruthy();\n    expect(verificationResult.files.length).toBeGreaterThanOrEqual(3); // entities, relationships, transforms\n    \n    // Step 4: Verify all files have SHA256 hashes\n    for (const file of verificationResult.files) {\n      expect(file.sha256).toMatch(/^[a-f0-9]{64}$/);\n      expect(file.bytes).toBeGreaterThan(0);\n      expect(file.filename).toBeTruthy();\n      expect(file.transforms).toBeInstanceOf(Array);\n    }\n    \n    console.log('✅ All files have valid SHA256 hashes and metadata');\n    \n    // Step 5: Verify transform provenance\n    expect(verificationResult.transforms.length).toBeGreaterThan(0);\n    \n    for (const transform of verificationResult.transforms) {\n      expect(transform.id).toBeTruthy();\n      expect(transform.type).toMatch(/^(REDACTION|FILTERING|ANONYMIZATION|AGGREGATION)$/);\n      expect(transform.inputHash).toMatch(/^[a-f0-9]{64}$/);\n      expect(transform.outputHash).toMatch(/^[a-f0-9]{64}$/);\n      expect(transform.appliedAt).toBeTruthy();\n    }\n    \n    console.log('✅ Transform provenance chain verified');\n  });\n  \n  it('should detect bundle tampering', async () => {\n    const request: ExportRequest = {\n      format: 'bundle',\n      userId: 'test-user',\n      includeManifest: true\n    };\n    \n    // Create legitimate bundle\n    const { bundlePath } = await exportService.createExportBundle(request, neo4jSession);\n    \n    // Tamper with bundle (simulate corruption)\n    const fs = await import('fs/promises');\n    const originalData = await fs.readFile(bundlePath);\n    const tamperedData = Buffer.concat([originalData, Buffer.from('TAMPERED')]);\n    await fs.writeFile(bundlePath, tamperedData);\n    \n    // Verification should detect tampering\n    const verificationResult = await exportService.verifyExportBundle(bundlePath);\n    \n    expect(verificationResult.verification.verified).toBe(false);\n    expect(verificationResult.verification.verificationErrors.length).toBeGreaterThan(0);\n    expect(verificationResult.verification.verificationErrors[0]).toContain('Bundle hash mismatch');\n    \n    console.log('✅ Bundle tampering detected successfully');\n  });\n  \n  it('should track export metrics for GA Core dashboard', async () => {\n    const pool = getPostgresPool();\n    \n    // Create multiple exports to generate metrics\n    const requests = [\n      { format: 'bundle' as const, userId: 'user1' },\n      { format: 'bundle' as const, userId: 'user2' },\n      { format: 'json' as const, userId: 'user3' }\n    ];\n    \n    for (const request of requests) {\n      await exportService.createExportBundle(request, neo4jSession);\n    }\n    \n    // Check GA metrics function\n    const metricsResult = await pool.query(\n      'SELECT get_ga_export_metrics(1) as metrics'\n    );\n    \n    const metrics = metricsResult.rows[0].metrics;\n    \n    expect(metrics.total_exports).toBeGreaterThanOrEqual(3);\n    expect(metrics.manifests_with_integrity).toBeGreaterThanOrEqual(2); // Bundle exports\n    expect(metrics.integrity_rate).toBeGreaterThanOrEqual(0.66); // 2/3 bundle exports\n    expect(metrics.ga_threshold).toBe(0.95);\n    expect(metrics.days_evaluated).toBe(1);\n    \n    console.log('📊 Export metrics:', JSON.stringify(metrics, null, 2));\n    \n    // Check real-time metrics view\n    const realtimeResult = await pool.query(`\n      SELECT * FROM export_metrics_realtime \n      WHERE export_date = CURRENT_DATE\n    `);\n    \n    expect(realtimeResult.rows.length).toBeGreaterThanOrEqual(1);\n    const realtime = realtimeResult.rows[0];\n    \n    expect(realtime.total_exports).toBeGreaterThanOrEqual(3);\n    expect(realtime.bundle_exports).toBeGreaterThanOrEqual(2);\n    expect(realtime.bundle_integrity_rate).toBeGreaterThan(0);\n    \n    console.log('✅ GA Core export metrics tracking functional');\n  });\n  \n  it('should handle export size limits and validation', async () => {\n    // Test with minimal request\n    const smallRequest: ExportRequest = {\n      format: 'json',\n      userId: 'test-user',\n      entityType: 'PERSON' // Limit to persons only\n    };\n    \n    const export1 = await exportService.createExportBundle(smallRequest, neo4jSession);\n    expect(export1.manifest.integrity.totalBytes).toBeLessThan(10 * 1024); // < 10KB\n    \n    // Test bundle format includes all necessary files\n    const bundleRequest: ExportRequest = {\n      format: 'bundle',\n      userId: 'test-user',\n      includeManifest: true,\n      includeProvenance: true\n    };\n    \n    const export2 = await exportService.createExportBundle(bundleRequest, neo4jSession);\n    \n    const requiredFiles = ['entities.json', 'relationships.json', 'transforms.json', 'entities.csv', 'relationships.csv'];\n    \n    for (const filename of requiredFiles) {\n      const fileExists = export2.manifest.files.some(f => f.filename === filename);\n      expect(fileExists).toBe(true);\n    }\n    \n    console.log('✅ Export validation and file requirements verified');\n  });\n  \n  it('should provide complete audit trail', async () => {\n    const request: ExportRequest = {\n      format: 'bundle',\n      userId: 'audit-test-user',\n      investigationId: 'test-investigation',\n      includeProvenance: true\n    };\n    \n    const { manifest } = await exportService.createExportBundle(request, neo4jSession);\n    \n    // Verify audit trail completeness\n    expect(manifest.createdBy).toBe('audit-test-user');\n    expect(manifest.createdAt).toBeTruthy();\n    expect(manifest.request).toBeTruthy();\n    \n    // Verify transform chain is complete\n    for (let i = 0; i < manifest.transforms.length - 1; i++) {\n      const current = manifest.transforms[i];\n      const next = manifest.transforms[i + 1];\n      \n      // Output hash of current should match input hash of next\n      expect(current.outputHash).toBe(next.inputHash);\n    }\n    \n    // Check database storage\n    const pool = getPostgresPool();\n    const dbResult = await pool.query(\n      'SELECT * FROM export_manifests WHERE id = $1',\n      [manifest.exportId]\n    );\n    \n    expect(dbResult.rows.length).toBe(1);\n    const dbRecord = dbResult.rows[0];\n    \n    expect(dbRecord.created_by).toBe('audit-test-user');\n    expect(dbRecord.manifest_hash).toBe(manifest.integrity.manifestHash);\n    expect(dbRecord.bundle_hash).toBe(manifest.integrity.bundleHash);\n    expect(JSON.parse(dbRecord.transforms)).toEqual(manifest.transforms);\n    \n    console.log('✅ Complete audit trail verified');\n  });\n});\n\n/**\n * Performance benchmark test\n */\ndescribe('Export Performance Benchmarks', () => {\n  let exportService: DeterministicExportService;\n  let neo4jSession: any;\n  \n  beforeEach(async () => {\n    exportService = new DeterministicExportService();\n    neo4jSession = getNeo4jDriver().session();\n    \n    // Create larger dataset for performance testing\n    await neo4jSession.run(`\n      WITH range(1, 100) AS ids\n      UNWIND ids AS id\n      CREATE (p:Entity {\n        id: 'perf-person-' + toString(id),\n        name: 'Person ' + toString(id),\n        type: 'PERSON',\n        created_at: datetime('2025-01-01T00:00:00Z') + duration({hours: id})\n      })\n    `);\n  });\n  \n  afterEach(async () => {\n    await neo4jSession.run('MATCH (n:Entity) WHERE n.id STARTS WITH \"perf-\" DETACH DELETE n');\n    await neo4jSession.close();\n  });\n  \n  it('should export large datasets within performance budgets', async () => {\n    const request: ExportRequest = {\n      format: 'bundle',\n      userId: 'perf-test-user'\n    };\n    \n    const startTime = Date.now();\n    const result = await exportService.createExportBundle(request, neo4jSession);\n    const exportTime = Date.now() - startTime;\n    \n    // Performance assertions\n    expect(exportTime).toBeLessThan(30000); // < 30 seconds\n    expect(result.manifest.integrity.totalFiles).toBeGreaterThan(0);\n    expect(result.manifest.integrity.totalBytes).toBeGreaterThan(0);\n    \n    console.log(`📊 Performance: Exported ${result.manifest.integrity.totalFiles} files (${result.manifest.integrity.totalBytes} bytes) in ${exportTime}ms`);\n    \n    // Verify deterministic ordering performance\n    const startVerify = Date.now();\n    const verification = await exportService.verifyExportBundle(result.bundlePath);\n    const verifyTime = Date.now() - startVerify;\n    \n    expect(verifyTime).toBeLessThan(10000); // < 10 seconds verification\n    expect(verification.verification.verified).toBe(true);\n    \n    console.log(`✅ Verification completed in ${verifyTime}ms`);\n  });\n});"],"version":3}