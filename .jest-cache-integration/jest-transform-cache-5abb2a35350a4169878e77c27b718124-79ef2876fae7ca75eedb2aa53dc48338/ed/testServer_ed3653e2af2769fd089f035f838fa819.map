{"file":"/Users/brianlong/Developer/summit/tests/integration/utils/testServer.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,sCA6FC;AAjGD,2CAA6B;AAC7B,6BAA0B;AAE1B,2EAA2E;AACpE,KAAK,UAAU,aAAa;IACjC,8BAA8B;IAC9B,MAAM,KAAK,GAA2F,EAAE,CAAC;IACzG,IAAI,GAAG,GAAG,CAAC,CAAC;IAEZ,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QAC5C,MAAM,GAAG,GAAG,IAAI,SAAG,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,EAAE,UAAU,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;QAClE,MAAM,IAAI,GAAG,GAAG,CAAC,QAAQ,CAAC;QAC1B,MAAM,MAAM,GAAG,GAAG,CAAC,MAAM,IAAI,EAAE,CAAC;QAEhC,mCAAmC;QACnC,GAAG,CAAC,SAAS,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;QAClD,GAAG,CAAC,SAAS,CAAC,6BAA6B,EAAE,GAAG,CAAC,CAAC;QAClD,GAAG,CAAC,SAAS,CAAC,8BAA8B,EAAE,iCAAiC,CAAC,CAAC;QACjF,GAAG,CAAC,SAAS,CAAC,8BAA8B,EAAE,cAAc,CAAC,CAAC;QAE9D,4BAA4B;QAC5B,IAAI,MAAM,KAAK,SAAS,EAAE,CAAC;YACzB,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YACnB,GAAG,CAAC,GAAG,EAAE,CAAC;YACV,OAAO;QACT,CAAC;QAED,IAAI,IAAI,GAAG,EAAE,CAAC;QACd,GAAG,CAAC,EAAE,CAAC,MAAM,EAAE,KAAK,CAAC,EAAE;YACrB,IAAI,IAAI,KAAK,CAAC;QAChB,CAAC,CAAC,CAAC;QAEH,GAAG,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;YACjB,IAAI,CAAC;gBACH,IAAI,UAAU,GAAQ,EAAE,CAAC;gBACzB,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC,CAAC,QAAQ,CAAC,kBAAkB,CAAC,EAAE,CAAC;oBAC7E,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBAChC,CAAC;gBAED,yBAAyB;gBACzB,IAAI,MAAM,KAAK,MAAM,IAAI,IAAI,KAAK,YAAY,EAAE,CAAC;oBAC/C,MAAM,EAAE,GAAG,KAAK,EAAE,GAAG,EAAE,CAAC;oBACxB,MAAM,IAAI,GAAG,UAAU,EAAE,IAAI,IAAI,SAAS,CAAC;oBAC3C,MAAM,GAAG,GAAG,EAAE,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,QAAiB,EAAE,CAAC;oBACnD,KAAK,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC;oBAEhB,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;oBACnB,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;oBAC7B,OAAO;gBACT,CAAC;gBAED,sBAAsB;gBACtB,IAAI,MAAM,KAAK,MAAM,IAAI,IAAI,KAAK,SAAS,EAAE,CAAC;oBAC5C,KAAK,MAAM,EAAE,IAAI,KAAK,EAAE,CAAC;wBACvB,MAAM,GAAG,GAAG,KAAK,CAAC,EAAE,CAAC,CAAC;wBACtB,IAAI,GAAG,CAAC,KAAK,KAAK,QAAQ;4BAAE,GAAG,CAAC,KAAK,GAAG,SAAS,CAAC;6BAC7C,IAAI,GAAG,CAAC,KAAK,KAAK,SAAS;4BAAE,GAAG,CAAC,KAAK,GAAG,UAAU,CAAC;oBAC3D,CAAC;oBACD,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;oBACnB,GAAG,CAAC,GAAG,EAAE,CAAC;oBACV,OAAO;gBACT,CAAC;gBAED,4BAA4B;gBAC5B,IAAI,MAAM,KAAK,KAAK,IAAI,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,EAAE,CAAC;oBACvD,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,2CAA2C;oBACnF,MAAM,GAAG,GAAG,KAAK,CAAC,EAAE,CAAC,CAAC;oBAEtB,IAAI,CAAC,GAAG,EAAE,CAAC;wBACT,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;wBACnB,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC;wBAChD,OAAO;oBACT,CAAC;oBAED,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;oBACnB,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;oBAC7B,OAAO;gBACT,CAAC;gBAED,uBAAuB;gBACvB,IAAI,MAAM,KAAK,KAAK,IAAI,IAAI,KAAK,WAAW,EAAE,CAAC;oBAC7C,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;oBACnB,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;oBAC1C,OAAO;gBACT,CAAC;gBAED,uBAAuB;gBACvB,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;gBACnB,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC;YAClD,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;gBACnB,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,uBAAuB,EAAE,CAAC,CAAC,CAAC;YAC9D,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC;AAChB,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/tests/integration/utils/testServer.ts"],"sourcesContent":["import * as http from 'http';\nimport { URL } from 'url';\n\n// Create a simple HTTP server that mimics Express API for testing purposes\nexport async function createTestApp() {\n  // In-memory storage for flows\n  const flows: Record<string, { id: string; kind: string; state: 'queued' | 'running' | 'complete' }> = {};\n  let seq = 0;\n\n  const server = http.createServer((req, res) => {\n    const url = new URL(req.url || '/', `http://${req.headers.host}`);\n    const path = url.pathname;\n    const method = req.method || '';\n\n    // Enable CORS and set content type\n    res.setHeader('Content-Type', 'application/json');\n    res.setHeader('Access-Control-Allow-Origin', '*');\n    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\n\n    // Handle preflight requests\n    if (method === 'OPTIONS') {\n      res.writeHead(204);\n      res.end();\n      return;\n    }\n\n    let body = '';\n    req.on('data', chunk => {\n      body += chunk;\n    });\n\n    req.on('end', () => {\n      try {\n        let parsedBody: any = {};\n        if (body && (req.headers['content-type'] || '').includes('application/json')) {\n          parsedBody = JSON.parse(body);\n        }\n\n        // Handle POST /api/flows\n        if (method === 'POST' && path === '/api/flows') {\n          const id = `f_${++seq}`;\n          const kind = parsedBody?.kind ?? 'maestro';\n          const rec = { id, kind, state: 'queued' as const };\n          flows[id] = rec;\n          \n          res.writeHead(202);\n          res.end(JSON.stringify(rec));\n          return;\n        }\n\n        // Handle POST /__tick\n        if (method === 'POST' && path === '/__tick') {\n          for (const id in flows) {\n            const rec = flows[id];\n            if (rec.state === 'queued') rec.state = 'running';\n            else if (rec.state === 'running') rec.state = 'complete';\n          }\n          res.writeHead(204);\n          res.end();\n          return;\n        }\n\n        // Handle GET /api/flows/:id\n        if (method === 'GET' && path.startsWith('/api/flows/')) {\n          const id = path.split('/').pop() || ''; // Get the last part which should be the ID\n          const rec = flows[id];\n          \n          if (!rec) {\n            res.writeHead(404);\n            res.end(JSON.stringify({ error: 'not_found' }));\n            return;\n          }\n          \n          res.writeHead(200);\n          res.end(JSON.stringify(rec));\n          return;\n        }\n\n        // Handle GET /__health\n        if (method === 'GET' && path === '/__health') {\n          res.writeHead(200);\n          res.end(JSON.stringify({ status: 'ok' }));\n          return;\n        }\n\n        // 404 for other routes\n        res.writeHead(404);\n        res.end(JSON.stringify({ error: 'not found' }));\n      } catch (error) {\n        res.writeHead(500);\n        res.end(JSON.stringify({ error: 'Internal server error' }));\n      }\n    });\n  });\n\n  return server;\n}"],"version":3}