ce0e66f4bc2457771f4b7ce34e7d4252
// Proper Jest mock setup
jest.mock('archiver');
describe('export integrity', () => {
    const archiver = require('archiver');
    beforeEach(() => {
        // Reset the mock before each test
        jest.clearAllMocks();
    });
    it('bundles expected files and finalizes', async () => {
        // Create a mock archiver instance  
        const zipMock = {
            calls: { append: [], file: [], directory: [] },
            pipe: jest.fn(),
            append: jest.fn((x) => void zipMock.calls.append.push(x)),
            file: jest.fn((x) => void zipMock.calls.file.push(x)),
            directory: jest.fn((x) => void zipMock.calls.directory.push(x)),
            on: jest.fn(),
            finalize: jest.fn(async () => {
                // Find all 'finish' listeners and call them
                const finishListeners = zipMock.on.mock.calls
                    .filter(call => call[0] === 'finish')
                    .map(call => call[1]);
                for (const listener of finishListeners) {
                    listener();
                }
            })
        };
        // Mock the archiver.create method to return our mock
        archiver.create.mockReturnValue(zipMock);
        const zip = archiver.create('zip');
        // Simulate adding content to the archive
        zip.append('readme content', { name: 'README.md' });
        zip.file('path/to/data.json');
        zip.directory('assets/', 'assets');
        // Flag to track if finish event was triggered
        let finishCalled = false;
        zip.on('finish', () => {
            finishCalled = true;
        });
        // Finalize the archive (this should trigger the finish event)
        await zip.finalize();
        // Assert that operations were recorded
        expect(zip.calls.append.length + zip.calls.file.length + zip.calls.directory.length).toBeGreaterThan(0);
        expect(zip.calls.append).toContainEqual('readme content');
        expect(zip.calls.file).toContainEqual('path/to/data.json');
        expect(zip.calls.directory).toContainEqual('assets/');
        // Assert that finish event was called
        expect(finishCalled).toBe(true);
        // Verify archiver was called with correct format
        expect(archiver.create).toHaveBeenCalledWith('zip');
    });
    it('handles export failure gracefully', () => {
        const zipMock = {
            calls: { append: [], file: [], directory: [] },
            pipe: jest.fn(),
            append: jest.fn((x) => void zipMock.calls.append.push(x)),
            file: jest.fn((x) => void zipMock.calls.file.push(x)),
            directory: jest.fn((x) => void zipMock.calls.directory.push(x)),
            on: jest.fn(),
            finalize: jest.fn(async () => {
                // Find all 'finish' listeners and call them
                const finishListeners = zipMock.on.mock.calls
                    .filter(call => call[0] === 'finish')
                    .map(call => call[1]);
                for (const listener of finishListeners) {
                    listener();
                }
            })
        };
        // Mock the archiver.create method to return our mock
        archiver.create.mockReturnValue(zipMock);
        const zip = archiver.create('zip');
        // Don't call finalize, so finish event should not be triggered
        let finishCalled = false;
        zip.on('finish', () => {
            finishCalled = true;
        });
        // Only add some content but don't finalize
        zip.append('content', { name: 'file.txt' });
        // Assert operations were recorded but finish was not called (since finalize() wasn't called)
        expect(zip.calls.append).toContainEqual('content');
        expect(finishCalled).toBe(false); // This should be false because finalize() wasn't called
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,