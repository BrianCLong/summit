{"file":"/Users/brianlong/Developer/summit/tests/integration/utils/testServer.ts","mappings":";;;;;AAEA,sCA0BC;AA5BD,sDAA8B;AAEvB,KAAK,UAAU,aAAa;IACjC,MAAM,GAAG,GAAG,IAAA,iBAAO,GAAE,CAAC;IACtB,GAAG,CAAC,GAAG,CAAC,iBAAO,CAAC,IAAI,EAAE,CAAC,CAAC;IAExB,qDAAqD;IACrD,GAAG,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QAClC,8DAA8D;QAC9D,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,IAAI,IAAI,SAAS,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;IACpG,CAAC,CAAC,CAAC;IAEH,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QAC5B,yCAAyC;QACzC,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC,CAAC;IACtE,CAAC,CAAC,CAAC;IAEH,GAAG,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QACnC,2CAA2C;QAC3C,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YAC1B,KAAK,EAAE,GAAG,CAAC,MAAM,CAAC,KAAK;YACvB,MAAM,EAAE,WAAW;YACnB,WAAW,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACtC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,GAAG,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAChE,OAAO,GAAG,CAAC,CAAC,mDAAmD;AACjE,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/tests/integration/utils/testServer.ts"],"sourcesContent":["import express from 'express';\n\nexport async function createTestApp() {\n  const app = express();\n  app.use(express.json());\n\n  // Minimal stub routes needed by maestro_flow.test.ts\n  app.post('/api/flows', (req, res) => {\n    // return 202 Accepted to simulate async orchestration kickoff\n    return res.status(202).json({ id: 'flow_1', kind: req.body?.kind ?? 'maestro', state: 'queued' });\n  });\n\n  app.post('/run', (req, res) => {\n    // For maestro_flow.test.ts compatibility\n    return res.status(202).json({ runId: 'run_1', status: 'ACCEPTED' });\n  });\n\n  app.get('/runs/:runId', (req, res) => {\n    // For maestro_flow.test.ts status checking\n    return res.status(200).json({ \n      runId: req.params.runId, \n      status: 'SUCCEEDED', \n      completedAt: new Date().toISOString() \n    });\n  });\n\n  app.get('/__health', (_req, res) => res.status(200).send('ok'));\n  return app; // supertest can use the app directly (no listen())\n}"],"version":3}