{"file":"/Users/brianlong/Developer/summit/server/src/utils/dataRedaction.ts","mappings":"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","names":[],"sources":["/Users/brianlong/Developer/summit/server/src/utils/dataRedaction.ts"],"sourcesContent":["import { User } from '../types/context'; // Assuming User type is defined here\nimport pino from 'pino';\n\nconst logger = pino();\n\n// Define PII types and their associated properties/paths\n// This should ideally be driven by a central schema or configuration\nconst PII_DEFINITIONS = {\n  EMAIL: ['email', 'properties.email'],\n  PHONE: ['phone', 'properties.phone'],\n  SSN: ['ssn', 'properties.ssn'],\n  CREDIT_CARD: ['creditCard', 'properties.creditCard'],\n  NAME: ['name', 'label', 'properties.name'],\n  ADDRESS: ['address', 'properties.address'],\n  IP_ADDRESS: ['ipAddress', 'properties.ipAddress'],\n  DATE_OF_BIRTH: ['dob', 'properties.dob'],\n  // Add more as needed\n};\n\n// Define redaction strategies\nenum RedactionStrategy {\n  REDACT = '[REDACTED]',\n  MASK_PARTIAL = 'MASK_PARTIAL', // e.g., email: user***@example.com\n  HASH = 'HASH', // e.g., email: sha256(user@example.com)\n  NULL = null,\n}\n\n// Define roles and their associated redaction policies\n// This is a simplified example; a real system would have more granular policies\nconst REDACTION_POLICIES_BY_ROLE = {\n  ADMIN: {\n    // Admins see everything, no redaction by default\n  },\n  ANALYST: {\n    EMAIL: RedactionStrategy.MASK_PARTIAL,\n    PHONE: RedactionStrategy.MASK_PARTIAL,\n    SSN: RedactionStrategy.REDACT,\n    CREDIT_CARD: RedactionStrategy.REDACT,\n    // Other PII types might not be redacted for analysts\n  },\n  VIEWER: {\n    EMAIL: RedactionStrategy.REDACT,\n    PHONE: RedactionStrategy.REDACT,\n    SSN: RedactionStrategy.REDACT,\n    CREDIT_CARD: RedactionStrategy.REDACT,\n    NAME: RedactionStrategy.MASK_PARTIAL,\n    ADDRESS: RedactionStrategy.REDACT,\n    IP_ADDRESS: RedactionStrategy.REDACT,\n    DATE_OF_BIRTH: RedactionStrategy.REDACT,\n  },\n};\n\n/**\n * Redacts PII from data based on user role and defined policies.\n * @param data The data object to redact.\n * @param user The user performing the export.\n * @param sensitivity Optional sensitivity level for the data (e.g., 'high', 'medium').\n * @returns The redacted data object.\n */\nexport function redactData(data: any, user: User, sensitivity?: string): any {\n  if (!data) return data;\n\n  const userRole = user.role || 'VIEWER'; // Default to VIEWER if no role\n  const policy = REDACTION_POLICIES_BY_ROLE[userRole.toUpperCase()] || {};\n\n  // Deep clone data to avoid modifying original object\n  const redactedData = JSON.parse(JSON.stringify(data));\n\n  let piiRedactedCount = 0;\n  const piiFieldsRedacted: string[] = [];\n\n  const applyRedaction = (obj: any, path: string[]) => {\n    if (typeof obj !== 'object' || obj === null) return;\n\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        const currentPath = [...path, key];\n        const fullPath = currentPath.join('.');\n\n        for (const piiType in PII_DEFINITIONS) {\n          const piiPaths = PII_DEFINITIONS[piiType as keyof typeof PII_DEFINITIONS];\n          if (piiPaths.includes(fullPath)) {\n            const strategy = policy[piiType as keyof typeof policy];\n            if (strategy) {\n              obj[key] = applyStrategy(obj[key], piiType as keyof typeof PII_DEFINITIONS, strategy);\n              piiRedactedCount++;\n              piiFieldsRedacted.push(fullPath);\n              logger.debug(`Redacted PII field: ${fullPath} with strategy: ${strategy}`);\n            }\n          }\n        }\n\n        // Recursively apply redaction to nested objects/arrays\n        if (typeof obj[key] === 'object') {\n          applyRedaction(obj[key], currentPath);\n        }\n      }\n    }\n  };\n\n  applyRedaction(redactedData, []);\n\n  logger.info(`Data redaction complete for user ${user.id} (role: ${userRole}). Redacted ${piiRedactedCount} PII fields.`);\n  // You might want to audit this redaction event\n  // auditService.logRedaction(user.id, userRole, piiFieldsRedacted, sensitivity);\n\n  return redactedData;\n}\n\nfunction applyStrategy(value: any, piiType: keyof typeof PII_DEFINITIONS, strategy: RedactionStrategy): any {\n  if (value === undefined || value === null) return value;\n\n  switch (strategy) {\n    case RedactionStrategy.REDACT:\n      return RedactionStrategy.REDACT;\n    case RedactionStrategy.MASK_PARTIAL:\n      return maskPartial(String(value), piiType);\n    case RedactionStrategy.HASH:\n      return hashValue(String(value));\n    case RedactionStrategy.NULL:\n      return null;\n    default:\n      return value;\n  }\n}\n\nfunction maskPartial(value: string, piiType: keyof typeof PII_DEFINITIONS): string {\n  switch (piiType) {\n    case 'EMAIL':\n      const atIndex = value.indexOf('@');\n      if (atIndex > 0) {\n        return `${value.substring(0, 3)}***${value.substring(atIndex)}`;\n      }\n      return '***';\n    case 'PHONE':\n      if (value.length > 4) {\n        return `***-***-${value.substring(value.length - 4)}`;\n      }\n      return '***';\n    case 'NAME':\n      if (value.length > 2) {\n        return `${value.substring(0, 1)}***${value.substring(value.length - 1)}`;\n      }\n      return '***';\n    default:\n      return '[MASKED]';\n  }\n}\n\nfunction hashValue(value: string): string {\n  // In a real application, use a strong, secure hashing algorithm\n  // For demonstration, a simple SHA-256 like hash\n  const crypto = require('crypto');\n  return crypto.createHash('sha256').update(value).digest('hex');\n}\n"],"version":3}