{"file":"/Users/brianlong/Developer/summit/src/router/capabilityRouter.ts","mappings":";;;AAAA,sCAA0C;AA0D1C,MAAa,gBAAgB;IAS3B,YAAY,cAAsB,OAAO,CAAC,GAAG,EAAE;QAC7C,IAAI,CAAC,MAAM,GAAG,sBAAa,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;QACrD,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,EAAE,CAAC;QACxB,IAAI,CAAC,YAAY,GAAG;YAClB,KAAK,EAAE,IAAI,EAAE,sBAAsB;YACnC,UAAU,EAAE,GAAG,EAAE,yBAAyB;YAC1C,YAAY,EAAE,CAAC;SAChB,CAAC;QAEF,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC1B,CAAC;IAEO,gBAAgB;QACtB,+BAA+B;QAC/B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,aAAa,EAAE;YAC7B,KAAK,EAAE,aAAa;YACpB,QAAQ,EAAE,QAAQ;YAClB,YAAY,EAAE;gBACZ,iBAAiB,EAAE,UAAU,EAAE,QAAQ,EAAE,WAAW;gBACpD,SAAS,EAAE,eAAe,EAAE,WAAW,EAAE,YAAY;aACtD;YACD,IAAI,EAAE;gBACJ,WAAW,EAAE,IAAI,EAAE,sBAAsB;gBACzC,YAAY,EAAE,IAAI,EAAE,sBAAsB;gBAC1C,OAAO,EAAE,KAAK;aACf;YACD,WAAW,EAAE;gBACX,SAAS,EAAE,IAAI;gBACf,UAAU,EAAE,IAAI;gBAChB,WAAW,EAAE,IAAI;gBACjB,YAAY,EAAE,IAAI;aACnB;YACD,MAAM,EAAE;gBACN,iBAAiB,EAAE,GAAG;gBACtB,cAAc,EAAE,KAAK;gBACrB,eAAe,EAAE,MAAM;aACxB;YACD,OAAO,EAAE;gBACP,gBAAgB,EAAE,MAAM;gBACxB,eAAe,EAAE,IAAI;gBACrB,iBAAiB,EAAE,IAAI;aACxB;SACF,CAAC,CAAC;QAEH,kCAAkC;QAClC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,eAAe,EAAE;YAC/B,KAAK,EAAE,eAAe;YACtB,QAAQ,EAAE,QAAQ;YAClB,YAAY,EAAE;gBACZ,iBAAiB,EAAE,UAAU,EAAE,eAAe,EAAE,SAAS;aAC1D;YACD,IAAI,EAAE;gBACJ,WAAW,EAAE,MAAM;gBACnB,YAAY,EAAE,MAAM;gBACpB,OAAO,EAAE,MAAM;aAChB;YACD,WAAW,EAAE;gBACX,SAAS,EAAE,IAAI;gBACf,UAAU,EAAE,IAAI;gBAChB,WAAW,EAAE,IAAI;gBACjB,YAAY,EAAE,IAAI;aACnB;YACD,MAAM,EAAE;gBACN,iBAAiB,EAAE,IAAI;gBACvB,cAAc,EAAE,MAAM;gBACtB,eAAe,EAAE,KAAK;aACvB;YACD,OAAO,EAAE;gBACP,gBAAgB,EAAE,KAAK;gBACvB,eAAe,EAAE,KAAK;gBACtB,iBAAiB,EAAE,IAAI;aACxB;SACF,CAAC,CAAC;QAEH,6CAA6C;QAC7C,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,mBAAmB,EAAE;YACnC,KAAK,EAAE,4BAA4B;YACnC,QAAQ,EAAE,WAAW;YACrB,YAAY,EAAE;gBACZ,iBAAiB,EAAE,UAAU,EAAE,QAAQ,EAAE,WAAW;gBACpD,WAAW,EAAE,YAAY,EAAE,QAAQ;aACpC;YACD,IAAI,EAAE;gBACJ,WAAW,EAAE,KAAK;gBAClB,YAAY,EAAE,KAAK;gBACnB,OAAO,EAAE,MAAM;aAChB;YACD,WAAW,EAAE;gBACX,SAAS,EAAE,IAAI;gBACf,UAAU,EAAE,IAAI;gBAChB,WAAW,EAAE,IAAI;gBACjB,YAAY,EAAE,IAAI;aACnB;YACD,MAAM,EAAE;gBACN,iBAAiB,EAAE,IAAI;gBACvB,cAAc,EAAE,KAAK;gBACrB,eAAe,EAAE,KAAK;aACvB;YACD,OAAO,EAAE;gBACP,gBAAgB,EAAE,MAAM;gBACxB,eAAe,EAAE,IAAI;gBACrB,iBAAiB,EAAE,IAAI;aACxB;SACF,CAAC,CAAC;QAEH,kCAAkC;QAClC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,gBAAgB,EAAE;YAChC,KAAK,EAAE,yBAAyB;YAChC,QAAQ,EAAE,WAAW;YACrB,YAAY,EAAE;gBACZ,iBAAiB,EAAE,UAAU,EAAE,eAAe;aAC/C;YACD,IAAI,EAAE;gBACJ,WAAW,EAAE,OAAO;gBACpB,YAAY,EAAE,OAAO;gBACrB,OAAO,EAAE,MAAM;aAChB;YACD,WAAW,EAAE;gBACX,SAAS,EAAE,IAAI;gBACf,UAAU,EAAE,GAAG;gBACf,WAAW,EAAE,IAAI;gBACjB,YAAY,EAAE,IAAI;aACnB;YACD,MAAM,EAAE;gBACN,iBAAiB,EAAE,IAAI;gBACvB,cAAc,EAAE,MAAM;gBACtB,eAAe,EAAE,MAAM;aACxB;YACD,OAAO,EAAE;gBACP,gBAAgB,EAAE,MAAM;gBACxB,eAAe,EAAE,IAAI;gBACrB,iBAAiB,EAAE,IAAI;aACxB;SACF,CAAC,CAAC;QAEH,iCAAiC;QACjC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,EAAE;YAC1B,KAAK,EAAE,uBAAuB;YAC9B,QAAQ,EAAE,OAAO;YACjB,YAAY,EAAE;gBACZ,iBAAiB,EAAE,eAAe;aACnC;YACD,IAAI,EAAE;gBACJ,WAAW,EAAE,CAAC;gBACd,YAAY,EAAE,CAAC;gBACf,OAAO,EAAE,CAAC;aACX;YACD,WAAW,EAAE;gBACX,SAAS,EAAE,IAAI;gBACf,UAAU,EAAE,IAAI;gBAChB,WAAW,EAAE,IAAI;gBACjB,YAAY,EAAE,IAAI;aACnB;YACD,MAAM,EAAE;gBACN,iBAAiB,EAAE,EAAE;gBACrB,cAAc,EAAE,IAAI;gBACpB,eAAe,EAAE,IAAI;aACtB;YACD,OAAO,EAAE;gBACP,gBAAgB,EAAE,IAAI;gBACtB,eAAe,EAAE,KAAK;gBACtB,iBAAiB,EAAE,KAAK;aACzB;SACF,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,KAAK,CAAC,OAAuB;QACjC,OAAO,CAAC,GAAG,CAAC,uBAAuB,OAAO,CAAC,IAAI,KAAK,OAAO,CAAC,UAAU,GAAG,CAAC,CAAC;QAE3E,oBAAoB;QACpB,MAAM,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;QAChD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAErD,IAAI,MAAM,EAAE,CAAC;YACX,OAAO;gBACL,aAAa,EAAE,MAAM,CAAC,KAAK;gBAC3B,MAAM,EAAE,+CAA+C;gBACvD,aAAa,EAAE,CAAC;gBAChB,gBAAgB,EAAE,CAAC;gBACnB,cAAc,EAAE,EAAE;gBAClB,QAAQ,EAAE,IAAI;gBACd,UAAU,EAAE,IAAI;aACjB,CAAC;QACJ,CAAC;QAED,uBAAuB;QACvB,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;QAE1D,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC5B,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;QAC/D,CAAC;QAED,4BAA4B;QAC5B,MAAM,MAAM,GAAG,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YACtC,KAAK;YACL,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,OAAO,CAAC;YACtC,aAAa,EAAE,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,OAAO,CAAC;YAChD,gBAAgB,EAAE,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,OAAO,CAAC;SACvD,CAAC,CAAC,CAAC;QAEJ,mCAAmC;QACnC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAErD,MAAM,QAAQ,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QAC3B,MAAM,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAE7D,MAAM,MAAM,GAAkB;YAC5B,aAAa,EAAE,QAAQ,CAAC,KAAK,CAAC,KAAK;YACnC,MAAM,EAAE,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,KAAK,EAAE,OAAO,CAAC;YACpE,aAAa,EAAE,QAAQ,CAAC,aAAa;YACrC,gBAAgB,EAAE,QAAQ,CAAC,gBAAgB;YAC3C,cAAc,EAAE,SAAS;YACzB,QAAQ,EAAE,KAAK;YACf,UAAU,EAAE,QAAQ,CAAC,KAAK,CAAC,KAAK;SACjC,CAAC;QAEF,sCAAsC;QACtC,MAAM,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAEjD,OAAO,MAAM,CAAC;IAChB,CAAC;IAEO,KAAK,CAAC,kBAAkB,CAAC,OAAuB;QACtD,MAAM,UAAU,GAAsB,EAAE,CAAC;QAEzC,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC;YACzC,gDAAgD;YAChD,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC;gBAAE,SAAS;YAEzD,2BAA2B;YAC3B,MAAM,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;YACxD,IAAI,aAAa,GAAG,OAAO,CAAC,MAAM,CAAC,OAAO;gBAAE,SAAS;YACrD,IAAI,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU;gBAAE,SAAS;YAE3D,oCAAoC;YACpC,IAAI,IAAI,CAAC,YAAY,CAAC,YAAY,GAAG,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK;gBAAE,SAAS;YAEvF,oCAAoC;YACpC,IAAI,OAAO,CAAC,OAAO,CAAC,eAAe,GAAG,KAAK,CAAC,OAAO,CAAC,gBAAgB;gBAAE,SAAS;YAE/E,6BAA6B;YAC7B,IAAI,KAAK,CAAC,WAAW,CAAC,YAAY,GAAG,OAAO,CAAC,mBAAmB,CAAC,WAAW;gBAAE,SAAS;YAEvF,2CAA2C;YAC3C,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,iBAAiB,IAAI,KAAK,CAAC,WAAW,CAAC,WAAW,GAAG,GAAG;gBAAE,SAAS;YAEpG,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzB,CAAC;QAED,OAAO,UAAU,CAAC;IACpB,CAAC;IAEO,UAAU,CAAC,KAAsB,EAAE,OAAuB;QAOhE,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAEzC,yCAAyC;QACzC,MAAM,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QACxD,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;QACjF,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,aAAa,GAAG,SAAS,CAAC,CAAC,CAAC;QAE/D,oBAAoB;QACpB,MAAM,gBAAgB,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QAC9D,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,gBAAgB,GAAG,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;QACjF,MAAM,gBAAgB,GAAG,CAAC,SAAS,GAAG,KAAK,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QAE1E,oBAAoB;QACpB,MAAM,gBAAgB,GAAG,KAAK,CAAC,WAAW,CAAC,WAAW,CAAC;QAEvD,yBAAyB;QACzB,MAAM,oBAAoB,GAAG,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;QACnE,MAAM,mBAAmB,GAAG,oBAAoB,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAC5D,KAAK,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,CACjC,CAAC,MAAM,CAAC;QACT,MAAM,eAAe,GAAG,mBAAmB,GAAG,oBAAoB,CAAC,MAAM,CAAC;QAE1E,MAAM,MAAM,GAAG;YACb,IAAI,EAAE,SAAS;YACf,WAAW,EAAE,gBAAgB;YAC7B,WAAW,EAAE,gBAAgB;YAC7B,UAAU,EAAE,eAAe;YAC3B,KAAK,EAAE,CAAC;SACT,CAAC;QAEF,iBAAiB;QACjB,MAAM,CAAC,KAAK;YACV,MAAM,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI;gBAC1B,MAAM,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW;gBACxC,MAAM,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW;gBACxC,MAAM,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;QAEzC,OAAO,MAAM,CAAC;IAChB,CAAC;IAEO,UAAU,CAAC,OAAuB;QAMxC,oDAAoD;QACpD,MAAM,WAAW,GAAG;YAClB,IAAI,EAAE,GAAG;YACT,WAAW,EAAE,GAAG;YAChB,WAAW,EAAE,GAAG;YAChB,UAAU,EAAE,GAAG;SAChB,CAAC;QAEF,QAAQ,OAAO,CAAC,QAAQ,EAAE,CAAC;YACzB,KAAK,UAAU;gBACb,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,WAAW,EAAE,GAAG,EAAE,WAAW,EAAE,GAAG,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC;YAC5E,KAAK,MAAM;gBACT,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,WAAW,EAAE,GAAG,EAAE,WAAW,EAAE,GAAG,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC;YAC5E,KAAK,KAAK;gBACR,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,WAAW,EAAE,GAAG,EAAE,WAAW,EAAE,GAAG,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC;YAC5E;gBACE,OAAO,WAAW,CAAC;QACvB,CAAC;IACH,CAAC;IAEO,uBAAuB,CAAC,OAAuB;QACrD,MAAM,YAAY,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAEpC,IAAI,OAAO,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC;YACnC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACjC,CAAC;QAED,IAAI,OAAO,CAAC,OAAO,CAAC,kBAAkB,EAAE,CAAC;YACvC,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAClC,CAAC;QAED,OAAO,YAAY,CAAC;IACtB,CAAC;IAEO,YAAY,CAAC,KAAsB,EAAE,OAAuB;QAClE,MAAM,WAAW,GAAG,OAAO,CAAC,OAAO,CAAC,eAAe,GAAG,GAAG,CAAC,CAAC,YAAY;QACvE,MAAM,YAAY,GAAG,OAAO,CAAC,OAAO,CAAC,eAAe,GAAG,GAAG,CAAC,CAAC,aAAa;QAEzE,MAAM,SAAS,GAAG,CAAC,WAAW,GAAG,IAAI,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC;QAChE,MAAM,UAAU,GAAG,CAAC,YAAY,GAAG,IAAI,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC;QAEnE,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,GAAG,UAAU,CAAC,CAAC;IAC9D,CAAC;IAEO,eAAe,CAAC,KAAsB,EAAE,OAAuB;QACrE,MAAM,WAAW,GAAG,KAAK,CAAC,WAAW,CAAC,UAAU,CAAC;QAEjD,sDAAsD;QACtD,MAAM,eAAe,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,eAAe,GAAG,KAAK,CAAC,GAAG,GAAG,CAAC;QAE5E,wBAAwB;QACxB,MAAM,oBAAoB,GAAG;YAC3B,QAAQ,EAAE,GAAG;YACb,UAAU,EAAE,GAAG;YACf,SAAS,EAAE,GAAG;YACd,UAAU,EAAE,GAAG;SAChB,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAEtB,OAAO,WAAW,GAAG,eAAe,GAAG,oBAAoB,CAAC;IAC9D,CAAC;IAEO,cAAc,CACpB,KAAsB,EACtB,KAAU,EACV,OAAuB;QAEvB,MAAM,OAAO,GAAa,EAAE,CAAC;QAE7B,IAAI,KAAK,CAAC,IAAI,GAAG,GAAG,EAAE,CAAC;YACrB,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QACjC,CAAC;QAED,IAAI,KAAK,CAAC,WAAW,GAAG,GAAG,EAAE,CAAC;YAC5B,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACnC,CAAC;QAED,IAAI,KAAK,CAAC,WAAW,GAAG,GAAG,EAAE,CAAC;YAC5B,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC3B,CAAC;QAED,IAAI,KAAK,CAAC,UAAU,KAAK,GAAG,EAAE,CAAC;YAC7B,OAAO,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;QAC3C,CAAC;QAED,MAAM,aAAa,GAAG,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,uBAAuB,CAAC;QAExF,OAAO,YAAY,KAAK,CAAC,KAAK,QAAQ,aAAa,YAAY,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;IAC3F,CAAC;IAEO,gBAAgB,CAAC,OAAuB;QAC9C,OAAO,SAAS,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,UAAU,IAAI,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC;IAC9G,CAAC;IAEO,KAAK,CAAC,oBAAoB,CAAC,OAAuB,EAAE,MAAqB;QAC/E,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAC9B,IAAI,CAAC,SAAS,CAAC;YACb,OAAO,EAAE;gBACP,IAAI,EAAE,OAAO,CAAC,IAAI;gBAClB,UAAU,EAAE,OAAO,CAAC,UAAU;gBAC9B,QAAQ,EAAE,OAAO,CAAC,QAAQ;aAC3B;YACD,MAAM,EAAE;gBACN,aAAa,EAAE,MAAM,CAAC,aAAa;gBACnC,aAAa,EAAE,MAAM,CAAC,aAAa;gBACnC,MAAM,EAAE,MAAM,CAAC,MAAM;aACtB;SACF,CAAC,EACF,SAAS,EACT;YACE,IAAI,EAAE,CAAC,SAAS,EAAE,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC,aAAa,CAAC;YACzE,OAAO,EAAE,IAAI;SACd,CACF,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,gBAAgB,CACpB,KAAa,EACb,UAAkB,EAClB,aAAqB,EACrB,OAAgB,EAChB,OAAwB;QAExB,yBAAyB;QACzB,IAAI,CAAC,YAAY,CAAC,YAAY,IAAI,UAAU,CAAC;QAE7C,kDAAkD;QAClD,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACzC,IAAI,SAAS,IAAI,OAAO,EAAE,CAAC;YACzB,gEAAgE;YAChE,MAAM,KAAK,GAAG,GAAG,CAAC;YAClB,SAAS,CAAC,WAAW,CAAC,UAAU;gBAC9B,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,SAAS,CAAC,WAAW,CAAC,UAAU,GAAG,KAAK,GAAG,aAAa,CAAC;YAEzE,IAAI,OAAO,EAAE,CAAC;gBACZ,SAAS,CAAC,WAAW,CAAC,WAAW;oBAC/B,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,SAAS,CAAC,WAAW,CAAC,WAAW,GAAG,KAAK,GAAG,GAAG,CAAC,CAAC;YACjF,CAAC;iBAAM,CAAC;gBACN,SAAS,CAAC,WAAW,CAAC,WAAW;oBAC/B,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,SAAS,CAAC,WAAW,CAAC,WAAW,GAAG,KAAK,GAAG,GAAG,CAAC,CAAC;YACjF,CAAC;YAED,6BAA6B;YAC7B,MAAM,IAAI,CAAC,MAAM,CAAC,eAAe,CAC/B,QAAQ,KAAK,QAAQ,OAAO,CAAC,IAAI,OAAO,EACxC,OAAO,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,EAC9B,OAAO,EACP;gBACE,KAAK;gBACL,IAAI,EAAE,UAAU;gBAChB,OAAO,EAAE,aAAa;gBACtB,WAAW,EAAE,OAAO,CAAC,IAAI;gBACzB,UAAU,EAAE,OAAO,CAAC,UAAU;aAC/B,CACF,CAAC;QACJ,CAAC;IACH,CAAC;IAED,KAAK,CAAC,eAAe;QAKnB,MAAM,eAAe,GAAa,EAAE,CAAC;QACrC,MAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC;QAC3E,MAAM,YAAY,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;QAEtF,IAAI,YAAY,GAAG,EAAE,EAAE,CAAC;YACtB,eAAe,CAAC,IAAI,CAAC,mDAAmD,CAAC,CAAC;QAC5E,CAAC;QAED,IAAI,YAAY,GAAG,EAAE,EAAE,CAAC;YACtB,eAAe,CAAC,IAAI,CAAC,kDAAkD,CAAC,CAAC;QAC3E,CAAC;QAED,IAAI,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,CAAC;YAC7C,eAAe,CAAC,IAAI,CAAC,0CAA0C,CAAC,CAAC;QACnE,CAAC;QAED,OAAO;YACL,KAAK,EAAE;gBACL,KAAK,EAAE,IAAI,CAAC,YAAY,CAAC,KAAK;gBAC9B,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,YAAY;gBACpC,SAAS;aACV;YACD,UAAU,EAAE;gBACV,KAAK,EAAE,IAAI,CAAC,YAAY,CAAC,UAAU;aACpC;YACD,eAAe;SAChB,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,kBAAkB,CAAC,KAAc,EAAE,UAAmB;QAC1D,IAAI,KAAK,KAAK,SAAS,EAAE,CAAC;YACxB,IAAI,CAAC,YAAY,CAAC,KAAK,GAAG,KAAK,CAAC;QAClC,CAAC;QAED,IAAI,UAAU,KAAK,SAAS,EAAE,CAAC;YAC7B,IAAI,CAAC,YAAY,CAAC,UAAU,GAAG,UAAU,CAAC;QAC5C,CAAC;IACH,CAAC;IAED,KAAK,CAAC,uBAAuB,CAAC,OAAuB;QAKnD,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;QAC1D,MAAM,MAAM,GAAG,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YACtC,KAAK,EAAE,KAAK,CAAC,KAAK;YAClB,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,OAAO,CAAC;SACvC,CAAC,CAAC,CAAC;QAEJ,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAErD,OAAO;YACL,WAAW,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;YACjD,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CACjD,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CACrC;YACD,OAAO,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE;gBAChC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,UAAU,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;gBAChI,OAAO,GAAG,CAAC;YACb,CAAC,EAAE,EAA4B,CAAC;SACjC,CAAC;IACJ,CAAC;CACF;AA3hBD,4CA2hBC","names":[],"sources":["/Users/brianlong/Developer/summit/src/router/capabilityRouter.ts"],"sourcesContent":["import { MaestroMemory } from '../memory';\n\ninterface ModelCapability {\n  model: string;\n  provider: 'openai' | 'anthropic' | 'azure' | 'local';\n  capabilities: string[];\n  cost: {\n    inputTokens: number; // Cost per 1K input tokens\n    outputTokens: number; // Cost per 1K output tokens\n    minCost: number; // Minimum cost per request\n  };\n  performance: {\n    maxTokens: number;\n    avgLatency: number; // milliseconds\n    reliability: number; // 0-1 score\n    qualityScore: number; // 0-1 score based on evaluations\n  };\n  limits: {\n    requestsPerMinute: number;\n    requestsPerDay: number;\n    tokensPerMinute: number;\n  };\n  context: {\n    maxContextLength: number;\n    supportsCaching: boolean;\n    supportsStreaming: boolean;\n  };\n}\n\ninterface RequestContext {\n  type: 'code-generation' | 'analysis' | 'review' | 'debugging' | 'testing' | 'documentation';\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  complexity: 'simple' | 'moderate' | 'complex' | 'advanced';\n  budget: {\n    maxCost: number;\n    timeLimit: number; // milliseconds\n  };\n  qualityRequirements: {\n    minAccuracy: number; // 0-1\n    allowExperimental: boolean;\n  };\n  context: {\n    estimatedTokens: number;\n    needsReasoning: boolean;\n    requiresCreativity: boolean;\n  };\n}\n\ninterface RoutingResult {\n  selectedModel: string;\n  reason: string;\n  estimatedCost: number;\n  estimatedLatency: number;\n  fallbackModels: string[];\n  cacheHit: boolean;\n  confidence: number;\n}\n\nexport class CapabilityRouter {\n  private models: Map<string, ModelCapability>;\n  private memory: MaestroMemory;\n  private budgetLimits: {\n    daily: number;\n    perRequest: number;\n    currentSpent: number;\n  };\n\n  constructor(projectRoot: string = process.cwd()) {\n    this.memory = MaestroMemory.getInstance(projectRoot);\n    this.models = new Map();\n    this.budgetLimits = {\n      daily: 50.0, // $50 per day default\n      perRequest: 5.0, // $5 per request default\n      currentSpent: 0\n    };\n    \n    this.initializeModels();\n  }\n\n  private initializeModels(): void {\n    // GPT-4 Turbo - Premium option\n    this.models.set('gpt-4-turbo', {\n      model: 'gpt-4-turbo',\n      provider: 'openai',\n      capabilities: [\n        'code-generation', 'analysis', 'review', 'debugging', \n        'testing', 'documentation', 'reasoning', 'creativity'\n      ],\n      cost: {\n        inputTokens: 0.01, // $0.01 per 1K tokens\n        outputTokens: 0.03, // $0.03 per 1K tokens\n        minCost: 0.001\n      },\n      performance: {\n        maxTokens: 4096,\n        avgLatency: 2000,\n        reliability: 0.95,\n        qualityScore: 0.92\n      },\n      limits: {\n        requestsPerMinute: 500,\n        requestsPerDay: 10000,\n        tokensPerMinute: 150000\n      },\n      context: {\n        maxContextLength: 128000,\n        supportsCaching: true,\n        supportsStreaming: true\n      }\n    });\n\n    // GPT-3.5 Turbo - Balanced option\n    this.models.set('gpt-3.5-turbo', {\n      model: 'gpt-3.5-turbo',\n      provider: 'openai',\n      capabilities: [\n        'code-generation', 'analysis', 'documentation', 'testing'\n      ],\n      cost: {\n        inputTokens: 0.0005,\n        outputTokens: 0.0015,\n        minCost: 0.0001\n      },\n      performance: {\n        maxTokens: 4096,\n        avgLatency: 1200,\n        reliability: 0.92,\n        qualityScore: 0.85\n      },\n      limits: {\n        requestsPerMinute: 3500,\n        requestsPerDay: 200000,\n        tokensPerMinute: 90000\n      },\n      context: {\n        maxContextLength: 16385,\n        supportsCaching: false,\n        supportsStreaming: true\n      }\n    });\n\n    // Claude 3.5 Sonnet - High quality reasoning\n    this.models.set('claude-3-5-sonnet', {\n      model: 'claude-3-5-sonnet-20241022',\n      provider: 'anthropic',\n      capabilities: [\n        'code-generation', 'analysis', 'review', 'debugging', \n        'reasoning', 'creativity', 'safety'\n      ],\n      cost: {\n        inputTokens: 0.003,\n        outputTokens: 0.015,\n        minCost: 0.0005\n      },\n      performance: {\n        maxTokens: 8192,\n        avgLatency: 1800,\n        reliability: 0.96,\n        qualityScore: 0.94\n      },\n      limits: {\n        requestsPerMinute: 1000,\n        requestsPerDay: 50000,\n        tokensPerMinute: 40000\n      },\n      context: {\n        maxContextLength: 200000,\n        supportsCaching: true,\n        supportsStreaming: true\n      }\n    });\n\n    // Claude 3 Haiku - Fast and cheap\n    this.models.set('claude-3-haiku', {\n      model: 'claude-3-haiku-20240307',\n      provider: 'anthropic',\n      capabilities: [\n        'code-generation', 'analysis', 'documentation'\n      ],\n      cost: {\n        inputTokens: 0.00025,\n        outputTokens: 0.00125,\n        minCost: 0.0001\n      },\n      performance: {\n        maxTokens: 4096,\n        avgLatency: 800,\n        reliability: 0.90,\n        qualityScore: 0.78\n      },\n      limits: {\n        requestsPerMinute: 2000,\n        requestsPerDay: 100000,\n        tokensPerMinute: 100000\n      },\n      context: {\n        maxContextLength: 200000,\n        supportsCaching: true,\n        supportsStreaming: true\n      }\n    });\n\n    // Local model - Free but limited\n    this.models.set('local-7b', {\n      model: 'codellama-7b-instruct',\n      provider: 'local',\n      capabilities: [\n        'code-generation', 'documentation'\n      ],\n      cost: {\n        inputTokens: 0,\n        outputTokens: 0,\n        minCost: 0\n      },\n      performance: {\n        maxTokens: 2048,\n        avgLatency: 5000,\n        reliability: 0.75,\n        qualityScore: 0.65\n      },\n      limits: {\n        requestsPerMinute: 10,\n        requestsPerDay: 1000,\n        tokensPerMinute: 2000\n      },\n      context: {\n        maxContextLength: 4096,\n        supportsCaching: false,\n        supportsStreaming: false\n      }\n    });\n  }\n\n  async route(request: RequestContext): Promise<RoutingResult> {\n    console.log(`🧭 Routing request: ${request.type} (${request.complexity})`);\n\n    // Check cache first\n    const cacheKey = this.generateCacheKey(request);\n    const cached = await this.memory.cache.get(cacheKey);\n    \n    if (cached) {\n      return {\n        selectedModel: cached.model,\n        reason: 'Cache hit - using previously successful model',\n        estimatedCost: 0,\n        estimatedLatency: 0,\n        fallbackModels: [],\n        cacheHit: true,\n        confidence: 0.95\n      };\n    }\n\n    // Get candidate models\n    const candidates = await this.getCandidateModels(request);\n    \n    if (candidates.length === 0) {\n      throw new Error('No models available for this request type');\n    }\n\n    // Score and rank candidates\n    const scored = candidates.map(model => ({\n      model,\n      score: this.scoreModel(model, request),\n      estimatedCost: this.estimateCost(model, request),\n      estimatedLatency: this.estimateLatency(model, request)\n    }));\n\n    // Sort by score (higher is better)\n    scored.sort((a, b) => b.score.total - a.score.total);\n\n    const selected = scored[0];\n    const fallbacks = scored.slice(1, 4).map(s => s.model.model);\n\n    const result: RoutingResult = {\n      selectedModel: selected.model.model,\n      reason: this.generateReason(selected.model, selected.score, request),\n      estimatedCost: selected.estimatedCost,\n      estimatedLatency: selected.estimatedLatency,\n      fallbackModels: fallbacks,\n      cacheHit: false,\n      confidence: selected.score.total\n    };\n\n    // Store routing decision for learning\n    await this.storeRoutingDecision(request, result);\n\n    return result;\n  }\n\n  private async getCandidateModels(request: RequestContext): Promise<ModelCapability[]> {\n    const candidates: ModelCapability[] = [];\n\n    for (const model of this.models.values()) {\n      // Check if model supports required capabilities\n      if (!model.capabilities.includes(request.type)) continue;\n\n      // Check budget constraints\n      const estimatedCost = this.estimateCost(model, request);\n      if (estimatedCost > request.budget.maxCost) continue;\n      if (estimatedCost > this.budgetLimits.perRequest) continue;\n      \n      // Check if we have budget remaining\n      if (this.budgetLimits.currentSpent + estimatedCost > this.budgetLimits.daily) continue;\n\n      // Check context length requirements\n      if (request.context.estimatedTokens > model.context.maxContextLength) continue;\n\n      // Check quality requirements\n      if (model.performance.qualityScore < request.qualityRequirements.minAccuracy) continue;\n\n      // Check if experimental models are allowed\n      if (!request.qualityRequirements.allowExperimental && model.performance.reliability < 0.9) continue;\n\n      candidates.push(model);\n    }\n\n    return candidates;\n  }\n\n  private scoreModel(model: ModelCapability, request: RequestContext): {\n    cost: number;\n    performance: number;\n    reliability: number;\n    capability: number;\n    total: number;\n  } {\n    const weights = this.getWeights(request);\n    \n    // Cost score (lower cost = higher score)\n    const estimatedCost = this.estimateCost(model, request);\n    const maxBudget = Math.min(request.budget.maxCost, this.budgetLimits.perRequest);\n    const costScore = Math.max(0, 1 - (estimatedCost / maxBudget));\n\n    // Performance score\n    const estimatedLatency = this.estimateLatency(model, request);\n    const timeScore = Math.max(0, 1 - (estimatedLatency / request.budget.timeLimit));\n    const performanceScore = (timeScore + model.performance.qualityScore) / 2;\n\n    // Reliability score\n    const reliabilityScore = model.performance.reliability;\n\n    // Capability match score\n    const requiredCapabilities = this.getRequiredCapabilities(request);\n    const matchedCapabilities = requiredCapabilities.filter(cap => \n      model.capabilities.includes(cap)\n    ).length;\n    const capabilityScore = matchedCapabilities / requiredCapabilities.length;\n\n    const scores = {\n      cost: costScore,\n      performance: performanceScore,\n      reliability: reliabilityScore,\n      capability: capabilityScore,\n      total: 0\n    };\n\n    // Weighted total\n    scores.total = \n      scores.cost * weights.cost +\n      scores.performance * weights.performance +\n      scores.reliability * weights.reliability +\n      scores.capability * weights.capability;\n\n    return scores;\n  }\n\n  private getWeights(request: RequestContext): {\n    cost: number;\n    performance: number;\n    reliability: number;\n    capability: number;\n  } {\n    // Adjust weights based on request priority and type\n    const baseWeights = {\n      cost: 0.3,\n      performance: 0.3,\n      reliability: 0.2,\n      capability: 0.2\n    };\n\n    switch (request.priority) {\n      case 'critical':\n        return { cost: 0.1, performance: 0.3, reliability: 0.4, capability: 0.2 };\n      case 'high':\n        return { cost: 0.2, performance: 0.3, reliability: 0.3, capability: 0.2 };\n      case 'low':\n        return { cost: 0.5, performance: 0.2, reliability: 0.1, capability: 0.2 };\n      default:\n        return baseWeights;\n    }\n  }\n\n  private getRequiredCapabilities(request: RequestContext): string[] {\n    const capabilities = [request.type];\n    \n    if (request.context.needsReasoning) {\n      capabilities.push('reasoning');\n    }\n    \n    if (request.context.requiresCreativity) {\n      capabilities.push('creativity');\n    }\n    \n    return capabilities;\n  }\n\n  private estimateCost(model: ModelCapability, request: RequestContext): number {\n    const inputTokens = request.context.estimatedTokens * 0.7; // 70% input\n    const outputTokens = request.context.estimatedTokens * 0.3; // 30% output\n\n    const inputCost = (inputTokens / 1000) * model.cost.inputTokens;\n    const outputCost = (outputTokens / 1000) * model.cost.outputTokens;\n\n    return Math.max(model.cost.minCost, inputCost + outputCost);\n  }\n\n  private estimateLatency(model: ModelCapability, request: RequestContext): number {\n    const baseLatency = model.performance.avgLatency;\n    \n    // Adjust for token count (more tokens = more latency)\n    const tokenMultiplier = 1 + (request.context.estimatedTokens / 10000) * 0.5;\n    \n    // Adjust for complexity\n    const complexityMultiplier = {\n      'simple': 1.0,\n      'moderate': 1.3,\n      'complex': 1.6,\n      'advanced': 2.0\n    }[request.complexity];\n\n    return baseLatency * tokenMultiplier * complexityMultiplier;\n  }\n\n  private generateReason(\n    model: ModelCapability, \n    score: any, \n    request: RequestContext\n  ): string {\n    const reasons: string[] = [];\n\n    if (score.cost > 0.8) {\n      reasons.push('cost-effective');\n    }\n    \n    if (score.performance > 0.8) {\n      reasons.push('high performance');\n    }\n    \n    if (score.reliability > 0.9) {\n      reasons.push('reliable');\n    }\n    \n    if (score.capability === 1.0) {\n      reasons.push('perfect capability match');\n    }\n\n    const primaryReason = reasons.length > 0 ? reasons.join(', ') : 'best available option';\n    \n    return `Selected ${model.model} for ${primaryReason} (score: ${score.total.toFixed(2)})`;\n  }\n\n  private generateCacheKey(request: RequestContext): string {\n    return `route-${request.type}-${request.complexity}-${request.priority}-${request.context.estimatedTokens}`;\n  }\n\n  private async storeRoutingDecision(request: RequestContext, result: RoutingResult): Promise<void> {\n    await this.memory.semantic.store(\n      JSON.stringify({\n        request: {\n          type: request.type,\n          complexity: request.complexity,\n          priority: request.priority\n        },\n        result: {\n          selectedModel: result.selectedModel,\n          estimatedCost: result.estimatedCost,\n          reason: result.reason\n        }\n      }),\n      'pattern',\n      {\n        tags: ['routing', request.type, request.complexity, result.selectedModel],\n        success: true\n      }\n    );\n  }\n\n  async recordModelUsage(\n    model: string,\n    actualCost: number,\n    actualLatency: number,\n    success: boolean,\n    request?: RequestContext\n  ): Promise<void> {\n    // Update budget tracking\n    this.budgetLimits.currentSpent += actualCost;\n\n    // Record performance for future routing decisions\n    const modelInfo = this.models.get(model);\n    if (modelInfo && request) {\n      // Update model performance metrics (exponential moving average)\n      const alpha = 0.1;\n      modelInfo.performance.avgLatency = \n        (1 - alpha) * modelInfo.performance.avgLatency + alpha * actualLatency;\n      \n      if (success) {\n        modelInfo.performance.reliability = \n          Math.min(1.0, (1 - alpha) * modelInfo.performance.reliability + alpha * 1.0);\n      } else {\n        modelInfo.performance.reliability = \n          Math.max(0.0, (1 - alpha) * modelInfo.performance.reliability + alpha * 0.0);\n      }\n\n      // Store experience in memory\n      await this.memory.storeExperience(\n        `Used ${model} for ${request.type} task`,\n        success ? 'solution' : 'error',\n        success,\n        {\n          model,\n          cost: actualCost,\n          latency: actualLatency,\n          requestType: request.type,\n          complexity: request.complexity\n        }\n      );\n    }\n  }\n\n  async getBudgetStatus(): Promise<{\n    daily: { limit: number; used: number; remaining: number };\n    perRequest: { limit: number };\n    recommendations: string[];\n  }> {\n    const recommendations: string[] = [];\n    const remaining = this.budgetLimits.daily - this.budgetLimits.currentSpent;\n    const usagePercent = (this.budgetLimits.currentSpent / this.budgetLimits.daily) * 100;\n\n    if (usagePercent > 80) {\n      recommendations.push('High budget usage - consider using cheaper models');\n    }\n    \n    if (usagePercent > 95) {\n      recommendations.push('Budget nearly exhausted - switch to local models');\n    }\n\n    if (remaining < this.budgetLimits.perRequest) {\n      recommendations.push('Insufficient budget for premium requests');\n    }\n\n    return {\n      daily: {\n        limit: this.budgetLimits.daily,\n        used: this.budgetLimits.currentSpent,\n        remaining\n      },\n      perRequest: {\n        limit: this.budgetLimits.perRequest\n      },\n      recommendations\n    };\n  }\n\n  async updateBudgetLimits(daily?: number, perRequest?: number): Promise<void> {\n    if (daily !== undefined) {\n      this.budgetLimits.daily = daily;\n    }\n    \n    if (perRequest !== undefined) {\n      this.budgetLimits.perRequest = perRequest;\n    }\n  }\n\n  async getModelRecommendations(request: RequestContext): Promise<{\n    recommended: string[];\n    avoided: string[];\n    reasons: Record<string, string>;\n  }> {\n    const candidates = await this.getCandidateModels(request);\n    const scored = candidates.map(model => ({\n      model: model.model,\n      score: this.scoreModel(model, request)\n    }));\n\n    scored.sort((a, b) => b.score.total - a.score.total);\n\n    return {\n      recommended: scored.slice(0, 3).map(s => s.model),\n      avoided: Array.from(this.models.keys()).filter(m => \n        !candidates.find(c => c.model === m)\n      ),\n      reasons: scored.reduce((acc, s) => {\n        acc[s.model] = `Score: ${s.score.total.toFixed(2)} (cost: ${s.score.cost.toFixed(2)}, perf: ${s.score.performance.toFixed(2)})`;\n        return acc;\n      }, {} as Record<string, string>)\n    };\n  }\n}"],"version":3}