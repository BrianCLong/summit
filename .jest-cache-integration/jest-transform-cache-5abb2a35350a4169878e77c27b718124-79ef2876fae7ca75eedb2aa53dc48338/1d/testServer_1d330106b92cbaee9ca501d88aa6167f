e4c2de47e8e17d2949e70d0796b372b4
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTestApp = createTestApp;
const http = require('http');
const url = require('url');
// Create a simple HTTP server that simulates the API endpoints needed for testing
async function createTestApp() {
    // In-memory storage for flows
    const flows = {};
    let seq = 0;
    const server = http.createServer((req, res) => {
        const parsedUrl = url.parse(req.url, true);
        const path = parsedUrl.pathname;
        // Enable CORS and set content type
        res.setHeader('Content-Type', 'application/json');
        res.setHeader('Access-Control-Allow-Origin', '*');
        res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE');
        res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
        // Handle POST /api/flows
        if (req.method === 'POST' && path === '/api/flows') {
            let body = '';
            req.on('data', chunk => {
                body += chunk.toString();
            });
            req.on('end', () => {
                let reqBody = {};
                try {
                    reqBody = JSON.parse(body);
                }
                catch (e) {
                    // If JSON parsing fails, keep empty object
                }
                const id = `f_${++seq}`;
                const kind = reqBody?.kind ?? 'maestro';
                const rec = { id, kind, state: 'queued' };
                flows[id] = rec;
                res.writeHead(202);
                res.end(JSON.stringify(rec));
            });
            return;
        }
        // Handle POST /__tick
        if (req.method === 'POST' && path === '/__tick') {
            for (const id in flows) {
                const rec = flows[id];
                if (rec.state === 'queued')
                    rec.state = 'running';
                else if (rec.state === 'running')
                    rec.state = 'complete';
            }
            res.writeHead(204);
            res.end();
            return;
        }
        // Handle GET /api/flows/:id
        if (req.method === 'GET' && path.startsWith('/api/flows/')) {
            const id = path.split('/').pop(); // Get the last part which should be the ID
            const rec = flows[id];
            if (!rec) {
                res.writeHead(404);
                res.end(JSON.stringify({ error: 'not_found' }));
                return;
            }
            res.writeHead(200);
            res.end(JSON.stringify(rec));
            return;
        }
        // Handle GET /__health
        if (req.method === 'GET' && path === '/__health') {
            res.writeHead(200);
            res.end(JSON.stringify({ status: 'ok' }));
            return;
        }
        // 404 for other routes
        res.writeHead(404);
        res.end(JSON.stringify({ error: 'not found' }));
    });
    return server;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3Rlc3RzL2ludGVncmF0aW9uL3V0aWxzL3Rlc3RTZXJ2ZXIudHMiLCJtYXBwaW5ncyI6Ijs7QUFJQSxzQ0FrRkM7QUF0RkQsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzdCLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUUzQixrRkFBa0Y7QUFDM0UsS0FBSyxVQUFVLGFBQWE7SUFDakMsOEJBQThCO0lBQzlCLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQztJQUNqQixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFFWixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQzVDLE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMzQyxNQUFNLElBQUksR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDO1FBRWhDLG1DQUFtQztRQUNuQyxHQUFHLENBQUMsU0FBUyxDQUFDLGNBQWMsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1FBQ2xELEdBQUcsQ0FBQyxTQUFTLENBQUMsNkJBQTZCLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDbEQsR0FBRyxDQUFDLFNBQVMsQ0FBQyw4QkFBOEIsRUFBRSx3QkFBd0IsQ0FBQyxDQUFDO1FBQ3hFLEdBQUcsQ0FBQyxTQUFTLENBQUMsOEJBQThCLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFFOUQseUJBQXlCO1FBQ3pCLElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLFlBQVksRUFBRSxDQUFDO1lBQ25ELElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztZQUNkLEdBQUcsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxFQUFFO2dCQUNyQixJQUFJLElBQUks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Q3ZCLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbkIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNsRCxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3Rlc3RzL2ludGVncmF0aW9uL3V0aWxzL3Rlc3RTZXJ2ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgaHR0cCA9IHJlcXVpcmUoJ2h0dHAnKTtcbmNvbnN0IHVybCA9IHJlcXVpcmUoJ3VybCcpO1xuXG4vLyBDcmVhdGUgYSBzaW1wbGUgSFRUUCBzZXJ2ZXIgdGhhdCBzaW11bGF0ZXMgdGhlIEFQSSBlbmRwb2ludHMgbmVlZGVkIGZvciB0ZXN0aW5nXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlVGVzdEFwcCgpIHtcbiAgLy8gSW4tbWVtb3J5IHN0b3JhZ2UgZm9yIGZsb3dzXG4gIGNvbnN0IGZsb3dzID0ge307XG4gIGxldCBzZXEgPSAwO1xuXG4gIGNvbnN0IHNlcnZlciA9IGh0dHAuY3JlYXRlU2VydmVyKChyZXEsIHJlcykgPT4ge1xuICAgIGNvbnN0IHBhcnNlZFVybCA9IHVybC5wYXJzZShyZXEudXJsLCB0cnVlKTtcbiAgICBjb25zdCBwYXRoID0gcGFyc2VkVXJsLnBhdGhuYW1lO1xuXG4gICAgLy8gRW5hYmxlIENPUlMgYW5kIHNldCBjb250ZW50IHR5cGVcbiAgICByZXMuc2V0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vanNvbicpO1xuICAgIHJlcy5zZXRIZWFkZXIoJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbicsICcqJyk7XG4gICAgcmVzLnNldEhlYWRlcignQWNjZXNzLUNvbnRyb2wtQWxsb3ctTWV0aG9kcycsICdHRVQsIFBPU1QsIFBVVCwgREVMRVRFJyk7XG4gICAgcmVzLnNldEhlYWRlcignQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVycycsICdDb250ZW50LVR5cGUnKTtcblxuICAgIC8vIEhhbmRsZSBQT1NUIC9hcGkvZmxvd3NcbiAgICBpZiAocmVxLm1ldGhvZCA9PT0gJ1BPU1QnICYmIHBhdGggPT09ICcvYXBpL2Zsb3dzJykge1xuICAgICAgbGV0IGJvZHkgPSAnJztcbiAgICAgIHJlcS5vbignZGF0YScsIGNodW5rID0+IHtcbiAgICAgICAgYm9keSArPSBjaHVuay50b1N0cmluZygpO1xuICAgICAgfSk7XG4gICAgICBcbiAgICAgIHJlcS5vbignZW5kJywgKCkgPT4ge1xuICAgICAgICBsZXQgcmVxQm9keSA9IHt9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJlcUJvZHkgPSBKU09OLnBhcnNlKGJvZHkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gSWYgSlNPTiBwYXJzaW5nIGZhaWxzLCBrZWVwIGVtcHR5IG9iamVjdFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCBpZCA9IGBmXyR7KytzZXF9YDtcbiAgICAgICAgY29uc3Qga2luZCA9IHJlcUJvZHk/LmtpbmQgPz8gJ21hZXN0cm8nO1xuICAgICAgICBjb25zdCByZWMgPSB7IGlkLCBraW5kLCBzdGF0ZTogJ3F1ZXVlZCcgfTtcbiAgICAgICAgZmxvd3NbaWRdID0gcmVjO1xuICAgICAgICBcbiAgICAgICAgcmVzLndyaXRlSGVhZCgyMDIpO1xuICAgICAgICByZXMuZW5kKEpTT04uc3RyaW5naWZ5KHJlYykpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIFBPU1QgL19fdGlja1xuICAgIGlmIChyZXEubWV0aG9kID09PSAnUE9TVCcgJiYgcGF0aCA9PT0gJy9fX3RpY2snKSB7XG4gICAgICBmb3IgKGNvbnN0IGlkIGluIGZsb3dzKSB7XG4gICAgICAgIGNvbnN0IHJlYyA9IGZsb3dzW2lkXTtcbiAgICAgICAgaWYgKHJlYy5zdGF0ZSA9PT0gJ3F1ZXVlZCcpIHJlYy5zdGF0ZSA9ICdydW5uaW5nJztcbiAgICAgICAgZWxzZSBpZiAocmVjLnN0YXRlID09PSAncnVubmluZycpIHJlYy5zdGF0ZSA9ICdjb21wbGV0ZSc7XG4gICAgICB9XG4gICAgICByZXMud3JpdGVIZWFkKDIwNCk7XG4gICAgICByZXMuZW5kKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIEdFVCAvYXBpL2Zsb3dzLzppZFxuICAgIGlmIChyZXEubWV0aG9kID09PSAnR0VUJyAmJiBwYXRoLnN0YXJ0c1dpdGgoJy9hcGkvZmxvd3MvJykpIHtcbiAgICAgIGNvbnN0IGlkID0gcGF0aC5zcGxpdCgnLycpLnBvcCgpOyAvLyBHZXQgdGhlIGxhc3QgcGFydCB3aGljaCBzaG91bGQgYmUgdGhlIElEXG4gICAgICBjb25zdCByZWMgPSBmbG93c1tpZF07XG4gICAgICBcbiAgICAgIGlmICghcmVjKSB7XG4gICAgICAgIHJlcy53cml0ZUhlYWQoNDA0KTtcbiAgICAgICAgcmVzLmVuZChKU09OLnN0cmluZ2lmeSh7IGVycm9yOiAnbm90X2ZvdW5kJyB9KSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgcmVzLndyaXRlSGVhZCgyMDApO1xuICAgICAgcmVzLmVuZChKU09OLnN0cmluZ2lmeShyZWMpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgR0VUIC9fX2hlYWx0aFxuICAgIGlmIChyZXEubWV0aG9kID09PSAnR0VUJyAmJiBwYXRoID09PSAnL19faGVhbHRoJykge1xuICAgICAgcmVzLndyaXRlSGVhZCgyMDApO1xuICAgICAgcmVzLmVuZChKU09OLnN0cmluZ2lmeSh7IHN0YXR1czogJ29rJyB9KSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gNDA0IGZvciBvdGhlciByb3V0ZXNcbiAgICByZXMud3JpdGVIZWFkKDQwNCk7XG4gICAgcmVzLmVuZChKU09OLnN0cmluZ2lmeSh7IGVycm9yOiAnbm90IGZvdW5kJyB9KSk7XG4gIH0pO1xuXG4gIHJldHVybiBzZXJ2ZXI7XG59Il0sInZlcnNpb24iOjN9