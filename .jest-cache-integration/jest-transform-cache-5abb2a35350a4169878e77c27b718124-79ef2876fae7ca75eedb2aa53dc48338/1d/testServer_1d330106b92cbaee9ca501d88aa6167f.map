{"file":"/Users/brianlong/Developer/summit/tests/integration/utils/testServer.ts","mappings":"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","names":[],"sources":["/Users/brianlong/Developer/summit/tests/integration/utils/testServer.ts"],"sourcesContent":["const http = require('http');\nconst url = require('url');\n\n// Create a simple HTTP server that simulates the API endpoints needed for testing\nexport async function createTestApp() {\n  // In-memory storage for flows\n  const flows = {};\n  let seq = 0;\n\n  const server = http.createServer((req, res) => {\n    const parsedUrl = url.parse(req.url, true);\n    const path = parsedUrl.pathname;\n\n    // Enable CORS and set content type\n    res.setHeader('Content-Type', 'application/json');\n    res.setHeader('Access-Control-Allow-Origin', '*');\n    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE');\n    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\n\n    // Handle POST /api/flows\n    if (req.method === 'POST' && path === '/api/flows') {\n      let body = '';\n      req.on('data', chunk => {\n        body += chunk.toString();\n      });\n      \n      req.on('end', () => {\n        let reqBody = {};\n        try {\n          reqBody = JSON.parse(body);\n        } catch (e) {\n          // If JSON parsing fails, keep empty object\n        }\n        \n        const id = `f_${++seq}`;\n        const kind = reqBody?.kind ?? 'maestro';\n        const rec = { id, kind, state: 'queued' };\n        flows[id] = rec;\n        \n        res.writeHead(202);\n        res.end(JSON.stringify(rec));\n      });\n      return;\n    }\n\n    // Handle POST /__tick\n    if (req.method === 'POST' && path === '/__tick') {\n      for (const id in flows) {\n        const rec = flows[id];\n        if (rec.state === 'queued') rec.state = 'running';\n        else if (rec.state === 'running') rec.state = 'complete';\n      }\n      res.writeHead(204);\n      res.end();\n      return;\n    }\n\n    // Handle GET /api/flows/:id\n    if (req.method === 'GET' && path.startsWith('/api/flows/')) {\n      const id = path.split('/').pop(); // Get the last part which should be the ID\n      const rec = flows[id];\n      \n      if (!rec) {\n        res.writeHead(404);\n        res.end(JSON.stringify({ error: 'not_found' }));\n        return;\n      }\n      \n      res.writeHead(200);\n      res.end(JSON.stringify(rec));\n      return;\n    }\n\n    // Handle GET /__health\n    if (req.method === 'GET' && path === '/__health') {\n      res.writeHead(200);\n      res.end(JSON.stringify({ status: 'ok' }));\n      return;\n    }\n\n    // 404 for other routes\n    res.writeHead(404);\n    res.end(JSON.stringify({ error: 'not found' }));\n  });\n\n  return server;\n}"],"version":3}