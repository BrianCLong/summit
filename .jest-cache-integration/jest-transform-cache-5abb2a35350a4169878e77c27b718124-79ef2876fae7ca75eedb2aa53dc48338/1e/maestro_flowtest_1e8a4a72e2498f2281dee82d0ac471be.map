{"file":"/Users/brianlong/Developer/summit/tests/integration/maestro_flow.test.ts","mappings":";;AAAA,mDAA0C;AAC1C,mDAAmD;AAEnD,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;IAC5B,IAAI,GAAQ,CAAC;IAEb,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,GAAG,GAAG,MAAM,IAAA,0BAAa,GAAE,CAAC;IAC9B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;QACtE,MAAM,MAAM,GAAG,IAAA,iBAAI,EAAC,GAAG,CAAC,CAAC,CAAC,0CAA0C;QAEpE,cAAc;QACd,MAAM,KAAK,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAC;QACxE,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC/B,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,CACxB,MAAM,CAAC,gBAAgB,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,QAAQ,EAAE,EAAE,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CACtF,CAAC;QAEF,+BAA+B;QAC/B,MAAM,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC7B,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,GAAG,CAAC,cAAc,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5D,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC7B,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAEvC,iCAAiC;QACjC,MAAM,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC7B,MAAM,IAAI,GAAG,MAAM,MAAM,CAAC,GAAG,CAAC,cAAc,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;QAC7D,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC9B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/tests/integration/maestro_flow.test.ts"],"sourcesContent":["import { http } from './utils/httpClient';\nimport { createTestApp } from './utils/testServer';\n\ndescribe('maestro flow', () => {\n  let app: any;\n\n  beforeAll(async () => {\n    app = await createTestApp();\n  });\n\n  it('kicks off and completes a flow via deterministic ticks', async () => {\n    const client = http(app); // prefer in-process app; never a URL here\n\n    // 1) Kick off\n    const start = await client.post('/api/flows').send({ kind: 'maestro' });\n    expect(start.status).toBe(202);\n    expect(start.body).toEqual(\n      expect.objectContaining({ kind: 'maestro', state: 'queued', id: expect.any(String) })\n    );\n\n    // 2) Advance queued -> running\n    await client.post('/__tick');\n    const mid = await client.get(`/api/flows/${start.body.id}`);\n    expect(mid.status).toBe(200);\n    expect(mid.body.state).toBe('running');\n\n    // 3) Advance running -> complete\n    await client.post('/__tick');\n    const done = await client.get(`/api/flows/${start.body.id}`);\n    expect(done.status).toBe(200);\n    expect(done.body.state).toBe('complete');\n  });\n});\n"],"version":3}