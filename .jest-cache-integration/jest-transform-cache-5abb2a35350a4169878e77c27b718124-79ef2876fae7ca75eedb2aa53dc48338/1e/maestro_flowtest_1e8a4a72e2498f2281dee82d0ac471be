179a256e81c46648cf0c75408755df4f
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const httpClient_1 = require("./utils/httpClient");
const testServer_1 = require("./utils/testServer");
describe('maestro flow', () => {
    let app;
    beforeAll(async () => {
        app = await (0, testServer_1.createTestApp)();
    });
    it('kicks off and completes a flow via deterministic ticks', async () => {
        const client = (0, httpClient_1.http)(app); // prefer in-process app; never a URL here
        // 1) Kick off
        const start = await client.post('/api/flows').send({ kind: 'maestro' });
        expect(start.status).toBe(202);
        expect(start.body).toEqual(expect.objectContaining({ kind: 'maestro', state: 'queued', id: expect.any(String) }));
        // 2) Advance queued -> running
        await client.post('/__tick');
        const mid = await client.get(`/api/flows/${start.body.id}`);
        expect(mid.status).toBe(200);
        expect(mid.body.state).toBe('running');
        // 3) Advance running -> complete
        await client.post('/__tick');
        const done = await client.get(`/api/flows/${start.body.id}`);
        expect(done.status).toBe(200);
        expect(done.body.state).toBe('complete');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3Rlc3RzL2ludGVncmF0aW9uL21hZXN0cm9fZmxvdy50ZXN0LnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsbURBQTBDO0FBQzFDLG1EQUFtRDtBQUVuRCxRQUFRLENBQUMsY0FBYyxFQUFFLEdBQUcsRUFBRTtJQUM1QixJQUFJLEdBQVEsQ0FBQztJQUViLFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNuQixHQUFHLEdBQUcsTUFBTSxJQUFBLDBCQUFhLEdBQUUsQ0FBQztJQUM5QixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyx3REFBd0QsRUFBRSxLQUFLLElBQUksRUFBRTtRQUN0RSxNQUFNLE1BQU0sR0FBRyxJQUFBLGlCQUFJLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQywwQ0FBMEM7UUFFcEUsY0FBYztRQUNkLE1BQU0sS0FBSyxHQUFHLE1BQU0sTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUN4RSxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMvQixNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FDeEIsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FDdEYsQ0FBQztRQUVGLCtCQUErQjtRQUMvQixNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDN0IsTUFBTSxHQUFHLEdBQUcsTUFBTSxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzVELE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzdCLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUV2QyxpQ0FBaUM7UUFDakMsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzdCLE1BQU0sSUFBSSxHQUFHLE1BQU0sTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM3RCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM5QixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDM0MsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvYnJpYW5sb25nL0RldmVsb3Blci9zdW1taXQvdGVzdHMvaW50ZWdyYXRpb24vbWFlc3Ryb19mbG93LnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaHR0cCB9IGZyb20gJy4vdXRpbHMvaHR0cENsaWVudCc7XG5pbXBvcnQgeyBjcmVhdGVUZXN0QXBwIH0gZnJvbSAnLi91dGlscy90ZXN0U2VydmVyJztcblxuZGVzY3JpYmUoJ21hZXN0cm8gZmxvdycsICgpID0+IHtcbiAgbGV0IGFwcDogYW55O1xuXG4gIGJlZm9yZUFsbChhc3luYyAoKSA9PiB7XG4gICAgYXBwID0gYXdhaXQgY3JlYXRlVGVzdEFwcCgpO1xuICB9KTtcblxuICBpdCgna2lja3Mgb2ZmIGFuZCBjb21wbGV0ZXMgYSBmbG93IHZpYSBkZXRlcm1pbmlzdGljIHRpY2tzJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGNsaWVudCA9IGh0dHAoYXBwKTsgLy8gcHJlZmVyIGluLXByb2Nlc3MgYXBwOyBuZXZlciBhIFVSTCBoZXJlXG5cbiAgICAvLyAxKSBLaWNrIG9mZlxuICAgIGNvbnN0IHN0YXJ0ID0gYXdhaXQgY2xpZW50LnBvc3QoJy9hcGkvZmxvd3MnKS5zZW5kKHsga2luZDogJ21hZXN0cm8nIH0pO1xuICAgIGV4cGVjdChzdGFydC5zdGF0dXMpLnRvQmUoMjAyKTtcbiAgICBleHBlY3Qoc3RhcnQuYm9keSkudG9FcXVhbChcbiAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHsga2luZDogJ21hZXN0cm8nLCBzdGF0ZTogJ3F1ZXVlZCcsIGlkOiBleHBlY3QuYW55KFN0cmluZykgfSlcbiAgICApO1xuXG4gICAgLy8gMikgQWR2YW5jZSBxdWV1ZWQgLT4gcnVubmluZ1xuICAgIGF3YWl0IGNsaWVudC5wb3N0KCcvX190aWNrJyk7XG4gICAgY29uc3QgbWlkID0gYXdhaXQgY2xpZW50LmdldChgL2FwaS9mbG93cy8ke3N0YXJ0LmJvZHkuaWR9YCk7XG4gICAgZXhwZWN0KG1pZC5zdGF0dXMpLnRvQmUoMjAwKTtcbiAgICBleHBlY3QobWlkLmJvZHkuc3RhdGUpLnRvQmUoJ3J1bm5pbmcnKTtcblxuICAgIC8vIDMpIEFkdmFuY2UgcnVubmluZyAtPiBjb21wbGV0ZVxuICAgIGF3YWl0IGNsaWVudC5wb3N0KCcvX190aWNrJyk7XG4gICAgY29uc3QgZG9uZSA9IGF3YWl0IGNsaWVudC5nZXQoYC9hcGkvZmxvd3MvJHtzdGFydC5ib2R5LmlkfWApO1xuICAgIGV4cGVjdChkb25lLnN0YXR1cykudG9CZSgyMDApO1xuICAgIGV4cGVjdChkb25lLmJvZHkuc3RhdGUpLnRvQmUoJ2NvbXBsZXRlJyk7XG4gIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=