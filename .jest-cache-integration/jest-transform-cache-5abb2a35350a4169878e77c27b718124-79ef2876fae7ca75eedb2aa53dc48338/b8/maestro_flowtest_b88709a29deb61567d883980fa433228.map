{"file":"/Users/brianlong/Developer/summit/tests/integration/maestro_flow.test.ts","mappings":";AAAA,mDAAmD;;;;;AAEnD,0DAAgC;AAChC,oDAAkD,CAAC,4BAA4B;AAC/E,+BAAkC;AAElC,QAAQ,CAAC,0BAA0B,EAAE,GAAG,EAAE;IACxC,IAAI,GAAQ,CAAC;IACb,IAAI,SAAiB,CAAC;IAEtB,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,GAAG,GAAG,MAAM,IAAA,0BAAY,GAAE,CAAC;QAE3B,0CAA0C;QAC1C,gGAAgG;QAChG,SAAS,GAAG,IAAA,SAAI,GAAE,CAAC;QACnB,OAAO,CAAC,GAAG,CAAC,wCAAwC,SAAS,EAAE,CAAC,CAAC;IACnE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mEAAmE,EAAE,KAAK,IAAI,EAAE;QACjF,kBAAkB;QAClB,MAAM,cAAc,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;aACtC,IAAI,CAAC,MAAM,CAAC;aACZ,GAAG,CAAC,iBAAiB,EAAE,IAAA,SAAI,GAAE,CAAC;aAC9B,IAAI,CAAC;YACJ,SAAS,EAAE,SAAS;YACpB,QAAQ,EAAE,aAAa;YACvB,MAAM,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE;SAC7B,CAAC,CAAC;QAEL,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACxC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;QAChD,MAAM,KAAK,GAAG,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC;QAExC,sFAAsF;QACtF,kFAAkF;QAClF,kFAAkF;QAClF,oEAAoE;QAEpE,mFAAmF;QACnF,mEAAmE;QAEnE,6CAA6C;QAC7C,kEAAkE;QAClE,IAAI,iBAAiB,CAAC;QACtB,IAAI,QAAQ,GAAG,CAAC,CAAC;QACjB,MAAM,WAAW,GAAG,EAAE,CAAC;QACvB,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,WAAW;QAE/B,GAAG,CAAC;YACF,iBAAiB,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,CAAC,GAAG,CAAC,SAAS,KAAK,EAAE,CAAC,CAAC;YAC7D,MAAM,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAC3C,OAAO,CAAC,GAAG,CAAC,OAAO,KAAK,YAAY,iBAAiB,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;YACrE,IAAI,iBAAiB,CAAC,IAAI,CAAC,MAAM,KAAK,WAAW,IAAI,iBAAiB,CAAC,IAAI,CAAC,MAAM,KAAK,QAAQ,EAAE,CAAC;gBAChG,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;YAC3D,CAAC;YACD,QAAQ,EAAE,CAAC;QACb,CAAC,QAAQ,iBAAiB,CAAC,IAAI,CAAC,MAAM,KAAK,WAAW,IAAI,iBAAiB,CAAC,IAAI,CAAC,MAAM,KAAK,QAAQ,IAAI,QAAQ,GAAG,WAAW,EAAE;QAEhI,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,kCAAkC;QAC3F,qCAAqC;IACvC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,wCAAwC;AAErD,CAAC,CAAC,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/tests/integration/maestro_flow.test.ts"],"sourcesContent":["// Placeholder for Integration Tests (Maestro Flow)\n\nimport request from 'supertest';\nimport { createServer } from '../e2e/testHarness'; // Re-using the test harness\nimport { v4 as uuid } from 'uuid';\n\ndescribe('Maestro Integration Flow', () => {\n  let app: any;\n  let runbookId: string;\n\n  beforeAll(async () => {\n    app = await createServer();\n\n    // Simulate creating a runbook for testing\n    // In a real integration test, this might involve a direct DB insert or a dedicated API endpoint\n    runbookId = uuid();\n    console.log(`Simulating runbook creation with ID: ${runbookId}`);\n  });\n\n  it('should launch a run, transition states, and complete successfully', async () => {\n    // 1. Launch a run\n    const launchResponse = await request(app)\n      .post('/run')\n      .set('Idempotency-Key', uuid())\n      .send({\n        runbookId: runbookId,\n        tenantId: 'test-tenant',\n        params: { message: 'hello' }\n      });\n\n    expect(launchResponse.status).toBe(202);\n    expect(launchResponse.body.runId).toBeDefined();\n    const runId = launchResponse.body.runId;\n\n    // 2. Simulate task leasing and completion (this would be done by a worker in reality)\n    // For integration test, we might mock the worker interaction or use a test worker\n    // This part is highly dependent on Maestro's internal task leasing/ack mechanism.\n    // For now, we'll just check the run status after a simulated delay.\n\n    // In a real scenario, you'd have a test worker that leases tasks and reports back.\n    // For this placeholder, we'll assume the run eventually completes.\n\n    // 3. Check run status (after simulated work)\n    // This would typically involve polling the /runs/{runId} endpoint\n    let runStatusResponse;\n    let attempts = 0;\n    const maxAttempts = 10;\n    const delay = 1000; // 1 second\n\n    do {\n      runStatusResponse = await request(app).get(`/runs/${runId}`);\n      expect(runStatusResponse.status).toBe(200);\n      console.log(`Run ${runId} status: ${runStatusResponse.body.status}`);\n      if (runStatusResponse.body.status !== 'SUCCEEDED' && runStatusResponse.body.status !== 'FAILED') {\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n      attempts++;\n    } while (runStatusResponse.body.status !== 'SUCCEEDED' && runStatusResponse.body.status !== 'FAILED' && attempts < maxAttempts);\n\n    expect(runStatusResponse.body.status).toBe('SUCCEEDED'); // Expecting success for this test\n    // TODO: Verify artifacts, logs, etc.\n  }, 30000); // Increase timeout for integration test\n\n});"],"version":3}