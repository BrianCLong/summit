{"file":"/Users/brianlong/Developer/summit/tests/integration/__mocks__/archiver.ts","mappings":"AAAA,2EAA2E;AAC3E,MAAM,YAAY,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE;IAChC,MAAM,KAAK,GAAG,EAAE,MAAM,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC;IACtD,MAAM,SAAS,GAAG,EAAE,CAAC;IAErB,OAAO;QACL,KAAK,EAAE,2CAA2C;QAClD,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;QACf,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACjD,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC7C,SAAS,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACvD,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE;YACtB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC;gBACpB,SAAS,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;YACtB,CAAC;YACD,SAAS,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACxB,OAAO,SAAS,CAAC;QACnB,CAAC,CAAC;QACF,QAAQ,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,IAAI,EAAE;YAC3B,+DAA+D;YAC/D,MAAM,eAAe,GAAG,SAAS,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;YAClD,KAAK,MAAM,QAAQ,IAAI,eAAe,EAAE,CAAC;gBACvC,QAAQ,EAAE,CAAC;YACb,CAAC;QACH,CAAC,CAAC;KACH,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,wDAAwD;AACxD,YAAY,CAAC,MAAM,GAAG,YAAY,CAAC;AAEnC,MAAM,CAAC,OAAO,GAAG,YAAY,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/tests/integration/__mocks__/archiver.ts"],"sourcesContent":["// Archiver mock that records operations and emits finish event on finalize\nconst archiverMock = jest.fn(() => {\n  const calls = { append: [], file: [], directory: [] };\n  const listeners = {};\n  \n  return {\n    calls, // Expose the recorded calls for assertions\n    pipe: jest.fn(),\n    append: jest.fn((x) => void calls.append.push(x)),\n    file: jest.fn((x) => void calls.file.push(x)),\n    directory: jest.fn((x) => void calls.directory.push(x)),\n    on: jest.fn((evt, cb) => {\n      if (!listeners[evt]) {\n        listeners[evt] = [];\n      }\n      listeners[evt].push(cb);\n      return undefined;\n    }),\n    finalize: jest.fn(async () => {\n      // Trigger all 'finish' event listeners when finalize is called\n      const finishCallbacks = listeners['finish'] || [];\n      for (const callback of finishCallbacks) {\n        callback();\n      }\n    }),\n  };\n});\n\n// Add the create method that archiver typically exposes\narchiverMock.create = archiverMock;\n\nmodule.exports = archiverMock;"],"version":3}