{"file":"/Users/brianlong/Developer/summit/tests/integration/utils/testServer.ts","mappings":";AAAA,6CAA6C;AAC7C,qEAAqE;;;;;AAKrE,sCA0DC;AA7DD,2EAA2E;AAC3E,sDAA8B;AAEvB,KAAK,UAAU,aAAa;IACjC,8BAA8B;IAC9B,MAAM,GAAG,GAAQ,IAAA,iBAAO,GAAE,CAAC;IAE3B,mCAAmC;IACnC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAQ,EAAE,GAAQ,EAAE,IAAS,EAAE,EAAE;QACxC,IAAI,GAAG,CAAC,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,MAAM,KAAK,KAAK,EAAE,CAAC;YAClD,IAAI,IAAI,GAAG,EAAE,CAAC;YACd,GAAG,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,KAAU,EAAE,EAAE;gBAC5B,IAAI,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC;YAC3B,CAAC,CAAC,CAAC;YACH,GAAG,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;gBACjB,IAAI,CAAC;oBACH,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBAC9B,CAAC;gBAAC,OAAO,CAAC,EAAE,CAAC;oBACX,GAAG,CAAC,IAAI,GAAG,EAAE,CAAC;gBAChB,CAAC;gBACD,IAAI,EAAE,CAAC;YACT,CAAC,CAAC,CAAC;QACL,CAAC;aAAM,CAAC;YACN,IAAI,EAAE,CAAC;QACT,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,qDAAqD;IACrD,MAAM,KAAK,GAA2F,EAAE,CAAC;IACzG,IAAI,GAAG,GAAG,CAAC,CAAC;IAEZ,kDAAkD;IAClD,GAAG,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,GAAQ,EAAE,GAAQ,EAAE,EAAE;QAC5C,MAAM,EAAE,GAAG,KAAK,EAAE,GAAG,EAAE,CAAC;QACxB,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,IAAI,IAAI,SAAS,CAAC;QACzC,MAAM,GAAG,GAAG,EAAE,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,QAAiB,EAAE,CAAC;QACnD,KAAK,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC;QAChB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACnC,CAAC,CAAC,CAAC;IAEH,4DAA4D;IAC5D,gCAAgC;IAChC,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,IAAS,EAAE,GAAQ,EAAE,EAAE;QAC1C,KAAK,MAAM,EAAE,IAAI,KAAK,EAAE,CAAC;YACvB,MAAM,GAAG,GAAG,KAAK,CAAC,EAAE,CAAC,CAAC;YACtB,IAAI,GAAG,CAAC,KAAK,KAAK,QAAQ;gBAAE,GAAG,CAAC,KAAK,GAAG,SAAS,CAAC;iBAC7C,IAAI,GAAG,CAAC,KAAK,KAAK,SAAS;gBAAE,GAAG,CAAC,KAAK,GAAG,UAAU,CAAC;QAC3D,CAAC;QACD,OAAO,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;IAEH,gCAAgC;IAChC,GAAG,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC,GAAQ,EAAE,GAAQ,EAAE,EAAE;QAC/C,MAAM,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QACjC,IAAI,CAAC,GAAG;YAAE,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC,CAAC;QAC9D,OAAO,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,GAAG,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,IAAS,EAAE,GAAQ,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAE1E,OAAO,GAAG,CAAC,CAAC,sDAAsD;AACpE,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/tests/integration/utils/testServer.ts"],"sourcesContent":["// Create a minimal test server using Express\n// This follows the pattern used in the server/src/appFactory.ts file\n\n// Try importing Express - this should work since it works in appFactory.ts\nimport express from 'express';\n\nexport async function createTestApp() {\n  // Create Express app instance\n  const app: any = express();\n  \n  // Add JSON body parsing middleware\n  app.use((req: any, res: any, next: any) => {\n    if (req.method === 'POST' || req.method === 'PUT') {\n      let body = '';\n      req.on('data', (chunk: any) => {\n        body += chunk.toString();\n      });\n      req.on('end', () => {\n        try {\n          req.body = JSON.parse(body);\n        } catch (e) {\n          req.body = {};\n        }\n        next();\n      });\n    } else {\n      next();\n    }\n  });\n\n  // --- Minimal in-memory flow engine for tests --- //\n  const flows: Record<string, { id: string; kind: string; state: 'queued' | 'running' | 'complete' }> = {};\n  let seq = 0;\n\n  // Kick off a flow (async orchestration simulated)\n  app.post('/api/flows', (req: any, res: any) => {\n    const id = `f_${++seq}`;\n    const kind = req.body?.kind ?? 'maestro';\n    const rec = { id, kind, state: 'queued' as const };\n    flows[id] = rec;\n    return res.status(202).json(rec);\n  });\n\n  // Deterministic tick endpoint to advance all flows one step\n  // queued -> running -> complete\n  app.post('/__tick', (_req: any, res: any) => {\n    for (const id in flows) {\n      const rec = flows[id];\n      if (rec.state === 'queued') rec.state = 'running';\n      else if (rec.state === 'running') rec.state = 'complete';\n    }\n    return res.sendStatus(204);\n  });\n\n  // Inspect a specific flow by id\n  app.get('/api/flows/:id', (req: any, res: any) => {\n    const rec = flows[req.params.id];\n    if (!rec) return res.status(404).json({ error: 'not_found' });\n    return res.json(rec);\n  });\n\n  app.get('/__health', (_req: any, res: any) => res.status(200).send('ok'));\n\n  return app; // <-- supertest will wrap this directly (no listen())\n}"],"version":3}