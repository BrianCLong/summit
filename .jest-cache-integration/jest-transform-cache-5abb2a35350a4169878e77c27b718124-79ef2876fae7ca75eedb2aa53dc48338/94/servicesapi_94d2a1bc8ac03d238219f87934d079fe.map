{"file":"/Users/brianlong/Developer/summit/tests/integration/__mocks__/services-api.ts","mappings":"AAAA,+EAA+E;AAC/E,MAAM,gBAAgB,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;IACtC,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,MAAY,EAAE,EAAE;QAClC,oCAAoC;QACpC,OAAO;YACL,MAAM,EAAE,GAAG;YACX,IAAI,EAAE;gBACJ,OAAO,EAAE,SAAS;gBAClB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,MAAM,EAAE,KAAK;gBACb,IAAI,EAAE,MAAM,EAAE,IAAI,IAAI,UAAU;aACjC;SACF,CAAC;IACJ,CAAC,CAAC;IACF,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,MAAY,EAAE,EAAE;QACnC,qCAAqC;QACrC,OAAO;YACL,MAAM,EAAE,GAAG;YACX,IAAI,EAAE;gBACJ,OAAO,EAAE,UAAU;gBACnB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,MAAM,EAAE,MAAM;gBACd,IAAI,EAAE,MAAM,EAAE,IAAI,IAAI,UAAU;gBAChC,IAAI,EAAE,MAAM,EAAE,IAAI,IAAI,EAAE;aACzB;SACF,CAAC;IACJ,CAAC,CAAC;IACF,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,MAAY,EAAE,EAAE;QAClC,oCAAoC;QACpC,OAAO;YACL,MAAM,EAAE,GAAG;YACX,IAAI,EAAE;gBACJ,OAAO,EAAE,SAAS;gBAClB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,MAAM,EAAE,KAAK;gBACb,IAAI,EAAE,MAAM,EAAE,IAAI,IAAI,UAAU;gBAChC,IAAI,EAAE,MAAM,EAAE,IAAI,IAAI,EAAE;aACzB;SACF,CAAC;IACJ,CAAC,CAAC;IACF,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,MAAY,EAAE,EAAE;QACrC,uCAAuC;QACvC,OAAO;YACL,MAAM,EAAE,GAAG;YACX,IAAI,EAAE;gBACJ,OAAO,EAAE,SAAS;gBAClB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,MAAM,EAAE,QAAQ;gBAChB,IAAI,EAAE,MAAM,EAAE,IAAI,IAAI,UAAU;aACjC;SACF,CAAC;IACJ,CAAC,CAAC;CACH,CAAC,CAAC,CAAC;AAEJ,6BAA6B;AAC7B,MAAM,CAAC,OAAO,GAAG,EAAE,YAAY,EAAE,gBAAgB,EAAE,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/tests/integration/__mocks__/services-api.ts"],"sourcesContent":["// Mock for services/api - returns consistent response format with status codes\nconst createClientMock = jest.fn(() => ({\n  get: jest.fn(async (params?: any) => {\n    // Default response for GET requests\n    return { \n      status: 200, \n      data: { \n        message: 'success', \n        timestamp: new Date().toISOString(),\n        method: 'GET',\n        path: params?.path || '/default'\n      } \n    };\n  }),\n  post: jest.fn(async (params?: any) => {\n    // Default response for POST requests\n    return { \n      status: 202, \n      data: { \n        message: 'accepted', \n        timestamp: new Date().toISOString(),\n        method: 'POST',\n        path: params?.path || '/default',\n        body: params?.body || {}\n      } \n    };\n  }),\n  put: jest.fn(async (params?: any) => {\n    // Default response for PUT requests\n    return { \n      status: 200, \n      data: { \n        message: 'updated', \n        timestamp: new Date().toISOString(),\n        method: 'PUT',\n        path: params?.path || '/default',\n        body: params?.body || {}\n      } \n    };\n  }),\n  delete: jest.fn(async (params?: any) => {\n    // Default response for DELETE requests\n    return { \n      status: 204, \n      data: { \n        message: 'deleted', \n        timestamp: new Date().toISOString(),\n        method: 'DELETE',\n        path: params?.path || '/default'\n      } \n    };\n  }),\n}));\n\n// For CommonJS compatibility\nmodule.exports = { createClient: createClientMock };"],"version":3}