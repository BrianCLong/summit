{"file":"/Users/brianlong/Developer/summit/server/src/graphql/resolvers/provenance.ts","mappings":";;;AAAA,2EAAwF;AACxF,6EAAyF;AAE5E,QAAA,mBAAmB,GAAG;IACjC,KAAK,EAAE;QACL,KAAK,CAAC,eAAe,CAAC,CAAM,EAAE,EAAE,MAAM,EAAO;YAC3C,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,MAAM,IAAI,EAAE,CAAC;YACzE,IAAI,CAAC,OAAO,IAAI,CAAC,SAAS;gBAAE,OAAO,EAAE,CAAC;YACtC,IAAI,KAAK,IAAI,KAAK,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,CAAC,KAAK,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC;gBACzE,OAAO,MAAM,IAAA,8BAAY,EAAC,OAAO,EAAE,SAAS,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC;YACjF,CAAC;YACD,MAAM,MAAM,GAAG,MAAM,IAAA,mCAAiB,EAAC,OAAO,EAAE,SAAS,CAAC,CAAC;YAC3D,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAChC,CAAC;KACF;IACD,QAAQ,EAAE;QACR,KAAK,CAAC,sBAAsB,CAAC,CAAM,EAAE,EAAE,QAAQ,EAAE,SAAS,EAAE,UAAU,EAAO;YAC3E,yDAAyD;YACzD,MAAM,GAAG,GAAG,MAAM,IAAA,gCAAa,EAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;YACrD,MAAM,KAAK,GAAG,GAAG,EAAE,KAAK,IAAI,GAAG,CAAC;YAChC,MAAM,OAAO,GAAG,GAAG,EAAE,OAAO,IAAI,CAAC,aAAa,CAAC,CAAC;YAChD,MAAM,IAAA,mCAAgB,EAAC,QAAQ,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;YACxE,MAAM,OAAO,GAAG,MAAM,IAAA,gCAAa,EAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;YACzD,OAAO;gBACL,SAAS;gBACT,KAAK,EAAE,OAAO,EAAE,KAAK,IAAI,KAAK;gBAC9B,OAAO,EAAE,OAAO,EAAE,OAAO,IAAI,OAAO;gBACpC,SAAS,EAAE,OAAO,EAAE,UAAU,IAAI,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;aAC3D,CAAC;QACJ,CAAC;KACF;CACF,CAAC;AAEF,kBAAe,2BAAmB,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/server/src/graphql/resolvers/provenance.ts"],"sourcesContent":["import { getLatestEvidence, listEvidence } from '../../db/repositories/evidenceRepo.js';\nimport { getTrustScore, upsertTrustScore } from '../../db/repositories/trustRiskRepo.js';\n\nexport const provenanceResolvers = {\n  Query: {\n    async evidenceBundles(_: any, { filter }: any) {\n      const { service, releaseId, since, until, limit, offset } = filter || {};\n      if (!service || !releaseId) return [];\n      if (since || until || typeof offset === 'number' || (limit && limit > 1)) {\n        return await listEvidence(service, releaseId, { since, until, limit, offset });\n      }\n      const latest = await getLatestEvidence(service, releaseId);\n      return latest ? [latest] : [];\n    },\n  },\n  Mutation: {\n    async linkTrustScoreEvidence(_: any, { tenantId, subjectId, evidenceId }: any) {\n      // Preserve current score/reasons; just attach evidenceId\n      const cur = await getTrustScore(tenantId, subjectId);\n      const score = cur?.score ?? 0.7;\n      const reasons = cur?.reasons ?? ['manual_link'];\n      await upsertTrustScore(tenantId, subjectId, score, reasons, evidenceId);\n      const updated = await getTrustScore(tenantId, subjectId);\n      return {\n        subjectId,\n        score: updated?.score ?? score,\n        reasons: updated?.reasons ?? reasons,\n        updatedAt: updated?.updated_at ?? new Date().toISOString(),\n      };\n    },\n  },\n};\n\nexport default provenanceResolvers;\n"],"version":3}