972cfab8c9adeacaa9580089ff5e928b
"use strict";
// Simple test server that creates a minimal express-like app for integration tests
// Avoiding express version conflicts by creating a mock that implements the supertest interface
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTestApp = createTestApp;
async function createTestApp() {
    // Create a minimal mock app that implements the express interface needed by supertest
    const app = {
        // Express methods used by supertest
        use: jest.fn().mockReturnThis(),
        post: jest.fn().mockReturnThis(),
        get: jest.fn().mockReturnThis(),
        listen: jest.fn().mockImplementation((_port, callback) => {
            if (callback)
                callback();
            return { close: jest.fn() };
        }),
        // Supertest needs the address function to determine where to connect
        address: jest.fn(() => null), // Return null to indicate no server is listening
        // Mock middleware storage
        _middleware: [],
        _routes: {},
    };
    // Implement route registration methods
    app.use.mockImplementation((middleware) => {
        app._middleware.push(middleware);
        return app;
    });
    app.post.mockImplementation((path, handler) => {
        app._routes[`POST:${path}`] = handler;
        return app;
    });
    app.get.mockImplementation((path, handler) => {
        app._routes[`GET:${path}`] = handler;
        return app;
    });
    // Mock express.json() middleware
    app.use.mockImplementationOnce(() => app); // For express.json() mock
    // Minimal stub routes needed by maestro_flow.test.ts
    app.post('/api/flows', (req, res) => {
        // return 202 Accepted to simulate async orchestration kickoff
        return res.status(202).json({ id: 'flow_1', kind: req.body?.kind ?? 'maestro', state: 'queued' });
    });
    app.post('/run', (req, res) => {
        // For maestro_flow.test.ts compatibility
        return res.status(202).json({ runId: 'run_1', status: 'ACCEPTED' });
    });
    app.get('/runs/:runId', (req, res) => {
        // For maestro_flow.test.ts status checking
        return res.status(200).json({
            runId: req.params.runId,
            status: 'SUCCEEDED',
            completedAt: new Date().toISOString()
        });
    });
    app.get('/__health', (_req, res) => res.status(200).send('ok'));
    return app;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3Rlc3RzL2ludGVncmF0aW9uL3V0aWxzL3Rlc3RTZXJ2ZXIudHMiLCJtYXBwaW5ncyI6IjtBQUFBLG1GQUFtRjtBQUNuRixnR0FBZ0c7O0FBRWhHLHNDQThEQztBQTlETSxLQUFLLFVBQVUsYUFBYTtJQUNqQyxzRkFBc0Y7SUFDdEYsTUFBTSxHQUFHLEdBQVE7UUFDZixvQ0FBb0M7UUFDcEMsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxjQUFjLEVBQUU7UUFDL0IsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxjQUFjLEVBQUU7UUFDaEMsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxjQUFjLEVBQUU7UUFDL0IsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsRUFBRTtZQUN2RCxJQUFJLFFBQVE7Z0JBQUUsUUFBUSxFQUFFLENBQUM7WUFDekIsT0FBTyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUM5QixDQUFDLENBQUM7UUFFRixxRUFBcUU7UUFDckUsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsaURBQWlEO1FBRS9FLDBCQUEwQjtRQUMxQixXQUFXLEVBQUUsRUFBRTtRQUNmLE9BQU8sRUFBRSxFQUFFO0tBQ1osQ0FBQztJQUVGLHVDQUF1QztJQUN2QyxHQUFHLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUMsVUFBb0IsRUFBRSxFQUFFO1FBQ2xELEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2pDLE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQyxDQUFDLENBQUM7SUFFSCxHQUFHLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUMsSUFBWSxFQUFFLE9BQWlCLEVBQUUsRUFBRTtRQUM5RCxHQUFHLENBQUMsT0FBTyxDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUM7UUFDdEMsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDLENBQUMsQ0FBQztJQUVILEdBQUcsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxJQUFZLEVBQUUsT0FBaUIsRUFBRSxFQUFFO1FBQzdELEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQztRQUNyQyxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUMsQ0FBQyxDQUFDO0lBRUgsaUNBQWlDO0lBQ2pDLEdBQUcsQ0FBQyxHQUFHLENBQUMsc0JBQXNCLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQywwQkFBMEI7SUFFckUscURBQXFEO0lBQ3JELEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsR0FBUSxFQUFFLEdBQVEsRUFBRSxFQUFFO1FBQzVDLDhEQUE4RDtRQUM5RCxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLElBQUksU0FBUyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQ3BHLENBQUMsQ0FBQyxDQUFDO0lBRUgsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFRLEVBQUUsR0FBUSxFQUFFLEVBQUU7UUFDdEMseUNBQXlDO1FBQ3pDLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO0lBQ3RFLENBQUMsQ0FBQyxDQUFDO0lBRUgsR0FBRyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxHQUFRLEVBQUUsR0FBUSxFQUFFLEVBQUU7UUFDN0MsMkNBQTJDO1FBQzNDLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDMUIsS0FBSyxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSztZQUN2QixNQUFNLEVBQUUsV0FBVztZQUNuQixXQUFXLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUU7U0FDdEMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxHQUFHLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQVMsRUFBRSxHQUFRLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFFMUUsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9icmlhbmxvbmcvRGV2ZWxvcGVyL3N1bW1pdC90ZXN0cy9pbnRlZ3JhdGlvbi91dGlscy90ZXN0U2VydmVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNpbXBsZSB0ZXN0IHNlcnZlciB0aGF0IGNyZWF0ZXMgYSBtaW5pbWFsIGV4cHJlc3MtbGlrZSBhcHAgZm9yIGludGVncmF0aW9uIHRlc3RzXG4vLyBBdm9pZGluZyBleHByZXNzIHZlcnNpb24gY29uZmxpY3RzIGJ5IGNyZWF0aW5nIGEgbW9jayB0aGF0IGltcGxlbWVudHMgdGhlIHN1cGVydGVzdCBpbnRlcmZhY2VcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVRlc3RBcHAoKSB7XG4gIC8vIENyZWF0ZSBhIG1pbmltYWwgbW9jayBhcHAgdGhhdCBpbXBsZW1lbnRzIHRoZSBleHByZXNzIGludGVyZmFjZSBuZWVkZWQgYnkgc3VwZXJ0ZXN0XG4gIGNvbnN0IGFwcDogYW55ID0ge1xuICAgIC8vIEV4cHJlc3MgbWV0aG9kcyB1c2VkIGJ5IHN1cGVydGVzdFxuICAgIHVzZTogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXG4gICAgcG9zdDogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXG4gICAgZ2V0OiBqZXN0LmZuKCkubW9ja1JldHVyblRoaXMoKSxcbiAgICBsaXN0ZW46IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKF9wb3J0LCBjYWxsYmFjaykgPT4ge1xuICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjaygpO1xuICAgICAgcmV0dXJuIHsgY2xvc2U6IGplc3QuZm4oKSB9O1xuICAgIH0pLFxuICAgIFxuICAgIC8vIFN1cGVydGVzdCBuZWVkcyB0aGUgYWRkcmVzcyBmdW5jdGlvbiB0byBkZXRlcm1pbmUgd2hlcmUgdG8gY29ubmVjdFxuICAgIGFkZHJlc3M6IGplc3QuZm4oKCkgPT4gbnVsbCksIC8vIFJldHVybiBudWxsIHRvIGluZGljYXRlIG5vIHNlcnZlciBpcyBsaXN0ZW5pbmdcbiAgICBcbiAgICAvLyBNb2NrIG1pZGRsZXdhcmUgc3RvcmFnZVxuICAgIF9taWRkbGV3YXJlOiBbXSxcbiAgICBfcm91dGVzOiB7fSxcbiAgfTtcbiAgXG4gIC8vIEltcGxlbWVudCByb3V0ZSByZWdpc3RyYXRpb24gbWV0aG9kc1xuICBhcHAudXNlLm1vY2tJbXBsZW1lbnRhdGlvbigobWlkZGxld2FyZTogRnVuY3Rpb24pID0+IHtcbiAgICBhcHAuX21pZGRsZXdhcmUucHVzaChtaWRkbGV3YXJlKTtcbiAgICByZXR1cm4gYXBwO1xuICB9KTtcbiAgXG4gIGFwcC5wb3N0Lm1vY2tJbXBsZW1lbnRhdGlvbigocGF0aDogc3RyaW5nLCBoYW5kbGVyOiBGdW5jdGlvbikgPT4ge1xuICAgIGFwcC5fcm91dGVzW2BQT1NUOiR7cGF0aH1gXSA9IGhhbmRsZXI7XG4gICAgcmV0dXJuIGFwcDtcbiAgfSk7XG4gIFxuICBhcHAuZ2V0Lm1vY2tJbXBsZW1lbnRhdGlvbigocGF0aDogc3RyaW5nLCBoYW5kbGVyOiBGdW5jdGlvbikgPT4ge1xuICAgIGFwcC5fcm91dGVzW2BHRVQ6JHtwYXRofWBdID0gaGFuZGxlcjtcbiAgICByZXR1cm4gYXBwO1xuICB9KTtcbiAgXG4gIC8vIE1vY2sgZXhwcmVzcy5qc29uKCkgbWlkZGxld2FyZVxuICBhcHAudXNlLm1vY2tJbXBsZW1lbnRhdGlvbk9uY2UoKCkgPT4gYXBwKTsgLy8gRm9yIGV4cHJlc3MuanNvbigpIG1vY2tcbiAgXG4gIC8vIE1pbmltYWwgc3R1YiByb3V0ZXMgbmVlZGVkIGJ5IG1hZXN0cm9fZmxvdy50ZXN0LnRzXG4gIGFwcC5wb3N0KCcvYXBpL2Zsb3dzJywgKHJlcTogYW55LCByZXM6IGFueSkgPT4ge1xuICAgIC8vIHJldHVybiAyMDIgQWNjZXB0ZWQgdG8gc2ltdWxhdGUgYXN5bmMgb3JjaGVzdHJhdGlvbiBraWNrb2ZmXG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAyKS5qc29uKHsgaWQ6ICdmbG93XzEnLCBraW5kOiByZXEuYm9keT8ua2luZCA/PyAnbWFlc3RybycsIHN0YXRlOiAncXVldWVkJyB9KTtcbiAgfSk7XG5cbiAgYXBwLnBvc3QoJy9ydW4nLCAocmVxOiBhbnksIHJlczogYW55KSA9PiB7XG4gICAgLy8gRm9yIG1hZXN0cm9fZmxvdy50ZXN0LnRzIGNvbXBhdGliaWxpdHlcbiAgICByZXR1cm4gcmVzLnN0YXR1cygyMDIpLmpzb24oeyBydW5JZDogJ3J1bl8xJywgc3RhdHVzOiAnQUNDRVBURUQnIH0pO1xuICB9KTtcblxuICBhcHAuZ2V0KCcvcnVucy86cnVuSWQnLCAocmVxOiBhbnksIHJlczogYW55KSA9PiB7XG4gICAgLy8gRm9yIG1hZXN0cm9fZmxvdy50ZXN0LnRzIHN0YXR1cyBjaGVja2luZ1xuICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbih7IFxuICAgICAgcnVuSWQ6IHJlcS5wYXJhbXMucnVuSWQsIFxuICAgICAgc3RhdHVzOiAnU1VDQ0VFREVEJywgXG4gICAgICBjb21wbGV0ZWRBdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpIFxuICAgIH0pO1xuICB9KTtcblxuICBhcHAuZ2V0KCcvX19oZWFsdGgnLCAoX3JlcTogYW55LCByZXM6IGFueSkgPT4gcmVzLnN0YXR1cygyMDApLnNlbmQoJ29rJykpO1xuICBcbiAgcmV0dXJuIGFwcDtcbn0iXSwidmVyc2lvbiI6M30=