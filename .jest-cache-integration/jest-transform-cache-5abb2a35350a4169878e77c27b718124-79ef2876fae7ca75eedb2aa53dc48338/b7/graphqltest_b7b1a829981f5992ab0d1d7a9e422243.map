{"file":"/Users/brianlong/Developer/summit/server/src/tests/integration/graphql.test.ts","mappings":";;;;;AAAA,iEAAiE;AACjE,wFAA2F;AAC3F,uDAAmD;AACnD,gFAAyD;AACzD,2CAA8C;AAE9C,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;IACnC,EAAE,CAAC,mBAAmB,EAAE,KAAK,IAAI,EAAE;QACjC,MAAM,MAAM,GAAG,MAAM,IAAA,mCAAmB,GAAE,CAAC;QAC3C,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QACzC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC7B,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACtC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;IACtC,IAAI,MAAM,CAAC;IACX,IAAI,MAAM,CAAC;IAEX,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,MAAM,GAAG,IAAI,qBAAY,CAAC;YACxB,QAAQ,EAAR,oBAAQ;YACR,SAAS,EAAT,kBAAS;SACV,CAAC,CAAC;QACH,kCAAkC;QAClC,MAAM,EAAE,GAAG,EAAE,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,4CAA4C;QAC9F,MAAM,GAAG,IAAA,mCAAmB,EAAC;YAC3B,QAAQ,EAAE,GAAG;SACd,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,KAAK,IAAI,EAAE;QAClB,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;IACtB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;QAC5C,sEAAsE;QACtE,0CAA0C;QAC1C,MAAM,KAAK,GAAG;;;;;;;;KAQb,CAAC;QAEF,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAE3C,+CAA+C;QAC/C,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,aAAa,EAAE,CAAC;QACxC,oEAAoE;QACpE,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC;QACpC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,kCAAkC;IAC7E,CAAC,CAAC,CAAC;IAEH,iEAAiE;AACnE,CAAC,CAAC,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/server/src/tests/integration/graphql.test.ts"],"sourcesContent":["// Use local lightweight tester if the real dep isn't present yet\nimport { createGraphQLClient } from '../../../../../tests/integration/utils/graphqlClient';\nimport { typeDefs } from '../../graphql/schema.js';\nimport resolvers from '../../graphql/resolvers/index.js';\nimport { ApolloServer } from '@apollo/server';\n\ndescribe('graphql integration', () => {\n  it('basic query works', async () => {\n    const client = await createGraphQLClient();\n    const res = await client.query('{ ok }');\n    expect(res.status).toBe(200);\n    expect(res.body.data.ok).toBe(true);\n  });\n});\n\ndescribe('GraphQL Contract Tests', () => {\n  let client;\n  let server;\n\n  beforeAll(async () => {\n    server = new ApolloServer({\n      typeDefs,\n      resolvers,\n    });\n    // Start the server to get its URL\n    const { url } = await server.listen({ port: 0 }); // Use port 0 to get a random available port\n    client = createGraphQLClient({\n      endpoint: url,\n    });\n  });\n\n  afterAll(async () => {\n    await server.stop();\n  });\n\n  it('should fetch an entity by ID', async () => {\n    // This test will fail until actual data and resolvers are implemented\n    // It's a placeholder for contract testing\n    const query = `\n      query {\n        entity(id: \"1\") {\n          id\n          type\n          props\n        }\n      }\n    `;\n\n    const response = await client.query(query);\n\n    // Expect no errors for a valid query structure\n    expect(response.errors).toBeUndefined();\n    // Expect data to be present, even if null for a non-existent entity\n    expect(response.data).toBeDefined();\n    expect(response.data.entity).toBeNull(); // Expect null until data is added\n  });\n\n  // Add more tests for other queries, mutations, and subscriptions\n});"],"version":3}