3a9aecc2dc0b2220ae5cd9d2d2e5ccc7
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTestApp = createTestApp;
const express = require('express');
async function createTestApp() {
    const app = express();
    app.use(express.json());
    const flows = new Map();
    let seq = 0;
    // Kick off a flow (async orchestration simulated)
    app.post('/api/flows', (req, res) => {
        const id = `f_${++seq}`;
        const kind = req.body?.kind ?? 'maestro';
        const rec = { id, kind, state: 'queued' };
        flows.set(id, rec);
        return res.status(202).json(rec);
    });
    // Deterministic tick endpoint to advance all flows one step
    // queued -> running -> complete
    app.post('/__tick', (_req, res) => {
        for (const rec of flows.values()) {
            if (rec.state === 'queued')
                rec.state = 'running';
            else if (rec.state === 'running')
                rec.state = 'complete';
        }
        return res.sendStatus(204);
    });
    // Inspect a specific flow by id
    app.get('/api/flows/:id', (req, res) => {
        const rec = flows.get(req.params.id);
        if (!rec)
            return res.status(404).json({ error: 'not_found' });
        return res.json(rec);
    });
    app.get('/__health', (_req, res) => res.status(200).send('ok'));
    return app; // <-- supertest will wrap this directly (no listen())
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3Rlc3RzL2ludGVncmF0aW9uL3V0aWxzL3Rlc3RTZXJ2ZXIudHMiLCJtYXBwaW5ncyI6Ijs7QUFFQSxzQ0FzQ0M7QUF4Q0QsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBRTVCLEtBQUssVUFBVSxhQUFhO0lBQ2pDLE1BQU0sR0FBRyxHQUFHLE9BQU8sRUFBRSxDQUFDO0lBQ3RCLEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7SUFJeEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLEVBQTBELENBQUM7SUFDaEYsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBRVosa0RBQWtEO0lBQ2xELEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQ2xDLE1BQU0sRUFBRSxHQUFHLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUN4QixNQUFNLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksSUFBSSxTQUFTLENBQUM7UUFDekMsTUFBTSxHQUFHLEdBQUcsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxRQUFxQixFQUFFLENBQUM7UUFDdkQsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDbkIsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNuQyxDQUFDLENBQUMsQ0FBQztJQUVILDREQUE0RDtJQUM1RCxnQ0FBZ0M7SUFDaEMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEVBQUU7UUFDaEMsS0FBSyxNQUFNLEdBQUcsSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQztZQUNqQyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEtBQUssUUFBUTtnQkFBRSxHQUFHLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQztpQkFDN0MsSUFBSSxHQUFHLENBQUMsS0FBSyxLQUFLLFNBQVM7Z0JBQUUsR0FBRyxDQUFDLEtBQUssR0FBRyxVQUFVLENBQUM7UUFDM0QsQ0FBQztRQUNELE9BQU8sR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM3QixDQUFDLENBQUMsQ0FBQztJQUVILGdDQUFnQztJQUNoQyxHQUFHLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQ3JDLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsR0FBRztZQUFFLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQztRQUM5RCxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdkIsQ0FBQyxDQUFDLENBQUM7SUFFSCxHQUFHLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFFaEUsT0FBTyxHQUFHLENBQUMsQ0FBQyxzREFBc0Q7QUFDcEUsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvYnJpYW5sb25nL0RldmVsb3Blci9zdW1taXQvdGVzdHMvaW50ZWdyYXRpb24vdXRpbHMvdGVzdFNlcnZlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlVGVzdEFwcCgpIHtcbiAgY29uc3QgYXBwID0gZXhwcmVzcygpO1xuICBhcHAudXNlKGV4cHJlc3MuanNvbigpKTtcblxuICAvLyAtLS0gTWluaW1hbCBpbi1tZW1vcnkgZmxvdyBlbmdpbmUgZm9yIHRlc3RzIC0tLSAvL1xuICB0eXBlIEZsb3dTdGF0ZSA9ICdxdWV1ZWQnIHwgJ3J1bm5pbmcnIHwgJ2NvbXBsZXRlJztcbiAgY29uc3QgZmxvd3MgPSBuZXcgTWFwPHN0cmluZywgeyBpZDogc3RyaW5nOyBraW5kOiBzdHJpbmc7IHN0YXRlOiBGbG93U3RhdGUgfT4oKTtcbiAgbGV0IHNlcSA9IDA7XG5cbiAgLy8gS2ljayBvZmYgYSBmbG93IChhc3luYyBvcmNoZXN0cmF0aW9uIHNpbXVsYXRlZClcbiAgYXBwLnBvc3QoJy9hcGkvZmxvd3MnLCAocmVxLCByZXMpID0+IHtcbiAgICBjb25zdCBpZCA9IGBmXyR7KytzZXF9YDtcbiAgICBjb25zdCBraW5kID0gcmVxLmJvZHk/LmtpbmQgPz8gJ21hZXN0cm8nO1xuICAgIGNvbnN0IHJlYyA9IHsgaWQsIGtpbmQsIHN0YXRlOiAncXVldWVkJyBhcyBGbG93U3RhdGUgfTtcbiAgICBmbG93cy5zZXQoaWQsIHJlYyk7XG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAyKS5qc29uKHJlYyk7XG4gIH0pO1xuXG4gIC8vIERldGVybWluaXN0aWMgdGljayBlbmRwb2ludCB0byBhZHZhbmNlIGFsbCBmbG93cyBvbmUgc3RlcFxuICAvLyBxdWV1ZWQgLT4gcnVubmluZyAtPiBjb21wbGV0ZVxuICBhcHAucG9zdCgnL19fdGljaycsIChfcmVxLCByZXMpID0+IHtcbiAgICBmb3IgKGNvbnN0IHJlYyBvZiBmbG93cy52YWx1ZXMoKSkge1xuICAgICAgaWYgKHJlYy5zdGF0ZSA9PT0gJ3F1ZXVlZCcpIHJlYy5zdGF0ZSA9ICdydW5uaW5nJztcbiAgICAgIGVsc2UgaWYgKHJlYy5zdGF0ZSA9PT0gJ3J1bm5pbmcnKSByZWMuc3RhdGUgPSAnY29tcGxldGUnO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLnNlbmRTdGF0dXMoMjA0KTtcbiAgfSk7XG5cbiAgLy8gSW5zcGVjdCBhIHNwZWNpZmljIGZsb3cgYnkgaWRcbiAgYXBwLmdldCgnL2FwaS9mbG93cy86aWQnLCAocmVxLCByZXMpID0+IHtcbiAgICBjb25zdCByZWMgPSBmbG93cy5nZXQocmVxLnBhcmFtcy5pZCk7XG4gICAgaWYgKCFyZWMpIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7IGVycm9yOiAnbm90X2ZvdW5kJyB9KTtcbiAgICByZXR1cm4gcmVzLmpzb24ocmVjKTtcbiAgfSk7XG5cbiAgYXBwLmdldCgnL19faGVhbHRoJywgKF9yZXEsIHJlcykgPT4gcmVzLnN0YXR1cygyMDApLnNlbmQoJ29rJykpO1xuXG4gIHJldHVybiBhcHA7IC8vIDwtLSBzdXBlcnRlc3Qgd2lsbCB3cmFwIHRoaXMgZGlyZWN0bHkgKG5vIGxpc3RlbigpKVxufSJdLCJ2ZXJzaW9uIjozfQ==