{"file":"/Users/brianlong/Developer/summit/tests/integration/export-integrity.test.ts","mappings":"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","names":[],"sources":["/Users/brianlong/Developer/summit/tests/integration/export-integrity.test.ts"],"sourcesContent":["// Proper Jest mock setup\njest.mock('archiver');\n\ndescribe('export integrity', () => {\n  const archiver = require('archiver');\n\n  beforeEach(() => {\n    // Reset the mock before each test\n    jest.clearAllMocks();\n  });\n\n  it('bundles expected files and finalizes', async () => {\n    // Create a mock archiver instance  \n    const zipMock = {\n      calls: { append: [], file: [], directory: [] },\n      pipe: jest.fn(),\n      append: jest.fn((x) => void zipMock.calls.append.push(x)),\n      file: jest.fn((x) => void zipMock.calls.file.push(x)),\n      directory: jest.fn((x) => void zipMock.calls.directory.push(x)),\n      on: jest.fn(),\n      finalize: jest.fn(async () => {\n        // Find all 'finish' listeners and call them\n        const finishListeners = zipMock.on.mock.calls\n          .filter(call => call[0] === 'finish')\n          .map(call => call[1]);\n        \n        for (const listener of finishListeners) {\n          listener();\n        }\n      })\n    };\n\n    // Mock the archiver.create method to return our mock\n    archiver.create.mockReturnValue(zipMock);\n\n    const zip = archiver.create('zip');\n    \n    // Simulate adding content to the archive\n    zip.append('readme content', { name: 'README.md' });\n    zip.file('path/to/data.json');\n    zip.directory('assets/', 'assets');\n    \n    // Flag to track if finish event was triggered\n    let finishCalled = false;\n    zip.on('finish', () => {\n      finishCalled = true;\n    });\n    \n    // Finalize the archive (this should trigger the finish event)\n    await zip.finalize();\n    \n    // Assert that operations were recorded\n    expect(zip.calls.append.length + zip.calls.file.length + zip.calls.directory.length).toBeGreaterThan(0);\n    expect(zip.calls.append).toContainEqual('readme content');\n    expect(zip.calls.file).toContainEqual('path/to/data.json');\n    expect(zip.calls.directory).toContainEqual('assets/');\n    \n    // Assert that finish event was called\n    expect(finishCalled).toBe(true);\n    \n    // Verify archiver was called with correct format\n    expect(archiver.create).toHaveBeenCalledWith('zip');\n  });\n  \n  it('handles export failure gracefully', () => {\n    const zipMock = {\n      calls: { append: [], file: [], directory: [] },\n      pipe: jest.fn(),\n      append: jest.fn((x) => void zipMock.calls.append.push(x)),\n      file: jest.fn((x) => void zipMock.calls.file.push(x)),\n      directory: jest.fn((x) => void zipMock.calls.directory.push(x)),\n      on: jest.fn(),\n      finalize: jest.fn(async () => {\n        // Find all 'finish' listeners and call them\n        const finishListeners = zipMock.on.mock.calls\n          .filter(call => call[0] === 'finish')\n          .map(call => call[1]);\n        \n        for (const listener of finishListeners) {\n          listener();\n        }\n      })\n    };\n\n    // Mock the archiver.create method to return our mock\n    archiver.create.mockReturnValue(zipMock);\n\n    const zip = archiver.create('zip');\n    \n    // Don't call finalize, so finish event should not be triggered\n    let finishCalled = false;\n    zip.on('finish', () => {\n      finishCalled = true;\n    });\n    \n    // Only add some content but don't finalize\n    zip.append('content', { name: 'file.txt' });\n    \n    // Assert operations were recorded but finish was not called (since finalize() wasn't called)\n    expect(zip.calls.append).toContainEqual('content');\n    expect(finishCalled).toBe(false); // This should be false because finalize() wasn't called\n  });\n});\n"],"version":3}