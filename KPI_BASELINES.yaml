# IntelGraph Maestro KPI Baselines Configuration
# Auto-populated by evidence CI workflow and used for SLO validation

apiVersion: v1
kind: ConfigMap
metadata:
  name: intelgraph-kpi-baselines
  namespace: intelgraph-system
  labels:
    app: intelgraph-maestro
    component: monitoring
    environment: production
  annotations:
    description: "Production KPI baselines for SLO validation and evidence bundle generation"
    last-updated: "{{ .Timestamp }}"
    release-tag: "{{ .ReleaseTag }}"

data:
  # ====================================================================
  # API PERFORMANCE BASELINES
  # ====================================================================

  api_performance.yaml: |
    api_performance:
      latency:
        p50_ms: "{{ .KPI.API.P50Latency | default 125 }}"
        p95_ms: "{{ .KPI.API.P95Latency | default 285 }}"
        p99_ms: "{{ .KPI.API.P99Latency | default 456 }}"
        max_ms: "{{ .KPI.API.MaxLatency | default 1200 }}"

      throughput:
        requests_per_second: "{{ .KPI.API.RequestsPerSecond | default 207.5 }}"
        peak_rps: "{{ .KPI.API.PeakRPS | default 450 }}"
        concurrent_users: "{{ .KPI.API.ConcurrentUsers | default 100 }}"

      reliability:
        success_rate_percent: "{{ .KPI.API.SuccessRate | default 99.92 }}"
        error_rate_percent: "{{ .KPI.API.ErrorRate | default 0.008 }}"
        timeout_rate_percent: "{{ .KPI.API.TimeoutRate | default 0.002 }}"

      slo_targets:
        availability_percent: 99.9
        p95_latency_ms: 350
        p99_latency_ms: 700
        error_rate_max_percent: 0.1

  # ====================================================================
  # GRAPHQL OPERATION BASELINES
  # ====================================================================

  graphql_operations.yaml: |
    graphql_operations:
      query_performance:
        simple_query_p95_ms: "{{ .KPI.GraphQL.SimpleQueryP95 | default 45 }}"
        complex_query_p95_ms: "{{ .KPI.GraphQL.ComplexQueryP95 | default 185 }}"
        introspection_p95_ms: "{{ .KPI.GraphQL.IntrospectionP95 | default 25 }}"

      mutation_performance:
        create_entity_p95_ms: "{{ .KPI.GraphQL.CreateEntityP95 | default 125 }}"
        update_entity_p95_ms: "{{ .KPI.GraphQL.UpdateEntityP95 | default 95 }}"
        delete_entity_p95_ms: "{{ .KPI.GraphQL.DeleteEntityP95 | default 85 }}"
        bulk_import_p95_ms: "{{ .KPI.GraphQL.BulkImportP95 | default 2500 }}"

      subscription_performance:
        connection_time_ms: "{{ .KPI.GraphQL.SubscriptionConnectionTime | default 150 }}"
        message_latency_ms: "{{ .KPI.GraphQL.SubscriptionLatency | default 35 }}"
        concurrent_subscriptions: "{{ .KPI.GraphQL.ConcurrentSubscriptions | default 250 }}"

      complexity_metrics:
        average_depth: "{{ .KPI.GraphQL.AverageDepth | default 3.2 }}"
        average_complexity: "{{ .KPI.GraphQL.AverageComplexity | default 125 }}"
        average_cost: "{{ .KPI.GraphQL.AverageCost | default 85 }}"

      slo_targets:
        query_p95_ms: 200
        mutation_p95_ms: 500
        subscription_connection_ms: 300

  # ====================================================================
  # GRAPH DATABASE BASELINES
  # ====================================================================

  graph_database.yaml: |
    neo4j_performance:
      query_latency:
        one_hop_p95_ms: "{{ .KPI.Neo4j.OneHopP95 | default 25 }}"
        two_hop_p95_ms: "{{ .KPI.Neo4j.TwoHopP95 | default 85 }}"
        three_hop_p95_ms: "{{ .KPI.Neo4j.ThreeHopP95 | default 285 }}"
        four_hop_p95_ms: "{{ .KPI.Neo4j.FourHopP95 | default 890 }}"
        shortest_path_p95_ms: "{{ .KPI.Neo4j.ShortestPathP95 | default 450 }}"

      analytics_performance:
        page_rank_p95_ms: "{{ .KPI.Neo4j.PageRankP95 | default 2500 }}"
        community_detection_p95_ms: "{{ .KPI.Neo4j.CommunityDetectionP95 | default 5200 }}"
        centrality_p95_ms: "{{ .KPI.Neo4j.CentralityP95 | default 1800 }}"

      cache_performance:
        page_cache_hit_rate_percent: "{{ .KPI.Neo4j.PageCacheHitRate | default 92.5 }}"
        query_cache_hit_rate_percent: "{{ .KPI.Neo4j.QueryCacheHitRate | default 78.3 }}"
        memory_usage_percent: "{{ .KPI.Neo4j.MemoryUsage | default 68.5 }}"

      cluster_health:
        leader_elections_per_hour: "{{ .KPI.Neo4j.LeaderElections | default 0 }}"
        replica_lag_seconds: "{{ .KPI.Neo4j.ReplicaLag | default 1.2 }}"
        transaction_throughput: "{{ .KPI.Neo4j.TransactionThroughput | default 450 }}"

      slo_targets:
        three_hop_p95_ms: 1200
        page_cache_hit_rate_min_percent: 85
        replica_lag_max_seconds: 10

  # ====================================================================
  # AUTHENTICATION & AUTHORIZATION BASELINES
  # ====================================================================

  auth_security.yaml: |
    authentication:
      oidc_performance:
        login_flow_p95_ms: "{{ .KPI.Auth.LoginFlowP95 | default 650 }}"
        token_validation_p95_ms: "{{ .KPI.Auth.TokenValidationP95 | default 15 }}"
        jwks_fetch_p95_ms: "{{ .KPI.Auth.JWKSFetchP95 | default 85 }}"
        logout_p95_ms: "{{ .KPI.Auth.LogoutP95 | default 125 }}"

      success_rates:
        login_success_rate_percent: "{{ .KPI.Auth.LoginSuccessRate | default 99.95 }}"
        token_validation_success_rate: "{{ .KPI.Auth.TokenValidationSuccess | default 99.98 }}"
        session_refresh_success_rate: "{{ .KPI.Auth.SessionRefreshSuccess | default 99.90 }}"

      security_metrics:
        failed_login_attempts_per_hour: "{{ .KPI.Auth.FailedLoginsPerHour | default 12 }}"
        suspicious_activity_alerts_per_hour: "{{ .KPI.Auth.SuspiciousActivityAlerts | default 0.2 }}"
        rate_limit_hits_per_hour: "{{ .KPI.Auth.RateLimitHits | default 5.8 }}"

    authorization:
      opa_performance:
        policy_decision_p95_ms: "{{ .KPI.OPA.DecisionP95 | default 8.5 }}"
        policy_evaluation_p99_ms: "{{ .KPI.OPA.DecisionP99 | default 18.2 }}"
        bundle_download_time_ms: "{{ .KPI.OPA.BundleDownloadTime | default 450 }}"

      policy_metrics:
        decisions_per_second: "{{ .KPI.OPA.DecisionsPerSecond | default 156 }}"
        allow_rate_percent: "{{ .KPI.OPA.AllowRate | default 87.5 }}"
        deny_rate_percent: "{{ .KPI.OPA.DenyRate | default 12.5 }}"
        policy_errors_per_hour: "{{ .KPI.OPA.PolicyErrorsPerHour | default 0.1 }}"

      slo_targets:
        decision_latency_p95_ms: 10
        policy_availability_percent: 99.99
        bundle_sync_max_interval_seconds: 300

  # ====================================================================
  # DATA PLATFORM BASELINES
  # ====================================================================

  data_platform.yaml: |
    postgresql:
      performance:
        connection_pool_usage_percent: "{{ .KPI.PostgreSQL.PoolUsage | default 45.2 }}"
        query_p95_ms: "{{ .KPI.PostgreSQL.QueryP95 | default 25.8 }}"
        transaction_p95_ms: "{{ .KPI.PostgreSQL.TransactionP95 | default 35.5 }}"
        checkpoint_completion_p95_ms: "{{ .KPI.PostgreSQL.CheckpointP95 | default 2500 }}"

      replication:
        replica_lag_seconds: "{{ .KPI.PostgreSQL.ReplicaLag | default 1.8 }}"
        wal_lag_bytes: "{{ .KPI.PostgreSQL.WALLag | default 2048 }}"
        streaming_lag_seconds: "{{ .KPI.PostgreSQL.StreamingLag | default 0.5 }}"

      resource_usage:
        cpu_usage_percent: "{{ .KPI.PostgreSQL.CPUUsage | default 42.5 }}"
        memory_usage_percent: "{{ .KPI.PostgreSQL.MemoryUsage | default 68.8 }}"
        disk_usage_percent: "{{ .KPI.PostgreSQL.DiskUsage | default 35.2 }}"
        iops: "{{ .KPI.PostgreSQL.IOPS | default 450 }}"

    kafka:
      throughput:
        messages_per_second: "{{ .KPI.Kafka.MessagesPerSecond | default 1250 }}"
        bytes_per_second: "{{ .KPI.Kafka.BytesPerSecond | default 2048576 }}"
        producer_throughput_mb_sec: "{{ .KPI.Kafka.ProducerThroughput | default 15.5 }}"
        consumer_throughput_mb_sec: "{{ .KPI.Kafka.ConsumerThroughput | default 18.2 }}"

      latency:
        produce_latency_p95_ms: "{{ .KPI.Kafka.ProduceLatencyP95 | default 25 }}"
        consume_latency_p95_ms: "{{ .KPI.Kafka.ConsumeLatencyP95 | default 18 }}"
        end_to_end_latency_p95_ms: "{{ .KPI.Kafka.EndToEndLatencyP95 | default 45 }}"

      consumer_health:
        consumer_lag_total: "{{ .KPI.Kafka.ConsumerLag | default 125 }}"
        consumer_lag_p95: "{{ .KPI.Kafka.ConsumerLagP95 | default 85 }}"
        dead_letter_queue_rate: "{{ .KPI.Kafka.DLQRate | default 0.008 }}"
        rebalance_frequency_per_hour: "{{ .KPI.Kafka.RebalanceFrequency | default 0.2 }}"

      slo_targets:
        consumer_lag_max: 1000
        dlq_rate_max_percent: 0.1
        produce_latency_p95_ms: 50

  # ====================================================================
  # INFRASTRUCTURE BASELINES
  # ====================================================================

  infrastructure.yaml: |
    kubernetes:
      cluster_health:
        node_count: "{{ .KPI.K8s.NodeCount | default 8 }}"
        pod_count: "{{ .KPI.K8s.PodCount | default 156 }}"
        ready_nodes_percent: "{{ .KPI.K8s.ReadyNodesPercent | default 100 }}"
        running_pods_percent: "{{ .KPI.K8s.RunningPodsPercent | default 98.5 }}"

      resource_utilization:
        cpu_usage_percent: "{{ .KPI.K8s.CPUUsage | default 55.8 }}"
        memory_usage_percent: "{{ .KPI.K8s.MemoryUsage | default 68.2 }}"
        disk_usage_percent: "{{ .KPI.K8s.DiskUsage | default 45.5 }}"
        network_throughput_mbps: "{{ .KPI.K8s.NetworkThroughput | default 125.5 }}"

      scaling_metrics:
        hpa_scale_events_per_hour: "{{ .KPI.K8s.HPAScaleEvents | default 2.5 }}"
        pod_restart_rate_per_hour: "{{ .KPI.K8s.PodRestartRate | default 0.8 }}"
        pvc_usage_percent: "{{ .KPI.K8s.PVCUsage | default 35.2 }}"

    observability:
      metrics_collection:
        prometheus_samples_per_second: "{{ .KPI.Observability.PrometheusIngestion | default 12500 }}"
        grafana_dashboard_load_time_ms: "{{ .KPI.Observability.GrafanaLoadTime | default 850 }}"
        jaeger_spans_per_second: "{{ .KPI.Observability.JaegerSpans | default 450 }}"

      alerting:
        active_alerts: "{{ .KPI.Observability.ActiveAlerts | default 0 }}"
        alert_resolution_time_minutes: "{{ .KPI.Observability.AlertResolutionTime | default 8.5 }}"
        false_positive_rate_percent: "{{ .KPI.Observability.FalsePositiveRate | default 2.1 }}"

  # ====================================================================
  # BUSINESS METRICS BASELINES
  # ====================================================================

  business_metrics.yaml: |
    user_engagement:
      active_sessions:
        concurrent_sessions: "{{ .KPI.Business.ConcurrentSessions | default 125 }}"
        peak_sessions: "{{ .KPI.Business.PeakSessions | default 280 }}"
        session_duration_minutes: "{{ .KPI.Business.SessionDuration | default 45.5 }}"
        sessions_per_user_per_day: "{{ .KPI.Business.SessionsPerUserPerDay | default 3.2 }}"

      api_usage:
        queries_per_minute: "{{ .KPI.Business.QueriesPerMinute | default 450 }}"
        mutations_per_minute: "{{ .KPI.Business.MutationsPerMinute | default 85 }}"
        subscriptions_per_minute: "{{ .KPI.Business.SubscriptionsPerMinute | default 25 }}"
        unique_operations_per_hour: "{{ .KPI.Business.UniqueOperationsPerHour | default 156 }}"

      data_operations:
        entities_created_per_hour: "{{ .KPI.Business.EntitiesCreatedPerHour | default 125 }}"
        relationships_created_per_hour: "{{ .KPI.Business.RelationshipsCreatedPerHour | default 285 }}"
        graph_traversals_per_hour: "{{ .KPI.Business.GraphTraversalsPerHour | default 850 }}"
        analytics_queries_per_hour: "{{ .KPI.Business.AnalyticsQueriesPerHour | default 45 }}"

    tenant_metrics:
      multi_tenancy:
        active_tenants: "{{ .KPI.Business.ActiveTenants | default 25 }}"
        largest_tenant_usage_percent: "{{ .KPI.Business.LargestTenantUsage | default 15.5 }}"
        tenant_isolation_violations: "{{ .KPI.Business.TenantIsolationViolations | default 0 }}"
        cross_tenant_queries_per_hour: "{{ .KPI.Business.CrossTenantQueries | default 0 }}"

      subscription_tiers:
        free_tier_users_percent: "{{ .KPI.Business.FreeTierPercent | default 65.5 }}"
        pro_tier_users_percent: "{{ .KPI.Business.ProTierPercent | default 28.2 }}"
        enterprise_tier_users_percent: "{{ .KPI.Business.EnterpriseTierPercent | default 6.3 }}"

  # ====================================================================
  # COST & CAPACITY BASELINES
  # ====================================================================

  cost_capacity.yaml: |
    cost_management:
      monthly_projections:
        compute_cost_usd: "{{ .KPI.Cost.ComputeCost | default 12500 }}"
        storage_cost_usd: "{{ .KPI.Cost.StorageCost | default 2800 }}"
        network_cost_usd: "{{ .KPI.Cost.NetworkCost | default 1200 }}"
        data_transfer_cost_usd: "{{ .KPI.Cost.DataTransferCost | default 800 }}"
        total_monthly_cost_usd: "{{ .KPI.Cost.TotalMonthlyCost | default 17300 }}"

      daily_rates:
        daily_cost_usd: "{{ .KPI.Cost.DailyCost | default 576 }}"
        hourly_cost_usd: "{{ .KPI.Cost.HourlyCost | default 24 }}"
        cost_per_request_cents: "{{ .KPI.Cost.CostPerRequest | default 0.012 }}"
        cost_per_user_per_day_usd: "{{ .KPI.Cost.CostPerUserPerDay | default 2.3 }}"

      resource_efficiency:
        cpu_efficiency_percent: "{{ .KPI.Cost.CPUEfficiency | default 78.5 }}"
        memory_efficiency_percent: "{{ .KPI.Cost.MemoryEfficiency | default 82.2 }}"
        storage_efficiency_percent: "{{ .KPI.Cost.StorageEfficiency | default 85.8 }}"
        network_efficiency_percent: "{{ .KPI.Cost.NetworkEfficiency | default 92.1 }}"

    capacity_planning:
      growth_projections:
        user_growth_rate_percent_monthly: "{{ .KPI.Capacity.UserGrowthRate | default 15.5 }}"
        data_growth_rate_percent_monthly: "{{ .KPI.Capacity.DataGrowthRate | default 22.8 }}"
        query_volume_growth_percent_monthly: "{{ .KPI.Capacity.QueryGrowthRate | default 18.2 }}"

      scaling_thresholds:
        api_scale_up_threshold_percent: "{{ .KPI.Capacity.APIScaleUpThreshold | default 70 }}"
        db_scale_up_threshold_percent: "{{ .KPI.Capacity.DBScaleUpThreshold | default 80 }}"
        storage_scale_up_threshold_percent: "{{ .KPI.Capacity.StorageScaleUpThreshold | default 85 }}"

      resource_limits:
        max_concurrent_users: "{{ .KPI.Capacity.MaxConcurrentUsers | default 1000 }}"
        max_requests_per_second: "{{ .KPI.Capacity.MaxRequestsPerSecond | default 2000 }}"
        max_storage_gb: "{{ .KPI.Capacity.MaxStorageGB | default 10240 }}"

  # ====================================================================
  # SLO DEFINITIONS & TARGETS
  # ====================================================================

  slo_targets.yaml: |
    service_level_objectives:
      availability:
        api_availability_percent: 99.9
        database_availability_percent: 99.95
        auth_availability_percent: 99.95
        graph_availability_percent: 99.9

      latency:
        api_p95_latency_ms: 350
        api_p99_latency_ms: 700
        graph_three_hop_p95_ms: 1200
        auth_login_p95_ms: 1000
        opa_decision_p95_ms: 10

      reliability:
        error_rate_max_percent: 0.1
        auth_failure_rate_max_percent: 0.5
        data_loss_incidents_per_month: 0
        security_incidents_per_month: 0

      performance:
        throughput_min_rps: 100
        concurrent_users_min: 50
        data_freshness_max_seconds: 300
        backup_rpo_max_minutes: 5
        backup_rto_max_minutes: 15

  # ====================================================================
  # EVIDENCE COLLECTION CONFIGURATION
  # ====================================================================

  evidence_config.yaml: |
    evidence_collection:
      measurement_windows:
        baseline_window_hours: 24
        comparison_window_hours: 2
        trend_analysis_days: 7
        anomaly_detection_hours: 6

      collection_intervals:
        real_time_metrics_seconds: 15
        aggregated_metrics_minutes: 5
        slo_evaluation_minutes: 15
        baseline_update_hours: 24

      alerting_thresholds:
        slo_breach_consecutive_minutes: 10
        performance_degradation_percent: 15
        cost_increase_threshold_percent: 20
        security_alert_threshold: 1

      compliance_requirements:
        data_retention_days: 90
        audit_log_retention_days: 365
        evidence_bundle_retention_years: 7
        backup_verification_frequency_days: 30

---
# Script template for populating KPI baselines from Prometheus
apiVersion: v1
kind: ConfigMap
metadata:
  name: kpi-baseline-collector
  namespace: intelgraph-system
data:
  collect-baselines.sh: |
    #!/bin/bash
    # KPI Baseline Collection Script
    # Auto-populates KPI_BASELINES.yaml with current production metrics

    set -e

    PROMETHEUS_URL="${PROMETHEUS_URL:-http://prometheus:9090}"
    TIMEFRAME="${TIMEFRAME:-1h}"
    OUTPUT_FILE="${OUTPUT_FILE:-/tmp/kpi-baselines-current.yaml}"

    echo "📊 Collecting KPI baselines from Prometheus..."
    echo "  Prometheus: $PROMETHEUS_URL"
    echo "  Timeframe: $TIMEFRAME"
    echo "  Output: $OUTPUT_FILE"

    # Function to query Prometheus and extract value
    query_prometheus() {
      local query="$1"
      local default="$2"

      curl -s "${PROMETHEUS_URL}/api/v1/query?query=${query}" | \
        jq -r ".data.result[0].value[1] // \"${default}\"" 2>/dev/null || echo "${default}"
    }

    # Function to query range and get P95
    query_prometheus_p95() {
      local metric="$1"
      local default="$2"

      curl -s "${PROMETHEUS_URL}/api/v1/query?query=histogram_quantile(0.95,rate(${metric}[${TIMEFRAME}]))" | \
        jq -r ".data.result[0].value[1] // \"${default}\"" 2>/dev/null || echo "${default}"
    }

    echo "🔍 Collecting API performance metrics..."
    API_P95=$(query_prometheus_p95 "http_request_duration_seconds_bucket{job=\"intelgraph-api\"}" "0.285")
    API_P99=$(query_prometheus "histogram_quantile(0.99,rate(http_request_duration_seconds_bucket{job=\"intelgraph-api\"}[${TIMEFRAME}]))" "0.456")
    API_RPS=$(query_prometheus "rate(http_requests_total{job=\"intelgraph-api\"}[${TIMEFRAME}])" "207.5")
    API_ERROR_RATE=$(query_prometheus "rate(http_requests_total{job=\"intelgraph-api\",code=~\"5..\"}[${TIMEFRAME}])" "0.008")

    echo "🕸️ Collecting graph database metrics..."
    NEO4J_THREE_HOP=$(query_prometheus_p95 "graph_query_duration_seconds_bucket{hops=\"3\"}" "0.285")
    NEO4J_CACHE_HIT=$(query_prometheus "neo4j_page_cache_hit_ratio" "0.925")
    NEO4J_MEMORY=$(query_prometheus "neo4j_memory_usage_percent" "68.5")

    echo "🔐 Collecting authentication metrics..."
    AUTH_LOGIN_P95=$(query_prometheus_p95 "oidc_login_duration_seconds_bucket" "0.65")
    AUTH_SUCCESS_RATE=$(query_prometheus "rate(auth_success_total[${TIMEFRAME}]) / rate(auth_attempts_total[${TIMEFRAME}])" "0.9995")
    OPA_DECISION_P95=$(query_prometheus_p95 "opa_decision_duration_seconds_bucket" "0.0085")

    echo "🗄️ Collecting data platform metrics..."
    PG_POOL_USAGE=$(query_prometheus "pg_stat_activity_count / pg_settings_max_connections" "0.452")
    PG_REPLICA_LAG=$(query_prometheus "pg_stat_replication_lag_seconds" "1.8")
    KAFKA_LAG=$(query_prometheus "kafka_consumer_lag_sum" "125")
    KAFKA_THROUGHPUT=$(query_prometheus "rate(kafka_messages_total[${TIMEFRAME}])" "1250")

    echo "☁️ Collecting infrastructure metrics..."
    K8S_CPU_USAGE=$(query_prometheus "100 - (avg(irate(node_cpu_seconds_total{mode=\"idle\"}[${TIMEFRAME}])) * 100)" "55.8")
    K8S_MEMORY_USAGE=$(query_prometheus "(1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100" "68.2")
    K8S_POD_COUNT=$(query_prometheus "count(kube_pod_info{namespace=\"intelgraph-system\"})" "156")

    echo "💰 Collecting cost metrics..."
    DAILY_COST=$(query_prometheus "kubecost_cluster_total_cost" "576")
    HOURLY_COST=$(echo "scale=2; $DAILY_COST / 24" | bc -l)

    # Generate populated YAML
    cat > "$OUTPUT_FILE" << EOF
    # Auto-generated KPI Baselines - $(date -u +"%Y-%m-%d %H:%M:%S UTC")
    kpi_values:
      api:
        p95_latency: $(echo "$API_P95 * 1000" | bc -l | cut -d. -f1)
        p99_latency: $(echo "$API_P99 * 1000" | bc -l | cut -d. -f1)
        requests_per_second: $API_RPS
        error_rate: $(echo "$API_ERROR_RATE * 100" | bc -l)

      neo4j:
        three_hop_p95: $(echo "$NEO4J_THREE_HOP * 1000" | bc -l | cut -d. -f1)
        cache_hit_rate: $(echo "$NEO4J_CACHE_HIT * 100" | bc -l)
        memory_usage: $NEO4J_MEMORY

      auth:
        login_p95: $(echo "$AUTH_LOGIN_P95 * 1000" | bc -l | cut -d. -f1)
        success_rate: $(echo "$AUTH_SUCCESS_RATE * 100" | bc -l)
        opa_decision_p95: $(echo "$OPA_DECISION_P95 * 1000" | bc -l | cut -d. -f1)

      data_platform:
        pg_pool_usage: $(echo "$PG_POOL_USAGE * 100" | bc -l)
        pg_replica_lag: $PG_REPLICA_LAG
        kafka_lag: $KAFKA_LAG
        kafka_throughput: $KAFKA_THROUGHPUT

      infrastructure:
        cpu_usage: $K8S_CPU_USAGE
        memory_usage: $K8S_MEMORY_USAGE
        pod_count: $K8S_POD_COUNT

      cost:
        daily_cost: $DAILY_COST
        hourly_cost: $HOURLY_COST
    EOF

    echo "✅ KPI baselines collected and saved to $OUTPUT_FILE"
    echo "📊 Summary:"
    echo "  - API P95: $(echo "$API_P95 * 1000" | bc -l | cut -d. -f1)ms"
    echo "  - Graph 3-hop P95: $(echo "$NEO4J_THREE_HOP * 1000" | bc -l | cut -d. -f1)ms"
    echo "  - Auth Success: $(echo "$AUTH_SUCCESS_RATE * 100" | bc -l)%"
    echo "  - Daily Cost: \$${DAILY_COST}"

    # Update ConfigMap if running in cluster
    if [ "$UPDATE_CONFIGMAP" = "true" ] && command -v kubectl >/dev/null 2>&1; then
      echo "🔄 Updating ConfigMap..."
      kubectl create configmap kpi-baselines-current \
        --from-file="$OUTPUT_FILE" \
        --namespace=intelgraph-system \
        --dry-run=client -o yaml | \
        kubectl apply -f -
      echo "✅ ConfigMap updated"
    fi