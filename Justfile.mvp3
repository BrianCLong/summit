# Justfile — MVP-3 (portable, resilient, tab-safe)
# NOTE: Recipe bodies MUST start with a TAB.
set shell := ["/bin/bash", "-euco", "pipefail"]
set dotenv-load := true

# ==== Globals (portable defaults; safe under -u) ===============================
PROXY_BASE        := `printf %s "${PROXY_BASE:-http://127.0.0.1:8787}"`
PROM_BASE         := `printf %s "${PROM_BASE:-http://127.0.0.1:9090}"`
TEMPO_BASE        := `printf %s "${TEMPO_BASE:-http://127.0.0.1:3200}"`
GRAFANA_BASE      := `printf %s "${GRAFANA_BASE:-http://127.0.0.1:3000}"`
REDIS_URL         := `printf %s "${REDIS_URL:-redis://127.0.0.1:6379}"`
LEARNER_ENABLED   := `printf %s "${LEARNER_ENABLED:-true}"`
TRAFFIC_SPLIT     := `printf %s "${TRAFFIC_SPLIT:-0.05}"`
SCHEDULER_ENABLED := `printf %s "${SCHEDULER_ENABLED:-true}"`

# ==== Help & Env ===============================================================
help:
	@echo "Symphony MVP-3 — portable Justfile"
	@echo "Use 'just --list' to see available recipes."

env:
	@printf "PROXY_BASE=%s\n" "{{PROXY_BASE}}"
	@printf "PROM_BASE=%s\n" "{{PROM_BASE}}"
	@printf "TEMPO_BASE=%s\n" "{{TEMPO_BASE}}"
	@printf "GRAFANA_BASE=%s\n" "{{GRAFANA_BASE}}"
	@printf "REDIS_URL=%s\n" "{{REDIS_URL}}"
	@printf "LEARNER_ENABLED=%s\n" "{{LEARNER_ENABLED}}"
	@printf "TRAFFIC_SPLIT=%s\n" "{{TRAFFIC_SPLIT}}"
	@printf "SCHEDULER_ENABLED=%s\n" "{{SCHEDULER_ENABLED}}"

doctor:
	@echo "Checking system dependencies..."
	@( command -v curl >/dev/null && echo "✔ curl" ) || echo "✖ curl missing"
	@( command -v jq >/dev/null && echo "✔ jq" ) || echo "✖ jq missing"
	@( command -v k6 >/dev/null && echo "✔ k6" ) || echo "ℹ k6 optional"
	@( command -v node >/dev/null && echo "✔ node" ) || echo "ℹ node optional"
	@( command -v redis-cli >/dev/null && echo "✔ redis-cli" ) || echo "ℹ redis-cli optional"

# ==== Health / Status (resilient endpoints) ===================================
health:
	( curl -fsS "{{PROXY_BASE}}/status/health.json" \
	|| curl -fsS "{{PROXY_BASE}}/status/health" \
	|| curl -fsS "{{PROXY_BASE}}/health" ) | jq . >/dev/null && echo "✔ health"

burndown:
	( curl -fsS "{{PROXY_BASE}}/status/burndown.json" \
	|| curl -fsS "{{PROXY_BASE}}/status/burndown" ) | jq . >/dev/null && echo "✔ burndown"

models:
	curl -fsS "{{PROXY_BASE}}/models" | jq '.items|type=="array"' >/dev/null && echo "✔ models"

status:
	just health
	just burndown
	just models
	@echo "✅ All endpoints validated"

# ==== Routes Smoke =============================================================
route-plan task='qa' loa='1':
	curl -fsS -X POST -H 'content-type: application/json' \
		-d '{"task":"{{task}}","loa":{{loa}}}' \
		"{{PROXY_BASE}}/route/plan" | jq . >/dev/null && echo "✔ route/plan"

route-execute task='qa' loa='1' input='ping' stream='true':
	curl -fsS -X POST -H 'content-type: application/json' \
		-d '{"task":"{{task}}","loa":{{loa}},"input":"{{input}}","stream":{{stream}}}' \
		"{{PROXY_BASE}}/route/execute" | jq '.audit_id,.latency_ms' >/dev/null && echo "✔ route/execute"

routes-smoke:
	just route-plan
	just route-execute

# Convenience alias (what you previously ran)
overture-check:
	just status
	just routes-smoke

# ==== Minimal Observability Checks ============================================
prom-rules:
	( curl -fsS "{{PROM_BASE}}/api/v1/rules" | jq . >/dev/null && echo "✔ Prom rules" ) || echo "ℹ Prom not reachable"

tempo-ping:
	( curl -fsS "{{TEMPO_BASE}}/api/metrics" >/dev/null && echo "✔ Tempo reachable" ) || echo "ℹ Tempo not reachable"

grafana-note:
	@echo "Open Grafana at {{GRAFANA_BASE}} (dashboards may require login)"

prom-query expr='histogram_quantile(0.95, sum(rate(symphony_route_execute_latency_seconds_bucket[5m])) by (le))':
	( ENCODED_QUERY=$(printf '%s' '{{expr}}' | jq -sRr @uri) && \
	  curl -fsS "{{PROM_BASE}}/api/v1/query?query=$ENCODED_QUERY" | jq . ) \
	|| echo "ℹ Prometheus not reachable"

# ==== Lite Validation (tool-agnostic) =========================================
mvp3-validate-lite:
	just status
	just prom-rules
	just tempo-ping
	@echo "✅ MVP-3 lite validation finished"

# ==== Optional Perf (will not fail if k6 missing) =============================
perf-run:
	@( command -v k6 >/dev/null || { echo "ℹ k6 not available, skipping performance tests"; exit 0; } )
	@if [ -f "tests/k6/route_execute.js" ]; then \
		k6 run tests/k6/route_execute.js && echo "✔ k6 perf"; \
	else \
		echo "ℹ k6 test file not found: tests/k6/route_execute.js"; \
	fi

# ==== Redis Utils (optional) ==================================================
redis-keys pattern='*':
	@( command -v redis-cli >/dev/null || { echo "ℹ redis-cli not available"; exit 0; } )
	@redis-cli -u "{{REDIS_URL}}" KEYS "{{pattern}}" 2>/dev/null || echo "ℹ Redis connection failed"

redis-purge:
	@( command -v redis-cli >/dev/null || { echo "ℹ redis-cli not available"; exit 0; } )
	@if redis-cli -u "{{REDIS_URL}}" PING >/dev/null 2>&1; then \
		redis-cli -u "{{REDIS_URL}}" FLUSHALL && echo "✔ redis flushed"; \
	else \
		echo "ℹ Redis connection failed"; \
	fi
