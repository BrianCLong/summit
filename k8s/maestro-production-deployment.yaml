# Maestro Production Deployment - Complete Production Environment
# Based on existing conductor architecture with production-grade enhancements

apiVersion: v1
kind: Namespace
metadata:
  name: maestro-system
  labels:
    name: maestro-system
    app.kubernetes.io/name: maestro
    app.kubernetes.io/version: '2.0.0-prod'
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted

---
# Production Deployment with HA Configuration
apiVersion: apps/v1
kind: Deployment
metadata:
  name: maestro-orchestrator
  namespace: maestro-system
  labels:
    app: maestro-orchestrator
    app.kubernetes.io/name: maestro
    app.kubernetes.io/component: orchestrator
    app.kubernetes.io/version: '2.0.0-prod'
  annotations:
    deployment.kubernetes.io/revision: '1'
    prometheus.io/scrape: 'true'
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: maestro-orchestrator
      app.kubernetes.io/name: maestro
      app.kubernetes.io/component: orchestrator
  template:
    metadata:
      labels:
        app: maestro-orchestrator
        app.kubernetes.io/name: maestro
        app.kubernetes.io/component: orchestrator
        version: '2.0.0-prod'
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '8080'
        prometheus.io/path: '/metrics'
        cluster-autoscaler.kubernetes.io/safe-to-evict: 'true'
    spec:
      serviceAccountName: maestro-orchestrator
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        runAsGroup: 10001
        fsGroup: 10001
        fsGroupChangePolicy: 'OnRootMismatch'
        seccompProfile:
          type: RuntimeDefault
      imagePullSecrets:
        - name: ghcr-secret
      containers:
        - name: maestro-orchestrator
          # Using existing conductor image temporarily until Maestro image is built
          image: ghcr.io/brianlong/intelgraph/conductor-web-orchestrator:2.0.0-prod
          imagePullPolicy: Always
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 10001
            runAsGroup: 10001
            capabilities:
              drop:
                - ALL
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP
          env:
            - name: NODE_ENV
              value: 'production'
            - name: LOG_LEVEL
              value: 'info'
            - name: PORT
              value: '8080'
            - name: METRICS_PORT
              value: '9090'
            - name: ORCHESTRATION_ENABLED
              value: 'true'
            - name: PREMIUM_ROUTING_ENABLED
              value: 'true'
            - name: WEB_SCRAPING_ENABLED
              value: 'true'
            - name: COMPLIANCE_GATE_ENABLED
              value: 'true'
            - name: THOMPSON_SAMPLING_ENABLED
              value: 'true'
            - name: MAX_CONCURRENT_SOURCES
              value: '15'
            - name: DEFAULT_SYNTHESIS_STRATEGY
              value: 'consensus'
            - name: RATE_LIMIT_WINDOW_MS
              value: '60000'
            - name: CITATION_REQUIRED
              value: 'true'
            - name: PROVENANCE_TRACKING
              value: 'true'
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: 'http://otel-collector.monitoring:4317'
            - name: PDP_URL
              value: 'http://pdp.security:8181'
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: maestro-secrets
                  key: database-url
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: maestro-secrets
                  key: redis-url
            - name: OPENAI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: maestro-secrets
                  key: openai-api-key
            - name: ANTHROPIC_API_KEY
              valueFrom:
                secretKeyRef:
                  name: maestro-secrets
                  key: anthropic-api-key
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: maestro-secrets
                  key: jwt-secret
          resources:
            requests:
              memory: '1Gi'
              cpu: '500m'
              ephemeral-storage: '1Gi'
            limits:
              memory: '4Gi'
              cpu: '2000m'
              ephemeral-storage: '2Gi'
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
          readinessProbe:
            httpGet:
              path: /readyz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
            successThreshold: 1
          startupProbe:
            httpGet:
              path: /readyz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 30
            successThreshold: 1
          volumeMounts:
            - name: cache-volume
              mountPath: /app/cache
            - name: logs-volume
              mountPath: /app/logs
            - name: tmp-volume
              mountPath: /tmp
            - name: config-volume
              mountPath: /app/config
              readOnly: true
      volumes:
        - name: cache-volume
          emptyDir:
            sizeLimit: 2Gi
        - name: logs-volume
          emptyDir:
            sizeLimit: 1Gi
        - name: tmp-volume
          emptyDir:
            sizeLimit: 100Mi
        - name: config-volume
          configMap:
            name: maestro-config
            defaultMode: 0444
      nodeSelector:
        kubernetes.io/arch: amd64
        node-type: compute-optimized
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - maestro
                topologyKey: kubernetes.io/hostname
            - weight: 50
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - maestro
                topologyKey: topology.kubernetes.io/zone
      tolerations:
        - key: 'maestro-workload'
          operator: 'Equal'
          value: 'true'
          effect: 'NoSchedule'
        - key: 'compute-optimized'
          operator: 'Equal'
          value: 'true'
          effect: 'NoSchedule'
      terminationGracePeriodSeconds: 60
      dnsPolicy: ClusterFirst
      restartPolicy: Always

---
# Service for Maestro Orchestrator
apiVersion: v1
kind: Service
metadata:
  name: maestro-orchestrator-svc
  namespace: maestro-system
  labels:
    app: maestro-orchestrator
    app.kubernetes.io/name: maestro
    app.kubernetes.io/component: orchestrator
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: 'nlb'
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: 'tcp'
    prometheus.io/scrape: 'true'
    prometheus.io/port: '8080'
    prometheus.io/path: '/metrics'
spec:
  selector:
    app: maestro-orchestrator
  ports:
    - name: http
      port: 80
      targetPort: 8080
      protocol: TCP
    - name: metrics
      port: 9090
      targetPort: 9090
      protocol: TCP
  type: ClusterIP

---
# ServiceAccount with IAM Role Binding
apiVersion: v1
kind: ServiceAccount
metadata:
  name: maestro-orchestrator
  namespace: maestro-system
  labels:
    app.kubernetes.io/name: maestro
    app.kubernetes.io/component: orchestrator
  annotations:
    eks.amazonaws.com/role-arn: 'arn:aws:iam::123456789012:role/maestro-service-role'

---
# RBAC Configuration
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: maestro-orchestrator
  namespace: maestro-system
  labels:
    app.kubernetes.io/name: maestro
    app.kubernetes.io/component: rbac
rules:
  - apiGroups: ['']
    resources: ['pods', 'services', 'configmaps', 'secrets']
    verbs: ['get', 'list', 'watch']
  - apiGroups: ['apps']
    resources: ['deployments', 'replicasets']
    verbs: ['get', 'list', 'watch']
  - apiGroups: ['networking.k8s.io']
    resources: ['networkpolicies']
    verbs: ['get', 'list', 'watch']

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: maestro-orchestrator
  namespace: maestro-system
  labels:
    app.kubernetes.io/name: maestro
    app.kubernetes.io/component: rbac
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: maestro-orchestrator
subjects:
  - kind: ServiceAccount
    name: maestro-orchestrator
    namespace: maestro-system

---
# Production Ingress with SSL and Rate Limiting
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: maestro-ingress
  namespace: maestro-system
  labels:
    app.kubernetes.io/name: maestro
    app.kubernetes.io/component: ingress
  annotations:
    kubernetes.io/ingress.class: 'nginx'
    nginx.ingress.kubernetes.io/ssl-redirect: 'true'
    nginx.ingress.kubernetes.io/use-regex: 'true'
    nginx.ingress.kubernetes.io/rate-limit: '1000'
    nginx.ingress.kubernetes.io/rate-limit-burst: '2000'
    nginx.ingress.kubernetes.io/rate-limit-window: '1m'
    nginx.ingress.kubernetes.io/proxy-body-size: '50m'
    nginx.ingress.kubernetes.io/proxy-connect-timeout: '30'
    nginx.ingress.kubernetes.io/proxy-read-timeout: '300'
    nginx.ingress.kubernetes.io/proxy-send-timeout: '300'
    cert-manager.io/cluster-issuer: 'letsencrypt-prod'
    nginx.ingress.kubernetes.io/cors-allow-origin: 'https://intelgraph.ai,https://app.intelgraph.ai'
    nginx.ingress.kubernetes.io/cors-allow-methods: 'GET, POST, PUT, DELETE, OPTIONS'
    nginx.ingress.kubernetes.io/cors-allow-headers: 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization'
    nginx.ingress.kubernetes.io/enable-cors: 'true'
    nginx.ingress.kubernetes.io/limit-rps: '100'
    nginx.ingress.kubernetes.io/limit-rpm: '6000'
spec:
  tls:
    - hosts:
        - maestro.intelgraph.ai
      secretName: maestro-tls
  rules:
    - host: maestro.intelgraph.ai
      http:
        paths:
          - path: /api/maestro/v1
            pathType: Prefix
            backend:
              service:
                name: maestro-orchestrator-svc
                port:
                  number: 80
          - path: /api/orchestration/v1
            pathType: Prefix
            backend:
              service:
                name: maestro-orchestrator-svc
                port:
                  number: 80
          - path: /healthz
            pathType: Exact
            backend:
              service:
                name: maestro-orchestrator-svc
                port:
                  number: 80
          - path: /readyz
            pathType: Exact
            backend:
              service:
                name: maestro-orchestrator-svc
                port:
                  number: 80
          - path: /metrics
            pathType: Exact
            backend:
              service:
                name: maestro-orchestrator-svc
                port:
                  number: 9090

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: maestro-orchestrator-hpa
  namespace: maestro-system
  labels:
    app.kubernetes.io/name: maestro
    app.kubernetes.io/component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: maestro-orchestrator
  minReplicas: 3
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 100
          periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: maestro-orchestrator-pdb
  namespace: maestro-system
  labels:
    app.kubernetes.io/name: maestro
    app.kubernetes.io/component: availability
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: maestro-orchestrator
      app.kubernetes.io/name: maestro

---
# Network Policy for Security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: maestro-network-policy
  namespace: maestro-system
  labels:
    app.kubernetes.io/name: maestro
    app.kubernetes.io/component: security
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: maestro
  policyTypes:
    - Ingress
    - Egress
  ingress:
    # Allow ingress from nginx-ingress
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
      ports:
        - protocol: TCP
          port: 8080
    # Allow monitoring scraping
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 8080
        - protocol: TCP
          port: 9090
  egress:
    # Allow DNS
    - to: []
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53
    # Allow database connections
    - to:
        - namespaceSelector:
            matchLabels:
              name: database
      ports:
        - protocol: TCP
          port: 5432
    # Allow Redis connections
    - to:
        - namespaceSelector:
            matchLabels:
              name: cache
      ports:
        - protocol: TCP
          port: 6379
    # Allow HTTPS for web orchestration
    - to: []
      ports:
        - protocol: TCP
          port: 443
    # Allow OPA Policy Decision Point
    - to:
        - namespaceSelector:
            matchLabels:
              name: security
      ports:
        - protocol: TCP
          port: 8181
    # Allow OpenTelemetry Collector
    - to:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 4317
        - protocol: TCP
          port: 4318

---
# ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: maestro-service-monitor
  namespace: maestro-system
  labels:
    app.kubernetes.io/name: maestro
    app.kubernetes.io/component: monitoring
    release: prometheus
spec:
  selector:
    matchLabels:
      app: maestro-orchestrator
  endpoints:
    - port: http
      path: /metrics
      interval: 30s
      scrapeTimeout: 10s
      honorLabels: true
  namespaceSelector:
    matchNames:
      - maestro-system

---
# PrometheusRule for Alerting
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: maestro-alerts
  namespace: maestro-system
  labels:
    app.kubernetes.io/name: maestro
    app.kubernetes.io/component: monitoring
    release: prometheus
spec:
  groups:
    - name: maestro.rules
      rules:
        - alert: MaestroHighErrorRate
          expr: rate(maestro_orchestration_errors_total[5m]) > 0.1
          for: 2m
          labels:
            severity: warning
            service: maestro-orchestrator
          annotations:
            summary: 'High error rate in Maestro orchestration'
            description: 'Maestro orchestration error rate is {{ $value }} errors per second'
            runbook_url: 'https://runbooks.intelgraph.ai/maestro/high-error-rate'
        - alert: MaestroHighLatency
          expr: histogram_quantile(0.95, rate(maestro_orchestration_duration_seconds_bucket[5m])) > 30
          for: 5m
          labels:
            severity: warning
            service: maestro-orchestrator
          annotations:
            summary: 'High latency in Maestro orchestration'
            description: '95th percentile latency is {{ $value }}s'
            runbook_url: 'https://runbooks.intelgraph.ai/maestro/high-latency'
        - alert: MaestroPodDown
          expr: up{job="maestro-orchestrator"} == 0
          for: 1m
          labels:
            severity: critical
            service: maestro-orchestrator
          annotations:
            summary: 'Maestro orchestrator pod is down'
            description: 'One or more Maestro orchestrator pods are not responding'
            runbook_url: 'https://runbooks.intelgraph.ai/maestro/pod-down'
        - alert: MaestroMemoryUsageHigh
          expr: (container_memory_usage_bytes{pod=~"maestro-orchestrator-.*"} / container_spec_memory_limit_bytes) > 0.85
          for: 5m
          labels:
            severity: warning
            service: maestro-orchestrator
          annotations:
            summary: 'High memory usage in Maestro orchestrator'
            description: 'Memory usage is {{ $value | humanizePercentage }} of the limit'
        - alert: MaestroCPUUsageHigh
          expr: rate(container_cpu_usage_seconds_total{pod=~"maestro-orchestrator-.*"}[5m]) / container_spec_cpu_quota * 100 > 85
          for: 5m
          labels:
            severity: warning
            service: maestro-orchestrator
          annotations:
            summary: 'High CPU usage in Maestro orchestrator'
            description: 'CPU usage is {{ $value }}% of the limit'
