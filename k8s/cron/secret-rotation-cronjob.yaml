apiVersion: batch/v1
kind: CronJob
metadata:
  name: secret-rotation-jwt
  namespace: intelgraph-production
  labels:
    app.kubernetes.io/name: secret-rotation
    app.kubernetes.io/component: security
spec:
  schedule: '0 2 * * 0' # Every Sunday at 2 AM UTC
  timeZone: 'UTC'
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app.kubernetes.io/name: secret-rotation
            app.kubernetes.io/component: security
        spec:
          serviceAccountName: secret-rotator-sa
          restartPolicy: OnFailure
          containers:
            - name: secret-rotator
              image: alpine/k8s:1.28.4
              imagePullPolicy: IfNotPresent
              command: ['/bin/bash']
              args:
                - -c
                - |
                  apk add --no-cache curl openssl postgresql-client redis
                  curl -fsSL https://raw.githubusercontent.com/BrianCLong/intelgraph/main/scripts/secrets/rotate-secrets.sh -o /tmp/rotate-secrets.sh
                  chmod +x /tmp/rotate-secrets.sh
                  /tmp/rotate-secrets.sh --type jwt --environment production
              env:
                - name: NAMESPACE
                  value: intelgraph-production
                - name: POSTGRES_HOST
                  valueFrom:
                    secretKeyRef:
                      name: postgres-credentials
                      key: host
                - name: POSTGRES_USER
                  valueFrom:
                    secretKeyRef:
                      name: postgres-credentials
                      key: user
                - name: POSTGRES_DB
                  valueFrom:
                    secretKeyRef:
                      name: postgres-credentials
                      key: database
                - name: POSTGRES_CURRENT_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: postgres-credentials
                      key: password
                - name: REDIS_HOST
                  valueFrom:
                    secretKeyRef:
                      name: redis-credentials
                      key: host
                - name: REDIS_CURRENT_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: redis-credentials
                      key: password
                - name: NEO4J_HOST
                  valueFrom:
                    secretKeyRef:
                      name: neo4j-credentials
                      key: host
                - name: NEO4J_USER
                  valueFrom:
                    secretKeyRef:
                      name: neo4j-credentials
                      key: user
                - name: NEO4J_CURRENT_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: neo4j-credentials
                      key: password
                - name: SLACK_WEBHOOK_URL
                  valueFrom:
                    secretKeyRef:
                      name: notification-secrets
                      key: slack-webhook-url
                      optional: true
              resources:
                requests:
                  cpu: 100m
                  memory: 128Mi
                limits:
                  cpu: 500m
                  memory: 256Mi
              securityContext:
                runAsNonRoot: true
                runAsUser: 65534
                readOnlyRootFilesystem: true
                allowPrivilegeEscalation: false
                capabilities:
                  drop: ['ALL']
              volumeMounts:
                - name: tmp
                  mountPath: /tmp
          volumes:
            - name: tmp
              emptyDir: {}

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: secret-rotation-database
  namespace: intelgraph-production
  labels:
    app.kubernetes.io/name: secret-rotation
    app.kubernetes.io/component: security
spec:
  schedule: '0 3 1 * *' # First day of every month at 3 AM UTC
  timeZone: 'UTC'
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app.kubernetes.io/name: secret-rotation
            app.kubernetes.io/component: security
        spec:
          serviceAccountName: secret-rotator-sa
          restartPolicy: OnFailure
          containers:
            - name: database-rotator
              image: alpine/k8s:1.28.4
              imagePullPolicy: IfNotPresent
              command: ['/bin/bash']
              args:
                - -c
                - |
                  apk add --no-cache curl openssl postgresql-client redis
                  # Install Neo4j cypher-shell
                  wget -O - https://debian.neo4j.com/neotechnology.gpg.key | gpg --dearmor -o /usr/share/keyrings/neo4j.gpg
                  echo "deb [signed-by=/usr/share/keyrings/neo4j.gpg] https://debian.neo4j.com stable latest" | tee -a /etc/apt/sources.list.d/neo4j.list
                  apk add --no-cache cypher-shell || echo "cypher-shell not available in Alpine, skipping Neo4j rotation"

                  curl -fsSL https://raw.githubusercontent.com/BrianCLong/intelgraph/main/scripts/secrets/rotate-secrets.sh -o /tmp/rotate-secrets.sh
                  chmod +x /tmp/rotate-secrets.sh
                  /tmp/rotate-secrets.sh --type database --environment production
              env:
                - name: NAMESPACE
                  value: intelgraph-production
                - name: POSTGRES_HOST
                  valueFrom:
                    secretKeyRef:
                      name: postgres-credentials
                      key: host
                - name: POSTGRES_USER
                  valueFrom:
                    secretKeyRef:
                      name: postgres-credentials
                      key: user
                - name: POSTGRES_DB
                  valueFrom:
                    secretKeyRef:
                      name: postgres-credentials
                      key: database
                - name: POSTGRES_CURRENT_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: postgres-credentials
                      key: password
                - name: REDIS_HOST
                  valueFrom:
                    secretKeyRef:
                      name: redis-credentials
                      key: host
                - name: REDIS_CURRENT_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: redis-credentials
                      key: password
                - name: NEO4J_HOST
                  valueFrom:
                    secretKeyRef:
                      name: neo4j-credentials
                      key: host
                - name: NEO4J_USER
                  valueFrom:
                    secretKeyRef:
                      name: neo4j-credentials
                      key: user
                - name: NEO4J_CURRENT_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: neo4j-credentials
                      key: password
                - name: SLACK_WEBHOOK_URL
                  valueFrom:
                    secretKeyRef:
                      name: notification-secrets
                      key: slack-webhook-url
                      optional: true
              resources:
                requests:
                  cpu: 200m
                  memory: 256Mi
                limits:
                  cpu: 1000m
                  memory: 512Mi
              securityContext:
                runAsNonRoot: true
                runAsUser: 65534
                readOnlyRootFilesystem: true
                allowPrivilegeEscalation: false
                capabilities:
                  drop: ['ALL']
              volumeMounts:
                - name: tmp
                  mountPath: /tmp
          volumes:
            - name: tmp
              emptyDir: {}

---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: secret-rotation-alerts
  namespace: intelgraph-production
  labels:
    app.kubernetes.io/name: secret-rotation
    app.kubernetes.io/component: monitoring
spec:
  groups:
    - name: secret-rotation.rules
      rules:
        - alert: SecretRotationJobFailed
          expr: kube_job_status_failed{job_name=~"secret-rotation-.*"} > 0
          for: 0m
          labels:
            severity: critical
          annotations:
            summary: 'Secret rotation job failed'
            description: 'Secret rotation job {{ $labels.job_name }} in namespace {{ $labels.namespace }} has failed'

        - alert: SecretRotationJobMissing
          expr: (time() - kube_job_status_completion_time{job_name="secret-rotation-jwt"}) > 604800 # 7 days
          for: 0m
          labels:
            severity: warning
          annotations:
            summary: 'JWT secret rotation overdue'
            description: 'JWT secret rotation has not completed successfully in the last 7 days'

        - alert: DatabaseSecretRotationOverdue
          expr: (time() - kube_job_status_completion_time{job_name="secret-rotation-database"}) > 2678400 # 31 days
          for: 0m
          labels:
            severity: warning
          annotations:
            summary: 'Database secret rotation overdue'
            description: 'Database secret rotation has not completed successfully in the last 31 days'

        - alert: SecretRotationJobRunningTooLong
          expr: kube_job_status_active{job_name=~"secret-rotation-.*"} > 0 and (time() - kube_job_status_start_time{job_name=~"secret-rotation-.*"}) > 1800 # 30 minutes
          for: 0m
          labels:
            severity: warning
          annotations:
            summary: 'Secret rotation job running too long'
            description: 'Secret rotation job {{ $labels.job_name }} has been running for more than 30 minutes'
