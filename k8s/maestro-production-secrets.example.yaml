# Production Secrets for Maestro Orchestration System
# These should be created using sealed-secrets or external-secrets-operator in production
apiVersion: v1
kind: Secret
metadata:
  name: maestro-secrets
  namespace: intelgraph-prod
  labels:
    app.kubernetes.io/name: maestro
    app.kubernetes.io/component: secrets
    app.kubernetes.io/version: '2.0.0-prod'
type: Opaque
stringData:
  # Database Connection
  database-url: 'postgresql://maestro_user:${POSTGRES_PASSWORD}@postgres-maestro.database:5432/maestro_prod?sslmode=require'

  # Redis Connection
  redis-url: 'redis://:${REDIS_PASSWORD}@redis-maestro.cache:6379/0'

  # AI API Keys (should be injected via external secret management)
  openai-api-key: '${OPENAI_API_KEY}'
  anthropic-api-key: '${ANTHROPIC_API_KEY}'

  # Authentication Keys
  jwt-secret: '${JWT_SECRET}'
  key-encryption-key: '${KEY_ENCRYPTION_KEY}'

  # External Service Tokens
  github-token: '${GITHUB_TOKEN}'
  jira-token: '${JIRA_TOKEN}'

  # Monitoring Keys
  otel-api-key: '${OTEL_API_KEY}'
  prometheus-password: '${PROMETHEUS_PASSWORD}'

---
# Registry Secret for pulling images from GHCR
apiVersion: v1
kind: Secret
metadata:
  name: ghcr-secret
  namespace: intelgraph-prod
  labels:
    app.kubernetes.io/name: maestro
    app.kubernetes.io/component: registry
type: kubernetes.io/dockerconfigjson
stringData:
  .dockerconfigjson: |
    {
      "auths": {
        "ghcr.io": {
          "auth": "${GHCR_TOKEN_BASE64}"
        }
      }
    }

---
# TLS Certificate Secret (managed by cert-manager)
apiVersion: v1
kind: Secret
metadata:
  name: maestro-tls
  namespace: intelgraph-prod
  labels:
    app.kubernetes.io/name: maestro
    app.kubernetes.io/component: tls
    cert-manager.io/cluster-issuer: letsencrypt-prod
type: kubernetes.io/tls
# This will be populated by cert-manager automatically

---
# Service Account Token for AWS IAM Role
apiVersion: v1
kind: Secret
metadata:
  name: maestro-aws-token
  namespace: intelgraph-prod
  annotations:
    kubernetes.io/service-account.name: maestro
    kubernetes.io/service-account.uid: '${SERVICE_ACCOUNT_UID}'
type: kubernetes.io/service-account-token
