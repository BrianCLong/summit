# ===================================================================
# COMPREHENSIVE SECRETS MANAGEMENT CONFIGURATION
# External Secrets Operator, Vault integration, and secret rotation
# ===================================================================

# ===================================================================
# EXTERNAL SECRETS OPERATOR CONFIGURATION
# ===================================================================
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vault-backend
  namespace: intelgraph-production
spec:
  provider:
    vault:
      server: 'https://vault.intelgraph.ai:8200'
      path: 'secret'
      version: 'v2'
      auth:
        kubernetes:
          mountPath: 'kubernetes'
          role: 'intelgraph-secrets-reader'
          serviceAccountRef:
            name: external-secrets-sa
      caProvider:
        type: 'ConfigMap'
        name: 'vault-ca-cert'
        key: 'ca.crt'

---
apiVersion: external-secrets.io/v1beta1
kind: ClusterSecretStore
metadata:
  name: aws-secrets-manager
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-west-2
      auth:
        secretRef:
          accessKeyIDSecretRef:
            name: awssm-secret
            key: access-key
          secretAccessKeySecretRef:
            name: awssm-secret
            key: secret-access-key
        jwt:
          serviceAccountRef:
            name: external-secrets-sa

---
# ===================================================================
# EXTERNAL SECRET DEFINITIONS
# ===================================================================
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: maestro-secrets
  namespace: intelgraph-production
  labels:
    app.kubernetes.io/name: maestro
    security.intelgraph.ai/secret-type: application
spec:
  secretStoreRef:
    name: vault-backend
    kind: SecretStore

  target:
    name: maestro-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      metadata:
        labels:
          app.kubernetes.io/name: maestro
          security.intelgraph.ai/secret-type: application
          security.intelgraph.ai/rotation: enabled
        annotations:
          external-secrets.io/backend: vault
          security.intelgraph.ai/last-rotated: '{{ .lastRotated }}'
      data:
        # Database connections
        database-url: 'postgresql://{{ .dbuser }}:{{ .dbpass }}@{{ .dbhost }}:5432/{{ .dbname }}?sslmode=require'
        redis-url: 'redis://{{ .redisuser }}:{{ .redispass }}@{{ .redishost }}:6379'

        # AI API keys
        openai-api-key: '{{ .openai_key }}'
        anthropic-api-key: '{{ .anthropic_key }}'

        # JWT and encryption keys
        jwt-secret: '{{ .jwt_secret }}'
        encryption-key: '{{ .encryption_key }}'

        # OAuth and SSO
        oauth-client-id: '{{ .oauth_client_id }}'
        oauth-client-secret: '{{ .oauth_client_secret }}'

        # Third-party integrations
        slack-webhook-url: '{{ .slack_webhook }}'
        pagerduty-routing-key: '{{ .pagerduty_key }}'

  data:
    - secretKey: dbuser
      remoteRef:
        key: database/maestro
        property: username
    - secretKey: dbpass
      remoteRef:
        key: database/maestro
        property: password
    - secretKey: dbhost
      remoteRef:
        key: database/maestro
        property: host
    - secretKey: dbname
      remoteRef:
        key: database/maestro
        property: database
    - secretKey: redisuser
      remoteRef:
        key: cache/redis
        property: username
    - secretKey: redispass
      remoteRef:
        key: cache/redis
        property: password
    - secretKey: redishost
      remoteRef:
        key: cache/redis
        property: host
    - secretKey: openai_key
      remoteRef:
        key: ai/openai
        property: api_key
    - secretKey: anthropic_key
      remoteRef:
        key: ai/anthropic
        property: api_key
    - secretKey: jwt_secret
      remoteRef:
        key: security/jwt
        property: secret
    - secretKey: encryption_key
      remoteRef:
        key: security/encryption
        property: key
    - secretKey: oauth_client_id
      remoteRef:
        key: auth/oauth
        property: client_id
    - secretKey: oauth_client_secret
      remoteRef:
        key: auth/oauth
        property: client_secret
    - secretKey: slack_webhook
      remoteRef:
        key: notifications/slack
        property: webhook_url
    - secretKey: pagerduty_key
      remoteRef:
        key: notifications/pagerduty
        property: routing_key
    - secretKey: lastRotated
      remoteRef:
        key: metadata/rotation
        property: last_rotated

  refreshInterval: 1h

---
# ===================================================================
# TLS CERTIFICATES FROM VAULT
# ===================================================================
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: maestro-tls-certs
  namespace: intelgraph-production
spec:
  secretStoreRef:
    name: vault-backend
    kind: SecretStore

  target:
    name: maestro-tls
    creationPolicy: Owner
    template:
      type: kubernetes.io/tls
      metadata:
        labels:
          app.kubernetes.io/name: maestro
          security.intelgraph.ai/cert-type: server
        annotations:
          cert-manager.io/issuer: vault-issuer
      data:
        tls.crt: '{{ .cert }}'
        tls.key: '{{ .key }}'
        ca.crt: '{{ .ca }}'

  data:
    - secretKey: cert
      remoteRef:
        key: pki/maestro
        property: certificate
    - secretKey: key
      remoteRef:
        key: pki/maestro
        property: private_key
    - secretKey: ca
      remoteRef:
        key: pki/ca
        property: certificate

  refreshInterval: 24h

---
# ===================================================================
# SERVICE MESH CERTIFICATES
# ===================================================================
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: istio-root-ca
  namespace: istio-system
spec:
  secretStoreRef:
    name: vault-backend
    kind: SecretStore

  target:
    name: cacerts
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        root-cert.pem: '{{ .rootCert }}'
        cert-chain.pem: '{{ .certChain }}'
        ca-cert.pem: '{{ .caCert }}'
        ca-key.pem: '{{ .caKey }}'

  data:
    - secretKey: rootCert
      remoteRef:
        key: istio/ca
        property: root_cert
    - secretKey: certChain
      remoteRef:
        key: istio/ca
        property: cert_chain
    - secretKey: caCert
      remoteRef:
        key: istio/ca
        property: ca_cert
    - secretKey: caKey
      remoteRef:
        key: istio/ca
        property: ca_key

  refreshInterval: 24h

---
# ===================================================================
# SECRET ROTATION CRONJOB
# ===================================================================
apiVersion: batch/v1
kind: CronJob
metadata:
  name: secret-rotation-job
  namespace: intelgraph-production
  labels:
    app.kubernetes.io/name: secret-rotator
    security.intelgraph.ai/component: rotation
spec:
  schedule: '0 2 * * 0' # Weekly on Sunday at 2 AM
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 3
  successfulJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app.kubernetes.io/name: secret-rotator
        spec:
          serviceAccountName: secret-rotator-sa
          securityContext:
            runAsNonRoot: true
            runAsUser: 65532
            runAsGroup: 65532
            fsGroup: 65532
            seccompProfile:
              type: RuntimeDefault
          containers:
            - name: secret-rotator
              image: ghcr.io/intelgraph/secret-rotator:v1.0.0
              imagePullPolicy: Always
              securityContext:
                allowPrivilegeEscalation: false
                readOnlyRootFilesystem: true
                capabilities:
                  drop:
                    - ALL
              env:
                - name: VAULT_ADDR
                  value: 'https://vault.intelgraph.ai:8200'
                - name: VAULT_ROLE
                  value: 'secret-rotator'
                - name: KUBERNETES_NAMESPACE
                  value: 'intelgraph-production'
                - name: LOG_LEVEL
                  value: 'info'
              volumeMounts:
                - name: vault-ca
                  mountPath: /etc/ssl/vault
                  readOnly: true
                - name: tmp
                  mountPath: /tmp
              resources:
                requests:
                  memory: '128Mi'
                  cpu: '100m'
                limits:
                  memory: '256Mi'
                  cpu: '200m'
          volumes:
            - name: vault-ca
              configMap:
                name: vault-ca-cert
            - name: tmp
              emptyDir: {}
          restartPolicy: OnFailure
          terminationGracePeriodSeconds: 30

---
# ===================================================================
# SECRET SCANNING AND MONITORING
# ===================================================================
apiVersion: batch/v1
kind: CronJob
metadata:
  name: secret-scanner
  namespace: intelgraph-production
  labels:
    app.kubernetes.io/name: secret-scanner
    security.intelgraph.ai/component: scanning
spec:
  schedule: '0 */6 * * *' # Every 6 hours
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 3
  successfulJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app.kubernetes.io/name: secret-scanner
        spec:
          serviceAccountName: secret-scanner-sa
          securityContext:
            runAsNonRoot: true
            runAsUser: 65532
            runAsGroup: 65532
            fsGroup: 65532
            seccompProfile:
              type: RuntimeDefault
          containers:
            - name: secret-scanner
              image: trufflesecurity/trufflehog:latest
              imagePullPolicy: Always
              securityContext:
                allowPrivilegeEscalation: false
                readOnlyRootFilesystem: true
                capabilities:
                  drop:
                    - ALL
              command:
                - sh
                - -c
                - |
                  # Scan for secrets in container images
                  trufflehog docker --image ghcr.io/brianlong/intelgraph/maestro:latest \
                    --json --no-update --include-detectors=all > /tmp/scan-results.json

                  # Check for high-entropy strings
                  if [ -s /tmp/scan-results.json ]; then
                    echo "ALERT: Potential secrets found in container image"
                    cat /tmp/scan-results.json
                    exit 1
                  fi

                  echo "No secrets detected in container image"
              volumeMounts:
                - name: tmp
                  mountPath: /tmp
              resources:
                requests:
                  memory: '256Mi'
                  cpu: '200m'
                limits:
                  memory: '512Mi'
                  cpu: '500m'
          volumes:
            - name: tmp
              emptyDir: {}
          restartPolicy: OnFailure
          terminationGracePeriodSeconds: 60

---
# ===================================================================
# SEALED SECRETS CONFIGURATION (Alternative to External Secrets)
# ===================================================================
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: maestro-sealed-secrets
  namespace: intelgraph-production
  labels:
    app.kubernetes.io/name: maestro
    security.intelgraph.ai/secret-type: sealed
spec:
  template:
    metadata:
      name: maestro-sealed-secrets
      labels:
        app.kubernetes.io/name: maestro
        security.intelgraph.ai/secret-type: application
    type: Opaque
  encryptedData:
    # These would be encrypted values generated by kubeseal
    # Example structure only - real values would be encrypted
    database-url: AgBy3i4OJSWK+PiTySBZz9UQHfCG7...
    redis-url: AgBy3i4OJSWK+PiTySBZz9UQHfCG7...
    openai-api-key: AgBy3i4OJSWK+PiTySBZz9UQHfCG7...
    anthropic-api-key: AgBy3i4OJSWK+PiTySBZz9UQHfCG7...

---
# ===================================================================
# VAULT KUBERNETES AUTH CONFIGURATION
# ===================================================================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault-auth-sa
  namespace: intelgraph-production
  labels:
    app.kubernetes.io/name: vault-auth
automountServiceAccountToken: true

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-config
  namespace: intelgraph-production
data:
  vault-init.sh: |
    #!/bin/sh
    set -e

    # Configure Kubernetes authentication
    vault auth enable -path=kubernetes kubernetes

    # Configure the kubernetes auth method
    vault write auth/kubernetes/config \
        token_reviewer_jwt="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
        kubernetes_host="https://$KUBERNETES_PORT_443_TCP_ADDR:443" \
        kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt

    # Create policy for secret access
    vault policy write intelgraph-secrets - <<EOF
    path "secret/data/database/*" {
      capabilities = ["read"]
    }
    path "secret/data/ai/*" {
      capabilities = ["read"]
    }
    path "secret/data/security/*" {
      capabilities = ["read"]
    }
    path "secret/data/auth/*" {
      capabilities = ["read"]
    }
    path "secret/data/notifications/*" {
      capabilities = ["read"]
    }
    path "pki/maestro/*" {
      capabilities = ["read"]
    }
    EOF

    # Create role
    vault write auth/kubernetes/role/intelgraph-secrets-reader \
        bound_service_account_names=external-secrets-sa,maestro-sa \
        bound_service_account_namespaces=intelgraph-production \
        policies=intelgraph-secrets \
        ttl=24h

---
# ===================================================================
# CONFIGMAP ENCRYPTION AT REST
# ===================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: encryption-config
  namespace: kube-system
data:
  encryption.yaml: |
    apiVersion: apiserver.config.k8s.io/v1
    kind: EncryptionConfiguration
    resources:
    - resources:
      - secrets
      - configmaps
      providers:
      - aescbc:
          keys:
          - name: key1
            secret: <base64-encoded-32-byte-key>
      - identity: {}

---
# ===================================================================
# SECRET POLICY ENFORCEMENT
# ===================================================================
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: require-secret-encryption
  annotations:
    policies.kyverno.io/title: Require Secret Encryption
    policies.kyverno.io/category: Security
    policies.kyverno.io/severity: high
    policies.kyverno.io/description: >-
      Ensures all secrets are encrypted and follow security standards.
spec:
  validationFailureAction: enforce
  background: true
  rules:
    - name: require-secret-labels
      match:
        any:
          - resources:
              kinds:
                - Secret
      validate:
        message: 'Secrets must have security labels'
        pattern:
          metadata:
            labels:
              security.intelgraph.ai/secret-type: '?*'

    - name: block-plain-text-secrets
      match:
        any:
          - resources:
              kinds:
                - Secret
              names:
                - '*-plain-*'
      validate:
        message: 'Plain text secrets are not allowed'
        deny: {}

    - name: require-sealed-or-external
      match:
        any:
          - resources:
              kinds:
                - Secret
      validate:
        message: 'Secrets must be managed by SealedSecrets or ExternalSecrets'
        anyPattern:
          - metadata:
              annotations:
                sealedsecrets.bitnami.com/managed: 'true'
          - metadata:
              annotations:
                external-secrets.io/backend: '?*'
