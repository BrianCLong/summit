# ===================================================================
# COMPREHENSIVE RBAC SECURITY CONFIGURATION
# Role-based access control with least privilege principles
# ===================================================================

# ===================================================================
# MAESTRO ORCHESTRATOR SERVICE ACCOUNT
# ===================================================================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: maestro-orchestrator-sa
  namespace: intelgraph-production
  labels:
    app.kubernetes.io/name: maestro
    app.kubernetes.io/component: orchestrator
  annotations:
    eks.amazonaws.com/role-arn: 'arn:aws:iam::123456789012:role/maestro-orchestrator-role'
    security.intelgraph.ai/principle: least-privilege
automountServiceAccountToken: true

---
# ===================================================================
# MAESTRO ORCHESTRATOR ROLE
# ===================================================================
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: intelgraph-production
  name: maestro-orchestrator-role
  labels:
    app.kubernetes.io/name: maestro
    app.kubernetes.io/component: orchestrator
rules:
  # ConfigMaps - read only access to configuration
  - apiGroups: ['']
    resources: ['configmaps']
    verbs: ['get', 'list', 'watch']
    resourceNames: ['maestro-config', 'maestro-features']

  # Secrets - read only access to own secrets
  - apiGroups: ['']
    resources: ['secrets']
    verbs: ['get', 'list', 'watch']
    resourceNames: ['maestro-secrets', 'maestro-tls']

  # Pods - read access for self-monitoring
  - apiGroups: ['']
    resources: ['pods']
    verbs: ['get', 'list', 'watch']
    resourceNames: [] # Empty means no specific resource restriction

  # Services - read access to discover other services
  - apiGroups: ['']
    resources: ['services', 'endpoints']
    verbs: ['get', 'list', 'watch']

  # Events - create events for auditing
  - apiGroups: ['']
    resources: ['events']
    verbs: ['create', 'patch']

  # Leases - for leader election in HA deployments
  - apiGroups: ['coordination.k8s.io']
    resources: ['leases']
    verbs: ['get', 'list', 'watch', 'create', 'update', 'patch']
    resourceNames: ['maestro-leader-election']

---
# ===================================================================
# MAESTRO ORCHESTRATOR ROLE BINDING
# ===================================================================
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: maestro-orchestrator-binding
  namespace: intelgraph-production
  labels:
    app.kubernetes.io/name: maestro
    app.kubernetes.io/component: orchestrator
subjects:
  - kind: ServiceAccount
    name: maestro-orchestrator-sa
    namespace: intelgraph-production
roleRef:
  kind: Role
  name: maestro-orchestrator-role
  apiGroup: rbac.authorization.k8s.io

---
# ===================================================================
# MONITORING SERVICE ACCOUNT AND RBAC
# ===================================================================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: maestro-monitoring-sa
  namespace: intelgraph-production
  labels:
    app.kubernetes.io/name: maestro
    app.kubernetes.io/component: monitoring
automountServiceAccountToken: true

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: intelgraph-production
  name: maestro-monitoring-role
rules:
  # Pods and services - read access for metrics collection
  - apiGroups: ['']
    resources: ['pods', 'services', 'endpoints']
    verbs: ['get', 'list', 'watch']

  # Pod metrics - read access
  - apiGroups: ['metrics.k8s.io']
    resources: ['pods', 'nodes']
    verbs: ['get', 'list']

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: maestro-monitoring-binding
  namespace: intelgraph-production
subjects:
  - kind: ServiceAccount
    name: maestro-monitoring-sa
    namespace: intelgraph-production
roleRef:
  kind: Role
  name: maestro-monitoring-role
  apiGroup: rbac.authorization.k8s.io

---
# ===================================================================
# EXTERNAL SECRETS SERVICE ACCOUNT AND RBAC
# ===================================================================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets-sa
  namespace: intelgraph-production
  labels:
    app.kubernetes.io/name: external-secrets
    security.intelgraph.ai/component: secrets-management
  annotations:
    eks.amazonaws.com/role-arn: 'arn:aws:iam::123456789012:role/external-secrets-role'
automountServiceAccountToken: true

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: intelgraph-production
  name: external-secrets-role
rules:
  # Secrets - create and update managed secrets
  - apiGroups: ['']
    resources: ['secrets']
    verbs: ['create', 'update', 'patch', 'delete']

  # ConfigMaps - read vault configuration
  - apiGroups: ['']
    resources: ['configmaps']
    verbs: ['get', 'list', 'watch']
    resourceNames: ['vault-ca-cert', 'external-secrets-config']

  # Events - create events for audit trail
  - apiGroups: ['']
    resources: ['events']
    verbs: ['create', 'patch']

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: external-secrets-binding
  namespace: intelgraph-production
subjects:
  - kind: ServiceAccount
    name: external-secrets-sa
    namespace: intelgraph-production
roleRef:
  kind: Role
  name: external-secrets-role
  apiGroup: rbac.authorization.k8s.io

---
# ===================================================================
# SECRET ROTATOR SERVICE ACCOUNT AND RBAC
# ===================================================================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: secret-rotator-sa
  namespace: intelgraph-production
  labels:
    app.kubernetes.io/name: secret-rotator
    security.intelgraph.ai/component: rotation
automountServiceAccountToken: true

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: intelgraph-production
  name: secret-rotator-role
rules:
  # Secrets - read and update for rotation
  - apiGroups: ['']
    resources: ['secrets']
    verbs: ['get', 'list', 'patch', 'update']

  # ExternalSecrets - trigger refresh after rotation
  - apiGroups: ['external-secrets.io']
    resources: ['externalsecrets']
    verbs: ['get', 'list', 'patch']

  # Events - create rotation audit events
  - apiGroups: ['']
    resources: ['events']
    verbs: ['create', 'patch']

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-rotator-binding
  namespace: intelgraph-production
subjects:
  - kind: ServiceAccount
    name: secret-rotator-sa
    namespace: intelgraph-production
roleRef:
  kind: Role
  name: secret-rotator-role
  apiGroup: rbac.authorization.k8s.io

---
# ===================================================================
# SECRET SCANNER SERVICE ACCOUNT AND RBAC
# ===================================================================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: secret-scanner-sa
  namespace: intelgraph-production
  labels:
    app.kubernetes.io/name: secret-scanner
    security.intelgraph.ai/component: scanning
automountServiceAccountToken: true

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: intelgraph-production
  name: secret-scanner-role
rules:
  # Pods - read access to scan running containers
  - apiGroups: ['']
    resources: ['pods']
    verbs: ['get', 'list']

  # ConfigMaps - read scanner configuration
  - apiGroups: ['']
    resources: ['configmaps']
    verbs: ['get', 'list']
    resourceNames: ['secret-scanner-config']

  # Events - create scanning audit events
  - apiGroups: ['']
    resources: ['events']
    verbs: ['create', 'patch']

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-scanner-binding
  namespace: intelgraph-production
subjects:
  - kind: ServiceAccount
    name: secret-scanner-sa
    namespace: intelgraph-production
roleRef:
  kind: Role
  name: secret-scanner-role
  apiGroup: rbac.authorization.k8s.io

---
# ===================================================================
# CLUSTER-LEVEL RBAC FOR SECURITY SERVICES
# ===================================================================
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: intelgraph-security-reader
  labels:
    security.intelgraph.ai/rbac: cluster-reader
rules:
  # Nodes - read access for security monitoring
  - apiGroups: ['']
    resources: ['nodes']
    verbs: ['get', 'list', 'watch']

  # Network policies - read access for compliance
  - apiGroups: ['networking.k8s.io']
    resources: ['networkpolicies']
    verbs: ['get', 'list', 'watch']

  # Pod security policies - read access
  - apiGroups: ['policy']
    resources: ['podsecuritypolicies']
    verbs: ['get', 'list', 'watch']

  # RBAC resources - read access for audit
  - apiGroups: ['rbac.authorization.k8s.io']
    resources: ['roles', 'rolebindings', 'clusterroles', 'clusterrolebindings']
    verbs: ['get', 'list', 'watch']

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: intelgraph-security-reader-binding
  labels:
    security.intelgraph.ai/rbac: cluster-reader
subjects:
  - kind: ServiceAccount
    name: maestro-monitoring-sa
    namespace: intelgraph-production
  - kind: ServiceAccount
    name: security-auditor-sa
    namespace: security
roleRef:
  kind: ClusterRole
  name: intelgraph-security-reader
  apiGroup: rbac.authorization.k8s.io

---
# ===================================================================
# ADMISSION CONTROLLER SERVICE ACCOUNT
# ===================================================================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: admission-controller-sa
  namespace: security
  labels:
    app.kubernetes.io/name: admission-controller
    security.intelgraph.ai/component: policy-enforcement
automountServiceAccountToken: true

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: admission-controller-role
  labels:
    security.intelgraph.ai/rbac: admission-controller
rules:
  # Validate resources during admission
  - apiGroups: ['']
    resources: ['pods', 'services', 'configmaps', 'secrets']
    verbs: ['get', 'list', 'watch']

  # Validate deployments and other workloads
  - apiGroups: ['apps']
    resources: ['deployments', 'replicasets', 'statefulsets', 'daemonsets']
    verbs: ['get', 'list', 'watch']

  # Validate RBAC resources
  - apiGroups: ['rbac.authorization.k8s.io']
    resources: ['roles', 'rolebindings', 'clusterroles', 'clusterrolebindings']
    verbs: ['get', 'list', 'watch']

  # Create validation events
  - apiGroups: ['']
    resources: ['events']
    verbs: ['create', 'patch']

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: admission-controller-binding
subjects:
  - kind: ServiceAccount
    name: admission-controller-sa
    namespace: security
roleRef:
  kind: ClusterRole
  name: admission-controller-role
  apiGroup: rbac.authorization.k8s.io

---
# ===================================================================
# SECURITY AUDITOR RBAC
# ===================================================================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: security-auditor-sa
  namespace: security
  labels:
    app.kubernetes.io/name: security-auditor
    security.intelgraph.ai/component: audit
automountServiceAccountToken: true

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: security-auditor-role
  labels:
    security.intelgraph.ai/rbac: auditor
rules:
  # Read-only access to all resources for auditing
  - apiGroups: ['*']
    resources: ['*']
    verbs: ['get', 'list', 'watch']

  # Access to audit logs
  - apiGroups: ['audit.k8s.io']
    resources: ['events']
    verbs: ['get', 'list', 'watch']

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: security-auditor-binding
subjects:
  - kind: ServiceAccount
    name: security-auditor-sa
    namespace: security
roleRef:
  kind: ClusterRole
  name: security-auditor-role
  apiGroup: rbac.authorization.k8s.io

---
# ===================================================================
# RBAC POLICY ENFORCEMENT
# ===================================================================
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: rbac-security-policy
  annotations:
    policies.kyverno.io/title: RBAC Security Policy
    policies.kyverno.io/category: Security
    policies.kyverno.io/severity: high
    policies.kyverno.io/description: >-
      Enforces RBAC security standards across the cluster.
spec:
  validationFailureAction: enforce
  background: true
  rules:
    - name: require-service-account-labels
      match:
        any:
          - resources:
              kinds:
                - ServiceAccount
      validate:
        message: 'ServiceAccounts must have security labels'
        pattern:
          metadata:
            labels:
              app.kubernetes.io/name: '?*'

    - name: block-cluster-admin-binding
      match:
        any:
          - resources:
              kinds:
                - ClusterRoleBinding
      validate:
        message: 'ClusterRoleBinding to cluster-admin is not allowed'
        pattern:
          roleRef:
            name: '!cluster-admin'

    - name: require-rbac-annotations
      match:
        any:
          - resources:
              kinds:
                - Role
                - ClusterRole
      validate:
        message: 'Roles must have security annotations'
        pattern:
          metadata:
            annotations:
              security.intelgraph.ai/principle: 'least-privilege'

    - name: block-wildcard-permissions
      match:
        any:
          - resources:
              kinds:
                - Role
                - ClusterRole
      validate:
        message: 'Wildcard permissions (*) are not allowed in production'
        deny:
          conditions:
            - key: "{{ request.object.rules[?contains(resources, '*')] | length(@) }}"
              operator: GreaterThan
              value: 0

---
# ===================================================================
# RBAC MONITORING AND ALERTING
# ===================================================================
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: rbac-security-alerts
  namespace: monitoring
  labels:
    app.kubernetes.io/name: rbac-monitoring
    security.intelgraph.ai/component: alerting
spec:
  groups:
    - name: rbac.security.rules
      rules:
        - alert: UnauthorizedRoleBinding
          expr: increase(apiserver_audit_total{verb="create",objectRef_resource="rolebindings"}[5m]) > 0
          for: 0m
          labels:
            severity: warning
          annotations:
            summary: 'Unauthorized RoleBinding created'
            description: 'A RoleBinding was created - verify authorization'

        - alert: ClusterAdminBinding
          expr: increase(apiserver_audit_total{verb="create",objectRef_resource="clusterrolebindings",objectRef_name="cluster-admin"}[1m]) > 0
          for: 0m
          labels:
            severity: critical
          annotations:
            summary: 'Cluster admin binding created'
            description: 'A cluster-admin ClusterRoleBinding was created'

        - alert: ServiceAccountTokenMount
          expr: increase(kubernetes_build_info{job="kube-state-metrics"}[5m]) and on() kube_pod_spec_service_account_token_mount{service_account!="default"} == 1
          for: 2m
          labels:
            severity: warning
          annotations:
            summary: 'ServiceAccount token mounted'
            description: 'Pod {{ $labels.pod }} has ServiceAccount token mounted'

---
# ===================================================================
# USER RBAC FOR DEVELOPMENT TEAMS
# ===================================================================
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: intelgraph-production
  name: developer-role
  annotations:
    security.intelgraph.ai/principle: least-privilege
    security.intelgraph.ai/team: development
rules:
  # Read access to most resources for troubleshooting
  - apiGroups: ['']
    resources: ['pods', 'pods/log', 'services', 'endpoints', 'configmaps']
    verbs: ['get', 'list', 'watch']

  # Limited secret access (no sensitive secrets)
  - apiGroups: ['']
    resources: ['secrets']
    verbs: ['get', 'list']
    resourceNames: ['maestro-config-secret']

  # Deployment read access
  - apiGroups: ['apps']
    resources: ['deployments', 'replicasets']
    verbs: ['get', 'list', 'watch']

  # Events for debugging
  - apiGroups: ['']
    resources: ['events']
    verbs: ['get', 'list', 'watch']

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: developer-binding
  namespace: intelgraph-production
subjects:
  - kind: User
    name: developer@intelgraph.ai
    apiGroup: rbac.authorization.k8s.io
  - kind: Group
    name: intelgraph:developers
    apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: developer-role
  apiGroup: rbac.authorization.k8s.io

---
# ===================================================================
# SRE RBAC FOR OPERATIONS TEAMS
# ===================================================================
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: sre-role
  annotations:
    security.intelgraph.ai/principle: least-privilege
    security.intelgraph.ai/team: sre
rules:
  # Full access to monitoring and observability
  - apiGroups: ['monitoring.coreos.com']
    resources: ['*']
    verbs: ['*']

  # Read access to all resources for troubleshooting
  - apiGroups: ['']
    resources: ['*']
    verbs: ['get', 'list', 'watch']

  # Limited write access for incident response
  - apiGroups: ['']
    resources: ['pods']
    verbs: ['delete']

  - apiGroups: ['apps']
    resources: ['deployments', 'replicasets']
    verbs: ['patch', 'update']

  # Network policy management
  - apiGroups: ['networking.k8s.io']
    resources: ['networkpolicies']
    verbs: ['*']

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: sre-binding
subjects:
  - kind: Group
    name: intelgraph:sre
    apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: sre-role
  apiGroup: rbac.authorization.k8s.io
