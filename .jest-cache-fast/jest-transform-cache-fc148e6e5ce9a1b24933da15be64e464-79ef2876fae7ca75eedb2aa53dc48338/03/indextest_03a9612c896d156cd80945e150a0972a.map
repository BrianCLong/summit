{"file":"/Users/brianlong/Developer/summit/packages/sdk/gateway-js/src/index.test.ts","mappings":";;;;;AAAA,sDAA8B;AAC9B,mCAAoC;AACpC,mCAAwC;AACxC,8DAAqC;AAErC,IAAI,MAAW,CAAC;AAEhB,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE;IACjB,MAAM,GAAG,GAAG,IAAA,iBAAO,GAAE,CAAC;IACtB,GAAG,CAAC,GAAG,CAAC,qBAAU,CAAC,IAAI,EAAE,CAAC,CAAC;IAC3B,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QAChC,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;QACvC,IAAI,CAAC,UAAU,EAAE,cAAc,EAAE,CAAC;YAChC,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,oBAAoB,EAAE,CAAC,CAAC;QAC/D,CAAC;QACD,MAAM,IAAI,GAAG,IAAA,mBAAU,EAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC9D,IAAI,IAAI,KAAK,UAAU,CAAC,cAAc,CAAC,UAAU,EAAE,CAAC;YAClD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,eAAe,EAAE,CAAC,CAAC;QAC1D,CAAC;QACD,GAAG,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;IACnC,CAAC,CAAC,CAAC;IACH,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,CAAC,IAAI,EAAE,EAAE;IAChB,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE;IAC1C,MAAM,MAAM,GAAG,IAAI,qBAAa,CAAC;QAC/B,GAAG,EAAE,+BAA+B;QACpC,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;KAC5B,CAAC,CAAC;IACH,MAAM,IAAI,GAAG,MAAM,MAAM,CAAC,KAAK,CAAkB,MAAM,CAAC,CAAC;IACzD,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/packages/sdk/gateway-js/src/index.test.ts"],"sourcesContent":["import express from 'express';\nimport { createHash } from 'crypto';\nimport { GatewayClient } from './index';\nimport bodyParser from 'body-parser';\n\nlet server: any;\n\nbeforeAll((done) => {\n  const app = express();\n  app.use(bodyParser.json());\n  app.post('/graphql', (req, res) => {\n    const { query, extensions } = req.body;\n    if (!extensions?.persistedQuery) {\n      return res.status(400).json({ error: 'no persisted query' });\n    }\n    const hash = createHash('sha256').update(query).digest('hex');\n    if (hash !== extensions.persistedQuery.sha256Hash) {\n      return res.status(400).json({ error: 'hash mismatch' });\n    }\n    res.json({ data: { ok: true } });\n  });\n  server = app.listen(5001, done);\n});\n\nafterAll((done) => {\n  server.close(done);\n});\n\ntest('executes persisted query', async () => {\n  const client = new GatewayClient({\n    url: 'http://localhost:5001/graphql',\n    queries: { Test: '{ ok }' },\n  });\n  const data = await client.query<{ ok: boolean }>('Test');\n  expect(data.ok).toBe(true);\n});\n"],"version":3}