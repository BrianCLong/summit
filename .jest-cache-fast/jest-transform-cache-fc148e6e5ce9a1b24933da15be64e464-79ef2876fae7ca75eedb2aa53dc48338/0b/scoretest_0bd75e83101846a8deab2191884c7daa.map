{"file":"/Users/brianlong/Developer/summit/server/tests/services/score.test.ts","mappings":";;AAAA,oDAAwD;AAExD,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;IAC5B,EAAE,CAAC,4CAA4C,EAAE,GAAG,EAAE;QACpD,MAAM,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACnE,MAAM,CAAC,IAAA,oBAAY,EAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mDAAmD,EAAE,GAAG,EAAE;QAC3D,MAAM,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;QACtC,MAAM,CAAC,IAAA,oBAAY,EAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;QACnD,MAAM,MAAM,GAAqC,EAAE,CAAC;QACpD,MAAM,CAAC,IAAA,oBAAY,EAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4BAA4B,EAAE,GAAG,EAAE;QACpC,MAAM,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QAClD,MAAM,CAAC,IAAA,oBAAY,EAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4CAA4C,EAAE,GAAG,EAAE;QACpD,MAAM,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;QACjE,uFAAuF;QACvF,MAAM,CAAC,IAAA,oBAAY,EAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/server/tests/services/score.test.ts"],"sourcesContent":["import { computeScore } from '../../src/services/score';\n\ndescribe('computeScore', () => {\n  it('should compute the weighted mean correctly', () => {\n    const values = [{ v: 10, w: 1 }, { v: 20, w: 2 }, { v: 30, w: 1 }];\n    expect(computeScore(values)).toBe(20);\n  });\n\n  it('should handle cases with no weight (default to 1)', () => {\n    const values = [{ v: 10 }, { v: 20 }];\n    expect(computeScore(values)).toBe(15);\n  });\n\n  it('should return 0 if no values are provided', () => {\n    const values: Array<{ v: number; w?: number }> = [];\n    expect(computeScore(values)).toBe(0);\n  });\n\n  it('should handle zero weights', () => {\n    const values = [{ v: 10, w: 0 }, { v: 20, w: 0 }];\n    expect(computeScore(values)).toBe(0);\n  });\n\n  it('should handle mixed weights and no weights', () => {\n    const values = [{ v: 10, w: 0.5 }, { v: 20 }, { v: 30, w: 1.5 }];\n    // (10*0.5 + 20*1 + 30*1.5) / (0.5 + 1 + 1.5) = (5 + 20 + 45) / 3 = 70 / 3 = 23.3333...\n    expect(computeScore(values)).toBe(23.3333);\n  });\n});\n"],"version":3}