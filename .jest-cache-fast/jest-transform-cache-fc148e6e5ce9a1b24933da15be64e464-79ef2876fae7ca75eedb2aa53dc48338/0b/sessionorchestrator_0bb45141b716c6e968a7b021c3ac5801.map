{"file":"/Users/brianlong/Developer/summit/server/src/crystal/session-orchestrator.ts","mappings":";;;AAAA,mCAAsC;AACtC,mCAAoC;AACpC,+DAAwD;AACxD,iEAA0D;AAC1D,qDAA0D;AAC1D,6DAAsE;AACtE,yCAeoB;AAQpB,MAAM,aAAc,SAAQ,qBAAY;IACtC,OAAO,CAAC,KAAkB;QACxB,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IAC1B,CAAC;IAED,KAAK,CAAC,QAAsC;QAC1C,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QACzB,OAAO,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IACzC,CAAC;CACF;AAED,SAAS,KAAK,CAAI,KAAQ;IACxB,OAAO,eAAe,CAAC,CAAC,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;AACtF,CAAC;AAED,SAAS,WAAW,CAAC,OAA4C;IAC/D,MAAM,KAAK,GAAG,OAAO,EAAE,MAAM;QAC3B,CAAC,CAAC,OAAO;QACT,CAAC,CAAC;YACE,EAAE,IAAI,EAAE,oBAAS,CAAC,KAAK,EAAE,IAAI,EAAE,aAAa,EAAE;YAC9C,EAAE,IAAI,EAAE,oBAAS,CAAC,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE;YACxC,EAAE,IAAI,EAAE,oBAAS,CAAC,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE;YAC9C,EAAE,IAAI,EAAE,oBAAS,CAAC,IAAI,EAAE,IAAI,EAAE,aAAa,EAAE;YAC7C,EAAE,IAAI,EAAE,oBAAS,CAAC,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE;YAC1C,EAAE,IAAI,EAAE,oBAAS,CAAC,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE;SAC3C,CAAC;IACN,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;QAClC,EAAE,EAAE,IAAA,mBAAU,GAAE;QAChB,IAAI,EAAE,KAAK,CAAC,IAAI;QAChB,IAAI,EAAE,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI;QAC9B,MAAM,EAAE;YACN,CAAC,EAAE,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC;YAClB,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC;YAC5B,CAAC,EAAE,CAAC;YACJ,CAAC,EAAE,CAAC;YACJ,MAAM,EAAE,KAAK,CAAC,MAAM;SACrB;KACF,CAAC,CAAC,CAAC;AACN,CAAC;AAED,SAAS,eAAe,CAAC,IAAuC;IAC9D,OAAO,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QAChC,EAAE,EAAE,IAAA,mBAAU,GAAE;QAChB,IAAI,EAAE,GAAG,CAAC,IAAI;QACd,OAAO,EAAE,GAAG,CAAC,OAAO;QACpB,SAAS,EAAE,GAAG,CAAC,SAAS;QACxB,WAAW,EAAE,GAAG,CAAC,WAAW;KAC7B,CAAC,CAAC,CAAC;AACN,CAAC;AAED,SAAS,WAAW,CAAC,QAAmB;IACtC,MAAM,WAAW,GAAG,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;IAC3E,OAAO,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE;QAC7B,MAAM,OAAO,GAAG,qCAAe,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACzC,OAAO;YACL,EAAE,EAAE,IAAA,mBAAU,GAAE;YAChB,UAAU,EAAE,OAAO,CAAC,GAAG;YACvB,MAAM,EAAE,MAAM;YACd,YAAY,EAAE,OAAO,CAAC,YAAY,EAAE;YACpC,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACR,CAAC;IAChC,CAAC,CAAC,CAAC;AACL,CAAC;AAED,SAAS,gBAAgB,CAAC,KAAwC;IAChE,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;QACxC,EAAE,EAAE,IAAA,mBAAU,GAAE;QAChB,IAAI,EAAE,UAAU,CAAC,IAAI;QACrB,IAAI,EAAE,UAAU,CAAC,IAAI;QACrB,IAAI,EAAE,UAAU,CAAC,IAAI;QACrB,WAAW,EAAE,UAAU,CAAC,WAAW;QACnC,OAAO,EAAE,UAAU,CAAC,OAAO;QAC3B,SAAS,EAAE,UAAU,CAAC,SAAS,IAAI,eAAe;QAClD,GAAG,EAAE,UAAU,CAAC,GAAG;QACnB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;KACpC,CAAC,CAAC,CAAC;AACN,CAAC;AAOD,MAAa,0BAA0B;IAC7B,QAAQ,GAAG,IAAI,GAAG,EAA0B,CAAC;IAC7C,cAAc,GAAG,IAAI,GAAG,EAAyB,CAAC;IACzC,IAAI,CAA2B;IAEhD,YAAY,IAAwC;QAClD,IAAI,CAAC,IAAI,GAAG;YACV,cAAc,EAAd,mCAAc;YACd,OAAO,EAAE,2BAAU;YACnB,GAAG,IAAI;SACoB,CAAC;IAChC,CAAC;IAED,YAAY;QACV,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;IAC7E,CAAC;IAED,UAAU,CAAC,EAAU;QACnB,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QACtC,OAAO,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IAC9C,CAAC;IAED,WAAW;QACT,OAAO,qCAAe,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAC9C,GAAG,EAAE,OAAO,CAAC,GAAG;YAChB,IAAI,EAAE,OAAO,CAAC,IAAI;YAClB,WAAW,EAAE,GAAG,OAAO,CAAC,IAAI,UAAU;YACtC,YAAY,EAAE,OAAO,CAAC,YAAY,EAAE;SACrC,CAAC,CAAC,CAAC;IACN,CAAC;IAED,eAAe;QACb,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC;IAC7C,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,KAAyB;QAC3C,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;YACvB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC7C,CAAC;QAED,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC;YACrD,SAAS,EAAE,SAAS;YACpB,WAAW,EAAE,KAAK,CAAC,WAAW;YAC9B,UAAU,EAAE,KAAK,CAAC,UAAU;SAC7B,CAAC,CAAC;QAEH,MAAM,UAAU,GAAG,eAAe,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QACrD,MAAM,MAAM,GAAG,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAC3C,MAAM,MAAM,GAAG,WAAW,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;QAC/C,MAAM,WAAW,GAAG,gBAAgB,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QAExD,MAAM,SAAS,GAAG,IAAA,mBAAU,GAAE,CAAC;QAC/B,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QACrC,MAAM,UAAU,GAAG,uCAAgB,CAAC,MAAM,CAAC,SAAS,EAAE,iBAAiB,EAAE;YACvE,SAAS;YACT,UAAU,EAAE,QAAQ,CAAC,EAAE;YACvB,WAAW,EAAE,KAAK,CAAC,WAAW;YAC9B,MAAM,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC;SAChD,CAAC,CAAC;QAEH,MAAM,OAAO,GAAmB;YAC9B,EAAE,EAAE,SAAS;YACb,IAAI,EAAE,KAAK,CAAC,IAAI;YAChB,WAAW,EAAE,KAAK,CAAC,WAAW;YAC9B,MAAM,EAAE,QAAQ;YAChB,KAAK,EAAE,KAAK,CAAC,KAAK,IAAI,OAAO;YAC7B,SAAS,EAAE,GAAG;YACd,SAAS,EAAE,GAAG;YACd,WAAW,EAAE,KAAK,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC;YAC9E,SAAS,EAAE,KAAK,CAAC,SAAS,IAAI,eAAe;YAC7C,QAAQ;YACR,MAAM;YACN,WAAW;YACX,UAAU;YACV,IAAI,EAAE,EAAE;YACR,MAAM;YACN,QAAQ,EAAE,EAAE;YACZ,YAAY,EAAE,UAAU,CAAC,EAAE;YAC3B,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE;YACvC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE;SAC1C,CAAC;QAEF,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QACtC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QACxC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;QAE/C,OAAO,KAAK,CAAC,OAAO,CAAC,CAAC;IACxB,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,KAAoB;QACjC,MAAM,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QACrD,MAAM,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,EAAE,KAAK,KAAK,CAAC,eAAe,CAAC,CAAC;QAC5F,IAAI,CAAC,UAAU,EAAE,CAAC;YAChB,MAAM,IAAI,KAAK,CAAC,sBAAsB,KAAK,CAAC,eAAe,EAAE,CAAC,CAAC;QACjE,CAAC;QAED,MAAM,OAAO,GAAG,KAAK,CAAC,SAAS,EAAE,OAAO,IAAI,UAAU,CAAC,OAAO,CAAC;QAC/D,MAAM,WAAW,GAAG;YAClB,GAAG,UAAU,CAAC,WAAW;YACzB,GAAG,KAAK,CAAC,SAAS,EAAE,WAAW;SAChC,CAAC;QACF,MAAM,SAAS,GAAG,KAAK,CAAC,SAAS,EAAE,SAAS,IAAI,UAAU,CAAC,SAAS,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;QAEtF,MAAM,KAAK,GAAG,IAAA,mBAAU,GAAE,CAAC;QAC3B,MAAM,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC3C,MAAM,UAAU,GAAG,uCAAgB,CAAC,MAAM,CAAC,SAAS,EAAE,aAAa,EAAE;YACnE,SAAS,EAAE,OAAO,CAAC,EAAE;YACrB,KAAK;YACL,OAAO;YACP,WAAW;YACX,SAAS;SACV,CAAC,CAAC;QAEH,MAAM,GAAG,GAAiB;YACxB,EAAE,EAAE,KAAK;YACT,YAAY,EAAE,UAAU,CAAC,EAAE;YAC3B,MAAM,EAAE,SAAS;YACjB,SAAS;YACT,YAAY,EAAE,UAAU,CAAC,EAAE;YAC3B,IAAI,EAAE,EAAE;SACT,CAAC;QAEF,OAAO,CAAC,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;QACtC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAEpB,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC;QACpD,MAAM,OAAO,GAAG,CAAC,MAA6B,EAAE,OAAe,EAAE,EAAE;YACjE,MAAM,KAAK,GAAgB;gBACzB,EAAE,EAAE,IAAA,mBAAU,GAAE;gBAChB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,MAAM;gBACN,OAAO;aACR,CAAC;YACF,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACrB,OAAO,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,OAAO,CAAC,EAAE,EAAE,KAAK,EAAE,GAAG,CAAC,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;QACnE,CAAC,CAAC;QAEF,OAAO,CAAC,QAAQ,EAAE,WAAW,OAAO,EAAE,CAAC,CAAC;QACxC,MAAM,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;QACpE,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE,CAAC;YAC3B,OAAO,CAAC,QAAQ,EAAE,KAAK,KAAK,EAAE,CAAC,CAAC;YAChC,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;QACzD,CAAC;QAED,OAAO,CAAC,QAAQ,EAAE,mCAAmC,CAAC,CAAC;QACvD,GAAG,CAAC,MAAM,GAAG,WAAW,CAAC;QACzB,GAAG,CAAC,QAAQ,GAAG,CAAC,CAAC;QACjB,GAAG,CAAC,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC3C,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAEpB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;QAC9C,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QACvC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAEvC,uCAAgB,CAAC,MAAM,CAAC,SAAS,EAAE,eAAe,EAAE;YAClD,SAAS,EAAE,OAAO,CAAC,EAAE;YACrB,KAAK,EAAE,GAAG,CAAC,EAAE;YACb,QAAQ,EAAE,GAAG,CAAC,QAAQ;SACvB,CAAC,CAAC;QAEH,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC;IACpB,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,KAAyB;QAC3C,MAAM,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QACrD,MAAM,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,SAAS,CAAC,EAAE,KAAK,KAAK,CAAC,OAAO,CAAC,CAAC;QACjF,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,KAAK,CAAC,iBAAiB,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QACpD,CAAC;QACD,MAAM,OAAO,GAAG,qCAAe,CAAC,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QAEtD,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC;QACzD,MAAM,WAAW,GAAqB;YACpC,EAAE,EAAE,IAAA,mBAAU,GAAE;YAChB,OAAO,EAAE,KAAK,CAAC,EAAE;YACjB,IAAI;YACJ,OAAO,EAAE,KAAK,CAAC,OAAO;YACtB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;YACnC,aAAa,EAAE,KAAK,CAAC,aAAa;YAClC,UAAU,EAAE,KAAK,CAAC,UAAU;SAC7B,CAAC;QACF,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACnC,uCAAgB,CAAC,MAAM,CAAC,SAAS,EAAE,cAAc,EAAE,WAAW,CAAC,CAAC;QAEhE,MAAM,gBAAgB,GAAG,MAAM,OAAO,CAAC,WAAW,CAAC;YACjD,SAAS,EAAE,OAAO,CAAC,EAAE;YACrB,OAAO,EAAE,KAAK,CAAC,EAAE;YACjB,OAAO,EAAE,KAAK,CAAC,OAAO;YACtB,WAAW,EAAE,KAAK,CAAC,aAAa;SACjC,CAAC,CAAC;QACH,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QACxC,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAEpB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;QAC9C,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAEzC,OAAO,KAAK,CAAC,gBAAgB,CAAC,CAAC;IACjC,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,SAAiB,EAAE,OAAe;QAChD,MAAM,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QAC/C,MAAM,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,SAAS,CAAC,EAAE,KAAK,OAAO,CAAC,CAAC;QAC3E,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,KAAK,CAAC,iBAAiB,OAAO,EAAE,CAAC,CAAC;QAC9C,CAAC;QACD,MAAM,OAAO,GAAG,qCAAe,CAAC,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QACtD,OAAO,OAAO,CAAC,eAAe,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IACrD,CAAC;IAED,YAAY,CAAC,KAAwB;QACnC,MAAM,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QACrD,MAAM,SAAS,GAAG,IAAI,GAAG,CACvB,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,CAC3D,CAAC;QACF,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAC5C,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC;YACrB,CAAC,CAAC,EAAE,GAAG,KAAK,EAAE,MAAM,EAAE,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAE,EAAE;YAChD,CAAC,CAAC,KAAK,CACV,CAAC;QACF,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACpB,uCAAgB,CAAC,MAAM,CAAC,SAAS,EAAE,sBAAsB,EAAE;YACzD,SAAS,EAAE,OAAO,CAAC,EAAE;YACrB,MAAM,EAAE,KAAK,CAAC,MAAM;SACrB,CAAC,CAAC;QACH,OAAO,KAAK,CAAC,OAAO,CAAC,CAAC;IACxB,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,KAAwB;QACzC,MAAM,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QACrD,OAAO,CAAC,MAAM,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACpB,MAAM,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QACjE,OAAO,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACpB,uCAAgB,CAAC,MAAM,CAAC,SAAS,EAAE,gBAAgB,EAAE,EAAE,SAAS,EAAE,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC;QAChF,OAAO,KAAK,CAAC,OAAO,CAAC,CAAC;IACxB,CAAC;IAED,kBAAkB,CAChB,SAAiB,EACjB,KAAa,EACb,QAAsC;QAEtC,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QAClD,OAAO,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC;IAEO,UAAU,CAAC,SAAiB,EAAE,KAAa;QACjD,MAAM,GAAG,GAAG,GAAG,SAAS,IAAI,KAAK,EAAE,CAAC;QACpC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC;YAClC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,aAAa,EAAE,CAAC,CAAC;QACpD,CAAC;QACD,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,CAAE,CAAC;IACvC,CAAC;IAEO,cAAc,CAAC,EAAU;QAC/B,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QACtC,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,IAAI,KAAK,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAAC;QAC3C,CAAC;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;IAEO,KAAK,CAAC,OAAuB;QACnC,OAAO,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC7C,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC;QACjD,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC;IACrD,CAAC;CACF;AA7QD,gEA6QC;AAEY,QAAA,mBAAmB,GAAG,IAAI,0BAA0B,EAAE,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/server/src/crystal/session-orchestrator.ts"],"sourcesContent":["import { EventEmitter } from 'events';\nimport { randomUUID } from 'crypto';\nimport { adapterRegistry } from './adapter-registry.js';\nimport { provenanceLedger } from './provenance-ledger.js';\nimport { sloMetrics, SLOMetrics } from './slo-metrics.js';\nimport { worktreeEngine, WorktreeEngine } from './worktree-engine.js';\nimport {\n  PanelType,\n  type AgentRegistration,\n  type AssistantMessage,\n  type CloseSessionInput,\n  type CreateSessionInput,\n  type CrystalPanel,\n  type CrystalSession,\n  type RecordMessageInput,\n  type RunExecution,\n  type RunLogEntry,\n  type RunScriptDefinition,\n  type StartRunInput,\n  type UpdatePanelsInput,\n  type PanelLayout,\n} from './types.js';\n\ninterface RunLogEvent {\n  sessionId: string;\n  runId: string;\n  entry: RunLogEntry;\n}\n\nclass RunLogEmitter extends EventEmitter {\n  emitLog(event: RunLogEvent) {\n    this.emit('log', event);\n  }\n\n  onLog(listener: (event: RunLogEvent) => void) {\n    this.on('log', listener);\n    return () => this.off('log', listener);\n  }\n}\n\nfunction clone<T>(value: T): T {\n  return structuredClone ? structuredClone(value) : JSON.parse(JSON.stringify(value));\n}\n\nfunction buildPanels(presets?: CreateSessionInput['panelPresets']): CrystalPanel[] {\n  const items = presets?.length\n    ? presets\n    : [\n        { type: PanelType.AGENT, name: 'Claude Code' },\n        { type: PanelType.AGENT, name: 'Codex' },\n        { type: PanelType.TERMINAL, name: 'Terminal' },\n        { type: PanelType.DIFF, name: 'Diff Viewer' },\n        { type: PanelType.EDITOR, name: 'Editor' },\n        { type: PanelType.LOGS, name: 'Run Logs' },\n      ];\n  return items.map((panel, index) => ({\n    id: randomUUID(),\n    type: panel.type,\n    name: panel.name ?? panel.type,\n    layout: {\n      x: (index % 2) * 6,\n      y: Math.floor(index / 2) * 6,\n      w: 6,\n      h: 6,\n      preset: panel.preset,\n    },\n  }));\n}\n\nfunction buildRunScripts(defs?: CreateSessionInput['runScripts']): RunScriptDefinition[] {\n  return (defs || []).map((def) => ({\n    id: randomUUID(),\n    name: def.name,\n    command: def.command,\n    timeoutMs: def.timeoutMs,\n    environment: def.environment,\n  }));\n}\n\nfunction buildAgents(adapters?: string[]): AgentRegistration[] {\n  const adapterKeys = adapters?.length ? adapters : ['claude-code', 'codex'];\n  return adapterKeys.map((key) => {\n    const adapter = adapterRegistry.get(key);\n    return {\n      id: randomUUID(),\n      adapterKey: adapter.key,\n      status: 'idle',\n      capabilities: adapter.capabilities(),\n      createdAt: new Date().toISOString(),\n    } satisfies AgentRegistration;\n  });\n}\n\nfunction buildAttachments(input: CreateSessionInput['attachments']) {\n  return (input || []).map((attachment) => ({\n    id: randomUUID(),\n    type: attachment.type,\n    name: attachment.name,\n    size: attachment.size,\n    contentType: attachment.contentType,\n    purpose: attachment.purpose,\n    retention: attachment.retention || 'standard-365d',\n    uri: attachment.uri,\n    createdAt: new Date().toISOString(),\n  }));\n}\n\nexport interface OrchestratorDependencies {\n  worktreeEngine: WorktreeEngine;\n  metrics: SLOMetrics;\n}\n\nexport class CrystalSessionOrchestrator {\n  private sessions = new Map<string, CrystalSession>();\n  private runLogEmitters = new Map<string, RunLogEmitter>();\n  private readonly deps: OrchestratorDependencies;\n\n  constructor(deps?: Partial<OrchestratorDependencies>) {\n    this.deps = {\n      worktreeEngine,\n      metrics: sloMetrics,\n      ...deps,\n    } as OrchestratorDependencies;\n  }\n\n  listSessions(): CrystalSession[] {\n    return Array.from(this.sessions.values()).map((session) => clone(session));\n  }\n\n  getSession(id: string): CrystalSession | undefined {\n    const session = this.sessions.get(id);\n    return session ? clone(session) : undefined;\n  }\n\n  getAdapters() {\n    return adapterRegistry.list().map((adapter) => ({\n      key: adapter.key,\n      name: adapter.name,\n      description: `${adapter.name} adapter`,\n      capabilities: adapter.capabilities(),\n    }));\n  }\n\n  getCostSnapshot() {\n    return this.deps.metrics.getCostSnapshot();\n  }\n\n  async createSession(input: CreateSessionInput): Promise<CrystalSession> {\n    if (!input.projectPath) {\n      throw new Error('projectPath is required');\n    }\n\n    const worktree = await this.deps.worktreeEngine.create({\n      sessionId: 'pending',\n      projectPath: input.projectPath,\n      mainBranch: input.mainBranch,\n    });\n\n    const runScripts = buildRunScripts(input.runScripts);\n    const agents = buildAgents(input.adapters);\n    const panels = buildPanels(input.panelPresets);\n    const attachments = buildAttachments(input.attachments);\n\n    const sessionId = randomUUID();\n    const now = new Date().toISOString();\n    const provenance = provenanceLedger.record('crystal', 'session-created', {\n      sessionId,\n      worktreeId: worktree.id,\n      projectPath: input.projectPath,\n      agents: agents.map((agent) => agent.adapterKey),\n    });\n\n    const session: CrystalSession = {\n      id: sessionId,\n      name: input.name,\n      description: input.description,\n      status: 'active',\n      theme: input.theme || 'light',\n      createdAt: now,\n      updatedAt: now,\n      purposeTags: input.purposeTags?.length ? input.purposeTags : ['investigation'],\n      retention: input.retention || 'standard-365d',\n      worktree,\n      panels,\n      attachments,\n      runScripts,\n      runs: [],\n      agents,\n      messages: [],\n      provenanceId: provenance.id,\n      slo: this.deps.metrics.getSLOSnapshot(),\n      cost: this.deps.metrics.getCostSnapshot(),\n    };\n\n    this.sessions.set(sessionId, session);\n    this.deps.metrics.recordCost('dev', 25);\n    this.deps.metrics.observeGateway('write', 120);\n\n    return clone(session);\n  }\n\n  async startRun(input: StartRunInput): Promise<RunExecution> {\n    const session = this.requireSession(input.sessionId);\n    const definition = session.runScripts.find((script) => script.id === input.runDefinitionId);\n    if (!definition) {\n      throw new Error(`Unknown run script ${input.runDefinitionId}`);\n    }\n\n    const command = input.overrides?.command || definition.command;\n    const environment = {\n      ...definition.environment,\n      ...input.overrides?.environment,\n    };\n    const timeoutMs = input.overrides?.timeoutMs ?? definition.timeoutMs ?? 5 * 60 * 1000;\n\n    const runId = randomUUID();\n    const startedAt = new Date().toISOString();\n    const provenance = provenanceLedger.record('crystal', 'run-started', {\n      sessionId: session.id,\n      runId,\n      command,\n      environment,\n      timeoutMs,\n    });\n\n    const run: RunExecution = {\n      id: runId,\n      definitionId: definition.id,\n      status: 'running',\n      startedAt,\n      provenanceId: provenance.id,\n      logs: [],\n    };\n\n    session.runs = [run, ...session.runs];\n    this.touch(session);\n\n    const emitter = this.getEmitter(session.id, run.id);\n    const pushLog = (stream: RunLogEntry['stream'], message: string) => {\n      const entry: RunLogEntry = {\n        id: randomUUID(),\n        timestamp: new Date().toISOString(),\n        stream,\n        message,\n      };\n      run.logs.push(entry);\n      emitter.emitLog({ sessionId: session.id, runId: run.id, entry });\n    };\n\n    pushLog('system', `Running ${command}`);\n    const phases = command.split('&&').map((segment) => segment.trim());\n    for (const phase of phases) {\n      pushLog('stdout', `$ ${phase}`);\n      await new Promise((resolve) => setTimeout(resolve, 0));\n    }\n\n    pushLog('stdout', 'Execution completed successfully.');\n    run.status = 'succeeded';\n    run.exitCode = 0;\n    run.completedAt = new Date().toISOString();\n    this.touch(session);\n\n    this.deps.metrics.observeGateway('read', 180);\n    this.deps.metrics.observeGraph(2, 240);\n    this.deps.metrics.recordCost('dev', 5);\n\n    provenanceLedger.record('crystal', 'run-completed', {\n      sessionId: session.id,\n      runId: run.id,\n      exitCode: run.exitCode,\n    });\n\n    return clone(run);\n  }\n\n  async recordMessage(input: RecordMessageInput): Promise<AssistantMessage> {\n    const session = this.requireSession(input.sessionId);\n    const agent = session.agents.find((candidate) => candidate.id === input.agentId);\n    if (!agent) {\n      throw new Error(`Unknown agent ${input.agentId}`);\n    }\n    const adapter = adapterRegistry.get(agent.adapterKey);\n\n    const role = input.role === 'system' ? 'system' : 'user';\n    const userMessage: AssistantMessage = {\n      id: randomUUID(),\n      agentId: agent.id,\n      role,\n      content: input.content,\n      createdAt: new Date().toISOString(),\n      attachmentIds: input.attachmentIds,\n      richOutput: input.richOutput,\n    };\n    session.messages.push(userMessage);\n    provenanceLedger.record('crystal', 'user-message', userMessage);\n\n    const assistantMessage = await adapter.sendMessage({\n      sessionId: session.id,\n      agentId: agent.id,\n      content: input.content,\n      attachments: input.attachmentIds,\n    });\n    session.messages.push(assistantMessage);\n    agent.status = 'idle';\n    this.touch(session);\n\n    this.deps.metrics.observeGateway('read', 150);\n    this.deps.metrics.recordCost('llm', 1.2);\n\n    return clone(assistantMessage);\n  }\n\n  async summarize(sessionId: string, agentId: string) {\n    const session = this.requireSession(sessionId);\n    const agent = session.agents.find((candidate) => candidate.id === agentId);\n    if (!agent) {\n      throw new Error(`Unknown agent ${agentId}`);\n    }\n    const adapter = adapterRegistry.get(agent.adapterKey);\n    return adapter.summarizeThread(sessionId, agentId);\n  }\n\n  updatePanels(input: UpdatePanelsInput): CrystalSession {\n    const session = this.requireSession(input.sessionId);\n    const layoutMap = new Map<string, PanelLayout>(\n      input.panels.map((panel) => [panel.panelId, panel.layout])\n    );\n    session.panels = session.panels.map((panel) =>\n      layoutMap.has(panel.id)\n        ? { ...panel, layout: layoutMap.get(panel.id)! }\n        : panel\n    );\n    this.touch(session);\n    provenanceLedger.record('crystal', 'panel-layout-updated', {\n      sessionId: session.id,\n      panels: input.panels,\n    });\n    return clone(session);\n  }\n\n  async closeSession(input: CloseSessionInput): Promise<CrystalSession> {\n    const session = this.requireSession(input.sessionId);\n    session.status = 'closing';\n    this.touch(session);\n    await this.deps.worktreeEngine.deleteQueued(session.worktree.id);\n    session.status = 'closed';\n    this.touch(session);\n    provenanceLedger.record('crystal', 'session-closed', { sessionId: session.id });\n    return clone(session);\n  }\n\n  subscribeToRunLogs(\n    sessionId: string,\n    runId: string,\n    listener: (event: RunLogEvent) => void\n  ): () => void {\n    const emitter = this.getEmitter(sessionId, runId);\n    return emitter.onLog(listener);\n  }\n\n  private getEmitter(sessionId: string, runId: string): RunLogEmitter {\n    const key = `${sessionId}:${runId}`;\n    if (!this.runLogEmitters.has(key)) {\n      this.runLogEmitters.set(key, new RunLogEmitter());\n    }\n    return this.runLogEmitters.get(key)!;\n  }\n\n  private requireSession(id: string): CrystalSession {\n    const session = this.sessions.get(id);\n    if (!session) {\n      throw new Error(`Unknown session ${id}`);\n    }\n    return session;\n  }\n\n  private touch(session: CrystalSession) {\n    session.updatedAt = new Date().toISOString();\n    session.slo = this.deps.metrics.getSLOSnapshot();\n    session.cost = this.deps.metrics.getCostSnapshot();\n  }\n}\n\nexport const crystalOrchestrator = new CrystalSessionOrchestrator();\n"],"version":3}