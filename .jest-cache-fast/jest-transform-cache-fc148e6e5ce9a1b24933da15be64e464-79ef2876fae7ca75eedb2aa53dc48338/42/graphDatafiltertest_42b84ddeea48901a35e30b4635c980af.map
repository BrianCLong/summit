{"file":"/Users/brianlong/Developer/summit/server/tests/graphData.filter.test.ts","mappings":"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","names":[],"sources":["/Users/brianlong/Developer/summit/server/tests/graphData.filter.test.ts"],"sourcesContent":["import { crudResolvers } from \"../src/graphql/resolvers/crudResolvers\";\n\nlet session: any;\n\njest.mock(\"../src/config/database.js\", () => ({\n  getNeo4jDriver: () => ({ session: () => session }),\n  getPostgresPool: () => ({ query: jest.fn() }),\n  getRedisClient: () => ({\n    get: jest.fn(),\n    set: jest.fn(),\n    sadd: jest.fn(),\n    smembers: jest.fn(),\n    del: jest.fn(),\n  }),\n}));\n\ndescribe(\"graphData filtering\", () => {\n  beforeEach(() => {\n    session = { run: jest.fn(), close: jest.fn() };\n  });\n\n  test(\"applies confidence, tag, and time filters\", async () => {\n    const nodeRecords = [\n      {\n        get: () => ({\n          properties: {\n            id: \"1\",\n            confidence: 0.9,\n            createdAt: \"2024-01-01T00:00:00.000Z\",\n            customMetadata: JSON.stringify({ tags: [\"keep\"] }),\n          },\n        }),\n      },\n      {\n        get: () => ({\n          properties: {\n            id: \"2\",\n            confidence: 0.5,\n            createdAt: \"2024-01-01T00:00:00.000Z\",\n            customMetadata: JSON.stringify({ tags: [\"drop\"] }),\n          },\n        }),\n      },\n    ];\n\n    const edgeRecord = {\n      get: (key: string) => {\n        if (key === \"r\")\n          return {\n            properties: {\n              id: \"e1\",\n              confidence: 0.95,\n              createdAt: \"2024-01-01T00:00:00.000Z\",\n              customMetadata: JSON.stringify({ tags: [\"keep\"] }),\n            },\n          };\n        if (key === \"from\")\n          return { properties: nodeRecords[0].get().properties };\n        return { properties: nodeRecords[1].get().properties };\n      },\n    };\n\n    session.run\n      .mockResolvedValueOnce({ records: nodeRecords })\n      .mockResolvedValueOnce({ records: [edgeRecord] });\n\n    const result = await crudResolvers.Query.graphData(\n      null,\n      {\n        investigationId: \"inv1\",\n        filter: {\n          minConfidence: 0.8,\n          tags: [\"keep\"],\n          startDate: \"2023-12-01T00:00:00.000Z\",\n          endDate: \"2024-12-31T00:00:00.000Z\",\n        },\n      },\n      { user: { id: \"u1\" } },\n    );\n\n    expect(result.nodes).toHaveLength(1);\n    expect(result.nodes[0].id).toBe(\"1\");\n    expect(result.edges).toHaveLength(0);\n  });\n});\n"],"version":3}