e190e92ac134eaaa5869c95e34ba584f
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock("../src/config/database.js", () => ({
    getNeo4jDriver: () => ({ session: () => session }),
    getPostgresPool: () => ({ query: jest.fn() }),
    getRedisClient: () => ({
        get: jest.fn(),
        set: jest.fn(),
        sadd: jest.fn(),
        smembers: jest.fn(),
        del: jest.fn(),
    }),
}));
const crudResolvers_1 = require("../src/graphql/resolvers/crudResolvers");
let session;
describe("graphData filtering", () => {
    beforeEach(() => {
        session = { run: jest.fn(), close: jest.fn() };
    });
    test("applies confidence, tag, and time filters", async () => {
        const nodeRecords = [
            {
                get: () => ({
                    properties: {
                        id: "1",
                        confidence: 0.9,
                        createdAt: "2024-01-01T00:00:00.000Z",
                        customMetadata: JSON.stringify({ tags: ["keep"] }),
                    },
                }),
            },
            {
                get: () => ({
                    properties: {
                        id: "2",
                        confidence: 0.5,
                        createdAt: "2024-01-01T00:00:00.000Z",
                        customMetadata: JSON.stringify({ tags: ["drop"] }),
                    },
                }),
            },
        ];
        const edgeRecord = {
            get: (key) => {
                if (key === "r")
                    return {
                        properties: {
                            id: "e1",
                            confidence: 0.95,
                            createdAt: "2024-01-01T00:00:00.000Z",
                            customMetadata: JSON.stringify({ tags: ["keep"] }),
                        },
                    };
                if (key === "from")
                    return { properties: nodeRecords[0].get().properties };
                return { properties: nodeRecords[1].get().properties };
            },
        };
        session.run
            .mockResolvedValueOnce({ records: nodeRecords })
            .mockResolvedValueOnce({ records: [edgeRecord] });
        const result = await crudResolvers_1.crudResolvers.Query.graphData(null, {
            investigationId: "inv1",
            filter: {
                minConfidence: 0.8,
                tags: ["keep"],
                startDate: "2023-12-01T00:00:00.000Z",
                endDate: "2024-12-31T00:00:00.000Z",
            },
        }, { user: { id: "u1" } });
        expect(result.nodes).toHaveLength(1);
        expect(result.nodes[0].id).toBe("1");
        expect(result.edges).toHaveLength(0);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3NlcnZlci90ZXN0cy9ncmFwaERhdGEuZmlsdGVyLnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7QUFJQSxJQUFJLENBQUMsSUFBSSxDQUFDLDJCQUEyQixFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDNUMsY0FBYyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDbEQsZUFBZSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7SUFDN0MsY0FBYyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDckIsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7UUFDZCxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNkLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO1FBQ2YsUUFBUSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7UUFDbkIsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7S0FDZixDQUFDO0NBQ0gsQ0FBQyxDQUFDLENBQUM7QUFkSiwwRUFBdUU7QUFFdkUsSUFBSSxPQUFZLENBQUM7QUFjakIsUUFBUSxDQUFDLHFCQUFxQixFQUFFLEdBQUcsRUFBRTtJQUNuQyxVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsT0FBTyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7SUFDakQsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsMkNBQTJDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDM0QsTUFBTSxXQUFXLEdBQUc7WUFDbEI7Z0JBQ0UsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7b0JBQ1YsVUFBVSxFQUFFO3dCQUNWLEVBQUUsRUFBRSxHQUFHO3dCQUNQLFVBQVUsRUFBRSxHQUFHO3dCQUNmLFNBQVMsRUFBRSwwQkFBMEI7d0JBQ3JDLGNBQWMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztxQkFDbkQ7aUJBQ0YsQ0FBQzthQUNIO1lBQ0Q7Z0JBQ0UsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7b0JBQ1YsVUFBVSxFQUFFO3dCQUNWLEVBQUUsRUFBRSxHQUFHO3dCQUNQLFVBQVUsRUFBRSxHQUFHO3dCQUNmLFNBQVMsRUFBRSwwQkFBMEI7d0JBQ3JDLGNBQWMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztxQkFDbkQ7aUJBQ0YsQ0FBQzthQUNIO1NBQ0YsQ0FBQztRQUVGLE1BQU0sVUFBVSxHQUFHO1lBQ2pCLEdBQUcsRUFBRSxDQUFDLEdBQVcsRUFBRSxFQUFFO2dCQUNuQixJQUFJLEdBQUcsS0FBSyxHQUFHO29CQUNiLE9BQU87d0JBQ0wsVUFBVSxFQUFFOzRCQUNWLEVBQUUsRUFBRSxJQUFJOzRCQUNSLFVBQVUsRUFBRSxJQUFJOzRCQUNoQixTQUFTLEVBQUUsMEJBQTBCOzRCQUNyQyxjQUFjLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7eUJBQ25EO3FCQUNGLENBQUM7Z0JBQ0osSUFBSSxHQUFHLEtBQUssTUFBTTtvQkFDaEIsT0FBTyxFQUFFLFVBQVUsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUM7Z0JBQ3pELE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQ3pELENBQUM7U0FDRixDQUFDO1FBRUYsT0FBTyxDQUFDLEdBQUc7YUFDUixxQkFBcUIsQ0FBQyxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsQ0FBQzthQUMvQyxxQkFBcUIsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUVwRCxNQUFNLE1BQU0sR0FBRyxNQUFNLDZCQUFhLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FDaEQsSUFBSSxFQUNKO1lBQ0UsZUFBZSxFQUFFLE1BQU07WUFDdkIsTUFBTSxFQUFFO2dCQUNOLGFBQWEsRUFBRSxHQUFHO2dCQUNsQixJQUFJLEVBQUUsQ0FBQyxNQUFNLENBQUM7Z0JBQ2QsU0FBUyxFQUFFLDBCQUEwQjtnQkFDckMsT0FBTyxFQUFFLDBCQUEwQjthQUNwQztTQUNGLEVBQ0QsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FDdkIsQ0FBQztRQUVGLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNyQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2QyxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9icmlhbmxvbmcvRGV2ZWxvcGVyL3N1bW1pdC9zZXJ2ZXIvdGVzdHMvZ3JhcGhEYXRhLmZpbHRlci50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNydWRSZXNvbHZlcnMgfSBmcm9tIFwiLi4vc3JjL2dyYXBocWwvcmVzb2x2ZXJzL2NydWRSZXNvbHZlcnNcIjtcblxubGV0IHNlc3Npb246IGFueTtcblxuamVzdC5tb2NrKFwiLi4vc3JjL2NvbmZpZy9kYXRhYmFzZS5qc1wiLCAoKSA9PiAoe1xuICBnZXROZW80akRyaXZlcjogKCkgPT4gKHsgc2Vzc2lvbjogKCkgPT4gc2Vzc2lvbiB9KSxcbiAgZ2V0UG9zdGdyZXNQb29sOiAoKSA9PiAoeyBxdWVyeTogamVzdC5mbigpIH0pLFxuICBnZXRSZWRpc0NsaWVudDogKCkgPT4gKHtcbiAgICBnZXQ6IGplc3QuZm4oKSxcbiAgICBzZXQ6IGplc3QuZm4oKSxcbiAgICBzYWRkOiBqZXN0LmZuKCksXG4gICAgc21lbWJlcnM6IGplc3QuZm4oKSxcbiAgICBkZWw6IGplc3QuZm4oKSxcbiAgfSksXG59KSk7XG5cbmRlc2NyaWJlKFwiZ3JhcGhEYXRhIGZpbHRlcmluZ1wiLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIHNlc3Npb24gPSB7IHJ1bjogamVzdC5mbigpLCBjbG9zZTogamVzdC5mbigpIH07XG4gIH0pO1xuXG4gIHRlc3QoXCJhcHBsaWVzIGNvbmZpZGVuY2UsIHRhZywgYW5kIHRpbWUgZmlsdGVyc1wiLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qgbm9kZVJlY29yZHMgPSBbXG4gICAgICB7XG4gICAgICAgIGdldDogKCkgPT4gKHtcbiAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBpZDogXCIxXCIsXG4gICAgICAgICAgICBjb25maWRlbmNlOiAwLjksXG4gICAgICAgICAgICBjcmVhdGVkQXQ6IFwiMjAyNC0wMS0wMVQwMDowMDowMC4wMDBaXCIsXG4gICAgICAgICAgICBjdXN0b21NZXRhZGF0YTogSlNPTi5zdHJpbmdpZnkoeyB0YWdzOiBbXCJrZWVwXCJdIH0pLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgZ2V0OiAoKSA9PiAoe1xuICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGlkOiBcIjJcIixcbiAgICAgICAgICAgIGNvbmZpZGVuY2U6IDAuNSxcbiAgICAgICAgICAgIGNyZWF0ZWRBdDogXCIyMDI0LTAxLTAxVDAwOjAwOjAwLjAwMFpcIixcbiAgICAgICAgICAgIGN1c3RvbU1ldGFkYXRhOiBKU09OLnN0cmluZ2lmeSh7IHRhZ3M6IFtcImRyb3BcIl0gfSksXG4gICAgICAgICAgfSxcbiAgICAgICAgfSksXG4gICAgICB9LFxuICAgIF07XG5cbiAgICBjb25zdCBlZGdlUmVjb3JkID0ge1xuICAgICAgZ2V0OiAoa2V5OiBzdHJpbmcpID0+IHtcbiAgICAgICAgaWYgKGtleSA9PT0gXCJyXCIpXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgICAgaWQ6IFwiZTFcIixcbiAgICAgICAgICAgICAgY29uZmlkZW5jZTogMC45NSxcbiAgICAgICAgICAgICAgY3JlYXRlZEF0OiBcIjIwMjQtMDEtMDFUMDA6MDA6MDAuMDAwWlwiLFxuICAgICAgICAgICAgICBjdXN0b21NZXRhZGF0YTogSlNPTi5zdHJpbmdpZnkoeyB0YWdzOiBbXCJrZWVwXCJdIH0pLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9O1xuICAgICAgICBpZiAoa2V5ID09PSBcImZyb21cIilcbiAgICAgICAgICByZXR1cm4geyBwcm9wZXJ0aWVzOiBub2RlUmVjb3Jkc1swXS5nZXQoKS5wcm9wZXJ0aWVzIH07XG4gICAgICAgIHJldHVybiB7IHByb3BlcnRpZXM6IG5vZGVSZWNvcmRzWzFdLmdldCgpLnByb3BlcnRpZXMgfTtcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIHNlc3Npb24ucnVuXG4gICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHsgcmVjb3Jkczogbm9kZVJlY29yZHMgfSlcbiAgICAgIC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UoeyByZWNvcmRzOiBbZWRnZVJlY29yZF0gfSk7XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjcnVkUmVzb2x2ZXJzLlF1ZXJ5LmdyYXBoRGF0YShcbiAgICAgIG51bGwsXG4gICAgICB7XG4gICAgICAgIGludmVzdGlnYXRpb25JZDogXCJpbnYxXCIsXG4gICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgIG1pbkNvbmZpZGVuY2U6IDAuOCxcbiAgICAgICAgICB0YWdzOiBbXCJrZWVwXCJdLFxuICAgICAgICAgIHN0YXJ0RGF0ZTogXCIyMDIzLTEyLTAxVDAwOjAwOjAwLjAwMFpcIixcbiAgICAgICAgICBlbmREYXRlOiBcIjIwMjQtMTItMzFUMDA6MDA6MDAuMDAwWlwiLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHsgdXNlcjogeyBpZDogXCJ1MVwiIH0gfSxcbiAgICApO1xuXG4gICAgZXhwZWN0KHJlc3VsdC5ub2RlcykudG9IYXZlTGVuZ3RoKDEpO1xuICAgIGV4cGVjdChyZXN1bHQubm9kZXNbMF0uaWQpLnRvQmUoXCIxXCIpO1xuICAgIGV4cGVjdChyZXN1bHQuZWRnZXMpLnRvSGF2ZUxlbmd0aCgwKTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==