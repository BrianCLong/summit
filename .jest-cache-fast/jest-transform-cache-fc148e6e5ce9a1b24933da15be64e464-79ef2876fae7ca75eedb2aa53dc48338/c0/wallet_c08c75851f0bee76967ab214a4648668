9cf61c1c80fe5bf416f2b4cbeb3f6fc1
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.signManifest = signManifest;
exports.verifyManifest = verifyManifest;
exports.buildWallet = buildWallet;
exports.disclose = disclose;
exports.verifyDisclosure = verifyDisclosure;
const crypto_1 = require("crypto");
const merkle_1 = require("./merkle");
function signManifest(m, privatePem) {
    const signer = (0, crypto_1.createSign)('RSA-SHA256');
    signer.update(JSON.stringify(m));
    return { ...m, signature: signer.sign(privatePem, 'base64') };
}
function verifyManifest(m, publicPem) {
    const v = (0, crypto_1.createVerify)('RSA-SHA256');
    const body = { ...m };
    delete body.signature;
    v.update(JSON.stringify(body));
    return v.verify(publicPem, Buffer.from(m.signature, 'base64'));
}
// Build a full wallet from step commits
function buildWallet(runId, caseId, steps, privatePem, signerId = 'prov-ledger@intelgraph') {
    const leaves = steps.map(merkle_1.leafHash);
    const { root, layers } = (0, merkle_1.buildMerkle)(leaves);
    const manifestUnsigned = {
        runId, caseId, createdAt: new Date().toISOString(), merkleRoot: root, signer: signerId, algo: 'RSA-SHA256'
    };
    const manifest = signManifest(manifestUnsigned, privatePem);
    return { manifest, leaves, steps };
}
// Selectively disclose a subset (by step ids) with inclusion proofs
function disclose(selectStepIds, manifest, steps, leaves) {
    const idToIndex = new Map(steps.map((s, i) => [s.id, i]));
    const { layers } = (0, merkle_1.buildMerkle)(leaves);
    const disclosed = [];
    const proofs = [];
    for (const sid of selectStepIds) {
        const idx = idToIndex.get(sid);
        if (idx === undefined)
            continue;
        disclosed.push(steps[idx]);
        const leaf = leaves[idx];
        proofs.push({ stepId: sid, leaf, path: (0, merkle_1.proofForLeaf)(idx, layers) });
    }
    return { manifest, disclosedSteps: disclosed, proofs };
}
// Verify a selective disclosure bundle
function verifyDisclosure(b, publicPem) {
    if (!verifyManifest(b.manifest, publicPem))
        return false;
    for (let i = 0; i < b.disclosedSteps.length; i++) {
        const s = b.disclosedSteps[i];
        const pr = b.proofs.find(p => p.stepId === s.id);
        if (!pr)
            return false;
        const leaf = (0, merkle_1.leafHash)(s);
        if (leaf !== pr.leaf)
            return false;
        if (!(0, merkle_1.verifyProof)(pr.leaf, pr.path, b.manifest.merkleRoot))
            return false;
    }
    return true;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3BhY2thZ2VzL3Byb3YtbGVkZ2VyL3NyYy93YWxsZXQudHMiLCJtYXBwaW5ncyI6Ijs7QUFJQSxvQ0FHQztBQUVELHdDQUtDO0FBR0Qsa0NBUUM7QUFHRCw0QkFhQztBQUdELDRDQVdDO0FBdkRELG1DQUFrRDtBQUVsRCxxQ0FBNEU7QUFFNUUsU0FBZ0IsWUFBWSxDQUFDLENBQW1DLEVBQUUsVUFBa0I7SUFDbEYsTUFBTSxNQUFNLEdBQUcsSUFBQSxtQkFBVSxFQUFDLFlBQVksQ0FBQyxDQUFDO0lBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUUsT0FBTyxFQUFFLEdBQUcsQ0FBQyxFQUFFLFNBQVMsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsRUFBRSxDQUFDO0FBQ2hFLENBQUM7QUFFRCxTQUFnQixjQUFjLENBQUMsQ0FBaUIsRUFBRSxTQUFpQjtJQUNqRSxNQUFNLENBQUMsR0FBRyxJQUFBLHFCQUFZLEVBQUMsWUFBWSxDQUFDLENBQUM7SUFDckMsTUFBTSxJQUFJLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDO0lBQUMsT0FBUSxJQUFZLENBQUMsU0FBUyxDQUFDO0lBQ3RELENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQy9CLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDakUsQ0FBQztBQUVELHdDQUF3QztBQUN4QyxTQUFnQixXQUFXLENBQUMsS0FBYSxFQUFFLE1BQWMsRUFBRSxLQUFtQixFQUFFLFVBQWtCLEVBQUUsUUFBUSxHQUFDLHdCQUF3QjtJQUNuSSxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMs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QUFDO1lBQUUsT0FBTyxLQUFLLENBQUM7SUFDMUUsQ0FBQztJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvYnJpYW5sb25nL0RldmVsb3Blci9zdW1taXQvcGFja2FnZXMvcHJvdi1sZWRnZXIvc3JjL3dhbGxldC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVTaWduLCBjcmVhdGVWZXJpZnkgfSBmcm9tICdjcnlwdG8nO1xuaW1wb3J0IHsgU3RlcENvbW1pdCwgV2FsbGV0TWFuaWZlc3QsIFNlbGVjdGl2ZURpc2Nsb3N1cmVCdW5kbGUgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IGxlYWZIYXNoLCBidWlsZE1lcmtsZSwgcHJvb2ZGb3JMZWFmLCB2ZXJpZnlQcm9vZiB9IGZyb20gJy4vbWVya2xlJztcblxuZXhwb3J0IGZ1bmN0aW9uIHNpZ25NYW5pZmVzdChtOiBPbWl0PFdhbGxldE1hbmlmZXN0LCdzaWduYXR1cmUnPiwgcHJpdmF0ZVBlbTogc3RyaW5nKTogV2FsbGV0TWFuaWZlc3Qge1xuICBjb25zdCBzaWduZXIgPSBjcmVhdGVTaWduKCdSU0EtU0hBMjU2Jyk7IHNpZ25lci51cGRhdGUoSlNPTi5zdHJpbmdpZnkobSkpO1xuICByZXR1cm4geyAuLi5tLCBzaWduYXR1cmU6IHNpZ25lci5zaWduKHByaXZhdGVQZW0sICdiYXNlNjQnKSB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdmVyaWZ5TWFuaWZlc3QobTogV2FsbGV0TWFuaWZlc3QsIHB1YmxpY1BlbTogc3RyaW5nKTogYm9vbGVhbiB7XG4gIGNvbnN0IHYgPSBjcmVhdGVWZXJpZnkoJ1JTQS1TSEEyNTYnKTsgXG4gIGNvbnN0IGJvZHkgPSB7IC4uLm0gfTsgZGVsZXRlIChib2R5IGFzIGFueSkuc2lnbmF0dXJlO1xuICB2LnVwZGF0ZShKU09OLnN0cmluZ2lmeShib2R5KSk7XG4gIHJldHVybiB2LnZlcmlmeShwdWJsaWNQZW0sIEJ1ZmZlci5mcm9tKG0uc2lnbmF0dXJlLCAnYmFzZTY0JykpO1xufVxuXG4vLyBCdWlsZCBhIGZ1bGwgd2FsbGV0IGZyb20gc3RlcCBjb21taXRzXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRXYWxsZXQocnVuSWQ6IHN0cmluZywgY2FzZUlkOiBzdHJpbmcsIHN0ZXBzOiBTdGVwQ29tbWl0W10sIHByaXZhdGVQZW06IHN0cmluZywgc2lnbmVySWQ9J3Byb3YtbGVkZ2VyQGludGVsZ3JhcGgnKTogeyBtYW5pZmVzdDogV2FsbGV0TWFuaWZlc3Q7IGxlYXZlczogc3RyaW5nW107IHN0ZXBzOiBTdGVwQ29tbWl0W10gfSB7XG4gIGNvbnN0IGxlYXZlcyA9IHN0ZXBzLm1hcChsZWFmSGFzaCk7XG4gIGNvbnN0IHsgcm9vdCwgbGF5ZXJzIH0gPSBidWlsZE1lcmtsZShsZWF2ZXMpO1xuICBjb25zdCBtYW5pZmVzdFVuc2lnbmVkOiBPbWl0PFdhbGxldE1hbmlmZXN0LCdzaWduYXR1cmUnPiA9IHtcbiAgICBydW5JZCwgY2FzZUlkLCBjcmVhdGVkQXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSwgbWVya2xlUm9vdDogcm9vdCwgc2lnbmVyOiBzaWduZXJJZCwgYWxnbzogJ1JTQS1TSEEyNTYnXG4gIH07XG4gIGNvbnN0IG1hbmlmZXN0ID0gc2lnbk1hbmlmZXN0KG1hbmlmZXN0VW5zaWduZWQsIHByaXZhdGVQZW0pO1xuICByZXR1cm4geyBtYW5pZmVzdCwgbGVhdmVzLCBzdGVwcyB9O1xufVxuXG4vLyBTZWxlY3RpdmVseSBkaXNjbG9zZSBhIHN1YnNldCAoYnkgc3RlcCBpZHMpIHdpdGggaW5jbHVzaW9uIHByb29mc1xuZXhwb3J0IGZ1bmN0aW9uIGRpc2Nsb3NlKHNlbGVjdFN0ZXBJZHM6IHN0cmluZ1tdLCBtYW5pZmVzdDogV2FsbGV0TWFuaWZlc3QsIHN0ZXBzOiBTdGVwQ29tbWl0W10sIGxlYXZlczogc3RyaW5nW10pOiBTZWxlY3RpdmVEaXNjbG9zdXJlQnVuZGxlIHtcbiAgY29uc3QgaWRUb0luZGV4ID0gbmV3IE1hcChzdGVwcy5tYXAoKHMsaSk9PltzLmlkLGldKSk7XG4gIGNvbnN0IHsgbGF5ZXJzIH0gPSBidWlsZE1lcmtsZShsZWF2ZXMpO1xuICBjb25zdCBkaXNjbG9zZWQ6IFN0ZXBDb21taXRbXSA9IFtdO1xuICBjb25zdCBwcm9vZnMgPSBbXTtcbiAgZm9yIChjb25zdCBzaWQgb2Ygc2VsZWN0U3RlcElkcykge1xuICAgIGNvbnN0IGlkeCA9IGlkVG9JbmRleC5nZXQoc2lkKTtcbiAgICBpZiAoaWR4ID09PSB1bmRlZmluZWQpIGNvbnRpbnVlO1xuICAgIGRpc2Nsb3NlZC5wdXNoKHN0ZXBzW2lkeF0pO1xuICAgIGNvbnN0IGxlYWYgPSBsZWF2ZXNbaWR4XTtcbiAgICBwcm9vZnMucHVzaCh7IHN0ZXBJZDogc2lkLCBsZWFmLCBwYXRoOiBwcm9vZkZvckxlYWYoaWR4LCBsYXllcnMpIH0pO1xuICB9XG4gIHJldHVybiB7IG1hbmlmZXN0LCBkaXNjbG9zZWRTdGVwczogZGlzY2xvc2VkLCBwcm9vZnMgfTtcbn1cblxuLy8gVmVyaWZ5IGEgc2VsZWN0aXZlIGRpc2Nsb3N1cmUgYnVuZGxlXG5leHBvcnQgZnVuY3Rpb24gdmVyaWZ5RGlzY2xvc3VyZShiOiBTZWxlY3RpdmVEaXNjbG9zdXJlQnVuZGxlLCBwdWJsaWNQZW06IHN0cmluZyk6IGJvb2xlYW4ge1xuICBpZiAoIXZlcmlmeU1hbmlmZXN0KGIubWFuaWZlc3QsIHB1YmxpY1BlbSkpIHJldHVybiBmYWxzZTtcbiAgZm9yIChsZXQgaT0wOyBpPGIuZGlzY2xvc2VkU3RlcHMubGVuZ3RoOyBpKyspe1xuICAgIGNvbnN0IHMgPSBiLmRpc2Nsb3NlZFN0ZXBzW2ldO1xuICAgIGNvbnN0IHByID0gYi5wcm9vZnMuZmluZChwID0+IHAuc3RlcElkID09PSBzLmlkKTtcbiAgICBpZiAoIXByKSByZXR1cm4gZmFsc2U7XG4gICAgY29uc3QgbGVhZiA9IGxlYWZIYXNoKHMpO1xuICAgIGlmIChsZWFmICE9PSBwci5sZWFmKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKCF2ZXJpZnlQcm9vZihwci5sZWFmLCBwci5wYXRoLCBiLm1hbmlmZXN0Lm1lcmtsZVJvb3QpKSByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59Il0sInZlcnNpb24iOjN9