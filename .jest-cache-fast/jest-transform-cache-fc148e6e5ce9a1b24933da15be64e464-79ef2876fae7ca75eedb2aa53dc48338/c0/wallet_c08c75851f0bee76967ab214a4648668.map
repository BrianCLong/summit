{"file":"/Users/brianlong/Developer/summit/packages/prov-ledger/src/wallet.ts","mappings":";;AAIA,oCAGC;AAED,wCAKC;AAGD,kCAQC;AAGD,4BAaC;AAGD,4CAWC;AAvDD,mCAAkD;AAElD,qCAA4E;AAE5E,SAAgB,YAAY,CAAC,CAAmC,EAAE,UAAkB;IAClF,MAAM,MAAM,GAAG,IAAA,mBAAU,EAAC,YAAY,CAAC,CAAC;IAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1E,OAAO,EAAE,GAAG,CAAC,EAAE,SAAS,EAAE,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,QAAQ,CAAC,EAAE,CAAC;AAChE,CAAC;AAED,SAAgB,cAAc,CAAC,CAAiB,EAAE,SAAiB;IACjE,MAAM,CAAC,GAAG,IAAA,qBAAY,EAAC,YAAY,CAAC,CAAC;IACrC,MAAM,IAAI,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC;IAAC,OAAQ,IAAY,CAAC,SAAS,CAAC;IACtD,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;IAC/B,OAAO,CAAC,CAAC,MAAM,CAAC,SAAS,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAC;AACjE,CAAC;AAED,wCAAwC;AACxC,SAAgB,WAAW,CAAC,KAAa,EAAE,MAAc,EAAE,KAAmB,EAAE,UAAkB,EAAE,QAAQ,GAAC,wBAAwB;IACnI,MAAM,MAAM,GAAG,KAAK,CAAC,GAAG,CAAC,iBAAQ,CAAC,CAAC;IACnC,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,IAAA,oBAAW,EAAC,MAAM,CAAC,CAAC;IAC7C,MAAM,gBAAgB,GAAqC;QACzD,KAAK,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,YAAY;KAC3G,CAAC;IACF,MAAM,QAAQ,GAAG,YAAY,CAAC,gBAAgB,EAAE,UAAU,CAAC,CAAC;IAC5D,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC;AACrC,CAAC;AAED,oEAAoE;AACpE,SAAgB,QAAQ,CAAC,aAAuB,EAAE,QAAwB,EAAE,KAAmB,EAAE,MAAgB;IAC/G,MAAM,SAAS,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,EAAE,CAAA,CAAC,CAAC,CAAC,EAAE,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACtD,MAAM,EAAE,MAAM,EAAE,GAAG,IAAA,oBAAW,EAAC,MAAM,CAAC,CAAC;IACvC,MAAM,SAAS,GAAiB,EAAE,CAAC;IACnC,MAAM,MAAM,GAAG,EAAE,CAAC;IAClB,KAAK,MAAM,GAAG,IAAI,aAAa,EAAE,CAAC;QAChC,MAAM,GAAG,GAAG,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC/B,IAAI,GAAG,KAAK,SAAS;YAAE,SAAS;QAChC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;QAC3B,MAAM,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;QACzB,MAAM,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAA,qBAAY,EAAC,GAAG,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC;IACtE,CAAC;IACD,OAAO,EAAE,QAAQ,EAAE,cAAc,EAAE,SAAS,EAAE,MAAM,EAAE,CAAC;AACzD,CAAC;AAED,uCAAuC;AACvC,SAAgB,gBAAgB,CAAC,CAA4B,EAAE,SAAiB;IAC9E,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,QAAQ,EAAE,SAAS,CAAC;QAAE,OAAO,KAAK,CAAC;IACzD,KAAK,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,CAAC,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC,CAAC;QAC5C,MAAM,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;QAC9B,MAAM,EAAE,GAAG,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;QACjD,IAAI,CAAC,EAAE;YAAE,OAAO,KAAK,CAAC;QACtB,MAAM,IAAI,GAAG,IAAA,iBAAQ,EAAC,CAAC,CAAC,CAAC;QACzB,IAAI,IAAI,KAAK,EAAE,CAAC,IAAI;YAAE,OAAO,KAAK,CAAC;QACnC,IAAI,CAAC,IAAA,oBAAW,EAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC;YAAE,OAAO,KAAK,CAAC;IAC1E,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/packages/prov-ledger/src/wallet.ts"],"sourcesContent":["import { createSign, createVerify } from 'crypto';\nimport { StepCommit, WalletManifest, SelectiveDisclosureBundle } from './types';\nimport { leafHash, buildMerkle, proofForLeaf, verifyProof } from './merkle';\n\nexport function signManifest(m: Omit<WalletManifest,'signature'>, privatePem: string): WalletManifest {\n  const signer = createSign('RSA-SHA256'); signer.update(JSON.stringify(m));\n  return { ...m, signature: signer.sign(privatePem, 'base64') };\n}\n\nexport function verifyManifest(m: WalletManifest, publicPem: string): boolean {\n  const v = createVerify('RSA-SHA256'); \n  const body = { ...m }; delete (body as any).signature;\n  v.update(JSON.stringify(body));\n  return v.verify(publicPem, Buffer.from(m.signature, 'base64'));\n}\n\n// Build a full wallet from step commits\nexport function buildWallet(runId: string, caseId: string, steps: StepCommit[], privatePem: string, signerId='prov-ledger@intelgraph'): { manifest: WalletManifest; leaves: string[]; steps: StepCommit[] } {\n  const leaves = steps.map(leafHash);\n  const { root, layers } = buildMerkle(leaves);\n  const manifestUnsigned: Omit<WalletManifest,'signature'> = {\n    runId, caseId, createdAt: new Date().toISOString(), merkleRoot: root, signer: signerId, algo: 'RSA-SHA256'\n  };\n  const manifest = signManifest(manifestUnsigned, privatePem);\n  return { manifest, leaves, steps };\n}\n\n// Selectively disclose a subset (by step ids) with inclusion proofs\nexport function disclose(selectStepIds: string[], manifest: WalletManifest, steps: StepCommit[], leaves: string[]): SelectiveDisclosureBundle {\n  const idToIndex = new Map(steps.map((s,i)=>[s.id,i]));\n  const { layers } = buildMerkle(leaves);\n  const disclosed: StepCommit[] = [];\n  const proofs = [];\n  for (const sid of selectStepIds) {\n    const idx = idToIndex.get(sid);\n    if (idx === undefined) continue;\n    disclosed.push(steps[idx]);\n    const leaf = leaves[idx];\n    proofs.push({ stepId: sid, leaf, path: proofForLeaf(idx, layers) });\n  }\n  return { manifest, disclosedSteps: disclosed, proofs };\n}\n\n// Verify a selective disclosure bundle\nexport function verifyDisclosure(b: SelectiveDisclosureBundle, publicPem: string): boolean {\n  if (!verifyManifest(b.manifest, publicPem)) return false;\n  for (let i=0; i<b.disclosedSteps.length; i++){\n    const s = b.disclosedSteps[i];\n    const pr = b.proofs.find(p => p.stepId === s.id);\n    if (!pr) return false;\n    const leaf = leafHash(s);\n    if (leaf !== pr.leaf) return false;\n    if (!verifyProof(pr.leaf, pr.path, b.manifest.merkleRoot)) return false;\n  }\n  return true;\n}"],"version":3}