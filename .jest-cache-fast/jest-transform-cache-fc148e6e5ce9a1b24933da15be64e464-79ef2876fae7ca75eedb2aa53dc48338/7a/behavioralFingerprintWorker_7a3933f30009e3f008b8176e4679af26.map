{"file":"/Users/brianlong/Developer/summit/server/src/workers/behavioralFingerprintWorker.ts","mappings":";;AASA,kEAQC;AAjBD,uFAAiF;AAS1E,KAAK,UAAU,2BAA2B,CAAC,UAA2B;IAC3E,MAAM,EAAE,GAAG,IAAI,oDAAuB,EAAE,CAAC;IACzC,MAAM,YAAY,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE;QACxC,MAAM,EAAE,WAAW,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,yBAAyB,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QACzE,OAAO,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC,SAAS,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC;IAClE,CAAC,CAAC,CAAC;IACH,MAAM,QAAQ,GAAG,EAAE,CAAC,+BAA+B,CAAC,UAAU,CAAC,CAAC;IAChE,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAE,CAAC;AACpC,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/server/src/workers/behavioralFingerprintWorker.ts"],"sourcesContent":["import { EntityResolutionService } from \"../services/EntityResolutionService.js\";\nimport { BehavioralTelemetry } from \"../services/BehavioralFingerprintService.js\";\n\ninterface IdentityInput {\n  id: string;\n  projectId: string;\n  telemetry: BehavioralTelemetry[];\n}\n\nexport async function runBehavioralFingerprintJob(identities: IdentityInput[]) {\n  const er = new EntityResolutionService();\n  const fingerprints = identities.map((i) => {\n    const { fingerprint, score } = er.fuseBehavioralFingerprint(i.telemetry);\n    return { id: i.id, projectId: i.projectId, fingerprint, score };\n  });\n  const clusters = er.clusterIdentitiesAcrossProjects(identities);\n  return { fingerprints, clusters };\n}\n"],"version":3}