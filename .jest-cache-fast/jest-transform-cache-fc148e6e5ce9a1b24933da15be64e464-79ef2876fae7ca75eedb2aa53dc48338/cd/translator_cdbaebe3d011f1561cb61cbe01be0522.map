{"file":"/Users/brianlong/Developer/summit/server/src/services/nlq/translator.ts","mappings":";;;AAaA,MAAa,aAAa;IACxB,KAAK,CAAC,SAAS,CAAC,QAAgB,EAAE,QAAgB;QAChD,MAAM,KAAK,GAAG,QAAQ,CAAC,WAAW,EAAE,CAAC;QACrC,IAAI,MAAc,CAAC;QACnB,IAAI,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;YACzD,MAAM,GAAG,iEAAiE,CAAC;QAC7E,CAAC;aAAM,CAAC;YACN,MAAM,GAAG,0DAA0D,CAAC;QACtE,CAAC;QACD,OAAO;YACL,MAAM;YACN,MAAM,EAAE,EAAE,QAAQ,EAAE;YACpB,SAAS,EAAE,EAAE;YACb,OAAO,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE;SAC9B,CAAC;IACJ,CAAC;CACF;AAhBD,sCAgBC;AAEY,QAAA,UAAU,GAAG,IAAI,aAAa,EAAE,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/server/src/services/nlq/translator.ts"],"sourcesContent":["export interface CopilotCitation {\n  nodeId: string;\n  source: string;\n  confidence: number;\n}\n\nexport interface TranslationResult {\n  cypher: string;\n  params: Record<string, any>;\n  citations: CopilotCitation[];\n  metrics: Record<string, any>;\n}\n\nexport class NLQTranslator {\n  async translate(question: string, tenantId: string): Promise<TranslationResult> {\n    const lower = question.toLowerCase();\n    let cypher: string;\n    if (lower.includes('person') || lower.includes('people')) {\n      cypher = 'MATCH (n:Person) WHERE n.tenantId = $tenantId RETURN n LIMIT 25';\n    } else {\n      cypher = 'MATCH (n) WHERE n.tenantId = $tenantId RETURN n LIMIT 25';\n    }\n    return {\n      cypher,\n      params: { tenantId },\n      citations: [],\n      metrics: { strategy: 'rule' },\n    };\n  }\n}\n\nexport const translator = new NLQTranslator();\n"],"version":3}