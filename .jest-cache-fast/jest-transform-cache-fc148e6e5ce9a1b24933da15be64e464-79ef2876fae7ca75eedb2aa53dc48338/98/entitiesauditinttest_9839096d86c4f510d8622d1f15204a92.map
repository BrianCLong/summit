{"file":"/Users/brianlong/Developer/summit/server/tests/integration/entities.audit.int.test.ts","mappings":";;;;;AAIA,IAAI,CAAC,IAAI,CAAC,wBAAwB,EAAE,GAAG,EAAE;IACvC,MAAM,KAAK,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;IAC9C,OAAO;QACL,cAAc,EAAE,GAAG,EAAE,CAAC,CAAC;YACrB,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC;gBACd,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC;oBAC/B,OAAO,EAAE;wBACP;4BACE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;gCACV,UAAU,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,aAAa,EAAE;6BAClD,CAAC;yBACH;qBACF;iBACF,CAAC;gBACF,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC;aAC9C,CAAC;SACH,CAAC;QACF,eAAe,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC;KACnC,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,IAAI,CAAC,wBAAwB,EAAE,GAAG,EAAE,CAAC,CAAC;IACzC,mBAAmB,EAAE,CAAC,GAAQ,EAAE,IAAS,EAAE,IAAS,EAAE,EAAE;QACtD,GAAG,CAAC,IAAI,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,CAAC;QAC3B,IAAI,EAAE,CAAC;IACT,CAAC;IACD,WAAW,EAAE,GAAG,EAAE,CAAC,CAAC,IAAS,EAAE,IAAS,EAAE,IAAS,EAAE,EAAE,CAAC,IAAI,EAAE;IAC9D,iBAAiB,EAAE,GAAG,EAAE,CAAC,CAAC,IAAS,EAAE,IAAS,EAAE,IAAS,EAAE,EAAE,CAAC,IAAI,EAAE;CACrE,CAAC,CAAC,CAAC;AAhCJ,iDAAiD;AACjD,sDAA8B;AAC9B,0DAAgC;AAgChC,MAAM,cAAc,GAAG,OAAO,CAAC,wBAAwB,CAAC,CAAC;AACzD,MAAM,EAAE,eAAe,EAAE,GAAG,OAAO,CAAC,wBAAwB,CAAC,CAAC;AAE9D,QAAQ,CAAC,8BAA8B,EAAE,GAAG,EAAE;IAC5C,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;QACjD,MAAM,GAAG,GAAG,IAAA,iBAAO,GAAE,CAAC;QACtB,GAAG,CAAC,GAAG,CAAC,iBAAO,CAAC,IAAI,EAAE,CAAC,CAAC;QACxB,GAAG,CAAC,GAAG,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;QAErC,MAAM,IAAI,GAAG,eAAe,EAAE,CAAC;QAC/B,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAEpD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;QAC5C,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3C,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;IAC/B,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/server/tests/integration/entities.audit.int.test.ts"],"sourcesContent":["// Moved from server/tests/entities.audit.test.ts\nimport express from 'express';\nimport request from 'supertest';\n\njest.mock('../src/config/database', () => {\n  const query = jest.fn().mockResolvedValue({});\n  return {\n    getNeo4jDriver: () => ({\n      session: () => ({\n        run: jest.fn().mockResolvedValue({\n          records: [\n            {\n              get: () => ({\n                properties: { uuid: '123', label: 'Test Entity' },\n              }),\n            },\n          ],\n        }),\n        close: jest.fn().mockResolvedValue(undefined),\n      }),\n    }),\n    getPostgresPool: () => ({ query }),\n  };\n});\n\njest.mock('../src/middleware/auth', () => ({\n  ensureAuthenticated: (req: any, _res: any, next: any) => {\n    req.user = { id: 'user1' };\n    next();\n  },\n  requireRole: () => (_req: any, _res: any, next: any) => next(),\n  requirePermission: () => (_req: any, _res: any, next: any) => next(),\n}));\n\nconst entitiesRouter = require('../src/routes/entities');\nconst { getPostgresPool } = require('../src/config/database');\n\ndescribe('Entities route audit logging', () => {\n  it('logs view audit with null details', async () => {\n    const app = express();\n    app.use(express.json());\n    app.use('/entities', entitiesRouter);\n\n    const pool = getPostgresPool();\n    await request(app).get('/entities/123').expect(200);\n\n    expect(pool.query).toHaveBeenCalledTimes(1);\n    const params = pool.query.mock.calls[0][1];\n    expect(params[4]).toBeNull();\n  });\n});\n"],"version":3}