d1d01827a3af871c17415098bf3616d2
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const crypto_1 = __importDefault(require("crypto"));
const postgres_js_1 = require("../db/postgres.js");
const router = express_1.default.Router();
const SIGNING_SECRET = process.env.SLACK_SIGNING_SECRET || '';
function verifySlackSignature(req, body) {
    const ts = req.headers['x-slack-request-timestamp'];
    const sig = req.headers['x-slack-signature'];
    if (!ts || !sig)
        return false;
    const base = `v0:${ts}:${body}`;
    const hmac = crypto_1.default.createHmac('sha256', SIGNING_SECRET).update(base).digest('hex');
    const expected = `v0=${hmac}`;
    try {
        return crypto_1.default.timingSafeEqual(Buffer.from(expected), Buffer.from(sig));
    }
    catch {
        return false;
    }
}
// Self-contained raw-body route: ensure we receive the raw payload before any global parsers
router.post('/webhooks/slack', express_1.default.raw({ type: '*/*', limit: '1mb' }), async (req, res) => {
    if (!SIGNING_SECRET)
        return res.status(503).send('slack disabled');
    const raw = Buffer.isBuffer(req.body) ? req.body.toString() : (req.rawBody || '');
    // Preserve rawBody for downstream logic
    req.rawBody = raw;
    if (!verifySlackSignature(req, raw))
        return res.status(401).send('bad sig');
    // Parse JSON payload if present
    let payload = {};
    try {
        payload = JSON.parse(raw || '{}');
    }
    catch {
        payload = {};
    }
    req.body = payload;
    let data = payload;
    if (typeof payload === 'string' || (payload?.payload && typeof payload.payload === 'string')) {
        try {
            data = JSON.parse(payload.payload || payload);
        }
        catch { }
    }
    const action = data?.actions?.[0];
    const val = action?.value || '';
    const [runId, stepId, verdict] = val.split('|');
    const ok = verdict === 'ok';
    const pool = (0, postgres_js_1.getPostgresPool)();
    const justification = `${ok ? 'approved' : 'declined'} via slack`;
    try {
        if (ok) {
            await pool.query('INSERT INTO run_event (run_id, kind, payload) VALUES ($1,$2,$3)', [runId, 'approval.approved', { stepId, justification }]);
            await pool.query('UPDATE run_step SET status=$1, blocked_reason=NULL WHERE run_id=$2 AND step_id=$3', ['RUNNING', runId, stepId]);
        }
        else {
            await pool.query('INSERT INTO run_event (run_id, kind, payload) VALUES ($1,$2,$3)', [runId, 'approval.declined', { stepId, justification }]);
            await pool.query('UPDATE run_step SET status=$1, blocked_reason=$2, ended_at=now() WHERE run_id=$3 AND step_id=$4', ['FAILED', `declined: ${justification}`, runId, stepId]);
            await pool.query('UPDATE run SET status=$1, ended_at=now() WHERE id=$2 AND status<>$1', ['FAILED', runId]);
        }
    }
    catch { }
    res.json({ ok: true });
});
exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3NlcnZlci9zcmMvcm91dGVzL3NsYWNrLnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsc0RBQW1FO0FBQ25FLG9EQUE0QjtBQUM1QixtREFBb0Q7QUFFcEQsTUFBTSxNQUFNLEdBQUcsaUJBQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUNoQyxNQUFNLGNBQWMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixJQUFJLEVBQUUsQ0FBQztBQUU5RCxTQUFTLG9CQUFvQixDQUFDLEdBQVEsRUFBRSxJQUFZO0lBQ2xELE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsMkJBQTJCLENBQUMsQ0FBQztJQUNwRCxNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFXLENBQUM7SUFDdkQsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUc7UUFBRSxPQUFPLEtBQUssQ0FBQztJQUM5QixNQUFNLElBQUksR0FBRyxNQUFNLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQztJQUNoQyxNQUFNLElBQUksR0FBRyxnQkFBTSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsY0FBYyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNwRixNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksRUFBRSxDQUFDO0lBQzlCLElBQUksQ0FBQztRQUFDLE9BQU8sZ0JBQU0sQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFBQyxDQUFDO0lBQUMsTUFBTSxDQUFDO1FBQUMsT0FBTyxLQUFLLENBQUM7SUFBQyxDQUFDO0FBQ3pHLENBQUM7QUFFRCw2RkFBNkY7QUFDN0YsTUFBTSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxpQkFBTyxD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YSxhQUFhLEVBQUUsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUM3SyxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMscUVBQXFFLEVBQUUsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUM3RyxDQUFDO0lBQ0gsQ0FBQztJQUFDLE1BQU0sQ0FBQyxDQUFBLENBQUM7SUFDVixHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFDekIsQ0FBQyxDQUFDLENBQUM7QUFFSCxrQkFBZSxNQUFNLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3NlcnZlci9zcmMvcm91dGVzL3NsYWNrLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBleHByZXNzLCB7IFJlcXVlc3QsIFJlc3BvbnNlLCBOZXh0RnVuY3Rpb24gfSBmcm9tICdleHByZXNzJztcbmltcG9ydCBjcnlwdG8gZnJvbSAnY3J5cHRvJztcbmltcG9ydCB7IGdldFBvc3RncmVzUG9vbCB9IGZyb20gJy4uL2RiL3Bvc3RncmVzLmpzJztcblxuY29uc3Qgcm91dGVyID0gZXhwcmVzcy5Sb3V0ZXIoKTtcbmNvbnN0IFNJR05JTkdfU0VDUkVUID0gcHJvY2Vzcy5lbnYuU0xBQ0tfU0lHTklOR19TRUNSRVQgfHwgJyc7XG5cbmZ1bmN0aW9uIHZlcmlmeVNsYWNrU2lnbmF0dXJlKHJlcTogYW55LCBib2R5OiBzdHJpbmcpIHtcbiAgY29uc3QgdHMgPSByZXEuaGVhZGVyc1sneC1zbGFjay1yZXF1ZXN0LXRpbWVzdGFtcCddO1xuICBjb25zdCBzaWcgPSByZXEuaGVhZGVyc1sneC1zbGFjay1zaWduYXR1cmUnXSBhcyBzdHJpbmc7XG4gIGlmICghdHMgfHwgIXNpZykgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBiYXNlID0gYHYwOiR7dHN9OiR7Ym9keX1gO1xuICBjb25zdCBobWFjID0gY3J5cHRvLmNyZWF0ZUhtYWMoJ3NoYTI1NicsIFNJR05JTkdfU0VDUkVUKS51cGRhdGUoYmFzZSkuZGlnZXN0KCdoZXgnKTtcbiAgY29uc3QgZXhwZWN0ZWQgPSBgdjA9JHtobWFjfWA7XG4gIHRyeSB7IHJldHVybiBjcnlwdG8udGltaW5nU2FmZUVxdWFsKEJ1ZmZlci5mcm9tKGV4cGVjdGVkKSwgQnVmZmVyLmZyb20oc2lnKSk7IH0gY2F0Y2ggeyByZXR1cm4gZmFsc2U7IH1cbn1cblxuLy8gU2VsZi1jb250YWluZWQgcmF3LWJvZHkgcm91dGU6IGVuc3VyZSB3ZSByZWNlaXZlIHRoZSByYXcgcGF5bG9hZCBiZWZvcmUgYW55IGdsb2JhbCBwYXJzZXJzXG5yb3V0ZXIucG9zdCgnL3dlYmhvb2tzL3NsYWNrJywgZXhwcmVzcy5yYXcoeyB0eXBlOiAnKi8qJywgbGltaXQ6ICcxbWInIH0pLCBhc3luYyAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKSA9PiB7XG4gIGlmICghU0lHTklOR19TRUNSRVQpIHJldHVybiByZXMuc3RhdHVzKDUwMykuc2VuZCgnc2xhY2sgZGlzYWJsZWQnKTtcbiAgY29uc3QgcmF3ID0gQnVmZmVyLmlzQnVmZmVyKChyZXEgYXMgYW55KS5ib2R5KSA/IChyZXEgYXMgYW55KS5ib2R5LnRvU3RyaW5nKCkgOiAoKHJlcSBhcyBhbnkpLnJhd0JvZHkgfHwgJycpO1xuICAvLyBQcmVzZXJ2ZSByYXdCb2R5IGZvciBkb3duc3RyZWFtIGxvZ2ljXG4gIChyZXEgYXMgYW55KS5yYXdCb2R5ID0gcmF3O1xuICBpZiAoIXZlcmlmeVNsYWNrU2lnbmF0dXJlKHJlcSBhcyBhbnksIHJhdykpIHJldHVybiByZXMuc3RhdHVzKDQwMSkuc2VuZCgnYmFkIHNpZycpO1xuXG4gIC8vIFBhcnNlIEpTT04gcGF5bG9hZCBpZiBwcmVzZW50XG4gIGxldCBwYXlsb2FkOiBhbnkgPSB7fTtcbiAgdHJ5IHsgcGF5bG9hZCA9IEpTT04ucGFyc2UocmF3IHx8ICd7fScpOyB9IGNhdGNoIHsgcGF5bG9hZCA9IHt9OyB9XG4gIChyZXEgYXMgYW55KS5ib2R5ID0gcGF5bG9hZDtcbiAgbGV0IGRhdGE6IGFueSA9IHBheWxvYWQ7XG4gIGlmICh0eXBlb2YgcGF5bG9hZCA9PT0gJ3N0cmluZycgfHwgKHBheWxvYWQ/LnBheWxvYWQgJiYgdHlwZW9mIHBheWxvYWQucGF5bG9hZCA9PT0gJ3N0cmluZycpKSB7XG4gICAgdHJ5IHsgZGF0YSA9IEpTT04ucGFyc2UocGF5bG9hZC5wYXlsb2FkIHx8IHBheWxvYWQpOyB9IGNhdGNoIHt9XG4gIH1cbiAgY29uc3QgYWN0aW9uID0gZGF0YT8uYWN0aW9ucz8uWzBdO1xuICBjb25zdCB2YWwgPSBhY3Rpb24/LnZhbHVlIHx8ICcnO1xuICBjb25zdCBbcnVuSWQsIHN0ZXBJZCwgdmVyZGljdF0gPSB2YWwuc3BsaXQoJ3wnKTtcbiAgY29uc3Qgb2sgPSB2ZXJkaWN0ID09PSAnb2snO1xuICBjb25zdCBwb29sID0gZ2V0UG9zdGdyZXNQb29sKCk7XG4gIGNvbnN0IGp1c3RpZmljYXRpb24gPSBgJHtvayA/ICdhcHByb3ZlZCcgOiAnZGVjbGluZWQnfSB2aWEgc2xhY2tgO1xuICB0cnkge1xuICAgIGlmIChvaykge1xuICAgICAgYXdhaXQgcG9vbC5xdWVyeSgnSU5TRVJUIElOVE8gcnVuX2V2ZW50IChydW5faWQsIGtpbmQsIHBheWxvYWQpIFZBTFVFUyAoJDEsJDIsJDMpJywgW3J1bklkLCAnYXBwcm92YWwuYXBwcm92ZWQnLCB7IHN0ZXBJZCwganVzdGlmaWNhdGlvbiB9XSk7XG4gICAgICBhd2FpdCBwb29sLnF1ZXJ5KCdVUERBVEUgcnVuX3N0ZXAgU0VUIHN0YXR1cz0kMSwgYmxvY2tlZF9yZWFzb249TlVMTCBXSEVSRSBydW5faWQ9JDIgQU5EIHN0ZXBfaWQ9JDMnLCBbJ1JVTk5JTkcnLCBydW5JZCwgc3RlcElkXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGF3YWl0IHBvb2wucXVlcnkoJ0lOU0VSVCBJTlRPIHJ1bl9ldmVudCAocnVuX2lkLCBraW5kLCBwYXlsb2FkKSBWQUxVRVMgKCQxLCQyLCQzKScsIFtydW5JZCwgJ2FwcHJvdmFsLmRlY2xpbmVkJywgeyBzdGVwSWQsIGp1c3RpZmljYXRpb24gfV0pO1xuICAgICAgYXdhaXQgcG9vbC5xdWVyeSgnVVBEQVRFIHJ1bl9zdGVwIFNFVCBzdGF0dXM9JDEsIGJsb2NrZWRfcmVhc29uPSQyLCBlbmRlZF9hdD1ub3coKSBXSEVSRSBydW5faWQ9JDMgQU5EIHN0ZXBfaWQ9JDQnLCBbJ0ZBSUxFRCcsIGBkZWNsaW5lZDogJHtqdXN0aWZpY2F0aW9ufWAsIHJ1bklkLCBzdGVwSWRdKTtcbiAgICAgIGF3YWl0IHBvb2wucXVlcnkoJ1VQREFURSBydW4gU0VUIHN0YXR1cz0kMSwgZW5kZWRfYXQ9bm93KCkgV0hFUkUgaWQ9JDIgQU5EIHN0YXR1czw+JDEnLCBbJ0ZBSUxFRCcsIHJ1bklkXSk7XG4gICAgfVxuICB9IGNhdGNoIHt9XG4gIHJlcy5qc29uKHsgb2s6IHRydWUgfSk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcm91dGVyO1xuIl0sInZlcnNpb24iOjN9