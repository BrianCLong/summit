{"file":"/Users/brianlong/Developer/summit/server/src/routes/slack.ts","mappings":"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","names":[],"sources":["/Users/brianlong/Developer/summit/server/src/routes/slack.ts"],"sourcesContent":["import express, { Request, Response, NextFunction } from 'express';\nimport crypto from 'crypto';\nimport { getPostgresPool } from '../db/postgres.js';\n\nconst router = express.Router();\nconst SIGNING_SECRET = process.env.SLACK_SIGNING_SECRET || '';\n\nfunction verifySlackSignature(req: any, body: string) {\n  const ts = req.headers['x-slack-request-timestamp'];\n  const sig = req.headers['x-slack-signature'] as string;\n  if (!ts || !sig) return false;\n  const base = `v0:${ts}:${body}`;\n  const hmac = crypto.createHmac('sha256', SIGNING_SECRET).update(base).digest('hex');\n  const expected = `v0=${hmac}`;\n  try { return crypto.timingSafeEqual(Buffer.from(expected), Buffer.from(sig)); } catch { return false; }\n}\n\n// Self-contained raw-body route: ensure we receive the raw payload before any global parsers\nrouter.post('/webhooks/slack', express.raw({ type: '*/*', limit: '1mb' }), async (req: Request, res: Response) => {\n  if (!SIGNING_SECRET) return res.status(503).send('slack disabled');\n  const raw = Buffer.isBuffer((req as any).body) ? (req as any).body.toString() : ((req as any).rawBody || '');\n  // Preserve rawBody for downstream logic\n  (req as any).rawBody = raw;\n  if (!verifySlackSignature(req as any, raw)) return res.status(401).send('bad sig');\n\n  // Parse JSON payload if present\n  let payload: any = {};\n  try { payload = JSON.parse(raw || '{}'); } catch { payload = {}; }\n  (req as any).body = payload;\n  let data: any = payload;\n  if (typeof payload === 'string' || (payload?.payload && typeof payload.payload === 'string')) {\n    try { data = JSON.parse(payload.payload || payload); } catch {}\n  }\n  const action = data?.actions?.[0];\n  const val = action?.value || '';\n  const [runId, stepId, verdict] = val.split('|');\n  const ok = verdict === 'ok';\n  const pool = getPostgresPool();\n  const justification = `${ok ? 'approved' : 'declined'} via slack`;\n  try {\n    if (ok) {\n      await pool.query('INSERT INTO run_event (run_id, kind, payload) VALUES ($1,$2,$3)', [runId, 'approval.approved', { stepId, justification }]);\n      await pool.query('UPDATE run_step SET status=$1, blocked_reason=NULL WHERE run_id=$2 AND step_id=$3', ['RUNNING', runId, stepId]);\n    } else {\n      await pool.query('INSERT INTO run_event (run_id, kind, payload) VALUES ($1,$2,$3)', [runId, 'approval.declined', { stepId, justification }]);\n      await pool.query('UPDATE run_step SET status=$1, blocked_reason=$2, ended_at=now() WHERE run_id=$3 AND step_id=$4', ['FAILED', `declined: ${justification}`, runId, stepId]);\n      await pool.query('UPDATE run SET status=$1, ended_at=now() WHERE id=$2 AND status<>$1', ['FAILED', runId]);\n    }\n  } catch {}\n  res.json({ ok: true });\n});\n\nexport default router;\n"],"version":3}