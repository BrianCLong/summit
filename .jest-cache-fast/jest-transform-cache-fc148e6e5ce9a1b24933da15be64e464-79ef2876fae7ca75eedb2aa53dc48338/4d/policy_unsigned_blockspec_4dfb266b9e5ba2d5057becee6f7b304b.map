{"file":"/Users/brianlong/Developer/summit/server/tests/policy_unsigned_block.spec.ts","mappings":";;AAAA,iDAAwD;AAExD,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;IACpC,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC;IAC/C,SAAS,CAAC,GAAE,EAAE,GAAE,OAAO,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7D,QAAQ,CAAC,GAAE,EAAE,GAAE,IAAI,IAAI,KAAK,SAAS;QAAE,OAAO,CAAC,GAAG,CAAC,qBAAqB,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAEpF,EAAE,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;QAClE,MAAM,MAAM,CAAC,IAAA,yBAAgB,EAAC,YAAmB,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;IAC3E,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/server/tests/policy_unsigned_block.spec.ts"],"sourcesContent":["import { loadSignedPolicy } from \"../src/policy/loader\";\n\ndescribe(\"policy unsigned gate\", () => {\n  const prev = process.env.ALLOW_UNSIGNED_POLICY;\n  beforeAll(()=>{ delete process.env.ALLOW_UNSIGNED_POLICY; });\n  afterAll(()=>{ if (prev !== undefined) process.env.ALLOW_UNSIGNED_POLICY = prev; });\n\n  it(\"blocks when signature missing and override not set\", async () => {\n    await expect(loadSignedPolicy(\"bundle.tgz\" as any)).rejects.toBeTruthy();\n  });\n});\n\n"],"version":3}