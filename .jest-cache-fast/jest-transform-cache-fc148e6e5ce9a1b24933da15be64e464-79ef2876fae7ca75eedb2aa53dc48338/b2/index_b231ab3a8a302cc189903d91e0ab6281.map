{"file":"/Users/brianlong/Developer/summit/packages/afl-store/src/index.ts","mappings":"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","names":[],"sources":["/Users/brianlong/Developer/summit/packages/afl-store/src/index.ts"],"sourcesContent":["import Redis from 'ioredis';\nimport neo4j, { Driver } from 'neo4j-driver';\nimport { Fingerprint } from './types';\n\nexport class AFLStore {\n  private redis: Redis;\n  private neo: Driver | null = null;\n\n  constructor(redisUrl = process.env.AFL_REDIS_URL || 'redis://redis-afl:6379', neo4jUrl?: string, neoUser?: string, neoPass?: string) {\n    this.redis = new Redis(redisUrl);\n    if (neo4jUrl) this.neo = neo4j.driver(neo4jUrl, neo4j.auth.basic(neoUser||'neo4j', neoPass||'password'));\n  }\n\n  key(fp: Fingerprint) { return `afl:${fp.formatSig}:${fp.timingSig}:${fp.xformSig}`; }\n\n  async put(fp: Fingerprint) {\n    const k = this.key(fp);\n    const now = Date.now();\n    const existing = await this.redis.get(k);\n    const merged: Fingerprint = existing ? { ...JSON.parse(existing), ...fp, lastSeen: now, count: (JSON.parse(existing).count||0)+1 } : { ...fp, firstSeen: now, lastSeen: now, count:1 };\n    await this.redis.set(k, JSON.stringify(merged), 'EX', 60*60*24*30);\n    if (this.neo) { await this.upsertNeo(fp); }\n  }\n\n  async getBySignature(sig: {formatSig:string; timingSig:string; xformSig:string}) {\n    const k = `afl:${sig.formatSig}:${sig.timingSig}:${sig.xformSig}`;\n    const v = await this.redis.get(k); return v ? JSON.parse(v) as Fingerprint : null;\n  }\n\n  async topByRoute(route: string, limit=50) {\n    const keys = await this.redis.keys(`afl:*:*:*`);\n    const vals = await this.redis.mget(keys);\n    return (vals.filter(Boolean).map(v => JSON.parse(v as string) as Fingerprint).filter(f => f.route===route))\n      .sort((a,b)=>(b.count||0)-(a.count||0)).slice(0,limit);\n  }\n\n  private async upsertNeo(fp: Fingerprint) {\n    const s = this.neo!.session();\n    try {\n      await s.run(\n        `MERGE (sig:AFSig {formatSig:$f, timingSig:$t, xformSig:$x})\n         ON CREATE SET sig.firstSeen=$now, sig.count=1\n         ON MATCH  SET sig.lastSeen=$now, sig.count=coalesce(sig.count,0)+1\n         MERGE (r:Ingress {id:$route}) MERGE (r)-[:HAS]->(sig)`,\n        { f: fp.formatSig, t: fp.timingSig, x: fp.xformSig, now: Date.now(), route: fp.route }\n      );\n    } finally { await s.close(); }\n  }\n\n  async close(){ await this.redis.quit(); if (this.neo) await this.neo.close(); }\n}"],"version":3}