1476e4efc1cacf728a11ec8a34bdf636
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AFLStore = void 0;
const ioredis_1 = __importDefault(require("ioredis"));
const neo4j_driver_1 = __importDefault(require("neo4j-driver"));
class AFLStore {
    redis;
    neo = null;
    constructor(redisUrl = process.env.AFL_REDIS_URL || 'redis://redis-afl:6379', neo4jUrl, neoUser, neoPass) {
        this.redis = new ioredis_1.default(redisUrl);
        if (neo4jUrl)
            this.neo = neo4j_driver_1.default.driver(neo4jUrl, neo4j_driver_1.default.auth.basic(neoUser || 'neo4j', neoPass || 'password'));
    }
    key(fp) { return `afl:${fp.formatSig}:${fp.timingSig}:${fp.xformSig}`; }
    async put(fp) {
        const k = this.key(fp);
        const now = Date.now();
        const existing = await this.redis.get(k);
        const merged = existing ? { ...JSON.parse(existing), ...fp, lastSeen: now, count: (JSON.parse(existing).count || 0) + 1 } : { ...fp, firstSeen: now, lastSeen: now, count: 1 };
        await this.redis.set(k, JSON.stringify(merged), 'EX', 60 * 60 * 24 * 30);
        if (this.neo) {
            await this.upsertNeo(fp);
        }
    }
    async getBySignature(sig) {
        const k = `afl:${sig.formatSig}:${sig.timingSig}:${sig.xformSig}`;
        const v = await this.redis.get(k);
        return v ? JSON.parse(v) : null;
    }
    async topByRoute(route, limit = 50) {
        const keys = await this.redis.keys(`afl:*:*:*`);
        const vals = await this.redis.mget(keys);
        return (vals.filter(Boolean).map(v => JSON.parse(v)).filter(f => f.route === route))
            .sort((a, b) => (b.count || 0) - (a.count || 0)).slice(0, limit);
    }
    async upsertNeo(fp) {
        const s = this.neo.session();
        try {
            await s.run(`MERGE (sig:AFSig {formatSig:$f, timingSig:$t, xformSig:$x})
         ON CREATE SET sig.firstSeen=$now, sig.count=1
         ON MATCH  SET sig.lastSeen=$now, sig.count=coalesce(sig.count,0)+1
         MERGE (r:Ingress {id:$route}) MERGE (r)-[:HAS]->(sig)`, { f: fp.formatSig, t: fp.timingSig, x: fp.xformSig, now: Date.now(), route: fp.route });
        }
        finally {
            await s.close();
        }
    }
    async close() { await this.redis.quit(); if (this.neo)
        await this.neo.close(); }
}
exports.AFLStore = AFLStore;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3BhY2thZ2VzL2FmbC1zdG9yZS9zcmMvaW5kZXgudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsc0RBQTRCO0FBQzVCLGdFQUE2QztBQUc3QyxNQUFhLFFBQVE7SUFDWCxLQUFLLENBQVE7SUFDYixHQUFHLEdBQWtCLElBQUksQ0FBQztJQUVsQyxZQUFZLFFBQVEsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsSUFBSSx3QkFBd0IsRUFBRSxRQUFpQixFQUFFLE9BQWdCLEVBQUUsT0FBZ0I7UUFDakksSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLGlCQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDakMsSUFBSSxRQUFRO1lBQUUsSUFBSSxDQUFDLEdBQUcsR0FBRyxzQkFBSyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsc0JBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sSUFBRSxPQUFPLEVBQUUsT0FBTyxJQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDM0csQ0FBQztJQUVELEdBQUcsQ0FBQyxFQUFlLElBQUksT0FBTyxPQUFPLEVBQUUsQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDLFNBQVMsSUFBSSxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRXJGLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBZTtRQUN2QixNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN2QixNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLE1BQU0sTUFBTSxHQUFnQixRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLEdBQUcsRUFBRSxF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QUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0NBQ2hGO0FBOUNELDRCQThDQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvYnJpYW5sb25nL0RldmVsb3Blci9zdW1taXQvcGFja2FnZXMvYWZsLXN0b3JlL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVkaXMgZnJvbSAnaW9yZWRpcyc7XG5pbXBvcnQgbmVvNGosIHsgRHJpdmVyIH0gZnJvbSAnbmVvNGotZHJpdmVyJztcbmltcG9ydCB7IEZpbmdlcnByaW50IH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBjbGFzcyBBRkxTdG9yZSB7XG4gIHByaXZhdGUgcmVkaXM6IFJlZGlzO1xuICBwcml2YXRlIG5lbzogRHJpdmVyIHwgbnVsbCA9IG51bGw7XG5cbiAgY29uc3RydWN0b3IocmVkaXNVcmwgPSBwcm9jZXNzLmVudi5BRkxfUkVESVNfVVJMIHx8ICdyZWRpczovL3JlZGlzLWFmbDo2Mzc5JywgbmVvNGpVcmw/OiBzdHJpbmcsIG5lb1VzZXI/OiBzdHJpbmcsIG5lb1Bhc3M/OiBzdHJpbmcpIHtcbiAgICB0aGlzLnJlZGlzID0gbmV3IFJlZGlzKHJlZGlzVXJsKTtcbiAgICBpZiAobmVvNGpVcmwpIHRoaXMubmVvID0gbmVvNGouZHJpdmVyKG5lbzRqVXJsLCBuZW80ai5hdXRoLmJhc2ljKG5lb1VzZXJ8fCduZW80aicsIG5lb1Bhc3N8fCdwYXNzd29yZCcpKTtcbiAgfVxuXG4gIGtleShmcDogRmluZ2VycHJpbnQpIHsgcmV0dXJuIGBhZmw6JHtmcC5mb3JtYXRTaWd9OiR7ZnAudGltaW5nU2lnfToke2ZwLnhmb3JtU2lnfWA7IH1cblxuICBhc3luYyBwdXQoZnA6IEZpbmdlcnByaW50KSB7XG4gICAgY29uc3QgayA9IHRoaXMua2V5KGZwKTtcbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgIGNvbnN0IGV4aXN0aW5nID0gYXdhaXQgdGhpcy5yZWRpcy5nZXQoayk7XG4gICAgY29uc3QgbWVyZ2VkOiBGaW5nZXJwcmludCA9IGV4aXN0aW5nID8geyAuLi5KU09OLnBhcnNlKGV4aXN0aW5nKSwgLi4uZnAsIGxhc3RTZWVuOiBub3csIGNvdW50OiAoSlNPTi5wYXJzZShleGlzdGluZykuY291bnR8fDApKzEgfSA6IHsgLi4uZnAsIGZpcnN0U2Vlbjogbm93LCBsYXN0U2Vlbjogbm93LCBjb3VudDoxIH07XG4gICAgYXdhaXQgdGhpcy5yZWRpcy5zZXQoaywgSlNPTi5zdHJpbmdpZnkobWVyZ2VkKSwgJ0VYJywgNjAqNjAqMjQqMzApO1xuICAgIGlmICh0aGlzLm5lbykgeyBhd2FpdCB0aGlzLnVwc2VydE5lbyhmcCk7IH1cbiAgfVxuXG4gIGFzeW5jIGdldEJ5U2lnbmF0dXJlKHNpZzoge2Zvcm1hdFNpZzpzdHJpbmc7IHRpbWluZ1NpZzpzdHJpbmc7IHhmb3JtU2lnOnN0cmluZ30pIHtcbiAgICBjb25zdCBrID0gYGFmbDoke3NpZy5mb3JtYXRTaWd9OiR7c2lnLnRpbWluZ1NpZ306JHtzaWcueGZvcm1TaWd9YDtcbiAgICBjb25zdCB2ID0gYXdhaXQgdGhpcy5yZWRpcy5nZXQoayk7IHJldHVybiB2ID8gSlNPTi5wYXJzZSh2KSBhcyBGaW5nZXJwcmludCA6IG51bGw7XG4gIH1cblxuICBhc3luYyB0b3BCeVJvdXRlKHJvdXRlOiBzdHJpbmcsIGxpbWl0PTUwKSB7XG4gICAgY29uc3Qga2V5cyA9IGF3YWl0IHRoaXMucmVkaXMua2V5cyhgYWZsOio6KjoqYCk7XG4gICAgY29uc3QgdmFscyA9IGF3YWl0IHRoaXMucmVkaXMubWdldChrZXlzKTtcbiAgICByZXR1cm4gKHZhbHMuZmlsdGVyKEJvb2xlYW4pLm1hcCh2ID0+IEpTT04ucGFyc2UodiBhcyBzdHJpbmcpIGFzIEZpbmdlcnByaW50KS5maWx0ZXIoZiA9PiBmLnJvdXRlPT09cm91dGUpKVxuICAgICAgLnNvcnQoKGEsYik9PihiLmNvdW50fHwwKS0oYS5jb3VudHx8MCkpLnNsaWNlKDAsbGltaXQpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyB1cHNlcnROZW8oZnA6IEZpbmdlcnByaW50KSB7XG4gICAgY29uc3QgcyA9IHRoaXMubmVvIS5zZXNzaW9uKCk7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHMucnVuKFxuICAgICAgICBgTUVSR0UgKHNpZzpBRlNpZyB7Zm9ybWF0U2lnOiRmLCB0aW1pbmdTaWc6JHQsIHhmb3JtU2lnOiR4fSlcbiAgICAgICAgIE9OIENSRUFURSBTRVQgc2lnLmZpcnN0U2Vlbj0kbm93LCBzaWcuY291bnQ9MVxuICAgICAgICAgT04gTUFUQ0ggIFNFVCBzaWcubGFzdFNlZW49JG5vdywgc2lnLmNvdW50PWNvYWxlc2NlKHNpZy5jb3VudCwwKSsxXG4gICAgICAgICBNRVJHRSAocjpJbmdyZXNzIHtpZDokcm91dGV9KSBNRVJHRSAociktWzpIQVNdLT4oc2lnKWAsXG4gICAgICAgIHsgZjogZnAuZm9ybWF0U2lnLCB0OiBmcC50aW1pbmdTaWcsIHg6IGZwLnhmb3JtU2lnLCBub3c6IERhdGUubm93KCksIHJvdXRlOiBmcC5yb3V0ZSB9XG4gICAgICApO1xuICAgIH0gZmluYWxseSB7IGF3YWl0IHMuY2xvc2UoKTsgfVxuICB9XG5cbiAgYXN5bmMgY2xvc2UoKXsgYXdhaXQgdGhpcy5yZWRpcy5xdWl0KCk7IGlmICh0aGlzLm5lbykgYXdhaXQgdGhpcy5uZW8uY2xvc2UoKTsgfVxufSJdLCJ2ZXJzaW9uIjozfQ==