{"file":"/Users/brianlong/Developer/summit/server/src/crystal/__tests__/session-orchestrator.test.ts","mappings":"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","names":[],"sources":["/Users/brianlong/Developer/summit/server/src/crystal/__tests__/session-orchestrator.test.ts"],"sourcesContent":["import { mkdtemp, rm, stat } from 'fs/promises';\nimport * as os from 'os';\nimport * as path from 'path';\nimport { CrystalSessionOrchestrator } from '../session-orchestrator';\nimport { WorktreeEngine } from '../worktree-engine';\nimport { SLOMetrics } from '../slo-metrics';\nimport { PanelType, AttachmentType } from '../types';\n\ndescribe('CrystalSessionOrchestrator', () => {\n  let repoDir: string;\n  let orchestrator: CrystalSessionOrchestrator;\n\n  beforeEach(async () => {\n    repoDir = await mkdtemp(path.join(os.tmpdir(), 'crystal-test-'));\n    orchestrator = new CrystalSessionOrchestrator({\n      worktreeEngine: new WorktreeEngine(repoDir),\n      metrics: new SLOMetrics(),\n    });\n  });\n\n  afterEach(async () => {\n    await rm(repoDir, { recursive: true, force: true });\n  });\n\n  it('creates a session with isolated worktree and default panels', async () => {\n    const session = await orchestrator.createSession({\n      name: 'Crystal Demo',\n      projectPath: '.',\n      purposeTags: ['demo'],\n      attachments: [\n        {\n          type: AttachmentType.TEXT,\n          name: 'readme.txt',\n          size: 12,\n          contentType: 'text/plain',\n          purpose: 'demo',\n        },\n      ],\n      runScripts: [\n        {\n          name: 'unit-tests',\n          command: 'npm test',\n        },\n      ],\n    });\n\n    expect(session.panels.some((panel) => panel.type === PanelType.DIFF)).toBe(true);\n    expect(session.agents).toHaveLength(2);\n    const worktreeStat = await stat(session.worktree.worktreePath);\n    expect(worktreeStat.isDirectory()).toBe(true);\n  });\n\n  it('streams run logs via subscription', async () => {\n    const session = await orchestrator.createSession({\n      name: 'Streaming Demo',\n      projectPath: '.',\n      runScripts: [\n        {\n          name: 'build',\n          command: 'npm install && npm run build',\n        },\n      ],\n    });\n\n    const runPromise = orchestrator.startRun({\n      sessionId: session.id,\n      runDefinitionId: session.runScripts[0].id,\n    });\n\n    const activeSession = orchestrator.getSession(session.id)!;\n    const runId = activeSession.runs[0].id;\n    const received: string[] = [];\n    orchestrator.subscribeToRunLogs(session.id, runId, (event) => {\n      received.push(event.entry.message);\n    });\n\n    const run = await runPromise;\n    expect(run.logs.length).toBeGreaterThan(0);\n    expect(received.length).toBeGreaterThan(0);\n  });\n\n  it('records assistant responses via adapter registry', async () => {\n    const session = await orchestrator.createSession({\n      name: 'Adapter Demo',\n      projectPath: '.',\n    });\n\n    const message = await orchestrator.recordMessage({\n      sessionId: session.id,\n      agentId: session.agents[0].id,\n      role: 'user',\n      content: 'Write a function to compute factorial',\n    });\n\n    expect(message.role).toBe('assistant');\n    expect(message.content).toContain('factorial');\n  });\n});\n"],"version":3}