{"file":"/Users/brianlong/Developer/summit/server/src/tests/graphragService.test.ts","mappings":"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","names":[],"sources":["/Users/brianlong/Developer/summit/server/src/tests/graphragService.test.ts"],"sourcesContent":["import { GraphRAGService } from \"../services/GraphRAGService.js\";\nimport {\n  graphragSchemaFailuresTotal,\n  graphragCacheHitRatio,\n} from \"../monitoring/metrics.js\";\nimport { UserFacingError } from \"../lib/errors.js\";\n\ndescribe(\"GraphRAGService\", () => {\n  const baseRequest = {\n    investigationId: \"inv1\",\n    question: \"What is testing?\",\n  };\n\n  function createService(llmResponses: string[]) {\n    const neo4jSession = {\n      run: jest.fn().mockResolvedValue({\n        records: [\n          {\n            get: (field: string) => {\n              if (field === \"nodes\") {\n                return [\n                  {\n                    properties: {\n                      id: \"e1\",\n                      type: \"Entity\",\n                      label: \"Entity1\",\n                      properties: \"{}\",\n                      confidence: 1,\n                    },\n                  },\n                ];\n              }\n              if (field === \"relationships\") {\n                return [\n                  {\n                    properties: {\n                      id: \"r1\",\n                      type: \"REL\",\n                      fromEntityId: \"e1\",\n                      toEntityId: \"e1\",\n                      properties: \"{}\",\n                      confidence: 1,\n                    },\n                  },\n                ];\n              }\n              return null;\n            },\n          },\n        ],\n      }),\n      close: jest.fn(),\n    };\n    const neo4jDriver = { session: () => neo4jSession } as any;\n\n    const store = new Map<string, string>();\n    const redis = {\n      get: jest.fn(async (key: string) => store.get(key) || null),\n      setex: jest.fn(async (key: string, _ttl: number, val: string) => {\n        store.set(key, val);\n      }),\n    } as any;\n\n    const llmService = {\n      complete: jest.fn(async () => llmResponses.shift() as string),\n    };\n\n    const embeddingService = {\n      generateEmbedding: jest.fn(async () => [0.1]),\n    };\n\n    const service = new GraphRAGService(\n      neo4jDriver,\n      llmService as any,\n      embeddingService as any,\n      redis,\n    );\n    return { service, neo4jSession, llmService };\n  }\n\n  beforeEach(() => {\n    graphragSchemaFailuresTotal.reset();\n    graphragCacheHitRatio.set(0);\n  });\n\n  test(\"returns valid response and uses cache\", async () => {\n    const valid = JSON.stringify({\n      answer: \"Test\",\n      confidence: 0.9,\n      citations: { entityIds: [\"e1\"] },\n      why_paths: [\n        { from: \"e1\", to: \"e1\", relId: \"r1\", type: \"REL\" },\n      ],\n    });\n    const { service, neo4jSession } = createService([valid, valid]);\n\n    const first = await service.answer(baseRequest);\n    expect(first.answer).toBe(\"Test\");\n    expect(graphragCacheHitRatio.get().values[0].value).toBe(0);\n\n    const second = await service.answer(baseRequest);\n    expect(second.answer).toBe(\"Test\");\n    expect(graphragCacheHitRatio.get().values[0].value).toBeCloseTo(0.5);\n    expect(neo4jSession.run).toHaveBeenCalledTimes(1);\n  });\n\n  test(\"throws user-facing error with trace id on invalid output\", async () => {\n    const { service } = createService([\"not-json\", \"not-json\"]);\n    await expect(service.answer(baseRequest)).rejects.toBeInstanceOf(UserFacingError);\n    expect(graphragSchemaFailuresTotal.get().values[0].value).toBe(2);\n  });\n});\n"],"version":3}