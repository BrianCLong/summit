25d2db9c4f0f439749d82e998b7f55c7
jest.mock('../src/config/database', () => {
    const tx = {
        run: jest.fn().mockResolvedValue({ records: [{ get: () => ({ properties: { id: 'id1', investigationId: 'inv1', fromEntity: { id: 'a' }, toEntity: { id: 'b' } } }) }] }),
        commit: jest.fn(),
        rollback: jest.fn(),
    };
    const session = { beginTransaction: () => tx, close: jest.fn() };
    const pgClient = { query: jest.fn().mockResolvedValue({}), release: jest.fn() };
    return {
        getNeo4jDriver: () => ({ session: () => session }),
        getPostgresPool: () => ({ connect: () => pgClient }),
        getRedisClient: () => ({ smembers: jest.fn().mockResolvedValue([]), del: jest.fn(), get: jest.fn(), set: jest.fn(), sadd: jest.fn() }),
    };
});
const { crudResolvers: resolvers } = require('../src/graphql/resolvers/crudResolvers');
describe('Bulk mutations', () => {
    const user = { id: 'u1', tenantId: 't1' };
    test('createEntities returns array', async () => {
        const inputs = [{ type: 'PERSON', label: 'E1', investigationId: 'inv1' }];
        const res = await resolvers.Mutation.createEntities(null, { inputs }, { user });
        expect(Array.isArray(res)).toBe(true);
        expect(res).toHaveLength(1);
    });
    test('createRelationships returns array', async () => {
        const inputs = [{ type: 'CONNECTED_TO', fromEntityId: 'a', toEntityId: 'b', investigationId: 'inv1' }];
        const res = await resolvers.Mutation.createRelationships(null, { inputs }, { user });
        expect(Array.isArray(res)).toBe(true);
        expect(res).toHaveLength(1);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3NlcnZlci90ZXN0cy9idWxrLWNyZWF0ZS50ZXN0LnRzIiwibWFwcGluZ3MiOiJBQUVBLElBQUksQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEVBQUUsR0FBRyxFQUFFO0lBQ3ZDLE1BQU0sRUFBRSxHQUFHO1FBQ1QsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLGVBQWUsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUN4SyxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNqQixRQUFRLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtLQUNwQixDQUFDO0lBQ0YsTUFBTSxPQUFPLEdBQUcsRUFBRSxnQkFBZ0IsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO0lBQ2pFLE1BQU0sUUFBUSxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7SUFDaEYsT0FBTztRQUNMLGNBQWMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2xELGVBQWUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3BELGNBQWMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7S0FDdkksQ0FBQztBQUNKLENBQUMsQ0FBQyxDQUFDO0FBZkgsTUFBTSxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsR0FBRyxPQUFPLENBQUMsd0NBQXdDLENBQUMsQ0FBQztBQWlCdkYsUUFBUSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRTtJQUM5QixNQUFNLElBQUksR0FBRyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDO0lBRTFDLElBQUksQ0FBQyw4QkFBOEIsRUFBRSxLQUFLLElBQUksRUFBRTtRQUM5QyxNQUFNLE1BQU0sR0FBRyxDQUFDLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLGVBQWUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQzFFLE1BQU0sR0FBRyxHQUFHLE1BQU0sU0FBUyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ2hGLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUIsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsbUNBQW1DLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDbkQsTUFBTSxNQUFNLEdBQUcsQ0FBQyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsWUFBWSxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLGVBQWUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZHLE1BQU0sR0FBRyxHQUFHLE1BQU0sU0FBUyxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDckYsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5QixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9icmlhbmxvbmcvRGV2ZWxvcGVyL3N1bW1pdC9zZXJ2ZXIvdGVzdHMvYnVsay1jcmVhdGUudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IGNydWRSZXNvbHZlcnM6IHJlc29sdmVycyB9ID0gcmVxdWlyZSgnLi4vc3JjL2dyYXBocWwvcmVzb2x2ZXJzL2NydWRSZXNvbHZlcnMnKTtcblxuamVzdC5tb2NrKCcuLi9zcmMvY29uZmlnL2RhdGFiYXNlJywgKCkgPT4ge1xuICBjb25zdCB0eCA9IHtcbiAgICBydW46IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7IHJlY29yZHM6IFt7IGdldDogKCkgPT4gKHsgcHJvcGVydGllczogeyBpZDogJ2lkMScsIGludmVzdGlnYXRpb25JZDogJ2ludjEnLCBmcm9tRW50aXR5OiB7IGlkOiAnYScgfSwgdG9FbnRpdHk6IHsgaWQ6ICdiJyB9IH0gfSkgfV0gfSksXG4gICAgY29tbWl0OiBqZXN0LmZuKCksXG4gICAgcm9sbGJhY2s6IGplc3QuZm4oKSxcbiAgfTtcbiAgY29uc3Qgc2Vzc2lvbiA9IHsgYmVnaW5UcmFuc2FjdGlvbjogKCkgPT4gdHgsIGNsb3NlOiBqZXN0LmZuKCkgfTtcbiAgY29uc3QgcGdDbGllbnQgPSB7IHF1ZXJ5OiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoe30pLCByZWxlYXNlOiBqZXN0LmZuKCkgfTtcbiAgcmV0dXJuIHtcbiAgICBnZXROZW80akRyaXZlcjogKCkgPT4gKHsgc2Vzc2lvbjogKCkgPT4gc2Vzc2lvbiB9KSxcbiAgICBnZXRQb3N0Z3Jlc1Bvb2w6ICgpID0+ICh7IGNvbm5lY3Q6ICgpID0+IHBnQ2xpZW50IH0pLFxuICAgIGdldFJlZGlzQ2xpZW50OiAoKSA9PiAoeyBzbWVtYmVyczogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKFtdKSwgZGVsOiBqZXN0LmZuKCksIGdldDogamVzdC5mbigpLCBzZXQ6IGplc3QuZm4oKSwgc2FkZDogamVzdC5mbigpIH0pLFxuICB9O1xufSk7XG5cbmRlc2NyaWJlKCdCdWxrIG11dGF0aW9ucycsICgpID0+IHtcbiAgY29uc3QgdXNlciA9IHsgaWQ6ICd1MScsIHRlbmFudElkOiAndDEnIH07XG5cbiAgdGVzdCgnY3JlYXRlRW50aXRpZXMgcmV0dXJucyBhcnJheScsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBpbnB1dHMgPSBbeyB0eXBlOiAnUEVSU09OJywgbGFiZWw6ICdFMScsIGludmVzdGlnYXRpb25JZDogJ2ludjEnIH1dO1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHJlc29sdmVycy5NdXRhdGlvbi5jcmVhdGVFbnRpdGllcyhudWxsLCB7IGlucHV0cyB9LCB7IHVzZXIgfSk7XG4gICAgZXhwZWN0KEFycmF5LmlzQXJyYXkocmVzKSkudG9CZSh0cnVlKTtcbiAgICBleHBlY3QocmVzKS50b0hhdmVMZW5ndGgoMSk7XG4gIH0pO1xuXG4gIHRlc3QoJ2NyZWF0ZVJlbGF0aW9uc2hpcHMgcmV0dXJucyBhcnJheScsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBpbnB1dHMgPSBbeyB0eXBlOiAnQ09OTkVDVEVEX1RPJywgZnJvbUVudGl0eUlkOiAnYScsIHRvRW50aXR5SWQ6ICdiJywgaW52ZXN0aWdhdGlvbklkOiAnaW52MScgfV07XG4gICAgY29uc3QgcmVzID0gYXdhaXQgcmVzb2x2ZXJzLk11dGF0aW9uLmNyZWF0ZVJlbGF0aW9uc2hpcHMobnVsbCwgeyBpbnB1dHMgfSwgeyB1c2VyIH0pO1xuICAgIGV4cGVjdChBcnJheS5pc0FycmF5KHJlcykpLnRvQmUodHJ1ZSk7XG4gICAgZXhwZWN0KHJlcykudG9IYXZlTGVuZ3RoKDEpO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9