6324e73470aed18618d6297063def887
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const crypto_1 = __importDefault(require("crypto"));
const logger_1 = __importDefault(require("../config/logger"));
const provenance_ledger_js_1 = require("../services/provenance-ledger.js");
const logger = logger_1.default.child({ name: 'route:n8n' });
const router = express_1.default.Router();
const secret = process.env.N8N_SIGNING_SECRET || '';
const allowedIps = (process.env.N8N_ALLOWED_IPS || '')
    .split(',')
    .map((s) => s.trim())
    .filter(Boolean);
function timingSafeEqual(a, b) {
    try {
        return crypto_1.default.timingSafeEqual(Buffer.from(a), Buffer.from(b));
    }
    catch {
        return false;
    }
}
function verifySig(raw, sig) {
    const mac = crypto_1.default.createHmac('sha256', secret).update(raw).digest('hex');
    return timingSafeEqual(mac, sig || '');
}
// Self-contained raw-body route: ensure raw payload for signature verification
router.post('/webhooks/n8n', express_1.default.raw({ type: '*/*', limit: '1mb' }), async (req, res) => {
    if (!secret)
        return res.status(503).json({ ok: false, error: 'n8n disabled' });
    if (allowedIps.length && !allowedIps.includes(req.ip)) {
        return res.status(403).json({ ok: false, error: 'ip blocked' });
    }
    const sig = req.header('x-maestro-signature') || '';
    const raw = Buffer.isBuffer(req.body)
        ? req.body.toString()
        : (req.rawBody?.toString() || JSON.stringify(req.body || {}));
    req.rawBody = raw;
    if (!verifySig(raw, sig))
        return res.status(401).json({ ok: false, error: 'bad signature' });
    const provenance = provenance_ledger_js_1.ProvenanceLedgerService.getInstance();
    let payload = {};
    try {
        payload = JSON.parse(raw || '{}');
    }
    catch {
        payload = {};
    }
    req.body = payload;
    const { runId, artifact, content, meta } = (payload || {});
    if (!runId)
        return res.status(400).json({ ok: false, error: 'runId required' });
    try {
        await provenance.recordProvenanceEntry({
            operation_type: 'N8N_CALLBACK',
            actor_id: 'n8n',
            metadata: { runId, artifact, meta, len: content ? JSON.stringify(content).length : 0 },
        });
    }
    catch (e) {
        logger.warn({ err: e }, 'provenance record failed for N8N_CALLBACK');
    }
    return res.json({ ok: true });
});
exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3NlcnZlci9zcmMvcm91dGVzL244bi50cyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLHNEQUFtRTtBQUNuRSxvREFBNEI7QUFDNUIsOERBQTBDO0FBQzFDLDJFQUEyRTtBQUUzRSxNQUFNLE1BQU0sR0FBRyxnQkFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZELE1BQU0sTUFBTSxHQUFHLGlCQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7QUFFaEMsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsSUFBSSxFQUFFLENBQUM7QUFDcEQsTUFBTSxVQUFVLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsSUFBSSxFQUFFLENBQUM7S0FDbkQsS0FBSyxDQUFDLEdBQUcsQ0FBQztLQUNWLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0tBQ3BCLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUVuQixTQUFTLGVBQWUsQ0FBQyxDQUFTLEVBQUUsQ0FBUztJQUMzQyxJQUFJLENBQUM7UUFDSCxPQUFPLGdCQUFNLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFBQyxNQUFNLENBQUM7UUFDUCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7QUFDSCxDQUFDO0FBRUQsU0FBUyxTQUFTLENBQUMsR0FBVyxFQUFFLEdBQVc7SUFDekMsTUFBTSxHQUFHLEdBQUcsZ0JBQU0sQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUUsT0FBTyxl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WCxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLDJDQUEyQyxDQUFDLENBQUM7SUFDdkUsQ0FBQztJQUVELE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ2hDLENBQUMsQ0FBQyxDQUFDO0FBRUgsa0JBQWUsTUFBTSxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9icmlhbmxvbmcvRGV2ZWxvcGVyL3N1bW1pdC9zZXJ2ZXIvc3JjL3JvdXRlcy9uOG4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4cHJlc3MsIHsgUmVxdWVzdCwgUmVzcG9uc2UsIE5leHRGdW5jdGlvbiB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IGNyeXB0byBmcm9tICdjcnlwdG8nO1xuaW1wb3J0IGJhc2VMb2dnZXIgZnJvbSAnLi4vY29uZmlnL2xvZ2dlcic7XG5pbXBvcnQgeyBQcm92ZW5hbmNlTGVkZ2VyU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3Byb3ZlbmFuY2UtbGVkZ2VyLmpzJztcblxuY29uc3QgbG9nZ2VyID0gYmFzZUxvZ2dlci5jaGlsZCh7IG5hbWU6ICdyb3V0ZTpuOG4nIH0pO1xuY29uc3Qgcm91dGVyID0gZXhwcmVzcy5Sb3V0ZXIoKTtcblxuY29uc3Qgc2VjcmV0ID0gcHJvY2Vzcy5lbnYuTjhOX1NJR05JTkdfU0VDUkVUIHx8ICcnO1xuY29uc3QgYWxsb3dlZElwcyA9IChwcm9jZXNzLmVudi5OOE5fQUxMT1dFRF9JUFMgfHwgJycpXG4gIC5zcGxpdCgnLCcpXG4gIC5tYXAoKHMpID0+IHMudHJpbSgpKVxuICAuZmlsdGVyKEJvb2xlYW4pO1xuXG5mdW5jdGlvbiB0aW1pbmdTYWZlRXF1YWwoYTogc3RyaW5nLCBiOiBzdHJpbmcpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gY3J5cHRvLnRpbWluZ1NhZmVFcXVhbChCdWZmZXIuZnJvbShhKSwgQnVmZmVyLmZyb20oYikpO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmVyaWZ5U2lnKHJhdzogc3RyaW5nLCBzaWc6IHN0cmluZykge1xuICBjb25zdCBtYWMgPSBjcnlwdG8uY3JlYXRlSG1hYygnc2hhMjU2Jywgc2VjcmV0KS51cGRhdGUocmF3KS5kaWdlc3QoJ2hleCcpO1xuICByZXR1cm4gdGltaW5nU2FmZUVxdWFsKG1hYywgc2lnIHx8ICcnKTtcbn1cblxuLy8gU2VsZi1jb250YWluZWQgcmF3LWJvZHkgcm91dGU6IGVuc3VyZSByYXcgcGF5bG9hZCBmb3Igc2lnbmF0dXJlIHZlcmlmaWNhdGlvblxucm91dGVyLnBvc3QoJy93ZWJob29rcy9uOG4nLCBleHByZXNzLnJhdyh7IHR5cGU6ICcqLyonLCBsaW1pdDogJzFtYicgfSksIGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpID0+IHtcbiAgaWYgKCFzZWNyZXQpIHJldHVybiByZXMuc3RhdHVzKDUwMykuanNvbih7IG9rOiBmYWxzZSwgZXJyb3I6ICduOG4gZGlzYWJsZWQnIH0pO1xuICBpZiAoYWxsb3dlZElwcy5sZW5ndGggJiYgIWFsbG93ZWRJcHMuaW5jbHVkZXMocmVxLmlwKSkge1xuICAgIHJldHVybiByZXMuc3RhdHVzKDQwMykuanNvbih7IG9rOiBmYWxzZSwgZXJyb3I6ICdpcCBibG9ja2VkJyB9KTtcbiAgfVxuXG4gIGNvbnN0IHNpZyA9IHJlcS5oZWFkZXIoJ3gtbWFlc3Ryby1zaWduYXR1cmUnKSB8fCAnJztcbiAgY29uc3QgcmF3ID0gQnVmZmVyLmlzQnVmZmVyKChyZXEgYXMgYW55KS5ib2R5KVxuICAgID8gKHJlcSBhcyBhbnkpLmJvZHkudG9TdHJpbmcoKVxuICAgIDogKCgocmVxIGFzIGFueSkucmF3Qm9keSBhcyBCdWZmZXIgfCB1bmRlZmluZWQpPy50b1N0cmluZygpIHx8IEpTT04uc3RyaW5naWZ5KHJlcS5ib2R5IHx8IHt9KSk7XG4gIChyZXEgYXMgYW55KS5yYXdCb2R5ID0gcmF3O1xuICBpZiAoIXZlcmlmeVNpZyhyYXcsIHNpZykpIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7IG9rOiBmYWxzZSwgZXJyb3I6ICdiYWQgc2lnbmF0dXJlJyB9KTtcblxuICBjb25zdCBwcm92ZW5hbmNlID0gUHJvdmVuYW5jZUxlZGdlclNlcnZpY2UuZ2V0SW5zdGFuY2UoKTtcbiAgbGV0IHBheWxvYWQ6IGFueSA9IHt9O1xuICB0cnkgeyBwYXlsb2FkID0gSlNPTi5wYXJzZShyYXcgfHwgJ3t9Jyk7IH0gY2F0Y2ggeyBwYXlsb2FkID0ge307IH1cbiAgKHJlcSBhcyBhbnkpLmJvZHkgPSBwYXlsb2FkO1xuICBjb25zdCB7IHJ1bklkLCBhcnRpZmFjdCwgY29udGVudCwgbWV0YSB9ID0gKHBheWxvYWQgfHwge30pIGFzIGFueTtcbiAgaWYgKCFydW5JZCkgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgb2s6IGZhbHNlLCBlcnJvcjogJ3J1bklkIHJlcXVpcmVkJyB9KTtcblxuICB0cnkge1xuICAgIGF3YWl0IHByb3ZlbmFuY2UucmVjb3JkUHJvdmVuYW5jZUVudHJ5KHtcbiAgICAgIG9wZXJhdGlvbl90eXBlOiAnTjhOX0NBTExCQUNLJyxcbiAgICAgIGFjdG9yX2lkOiAnbjhuJyxcbiAgICAgIG1ldGFkYXRhOiB7IHJ1bklkLCBhcnRpZmFjdCwgbWV0YSwgbGVuOiBjb250ZW50ID8gSlNPTi5zdHJpbmdpZnkoY29udGVudCkubGVuZ3RoIDogMCB9LFxuICAgIH0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nZ2VyLndhcm4oeyBlcnI6IGUgfSwgJ3Byb3ZlbmFuY2UgcmVjb3JkIGZhaWxlZCBmb3IgTjhOX0NBTExCQUNLJyk7XG4gIH1cblxuICByZXR1cm4gcmVzLmpzb24oeyBvazogdHJ1ZSB9KTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCByb3V0ZXI7XG4iXSwidmVyc2lvbiI6M30=