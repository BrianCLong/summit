08163bbeeaf39a0556db39e8c7582124
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerModel = registerModel;
exports.knn = knn;
const pg_1 = require("pg");
const pg = new pg_1.Pool({ connectionString: process.env.DATABASE_URL });
async function verifyCosign(_uri) {
    // TODO: implement cosign verification of OCI/S3 reference
    return false;
}
async function registerModel(input, actor) {
    if (!(await verifyCosign(input.uri)))
        throw new Error('unsigned model');
    const { rows: [m] } = await pg.query(`INSERT INTO model_registry(name,version,type,uri,signature,metrics,created_by)
     VALUES ($1,$2,$3,$4,$5,$6,$7)
     RETURNING id, name, version, type, uri, metrics, created_by AS "createdBy", created_at AS "createdAt"`, [input.name, input.version, input.type, input.uri, input.signature, input.metrics, actor]);
    return m;
}
async function knn(tenant, entityId, k) {
    const { rows: [cur] } = await pg.query(`SELECT vec, version FROM embeddings WHERE tenant=$1 AND entity_id=$2 ORDER BY updated_at DESC LIMIT 1`, [tenant, entityId]);
    if (!cur)
        return [];
    const { rows } = await pg.query(`SELECT entity_id, 1 - (embeddings.vec <=> $1::vector) AS score, meta
     FROM embeddings WHERE tenant=$2 AND entity_id <> $3
     ORDER BY embeddings.vec <=> $1::vector ASC LIMIT $4`, [cur.vec, tenant, entityId, k]);
    return rows.map((r) => ({ entityId: r.entity_id, score: Number(r.score), meta: r.meta }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3NlcnZlci9zcmMvY29uZHVjdG9yL21vZGVscy50cyIsIm1hcHBpbmdzIjoiOztBQVNBLHNDQVNDO0FBRUQsa0JBYUM7QUFqQ0QsMkJBQTBCO0FBRTFCLE1BQU0sRUFBRSxHQUFHLElBQUksU0FBSSxDQUFDLEVBQUUsZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDO0FBRXBFLEtBQUssVUFBVSxZQUFZLENBQUMsSUFBWTtJQUN0QywwREFBMEQ7SUFDMUQsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDO0FBRU0sS0FBSyxVQUFVLGFBQWEsQ0FBQyxLQUFVLEVBQUUsS0FBYTtJQUMzRCxJQUFJLENBQUMsQ0FBQyxNQUFNLFlBQVksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDeEUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUNsQzs7MkdBRXVHLEVBQ3ZHLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQzFGLENBQUM7SUFDRixPQUFPLENBQUMsQ0FBQztBQUNYLENBQUM7QUFFTSxLQUFLLFVBQVUsR0FBRyxDQUFDLE1BQWMsRUFBRSxRQUFnQixFQUFFLENBQVM7SUFDbkUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUNwQyx1R0FBdUcsRUFDdkcsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQ25CLENBQUM7SUFDRixJQUFJLENBQUMsR0FBRztRQUFFLE9BQU8sRUFBRSxDQUFDO0lBQ3BCLE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQzdCOzt5REFFcUQsRUFDckQsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQy9CLENBQUM7SUFDRixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNqRyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9icmlhbmxvbmcvRGV2ZWxvcGVyL3N1bW1pdC9zZXJ2ZXIvc3JjL2NvbmR1Y3Rvci9tb2RlbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUG9vbCB9IGZyb20gJ3BnJztcblxuY29uc3QgcGcgPSBuZXcgUG9vbCh7IGNvbm5lY3Rpb25TdHJpbmc6IHByb2Nlc3MuZW52LkRBVEFCQVNFX1VSTCB9KTtcblxuYXN5bmMgZnVuY3Rpb24gdmVyaWZ5Q29zaWduKF91cmk6IHN0cmluZykge1xuICAvLyBUT0RPOiBpbXBsZW1lbnQgY29zaWduIHZlcmlmaWNhdGlvbiBvZiBPQ0kvUzMgcmVmZXJlbmNlXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlZ2lzdGVyTW9kZWwoaW5wdXQ6IGFueSwgYWN0b3I6IHN0cmluZykge1xuICBpZiAoIShhd2FpdCB2ZXJpZnlDb3NpZ24oaW5wdXQudXJpKSkpIHRocm93IG5ldyBFcnJvcigndW5zaWduZWQgbW9kZWwnKTtcbiAgY29uc3QgeyByb3dzOiBbbV0gfSA9IGF3YWl0IHBnLnF1ZXJ5KFxuICAgIGBJTlNFUlQgSU5UTyBtb2RlbF9yZWdpc3RyeShuYW1lLHZlcnNpb24sdHlwZSx1cmksc2lnbmF0dXJlLG1ldHJpY3MsY3JlYXRlZF9ieSlcbiAgICAgVkFMVUVTICgkMSwkMiwkMywkNCwkNSwkNiwkNylcbiAgICAgUkVUVVJOSU5HIGlkLCBuYW1lLCB2ZXJzaW9uLCB0eXBlLCB1cmksIG1ldHJpY3MsIGNyZWF0ZWRfYnkgQVMgXCJjcmVhdGVkQnlcIiwgY3JlYXRlZF9hdCBBUyBcImNyZWF0ZWRBdFwiYCxcbiAgICBbaW5wdXQubmFtZSwgaW5wdXQudmVyc2lvbiwgaW5wdXQudHlwZSwgaW5wdXQudXJpLCBpbnB1dC5zaWduYXR1cmUsIGlucHV0Lm1ldHJpY3MsIGFjdG9yXSxcbiAgKTtcbiAgcmV0dXJuIG07XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBrbm4odGVuYW50OiBzdHJpbmcsIGVudGl0eUlkOiBzdHJpbmcsIGs6IG51bWJlcikge1xuICBjb25zdCB7IHJvd3M6IFtjdXJdIH0gPSBhd2FpdCBwZy5xdWVyeShcbiAgICBgU0VMRUNUIHZlYywgdmVyc2lvbiBGUk9NIGVtYmVkZGluZ3MgV0hFUkUgdGVuYW50PSQxIEFORCBlbnRpdHlfaWQ9JDIgT1JERVIgQlkgdXBkYXRlZF9hdCBERVNDIExJTUlUIDFgLFxuICAgIFt0ZW5hbnQsIGVudGl0eUlkXSxcbiAgKTtcbiAgaWYgKCFjdXIpIHJldHVybiBbXTtcbiAgY29uc3QgeyByb3dzIH0gPSBhd2FpdCBwZy5xdWVyeShcbiAgICBgU0VMRUNUIGVudGl0eV9pZCwgMSAtIChlbWJlZGRpbmdzLnZlYyA8PT4gJDE6OnZlY3RvcikgQVMgc2NvcmUsIG1ldGFcbiAgICAgRlJPTSBlbWJlZGRpbmdzIFdIRVJFIHRlbmFudD0kMiBBTkQgZW50aXR5X2lkIDw+ICQzXG4gICAgIE9SREVSIEJZIGVtYmVkZGluZ3MudmVjIDw9PiAkMTo6dmVjdG9yIEFTQyBMSU1JVCAkNGAsXG4gICAgW2N1ci52ZWMsIHRlbmFudCwgZW50aXR5SWQsIGtdLFxuICApO1xuICByZXR1cm4gcm93cy5tYXAoKHI6IGFueSkgPT4gKHsgZW50aXR5SWQ6IHIuZW50aXR5X2lkLCBzY29yZTogTnVtYmVyKHIuc2NvcmUpLCBtZXRhOiByLm1ldGEgfSkpO1xufVxuXG4iXSwidmVyc2lvbiI6M30=