{"file":"/Users/brianlong/Developer/summit/server/tests/graphAnalytics.service.test.ts","mappings":"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","names":[],"sources":["/Users/brianlong/Developer/summit/server/tests/graphAnalytics.service.test.ts"],"sourcesContent":["import GraphAnalyticsService = require('../src/services/GraphAnalyticsService');\n\ndescribe('GraphAnalyticsService caching', () => {\n  const createRedisStub = () => {\n    const store = new Map<string, string>();\n    return {\n      get: jest.fn(async (key: string) => store.get(key) ?? null),\n      set: jest.fn(async (key: string, value: string) => {\n        store.set(key, value);\n        return 'OK';\n      }),\n      del: jest.fn(async (key: string) => {\n        store.delete(key);\n        return 1;\n      }),\n    };\n  };\n\n  it('returns cached PageRank results on subsequent calls', async () => {\n    const redis = createRedisStub();\n    const service = new GraphAnalyticsService({\n      driver: { session: jest.fn() } as any,\n      redis,\n      cacheTtl: 10,\n    });\n\n    jest.spyOn(service as any, 'ensureGraphProjection').mockResolvedValue(undefined);\n    const execute = jest.spyOn(service as any, 'executePageRank').mockResolvedValue([\n      { nodeId: 'n1', label: 'Node', score: 0.5 },\n    ]);\n\n    const first = await service.calculatePageRank({ investigationId: 'inv-1', limit: 5 });\n    const second = await service.calculatePageRank({ investigationId: 'inv-1', limit: 5 });\n\n    expect(first).toEqual(second);\n    expect(execute).toHaveBeenCalledTimes(1);\n    expect(redis.get).toHaveBeenCalled();\n    expect(redis.set).toHaveBeenCalled();\n  });\n\n  it('bypasses the cache when forceRefresh is true', async () => {\n    const redis = createRedisStub();\n    const service = new GraphAnalyticsService({ driver: { session: jest.fn() } as any, redis });\n\n    jest.spyOn(service as any, 'ensureGraphProjection').mockResolvedValue(undefined);\n    jest.spyOn(service as any, 'dropGraphProjection').mockResolvedValue(undefined);\n    const execute = jest.spyOn(service as any, 'executePageRank').mockResolvedValue([\n      { nodeId: 'n1', label: 'Node', score: 0.5 },\n    ]);\n\n    await service.calculatePageRank({ investigationId: 'inv-2', limit: 10, forceRefresh: true });\n\n    expect(execute).toHaveBeenCalledTimes(1);\n    expect(redis.del).toHaveBeenCalled();\n  });\n});\n"],"version":3}