ad133bca0c0e8c0e44f613287d32a94a
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const GraphAnalyticsService = require("../src/services/GraphAnalyticsService");
describe('GraphAnalyticsService caching', () => {
    const createRedisStub = () => {
        const store = new Map();
        return {
            get: jest.fn(async (key) => store.get(key) ?? null),
            set: jest.fn(async (key, value) => {
                store.set(key, value);
                return 'OK';
            }),
            del: jest.fn(async (key) => {
                store.delete(key);
                return 1;
            }),
        };
    };
    it('returns cached PageRank results on subsequent calls', async () => {
        const redis = createRedisStub();
        const service = new GraphAnalyticsService({
            driver: { session: jest.fn() },
            redis,
            cacheTtl: 10,
        });
        jest.spyOn(service, 'ensureGraphProjection').mockResolvedValue(undefined);
        const execute = jest.spyOn(service, 'executePageRank').mockResolvedValue([
            { nodeId: 'n1', label: 'Node', score: 0.5 },
        ]);
        const first = await service.calculatePageRank({ investigationId: 'inv-1', limit: 5 });
        const second = await service.calculatePageRank({ investigationId: 'inv-1', limit: 5 });
        expect(first).toEqual(second);
        expect(execute).toHaveBeenCalledTimes(1);
        expect(redis.get).toHaveBeenCalled();
        expect(redis.set).toHaveBeenCalled();
    });
    it('bypasses the cache when forceRefresh is true', async () => {
        const redis = createRedisStub();
        const service = new GraphAnalyticsService({ driver: { session: jest.fn() }, redis });
        jest.spyOn(service, 'ensureGraphProjection').mockResolvedValue(undefined);
        jest.spyOn(service, 'dropGraphProjection').mockResolvedValue(undefined);
        const execute = jest.spyOn(service, 'executePageRank').mockResolvedValue([
            { nodeId: 'n1', label: 'Node', score: 0.5 },
        ]);
        await service.calculatePageRank({ investigationId: 'inv-2', limit: 10, forceRefresh: true });
        expect(execute).toHaveBeenCalledTimes(1);
        expect(redis.del).toHaveBeenCalled();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3NlcnZlci90ZXN0cy9ncmFwaEFuYWx5dGljcy5zZXJ2aWNlLnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSwrRUFBZ0Y7QUFFaEYsUUFBUSxDQUFDLCtCQUErQixFQUFFLEdBQUcsRUFBRTtJQUM3QyxNQUFNLGVBQWUsR0FBRyxHQUFHLEVBQUU7UUFDM0IsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLEVBQWtCLENBQUM7UUFDeEMsT0FBTztZQUNMLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxHQUFXLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDO1lBQzNELEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxHQUFXLEVBQUUsS0FBYSxFQUFFLEVBQUU7Z0JBQ2hELEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO2dCQUN0QixPQUFPLElBQUksQ0FBQztZQUNkLENBQUMsQ0FBQztZQUNGLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxHQUFXLEVBQUUsRUFBRTtnQkFDakMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDbEIsT0FBTyxDQUFDLENBQUM7WUFDWCxDQUFDLENBQUM7U0FDSCxDQUFDO0lBQ0osQ0FBQyxDQUFDO0lBRUYsRUFBRSxDQUFDLHFEQUFxRCxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ25FLE1BQU0sS0FBSyxHQUFHLGVBQWUsRUFBRSxDQUFDO1FBQ2hDLE1BQU0sT0FBTyxHQUFHLElBQUkscUJBQXFCLENBQUM7WUFDeEMsTUFBTSxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBUztZQUNyQyxLQUFLO1lBQ0wsUUFBUSxFQUFFLEVBQUU7U0FDYixDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQWMsRUFBRSx1QkFBdUIsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2pGLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBYyxFQUFFLGlCQUFpQixDQUFDLENBQUMsaUJBQWlCLENBQUM7WUFDOUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRTtTQUM1QyxDQUFDLENBQUM7UUFFSCxNQUFNLEtBQUssR0FBRyxNQUFNLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLGVBQWUsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdEYsTUFBTSxNQUFNLEdBQUcsTUFBTSxPQUFPLENBQUMsaUJBQWlCLENBQUMsRUFBRSxlQUFlLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRXZGLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDOUIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUNyQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDdkMsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsOENBQThDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDNUQsTUFBTSxLQUFLLEdBQUcsZUFBZSxFQUFFLENBQUM7UUFDaEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxxQkFBcUIsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQVMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBRTVGLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBYyxFQUFFLHVCQUF1QixDQUFDLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDakYsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFjLEVBQUUscUJBQXFCLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUMvRSxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQWMsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDLGlCQUFpQixDQUFDO1lBQzlFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUU7U0FDNUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxPQUFPLENBQUMsaUJBQWlCLENBQUMsRUFBRSxlQUFlLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFFN0YsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUN2QyxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9icmlhbmxvbmcvRGV2ZWxvcGVyL3N1bW1pdC9zZXJ2ZXIvdGVzdHMvZ3JhcGhBbmFseXRpY3Muc2VydmljZS50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBHcmFwaEFuYWx5dGljc1NlcnZpY2UgPSByZXF1aXJlKCcuLi9zcmMvc2VydmljZXMvR3JhcGhBbmFseXRpY3NTZXJ2aWNlJyk7XG5cbmRlc2NyaWJlKCdHcmFwaEFuYWx5dGljc1NlcnZpY2UgY2FjaGluZycsICgpID0+IHtcbiAgY29uc3QgY3JlYXRlUmVkaXNTdHViID0gKCkgPT4ge1xuICAgIGNvbnN0IHN0b3JlID0gbmV3IE1hcDxzdHJpbmcsIHN0cmluZz4oKTtcbiAgICByZXR1cm4ge1xuICAgICAgZ2V0OiBqZXN0LmZuKGFzeW5jIChrZXk6IHN0cmluZykgPT4gc3RvcmUuZ2V0KGtleSkgPz8gbnVsbCksXG4gICAgICBzZXQ6IGplc3QuZm4oYXN5bmMgKGtleTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSA9PiB7XG4gICAgICAgIHN0b3JlLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuICdPSyc7XG4gICAgICB9KSxcbiAgICAgIGRlbDogamVzdC5mbihhc3luYyAoa2V5OiBzdHJpbmcpID0+IHtcbiAgICAgICAgc3RvcmUuZGVsZXRlKGtleSk7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfSksXG4gICAgfTtcbiAgfTtcblxuICBpdCgncmV0dXJucyBjYWNoZWQgUGFnZVJhbmsgcmVzdWx0cyBvbiBzdWJzZXF1ZW50IGNhbGxzJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHJlZGlzID0gY3JlYXRlUmVkaXNTdHViKCk7XG4gICAgY29uc3Qgc2VydmljZSA9IG5ldyBHcmFwaEFuYWx5dGljc1NlcnZpY2Uoe1xuICAgICAgZHJpdmVyOiB7IHNlc3Npb246IGplc3QuZm4oKSB9IGFzIGFueSxcbiAgICAgIHJlZGlzLFxuICAgICAgY2FjaGVUdGw6IDEwLFxuICAgIH0pO1xuXG4gICAgamVzdC5zcHlPbihzZXJ2aWNlIGFzIGFueSwgJ2Vuc3VyZUdyYXBoUHJvamVjdGlvbicpLm1vY2tSZXNvbHZlZFZhbHVlKHVuZGVmaW5lZCk7XG4gICAgY29uc3QgZXhlY3V0ZSA9IGplc3Quc3B5T24oc2VydmljZSBhcyBhbnksICdleGVjdXRlUGFnZVJhbmsnKS5tb2NrUmVzb2x2ZWRWYWx1ZShbXG4gICAgICB7IG5vZGVJZDogJ24xJywgbGFiZWw6ICdOb2RlJywgc2NvcmU6IDAuNSB9LFxuICAgIF0pO1xuXG4gICAgY29uc3QgZmlyc3QgPSBhd2FpdCBzZXJ2aWNlLmNhbGN1bGF0ZVBhZ2VSYW5rKHsgaW52ZXN0aWdhdGlvbklkOiAnaW52LTEnLCBsaW1pdDogNSB9KTtcbiAgICBjb25zdCBzZWNvbmQgPSBhd2FpdCBzZXJ2aWNlLmNhbGN1bGF0ZVBhZ2VSYW5rKHsgaW52ZXN0aWdhdGlvbklkOiAnaW52LTEnLCBsaW1pdDogNSB9KTtcblxuICAgIGV4cGVjdChmaXJzdCkudG9FcXVhbChzZWNvbmQpO1xuICAgIGV4cGVjdChleGVjdXRlKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gICAgZXhwZWN0KHJlZGlzLmdldCkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIGV4cGVjdChyZWRpcy5zZXQpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgfSk7XG5cbiAgaXQoJ2J5cGFzc2VzIHRoZSBjYWNoZSB3aGVuIGZvcmNlUmVmcmVzaCBpcyB0cnVlJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHJlZGlzID0gY3JlYXRlUmVkaXNTdHViKCk7XG4gICAgY29uc3Qgc2VydmljZSA9IG5ldyBHcmFwaEFuYWx5dGljc1NlcnZpY2UoeyBkcml2ZXI6IHsgc2Vzc2lvbjogamVzdC5mbigpIH0gYXMgYW55LCByZWRpcyB9KTtcblxuICAgIGplc3Quc3B5T24oc2VydmljZSBhcyBhbnksICdlbnN1cmVHcmFwaFByb2plY3Rpb24nKS5tb2NrUmVzb2x2ZWRWYWx1ZSh1bmRlZmluZWQpO1xuICAgIGplc3Quc3B5T24oc2VydmljZSBhcyBhbnksICdkcm9wR3JhcGhQcm9qZWN0aW9uJykubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKTtcbiAgICBjb25zdCBleGVjdXRlID0gamVzdC5zcHlPbihzZXJ2aWNlIGFzIGFueSwgJ2V4ZWN1dGVQYWdlUmFuaycpLm1vY2tSZXNvbHZlZFZhbHVlKFtcbiAgICAgIHsgbm9kZUlkOiAnbjEnLCBsYWJlbDogJ05vZGUnLCBzY29yZTogMC41IH0sXG4gICAgXSk7XG5cbiAgICBhd2FpdCBzZXJ2aWNlLmNhbGN1bGF0ZVBhZ2VSYW5rKHsgaW52ZXN0aWdhdGlvbklkOiAnaW52LTInLCBsaW1pdDogMTAsIGZvcmNlUmVmcmVzaDogdHJ1ZSB9KTtcblxuICAgIGV4cGVjdChleGVjdXRlKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gICAgZXhwZWN0KHJlZGlzLmRlbCkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9