{"file":"/Users/brianlong/Developer/summit/server/src/conductor/contracts/trust.ts","mappings":";;AAaA,kDAIC;AAED,kDAQC;AA3BD,2BAA0B;AAE1B,MAAM,EAAE,GAAG,IAAI,SAAI,CAAC,EAAE,gBAAgB,EAAE,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC,CAAC;AAW7D,KAAK,UAAU,mBAAmB,CAAC,EAAiB;IACzD,IAAI,IAAI,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,IAAI,IAAI,EAAE;QAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;IAC7E,wEAAwE;IACxE,OAAO,IAAI,CAAC;AACd,CAAC;AAEM,KAAK,UAAU,mBAAmB,CAAC,EAAiB;IACzD,MAAM,mBAAmB,CAAC,EAAE,CAAC,CAAC;IAC9B,MAAM,EAAE,CAAC,KAAK,CACZ;;4DAEwD,EACxD,CAAC,EAAE,CAAC,cAAc,EAAE,EAAE,CAAC,cAAc,EAAE,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,SAAS,EAAE,EAAE,CAAC,SAAS,EAAE,EAAE,CAAC,SAAS,CAAC,CAC3F,CAAC;AACJ,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/server/src/conductor/contracts/trust.ts"],"sourcesContent":["import { Pool } from 'pg';\n\nconst pg = new Pool({ connectionString: process.env.DATABASE_URL });\n\nexport type TrustContract = {\n  providerTenant: string;\n  consumerTenant: string;\n  scope: any;\n  residency: string;\n  expiresAt: string;\n  signature: string;\n};\n\nexport async function verifyTrustContract(tc: TrustContract) {\n  if (new Date(tc.expiresAt) < new Date()) throw new Error('contract expired');\n  // TODO: Verify signature against provider's registered key (PKI/cosign)\n  return true;\n}\n\nexport async function upsertTrustContract(tc: TrustContract) {\n  await verifyTrustContract(tc);\n  await pg.query(\n    `INSERT INTO trust_contracts(id, provider, consumer, scope, residency, expires_at, signature)\n     VALUES (gen_random_uuid(), $1, $2, $3, $4, $5, $6)\n     ON CONFLICT (provider, consumer, signature) DO NOTHING`,\n    [tc.providerTenant, tc.consumerTenant, tc.scope, tc.residency, tc.expiresAt, tc.signature],\n  );\n}\n\n"],"version":3}