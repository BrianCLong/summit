4a4c5db7157f55974832e5b4f355aaa4
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.streamProcess = streamProcess;
const pg_1 = require("pg");
const pg = new pg_1.Pool({ connectionString: process.env.DATABASE_URL });
async function streamProcess(ctx, step, msg) {
    const srcTs = msg.ts ? new Date(msg.ts) : new Date();
    const age = Date.now() - srcTs.getTime();
    if (step.freshness?.freshWithin && age > parseISODuration(step.freshness.freshWithin)) {
        await pg.query(`INSERT INTO data_freshness(run_id,step_id,source_ts,age_ms) VALUES ($1,$2,$3,$4)
       ON CONFLICT (run_id,step_id) DO UPDATE SET source_ts=$3, age_ms=$4`, [ctx.id, step.id, srcTs, age]);
        return; // gate
    }
    const out = { ...(typeof msg.value === 'string' ? JSON.parse(msg.value || '{}') : msg.value || {}), _key: msg.key };
    ctx.setOutputs(step.id, out);
}
function parseISODuration(s) {
    const m = /^(\d+)([smhd])$/.exec(s || '');
    const n = Number(m?.[1] || 0);
    const u = m?.[2] || 's';
    return n * (u === 's' ? 1 : u === 'm' ? 60 : u === 'h' ? 3600 : 86400) * 1000;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3NlcnZlci9zcmMvY29uZHVjdG9yL3N0ZXBzL3N0cmVhbVByb2Nlc3MudHMiLCJtYXBwaW5ncyI6Ijs7QUFJQSxzQ0FhQztBQWpCRCwyQkFBMEI7QUFFMUIsTUFBTSxFQUFFLEdBQUcsSUFBSSxTQUFJLENBQUMsRUFBRSxnQkFBZ0IsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7QUFFN0QsS0FBSyxVQUFVLGFBQWEsQ0FBQyxHQUFRLEVBQUUsSUFBUyxFQUFFLEdBQTZDO0lBQ3BHLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztJQUNyRCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3pDLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRSxXQUFXLElBQUksR0FBRyxHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQztRQUN0RixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQ1o7MEVBQ29FLEVBQ3BFLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FDOUIsQ0FBQztRQUNGLE9BQU8sQ0FBQyxPQUFPO0lBQ2pCLENBQUM7SUFDRCxNQUFNLEdBQUcsR0FBRyxFQUFFLEdBQUcsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxLQUFLLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNwSCxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDL0IsQ0FBQztBQUVELFNBQVMsZ0JBQWdCLENBQUMsQ0FBUztJQUNqQyxNQUFNLENBQUMsR0FBRyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQzFDLE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUM5QixNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUM7SUFDeEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUM7QUFDaEYsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvYnJpYW5sb25nL0RldmVsb3Blci9zdW1taXQvc2VydmVyL3NyYy9jb25kdWN0b3Ivc3RlcHMvc3RyZWFtUHJvY2Vzcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQb29sIH0gZnJvbSAncGcnO1xuXG5jb25zdCBwZyA9IG5ldyBQb29sKHsgY29ubmVjdGlvblN0cmluZzogcHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMIH0pO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3RyZWFtUHJvY2VzcyhjdHg6IGFueSwgc3RlcDogYW55LCBtc2c6IHsga2V5OiBzdHJpbmc7IHZhbHVlOiBhbnk7IHRzPzogc3RyaW5nIH0pIHtcbiAgY29uc3Qgc3JjVHMgPSBtc2cudHMgPyBuZXcgRGF0ZShtc2cudHMpIDogbmV3IERhdGUoKTtcbiAgY29uc3QgYWdlID0gRGF0ZS5ub3coKSAtIHNyY1RzLmdldFRpbWUoKTtcbiAgaWYgKHN0ZXAuZnJlc2huZXNzPy5mcmVzaFdpdGhpbiAmJiBhZ2UgPiBwYXJzZUlTT0R1cmF0aW9uKHN0ZXAuZnJlc2huZXNzLmZyZXNoV2l0aGluKSkge1xuICAgIGF3YWl0IHBnLnF1ZXJ5KFxuICAgICAgYElOU0VSVCBJTlRPIGRhdGFfZnJlc2huZXNzKHJ1bl9pZCxzdGVwX2lkLHNvdXJjZV90cyxhZ2VfbXMpIFZBTFVFUyAoJDEsJDIsJDMsJDQpXG4gICAgICAgT04gQ09ORkxJQ1QgKHJ1bl9pZCxzdGVwX2lkKSBETyBVUERBVEUgU0VUIHNvdXJjZV90cz0kMywgYWdlX21zPSQ0YCxcbiAgICAgIFtjdHguaWQsIHN0ZXAuaWQsIHNyY1RzLCBhZ2VdLFxuICAgICk7XG4gICAgcmV0dXJuOyAvLyBnYXRlXG4gIH1cbiAgY29uc3Qgb3V0ID0geyAuLi4odHlwZW9mIG1zZy52YWx1ZSA9PT0gJ3N0cmluZycgPyBKU09OLnBhcnNlKG1zZy52YWx1ZSB8fCAne30nKSA6IG1zZy52YWx1ZSB8fCB7fSksIF9rZXk6IG1zZy5rZXkgfTtcbiAgY3R4LnNldE91dHB1dHMoc3RlcC5pZCwgb3V0KTtcbn1cblxuZnVuY3Rpb24gcGFyc2VJU09EdXJhdGlvbihzOiBzdHJpbmcpIHtcbiAgY29uc3QgbSA9IC9eKFxcZCspKFtzbWhkXSkkLy5leGVjKHMgfHwgJycpO1xuICBjb25zdCBuID0gTnVtYmVyKG0/LlsxXSB8fCAwKTtcbiAgY29uc3QgdSA9IG0/LlsyXSB8fCAncyc7XG4gIHJldHVybiBuICogKHUgPT09ICdzJyA/IDEgOiB1ID09PSAnbScgPyA2MCA6IHUgPT09ICdoJyA/IDM2MDAgOiA4NjQwMCkgKiAxMDAwO1xufVxuXG4iXSwidmVyc2lvbiI6M30=