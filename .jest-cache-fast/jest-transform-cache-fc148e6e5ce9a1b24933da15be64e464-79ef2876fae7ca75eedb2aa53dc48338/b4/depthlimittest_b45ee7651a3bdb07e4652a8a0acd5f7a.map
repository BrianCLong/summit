{"file":"/Users/brianlong/Developer/summit/server/tests/depth-limit.test.ts","mappings":";;AAAA,qEAAkE;AAClE,qCAAuD;AAEvD,QAAQ,CAAC,gCAAgC,EAAE,GAAG,EAAE;IAC9C,MAAM,MAAM,GAAG,IAAA,qBAAW,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;GAyB1B,CAAC,CAAC;IAEH,IAAI,CAAC,yCAAyC,EAAE,GAAG,EAAE;QACnD,MAAM,UAAU,GAAG,IAAA,eAAK,EAAC;;;;;;;;;;;;;;;KAexB,CAAC,CAAC;QAEH,MAAM,MAAM,GAAG,IAAA,kBAAQ,EAAC,MAAM,EAAE,UAAU,EAAE,CAAC,IAAA,uBAAU,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7D,MAAM,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,6CAA6C,EAAE,GAAG,EAAE;QACvD,MAAM,SAAS,GAAG,IAAA,eAAK,EAAC;;;;;;;;;;;;;;;;;;;;;;;;KAwBvB,CAAC,CAAC;QAEH,MAAM,MAAM,GAAG,IAAA,kBAAQ,EAAC,MAAM,EAAE,SAAS,EAAE,CAAC,IAAA,uBAAU,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5D,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACzC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC;QACzD,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QAC7C,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,gDAAgD,EAAE,GAAG,EAAE;QAC1D,MAAM,iBAAiB,GAAG,IAAA,eAAK,EAAC;;;;;;;;;;;;;;;;;;;;;;;;KAwB/B,CAAC,CAAC;QAEH,MAAM,MAAM,GAAG,IAAA,kBAAQ,EAAC,MAAM,EAAE,iBAAiB,EAAE,CAAC,IAAA,uBAAU,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACpE,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACzC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,mCAAmC,EAAE,GAAG,EAAE;QAC7C,MAAM,aAAa,GAAG,IAAA,eAAK,EAAC;;;;;;;;;;;;KAY3B,CAAC,CAAC;QAEH,iCAAiC;QACjC,MAAM,gBAAgB,GAAG,IAAA,kBAAQ,EAAC,MAAM,EAAE,aAAa,EAAE,CAAC,IAAA,uBAAU,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1E,MAAM,CAAC,gBAAgB,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QAEzC,iCAAiC;QACjC,MAAM,gBAAgB,GAAG,IAAA,kBAAQ,EAAC,MAAM,EAAE,aAAa,EAAE,CAAC,IAAA,uBAAU,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1E,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/server/tests/depth-limit.test.ts"],"sourcesContent":["import { depthLimit } from '../src/graphql/validation/depthLimit';\nimport { validate, buildSchema, parse } from 'graphql';\n\ndescribe('GraphQL Depth Limit Validation', () => {\n  const schema = buildSchema(`\n    type Query {\n      user: User\n    }\n    \n    type User {\n      id: ID!\n      name: String!\n      friends: [User!]!\n      posts: [Post!]!\n    }\n    \n    type Post {\n      id: ID!\n      title: String!\n      author: User!\n      comments: [Comment!]!\n    }\n    \n    type Comment {\n      id: ID!\n      content: String!\n      author: User!\n      post: Post!\n    }\n  `);\n\n  test('should allow queries within depth limit', () => {\n    const validQuery = parse(`\n      query {\n        user {\n          id\n          name\n          friends {\n            id\n            name\n            posts {\n              id\n              title\n            }\n          }\n        }\n      }\n    `);\n\n    const errors = validate(schema, validQuery, [depthLimit(8)]);\n    expect(errors).toHaveLength(0);\n  });\n\n  test('should reject queries exceeding depth limit', () => {\n    const deepQuery = parse(`\n      query {\n        user {\n          friends {\n            friends {\n              friends {\n                friends {\n                  friends {\n                    friends {\n                      friends {\n                        friends {\n                          friends {\n                            id\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    `);\n\n    const errors = validate(schema, deepQuery, [depthLimit(8)]);\n    expect(errors.length).toBeGreaterThan(0);\n    expect(errors[0].message).toContain('Query is too deep');\n    expect(errors[0].message).toContain('depth');\n    expect(errors[0].message).toContain('> 8');\n  });\n\n  test('should include operation name in error message', () => {\n    const deepQueryWithName = parse(`\n      query DeepUserQuery {\n        user {\n          friends {\n            friends {\n              friends {\n                friends {\n                  friends {\n                    friends {\n                      friends {\n                        friends {\n                          friends {\n                            id\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    `);\n\n    const errors = validate(schema, deepQueryWithName, [depthLimit(8)]);\n    expect(errors.length).toBeGreaterThan(0);\n    expect(errors[0].message).toContain('DeepUserQuery');\n  });\n\n  test('should handle custom depth limits', () => {\n    const moderateQuery = parse(`\n      query {\n        user {\n          friends {\n            friends {\n              friends {\n                id\n              }\n            }\n          }\n        }\n      }\n    `);\n\n    // Should pass with depth limit 5\n    const errorsWithLimit5 = validate(schema, moderateQuery, [depthLimit(5)]);\n    expect(errorsWithLimit5).toHaveLength(0);\n\n    // Should fail with depth limit 3\n    const errorsWithLimit3 = validate(schema, moderateQuery, [depthLimit(3)]);\n    expect(errorsWithLimit3.length).toBeGreaterThan(0);\n  });\n});"],"version":3}