{"file":"/Users/brianlong/Developer/summit/server/tests/attachment-service.test.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mCAAkC;AAClC,mCAAoC;AACpC,2CAA6B;AAC7B,yEAA4F;AAC5F,iEAA0E;AAE1E,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;AAE7D,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;IACjC,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;QAC/C,MAAM,OAAO,GAAG,IAAI,qCAAiB,CAAC,OAAO,CAAC,CAAC;QAC/C,MAAM,OAAO,GAAG,aAAa,CAAC;QAC9B,MAAM,MAAM,GAAG,iBAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACtC,MAAM,IAAI,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAE,YAAY,EAAE,CAAC,CAAC;QAC1F,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAA,mBAAU,EAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;IAC/E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACjC,MAAM,IAAI,GAAG,2DAA2D,CAAC;QACzE,MAAM,KAAK,GAAG,IAAA,6BAAS,EAAC,IAAI,CAAC,CAAC;QAC9B,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC;QACnD,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAC7C,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC1C,MAAM,QAAQ,GAAG,IAAA,6BAAS,EAAC,IAAI,CAAC,CAAC;QACjC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC;QACnD,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;QAC/C,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;QACjD,MAAM,SAAS,GAAG,0BAA0B,CAAC;QAC7C,MAAM,IAAI,GAAG,IAAA,mCAAsB,EAAC,MAAM,EAAE,SAAS,EAAE,GAAG,EAAE,SAAS,CAAC,CAAC;QACvE,MAAM,IAAI,GAAG,IAAA,mCAAsB,EAAC,MAAM,EAAE,SAAS,EAAE,GAAG,EAAE,SAAS,CAAC,CAAC;QACvE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC5C,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/server/tests/attachment-service.test.ts"],"sourcesContent":["import { Readable } from 'stream';\nimport { createHash } from 'crypto';\nimport * as path from 'path';\nimport { AttachmentService, detectPII, redactPII } from '../src/services/AttachmentService';\nimport { createProvenanceRecord } from '../../packages/shared/provenance';\n\nconst TMP_DIR = path.join(__dirname, '..', '..', 'tmp-test');\n\ndescribe('AttachmentService', () => {\n  it('stores file and computes sha256', async () => {\n    const service = new AttachmentService(TMP_DIR);\n    const content = 'hello world';\n    const stream = Readable.from(content);\n    const meta = await service.save(stream, { filename: 'test.txt', mimeType: 'text/plain' });\n    expect(meta.sha256).toBe(createHash('sha256').update(content).digest('hex'));\n  });\n\n  it('detects and redacts PII', () => {\n    const text = 'Email test@example.com phone 555-123-4567 ssn 123-45-6789';\n    const found = detectPII(text);\n    expect(found.emails).toContain('test@example.com');\n    expect(found.phones[0]).toBe('555-123-4567');\n    expect(found.ssns[0]).toBe('123-45-6789');\n    const redacted = redactPII(text);\n    expect(redacted).not.toContain('test@example.com');\n    expect(redacted).not.toContain('555-123-4567');\n    expect(redacted).not.toContain('123-45-6789');\n  });\n\n  it('creates deterministic provenance record', () => {\n    const timestamp = '2020-01-01T00:00:00.000Z';\n    const rec1 = createProvenanceRecord('data', 'SHA-256', '1', timestamp);\n    const rec2 = createProvenanceRecord('data', 'SHA-256', '1', timestamp);\n    expect(rec1.inputHash).toBe(rec2.inputHash);\n    expect(rec1.signature).toBe(rec2.signature);\n  });\n});\n"],"version":3}