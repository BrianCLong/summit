{"file":"/Users/brianlong/Developer/summit/server/src/steps/remoteExec.ts","mappings":";;AAIA,wCAsBC;AA1BD,0CAAyC;AACzC,2BAA0B;AAC1B,MAAM,EAAE,GAAG,IAAI,SAAI,CAAC,EAAE,gBAAgB,EAAE,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC,CAAC;AAE7D,KAAK,UAAU,cAAc,CAAC,GAAQ,EAAE,IAAS;IACtD,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,MAAM,IAAI,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC;IACvD,IAAI,CAAC,MAAM;QAAE,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;IAC5D,MAAM,OAAO,GAAG,EAAE,KAAK,EAAE,GAAG,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,WAAW,EAAE,GAAG,CAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,IAAI,EAAE,EAAE,CAAC;IACrH,MAAM,MAAM,GAAG,MAAM,IAAA,eAAO,EAAC,MAAM,EAAE,WAAW,EAAE,OAAO,CAAC,CAAC;IAC3D,MAAM,EAAE,CAAC,KAAK,CACZ;2DACuD,EACvD,CAAC,MAAM,EAAE,MAAM,EAAE,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAClC,CAAC;IACF,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IACzB,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,IAAI,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;IACjE,SAAS,CAAC;QACR,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG,MAAM,EAAE,CAAC,KAAK,CAAC,8DAA8D,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;QAC/G,IAAI,CAAC,EAAE,MAAM,KAAK,MAAM,EAAE,CAAC;YACzB,MAAM,OAAO,GAAc,CAAC,CAAC,MAAM,EAAE,SAAsB,IAAI,EAAE,CAAC;YAClE,IAAI,OAAO,CAAC,MAAM;gBAAE,MAAM,GAAG,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;YACvD,OAAO,EAAE,MAAM,EAAE,CAAC;QACpB,CAAC;QACD,IAAI,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK,GAAG,OAAO;YAAE,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;QACzE,MAAM,IAAI,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,UAAU,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;IACpD,CAAC;AACH,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/server/src/steps/remoteExec.ts"],"sourcesContent":["import { enqueue } from '../relay/queue';\nimport { Pool } from 'pg';\nconst pg = new Pool({ connectionString: process.env.DATABASE_URL });\n\nexport async function remoteExecStep(ctx: any, step: any) {\n  const siteId = step.inputs?.siteId || ctx.meta?.siteId;\n  if (!siteId) throw new Error('REMOTE.EXEC requires siteId');\n  const payload = { runId: ctx.id, stepId: step.id, snapshotRef: ctx.snapshot?.digest, args: step.inputs?.args || {} };\n  const ticket = await enqueue(siteId, 'exec.step', payload);\n  await pg.query(\n    `INSERT INTO remote_tickets(ticket_id, site_id, run_id, step_id, status)\n     VALUES ($1,$2,$3,$4,'PENDING') ON CONFLICT DO NOTHING`,\n    [ticket, siteId, ctx.id, step.id],\n  );\n  const start = Date.now();\n  const timeout = Number(step.inputs?.timeoutMs || 30 * 60 * 1000);\n  for (;;) {\n    const { rows: [r] } = await pg.query(`SELECT status, result FROM remote_tickets WHERE ticket_id=$1`, [ticket]);\n    if (r?.status === 'DONE') {\n      const digests: string[] = (r.result?.artifacts as string[]) || [];\n      if (digests.length) await ctx.attachArtifacts(digests);\n      return { ticket };\n    }\n    if (Date.now() - start > timeout) throw new Error('REMOTE.EXEC timeout');\n    await new Promise((res) => setTimeout(res, 1500));\n  }\n}\n"],"version":3}