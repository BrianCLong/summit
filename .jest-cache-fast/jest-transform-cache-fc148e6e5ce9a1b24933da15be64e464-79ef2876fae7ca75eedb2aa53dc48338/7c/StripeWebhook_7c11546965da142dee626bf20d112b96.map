{"file":"/Users/brianlong/Developer/summit/server/src/payments/StripeWebhook.ts","mappings":";;;;;AAEA,0CAOC;AAED,sCA2BC;AAtCD,oDAA4B;AAE5B,SAAgB,eAAe,CAAC,OAAe,EAAE,MAAc,EAAE,MAAc;IAC7E,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAChC,MAAM,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACjC,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAClC,MAAM,GAAG,GAAG,gBAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,OAAO,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACxF,IAAI,GAAG,KAAK,EAAE;QAAE,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;IACtD,OAAO,EAAE,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC;AACrC,CAAC;AAEM,KAAK,UAAU,aAAa,CACjC,GAAQ,EACR,IAKC;IAED,MAAM,EAAE,GAAG,GAAG,CAAC,EAAE,CAAC;IAClB,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;QACrB,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,CAAC;YAAE,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC;QAC1D,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAC3B,CAAC;IAED,IAAI,GAAG,CAAC,IAAI,KAAK,0BAA0B,EAAE,CAAC;QAC5C,MAAM,OAAO,GAAG,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC;QACjD,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACpC,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QAC5D,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAC9C,CAAC;SAAM,IAAI,GAAG,CAAC,IAAI,KAAK,iBAAiB,EAAE,CAAC;QAC1C,MAAM,OAAO,GAAG,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC;QACjD,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;QACzD,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACtC,MAAM,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;IAC9C,CAAC;IACD,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;AAC3B,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/server/src/payments/StripeWebhook.ts"],"sourcesContent":["import crypto from 'crypto';\n\nexport function verifyStripeSig(payload: string, header: string, secret: string) {\n  const parts = header.split(',');\n  const t = parts[0].split('=')[1];\n  const v1 = parts[1].split('=')[1];\n  const sig = crypto.createHmac('sha256', secret).update(`${t}.${payload}`).digest('hex');\n  if (sig !== v1) throw new Error('stripe_sig_invalid');\n  return { ts: Number(t), ok: true };\n}\n\nexport async function handleWebhook(\n  evt: any,\n  deps: {\n    orders: any;\n    entitlements: any;\n    transparency: any;\n    idempotency?: Set<string>;\n  }\n) {\n  const id = evt.id;\n  if (deps.idempotency) {\n    if (deps.idempotency.has(id)) return { idempotent: true };\n    deps.idempotency.add(id);\n  }\n\n  if (evt.type === 'payment_intent.succeeded') {\n    const orderId = evt.data.object.metadata.orderId;\n    await deps.orders.markPaid(orderId);\n    const ent = await deps.entitlements.issueFromOrder(orderId);\n    await deps.transparency.appendIssue(ent.id);\n  } else if (evt.type === 'charge.refunded') {\n    const orderId = evt.data.object.metadata.orderId;\n    const entId = await deps.orders.findEntitlement(orderId);\n    await deps.entitlements.revoke(entId);\n    await deps.transparency.appendRevoke(entId);\n  }\n  return { handled: true };\n}\n"],"version":3}