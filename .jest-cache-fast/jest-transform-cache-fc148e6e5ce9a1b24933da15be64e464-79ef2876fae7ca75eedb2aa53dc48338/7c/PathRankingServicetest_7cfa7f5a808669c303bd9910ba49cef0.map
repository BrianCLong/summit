{"file":"/Users/brianlong/Developer/summit/server/tests/PathRankingService.test.ts","mappings":"AAAA,MAAM,EAAE,SAAS,EAAE,GAAG,OAAO,CAAC,oCAAoC,CAAC,CAAC;AAEpE,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,IAAI,CAAC,yCAAyC,EAAE,GAAG,EAAE;QACnD,MAAM,KAAK,GAAG;YACZ,EAAE,IAAI,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE;YACjD,EAAE,IAAI,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE;SACpD,CAAC;QACF,MAAM,WAAW,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC;QAC7C,MAAM,cAAc,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC;QAEhD,MAAM,QAAQ,GAAG,SAAS,CAAC,KAAK,EAAE;YAChC,WAAW;YACX,cAAc;YACd,QAAQ,EAAE,IAAI;SACf,CAAC,CAAC;QACH,MAAM,EAAE,GAAG,SAAS,CAAC,KAAK,EAAE;YAC1B,WAAW;YACX,cAAc;YACd,QAAQ,EAAE,IAAI;SACf,CAAC,CAAC;QAEH,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1C,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEpC,MAAM,WAAW,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5D,MAAM,KAAK,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAChD,MAAM,CAAC,KAAK,GAAG,WAAW,CAAC,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;QACzD,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;IAC3D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/server/tests/PathRankingService.test.ts"],"sourcesContent":["const { rankPaths } = require(\"../src/services/PathRankingService\");\n\ndescribe(\"PathRankingService\", () => {\n  test(\"v2 ranking improves top1 path alignment\", () => {\n    const paths = [\n      { from: \"A\", to: \"B\", relId: \"r1\", type: \"WEAK\" },\n      { from: \"A\", to: \"C\", relId: \"r2\", type: \"STRONG\" },\n    ];\n    const edgeWeights = { WEAK: 0.5, STRONG: 1 };\n    const nodeCentrality = { A: 1, B: 0.2, C: 0.9 };\n\n    const baseline = rankPaths(paths, {\n      edgeWeights,\n      nodeCentrality,\n      strategy: \"v1\",\n    });\n    const v2 = rankPaths(paths, {\n      edgeWeights,\n      nodeCentrality,\n      strategy: \"v2\",\n    });\n\n    expect(baseline[0].path.relId).toBe(\"r1\");\n    expect(v2[0].path.relId).toBe(\"r2\");\n\n    const baselineAcc = baseline[0].path.relId === \"r2\" ? 1 : 0;\n    const v2Acc = v2[0].path.relId === \"r2\" ? 1 : 0;\n    expect(v2Acc - baselineAcc).toBeGreaterThanOrEqual(0.15);\n    expect(v2[0].score_breakdown).toHaveProperty(\"edgeType\");\n  });\n});\n"],"version":3}