5a56c16c631e9530becc974d9f7005c4
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyStripeSig = verifyStripeSig;
exports.handleWebhook = handleWebhook;
const crypto_1 = __importDefault(require("crypto"));
function verifyStripeSig(payload, header, secret) {
    const parts = header.split(',');
    const t = parts[0].split('=')[1];
    const v1 = parts[1].split('=')[1];
    const sig = crypto_1.default.createHmac('sha256', secret).update(`${t}.${payload}`).digest('hex');
    if (sig !== v1)
        throw new Error('stripe_sig_invalid');
    return { ts: Number(t), ok: true };
}
async function handleWebhook(evt, deps) {
    const id = evt.id;
    if (deps.idempotency) {
        if (deps.idempotency.has(id))
            return { idempotent: true };
        deps.idempotency.add(id);
    }
    if (evt.type === 'payment_intent.succeeded') {
        const orderId = evt.data.object.metadata.orderId;
        await deps.orders.markPaid(orderId);
        const ent = await deps.entitlements.issueFromOrder(orderId);
        await deps.transparency.appendIssue(ent.id);
    }
    else if (evt.type === 'charge.refunded') {
        const orderId = evt.data.object.metadata.orderId;
        const entId = await deps.orders.findEntitlement(orderId);
        await deps.entitlements.revoke(entId);
        await deps.transparency.appendRevoke(entId);
    }
    return { handled: true };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3NlcnZlci9zcmMvcGF5bWVudHMvU3RyaXBlV2ViaG9vay50cyIsIm1hcHBpbmdzIjoiOzs7OztBQUVBLDBDQU9DO0FBRUQsc0NBMkJDO0FBdENELG9EQUE0QjtBQUU1QixTQUFnQixlQUFlLENBQUMsT0FBZSxFQUFFLE1BQWMsRUFBRSxNQUFjO0lBQzdFLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDaEMsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqQyxNQUFNLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xDLE1BQU0sR0FBRyxHQUFHLGdCQUFNLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDeEYsSUFBSSxHQUFHLEtBQUssRUFBRTtRQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUN0RCxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUM7QUFDckMsQ0FBQztBQUVNLEtBQUssVUFBVSxhQUFhLENBQ2pDLEdBQVEsRUFDUixJQUtDO0lBRUQsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQztJQUNsQixJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNyQixJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFDMUQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVELElBQUksR0FBRyxDQUFDLElBQUksS0FBSywwQkFBMEIsRUFBRSxDQUFDO1FBQzVDLE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7UUFDakQsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNwQyxNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzVELE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzlDLENBQUM7U0FBTSxJQUFJLEdBQUcsQ0FBQyxJQUFJLEtBQUssaUJBQWlCLEVBQUUsQ0FBQztRQUMxQyxNQUFNLE9BQU8sR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO1FBQ2pELE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDekQsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN0QyxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFDRCxPQUFPLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDO0FBQzNCLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3NlcnZlci9zcmMvcGF5bWVudHMvU3RyaXBlV2ViaG9vay50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3J5cHRvIGZyb20gJ2NyeXB0byc7XG5cbmV4cG9ydCBmdW5jdGlvbiB2ZXJpZnlTdHJpcGVTaWcocGF5bG9hZDogc3RyaW5nLCBoZWFkZXI6IHN0cmluZywgc2VjcmV0OiBzdHJpbmcpIHtcbiAgY29uc3QgcGFydHMgPSBoZWFkZXIuc3BsaXQoJywnKTtcbiAgY29uc3QgdCA9IHBhcnRzWzBdLnNwbGl0KCc9JylbMV07XG4gIGNvbnN0IHYxID0gcGFydHNbMV0uc3BsaXQoJz0nKVsxXTtcbiAgY29uc3Qgc2lnID0gY3J5cHRvLmNyZWF0ZUhtYWMoJ3NoYTI1NicsIHNlY3JldCkudXBkYXRlKGAke3R9LiR7cGF5bG9hZH1gKS5kaWdlc3QoJ2hleCcpO1xuICBpZiAoc2lnICE9PSB2MSkgdGhyb3cgbmV3IEVycm9yKCdzdHJpcGVfc2lnX2ludmFsaWQnKTtcbiAgcmV0dXJuIHsgdHM6IE51bWJlcih0KSwgb2s6IHRydWUgfTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZVdlYmhvb2soXG4gIGV2dDogYW55LFxuICBkZXBzOiB7XG4gICAgb3JkZXJzOiBhbnk7XG4gICAgZW50aXRsZW1lbnRzOiBhbnk7XG4gICAgdHJhbnNwYXJlbmN5OiBhbnk7XG4gICAgaWRlbXBvdGVuY3k/OiBTZXQ8c3RyaW5nPjtcbiAgfVxuKSB7XG4gIGNvbnN0IGlkID0gZXZ0LmlkO1xuICBpZiAoZGVwcy5pZGVtcG90ZW5jeSkge1xuICAgIGlmIChkZXBzLmlkZW1wb3RlbmN5LmhhcyhpZCkpIHJldHVybiB7IGlkZW1wb3RlbnQ6IHRydWUgfTtcbiAgICBkZXBzLmlkZW1wb3RlbmN5LmFkZChpZCk7XG4gIH1cblxuICBpZiAoZXZ0LnR5cGUgPT09ICdwYXltZW50X2ludGVudC5zdWNjZWVkZWQnKSB7XG4gICAgY29uc3Qgb3JkZXJJZCA9IGV2dC5kYXRhLm9iamVjdC5tZXRhZGF0YS5vcmRlcklkO1xuICAgIGF3YWl0IGRlcHMub3JkZXJzLm1hcmtQYWlkKG9yZGVySWQpO1xuICAgIGNvbnN0IGVudCA9IGF3YWl0IGRlcHMuZW50aXRsZW1lbnRzLmlzc3VlRnJvbU9yZGVyKG9yZGVySWQpO1xuICAgIGF3YWl0IGRlcHMudHJhbnNwYXJlbmN5LmFwcGVuZElzc3VlKGVudC5pZCk7XG4gIH0gZWxzZSBpZiAoZXZ0LnR5cGUgPT09ICdjaGFyZ2UucmVmdW5kZWQnKSB7XG4gICAgY29uc3Qgb3JkZXJJZCA9IGV2dC5kYXRhLm9iamVjdC5tZXRhZGF0YS5vcmRlcklkO1xuICAgIGNvbnN0IGVudElkID0gYXdhaXQgZGVwcy5vcmRlcnMuZmluZEVudGl0bGVtZW50KG9yZGVySWQpO1xuICAgIGF3YWl0IGRlcHMuZW50aXRsZW1lbnRzLnJldm9rZShlbnRJZCk7XG4gICAgYXdhaXQgZGVwcy50cmFuc3BhcmVuY3kuYXBwZW5kUmV2b2tlKGVudElkKTtcbiAgfVxuICByZXR1cm4geyBoYW5kbGVkOiB0cnVlIH07XG59XG4iXSwidmVyc2lvbiI6M30=