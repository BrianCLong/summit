38ab64e0cbc53574e983b85e92a4573d
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.remoteExecStep = remoteExecStep;
const queue_1 = require("../relay/queue");
const pg_1 = require("pg");
const pg = new pg_1.Pool({ connectionString: process.env.DATABASE_URL });
async function remoteExecStep(ctx, step) {
    const siteId = step.inputs?.siteId || ctx.meta?.siteId;
    if (!siteId)
        throw new Error('REMOTE.EXEC requires siteId');
    const payload = { runId: ctx.id, stepId: step.id, snapshotRef: ctx.snapshot?.digest, args: step.inputs?.args || {} };
    const ticket = await (0, queue_1.enqueue)(siteId, 'exec.step', payload);
    await pg.query(`INSERT INTO remote_tickets(ticket_id, site_id, run_id, step_id, status)
     VALUES ($1,$2,$3,$4,'PENDING') ON CONFLICT DO NOTHING`, [ticket, siteId, ctx.id, step.id]);
    const start = Date.now();
    const timeout = Number(step.inputs?.timeoutMs || 30 * 60 * 1000);
    for (;;) {
        const { rows: [r] } = await pg.query(`SELECT status, result FROM remote_tickets WHERE ticket_id=$1`, [ticket]);
        if (r?.status === 'DONE') {
            const digests = r.result?.artifacts || [];
            if (digests.length)
                await ctx.attachArtifacts(digests);
            return { ticket };
        }
        if (Date.now() - start > timeout)
            throw new Error('REMOTE.EXEC timeout');
        await new Promise((res) => setTimeout(res, 1500));
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3NlcnZlci9zcmMvc3RlcHMvcmVtb3RlRXhlYy50cyIsIm1hcHBpbmdzIjoiOztBQUlBLHdDQXNCQztBQTFCRCwwQ0FBeUM7QUFDekMsMkJBQTBCO0FBQzFCLE1BQU0sRUFBRSxHQUFHLElBQUksU0FBSSxDQUFDLEVBQUUsZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDO0FBRTdELEtBQUssVUFBVSxjQUFjLENBQUMsR0FBUSxFQUFFLElBQVM7SUFDdEQsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxNQUFNLElBQUksR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUM7SUFDdkQsSUFBSSxDQUFDLE1BQU07UUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUM7SUFDNUQsTUFBTSxPQUFPLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxXQUFXLEVBQUUsR0FBRyxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxJQUFJLEVBQUUsRUFBRSxDQUFDO0lBQ3JILE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBQSxlQUFPLEVBQUMsTUFBTSxFQUFFLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMzRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQ1o7MkRBQ3VELEVBQ3ZELENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FDbEMsQ0FBQztJQUNGLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN6QixNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxTQUFTLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUNqRSxTQUFTLENBQUM7UUFDUixNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsOERBQThELEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQy9HLElBQUksQ0FBQyxFQUFFLE1BQU0sS0FBSyxNQUFNLEVBQUUsQ0FBQztZQUN6QixNQUFNLE9BQU8sR0FBYyxDQUFDLENBQUMsTUFBTSxFQUFFLFNBQXNCLElBQUksRUFBRSxDQUFDO1lBQ2xFLElBQUksT0FBTyxDQUFDLE1BQU07Z0JBQUUsTUFBTSxHQUFHLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3ZELE9BQU8sRUFBRSxNQUFNLEVBQUUsQ0FBQztRQUNwQixDQUFDO1FBQ0QsSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsS0FBSyxHQUFHLE9BQU87WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFDekUsTUFBTSxJQUFJLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3BELENBQUM7QUFDSCxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9icmlhbmxvbmcvRGV2ZWxvcGVyL3N1bW1pdC9zZXJ2ZXIvc3JjL3N0ZXBzL3JlbW90ZUV4ZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZW5xdWV1ZSB9IGZyb20gJy4uL3JlbGF5L3F1ZXVlJztcbmltcG9ydCB7IFBvb2wgfSBmcm9tICdwZyc7XG5jb25zdCBwZyA9IG5ldyBQb29sKHsgY29ubmVjdGlvblN0cmluZzogcHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMIH0pO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVtb3RlRXhlY1N0ZXAoY3R4OiBhbnksIHN0ZXA6IGFueSkge1xuICBjb25zdCBzaXRlSWQgPSBzdGVwLmlucHV0cz8uc2l0ZUlkIHx8IGN0eC5tZXRhPy5zaXRlSWQ7XG4gIGlmICghc2l0ZUlkKSB0aHJvdyBuZXcgRXJyb3IoJ1JFTU9URS5FWEVDIHJlcXVpcmVzIHNpdGVJZCcpO1xuICBjb25zdCBwYXlsb2FkID0geyBydW5JZDogY3R4LmlkLCBzdGVwSWQ6IHN0ZXAuaWQsIHNuYXBzaG90UmVmOiBjdHguc25hcHNob3Q/LmRpZ2VzdCwgYXJnczogc3RlcC5pbnB1dHM/LmFyZ3MgfHwge30gfTtcbiAgY29uc3QgdGlja2V0ID0gYXdhaXQgZW5xdWV1ZShzaXRlSWQsICdleGVjLnN0ZXAnLCBwYXlsb2FkKTtcbiAgYXdhaXQgcGcucXVlcnkoXG4gICAgYElOU0VSVCBJTlRPIHJlbW90ZV90aWNrZXRzKHRpY2tldF9pZCwgc2l0ZV9pZCwgcnVuX2lkLCBzdGVwX2lkLCBzdGF0dXMpXG4gICAgIFZBTFVFUyAoJDEsJDIsJDMsJDQsJ1BFTkRJTkcnKSBPTiBDT05GTElDVCBETyBOT1RISU5HYCxcbiAgICBbdGlja2V0LCBzaXRlSWQsIGN0eC5pZCwgc3RlcC5pZF0sXG4gICk7XG4gIGNvbnN0IHN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgY29uc3QgdGltZW91dCA9IE51bWJlcihzdGVwLmlucHV0cz8udGltZW91dE1zIHx8IDMwICogNjAgKiAxMDAwKTtcbiAgZm9yICg7Oykge1xuICAgIGNvbnN0IHsgcm93czogW3JdIH0gPSBhd2FpdCBwZy5xdWVyeShgU0VMRUNUIHN0YXR1cywgcmVzdWx0IEZST00gcmVtb3RlX3RpY2tldHMgV0hFUkUgdGlja2V0X2lkPSQxYCwgW3RpY2tldF0pO1xuICAgIGlmIChyPy5zdGF0dXMgPT09ICdET05FJykge1xuICAgICAgY29uc3QgZGlnZXN0czogc3RyaW5nW10gPSAoci5yZXN1bHQ/LmFydGlmYWN0cyBhcyBzdHJpbmdbXSkgfHwgW107XG4gICAgICBpZiAoZGlnZXN0cy5sZW5ndGgpIGF3YWl0IGN0eC5hdHRhY2hBcnRpZmFjdHMoZGlnZXN0cyk7XG4gICAgICByZXR1cm4geyB0aWNrZXQgfTtcbiAgICB9XG4gICAgaWYgKERhdGUubm93KCkgLSBzdGFydCA+IHRpbWVvdXQpIHRocm93IG5ldyBFcnJvcignUkVNT1RFLkVYRUMgdGltZW91dCcpO1xuICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXMpID0+IHNldFRpbWVvdXQocmVzLCAxNTAwKSk7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==