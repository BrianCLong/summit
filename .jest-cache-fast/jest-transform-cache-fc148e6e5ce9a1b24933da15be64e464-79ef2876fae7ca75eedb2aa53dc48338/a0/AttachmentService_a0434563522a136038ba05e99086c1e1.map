{"file":"/Users/brianlong/Developer/summit/server/src/services/AttachmentService.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6EA,8BAMC;AAED,8BAKC;AA1FD,2BAAuD;AACvD,8CAA2C;AAC3C,mCAAoC;AACpC,2CAA6B;AAE7B,oEAA6E;AAa7E,MAAa,iBAAiB;IACpB,OAAO,CAAS;IAExB,YAAY,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,aAAa,CAAC;QAC3D,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAED,KAAK,CAAC,IAAI,CACR,MAAgB,EAChB,EACE,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,SAAS,EACT,UAAU,GAAG,EAAE,GAOhB;QAED,MAAM,aAAE,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QAClD,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,IAAI,QAAQ,EAAE,CAAC,CAAC;QACtE,MAAM,IAAI,GAAG,IAAA,mBAAU,EAAC,QAAQ,CAAC,CAAC;QAClC,MAAM,WAAW,GAAG,IAAA,sBAAiB,EAAC,QAAQ,CAAC,CAAC;QAChD,MAAM,IAAA,mBAAQ,EACZ,MAAM,EACN,KAAK,SAAS,CAAC,EAAE,MAAM;YACrB,IAAI,KAAK,EAAE,MAAM,KAAK,IAAI,MAAM,EAAE,CAAC;gBACjC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBACnB,MAAM,KAAK,CAAC;YACd,CAAC;QACH,CAAC,EACD,WAAW,CACZ,CAAC;QACF,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAClC,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAClD,MAAM,aAAE,CAAC,MAAM,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QACrC,MAAM,KAAK,GAAG,MAAM,aAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACvC,MAAM,UAAU,GAAG,IAAA,mCAAsB,EAAC,MAAM,CAAC,CAAC;QAClD,OAAO;YACL,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC;YACjC,QAAQ;YACR,IAAI,EAAE,KAAK,CAAC,IAAI;YAChB,MAAM;YACN,QAAQ;YACR,SAAS;YACT,UAAU;YACV,UAAU;SACX,CAAC;IACJ,CAAC;CACF;AArDD,8CAqDC;AAED,MAAM,QAAQ,GAAG,yCAAyC,CAAC;AAC3D,MAAM,QAAQ,GAAG,kEAAkE,CAAC;AACpF,MAAM,MAAM,GAAG,wBAAwB,CAAC;AAExC,SAAgB,SAAS,CAAC,IAAY;IACpC,OAAO;QACL,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE;QAClC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE;QAClC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE;KAC/B,CAAC;AACJ,CAAC;AAED,SAAgB,SAAS,CAAC,IAAY;IACpC,OAAO,IAAI;SACR,OAAO,CAAC,QAAQ,EAAE,YAAY,CAAC;SAC/B,OAAO,CAAC,QAAQ,EAAE,YAAY,CAAC;SAC/B,OAAO,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;AACnC,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/server/src/services/AttachmentService.ts"],"sourcesContent":["import { createWriteStream, promises as fs } from 'fs';\nimport { pipeline } from 'stream/promises';\nimport { createHash } from 'crypto';\nimport * as path from 'path';\nimport type { Readable } from 'stream';\nimport { createProvenanceRecord } from '../../../packages/shared/provenance';\n\nexport interface AttachmentMetadata {\n  filename: string;\n  mimeType: string;\n  size: number;\n  sha256: string;\n  uploader?: string;\n  licenseId?: string;\n  policyTags: string[];\n  provenance: ReturnType<typeof createProvenanceRecord>;\n}\n\nexport class AttachmentService {\n  private baseDir: string;\n\n  constructor(baseDir = path.join(process.cwd(), 'attachments')) {\n    this.baseDir = baseDir;\n  }\n\n  async save(\n    stream: Readable,\n    {\n      filename,\n      mimeType,\n      uploader,\n      licenseId,\n      policyTags = [],\n    }: {\n      filename: string;\n      mimeType: string;\n      uploader?: string;\n      licenseId?: string;\n      policyTags?: string[];\n    },\n  ): Promise<AttachmentMetadata> {\n    await fs.mkdir(this.baseDir, { recursive: true });\n    const tempPath = path.join(this.baseDir, `${Date.now()}-${filename}`);\n    const hash = createHash('sha256');\n    const writeStream = createWriteStream(tempPath);\n    await pipeline(\n      stream,\n      async function* (source) {\n        for await (const chunk of source) {\n          hash.update(chunk);\n          yield chunk;\n        }\n      },\n      writeStream,\n    );\n    const sha256 = hash.digest('hex');\n    const finalPath = path.join(this.baseDir, sha256);\n    await fs.rename(tempPath, finalPath);\n    const stats = await fs.stat(finalPath);\n    const provenance = createProvenanceRecord(sha256);\n    return {\n      filename: path.basename(filename),\n      mimeType,\n      size: stats.size,\n      sha256,\n      uploader,\n      licenseId,\n      policyTags,\n      provenance,\n    };\n  }\n}\n\nconst EMAIL_RE = /[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}/gi;\nconst PHONE_RE = /\\b(?:\\+?1[-.\\s]?)?(?:\\(\\d{3}\\)|\\d{3})[-.\\s]?\\d{3}[-.\\s]?\\d{4}\\b/g;\nconst SSN_RE = /\\b\\d{3}-\\d{2}-\\d{4}\\b/g;\n\nexport function detectPII(text: string) {\n  return {\n    emails: text.match(EMAIL_RE) || [],\n    phones: text.match(PHONE_RE) || [],\n    ssns: text.match(SSN_RE) || [],\n  };\n}\n\nexport function redactPII(text: string): string {\n  return text\n    .replace(EMAIL_RE, '[REDACTED]')\n    .replace(PHONE_RE, '[REDACTED]')\n    .replace(SSN_RE, '[REDACTED]');\n}\n"],"version":3}