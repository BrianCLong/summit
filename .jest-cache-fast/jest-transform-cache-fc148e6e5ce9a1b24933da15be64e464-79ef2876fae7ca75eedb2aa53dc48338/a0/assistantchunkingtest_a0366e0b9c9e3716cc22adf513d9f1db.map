{"file":"/Users/brianlong/Developer/summit/client/src/components/ai-enhanced/__tests__/assistant.chunking.test.tsx","mappings":";;;;;;AAAA,kDAAwD;AACxD,iFAAyD;AACzD,6EAAoD;AACpD,+CAAwD;AACxD,6CAAyE;AACzE,+CAAsD;AAEtD,SAAS,UAAU,CAAC,IAAY,EAAE,IAAc;IAC9C,MAAM,IAAI,GAAG,CAAC,CAAC,EAAE,GAAG,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7D,MAAM,GAAG,GAAa,EAAE,CAAC;IACzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE;QAAE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACrF,OAAO,GAAG,CAAC;AACb,CAAC;AAED,MAAM,MAAM,GAAG,yBAAyB,CAAC;AAEzC,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;IACzC,SAAS,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;IAEtC,MAAM,KAAK,GAAG;QACZ,EAAE,EAAE,eAAe;QACnB,CAAC,CAAC,CAAC,EAAE,qBAAqB;QAC1B,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,8BAA8B;QACvC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,mBAAmB;QACjC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;KACf,CAAC;IAEF,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;QACzB,EAAE,CAAC,8BAA8B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,EAAE,KAAK,IAAI,EAAE;YAClE,MAAM,SAAS,GAAG,IAAA,yBAAiB,EAAC;gBAClC,GAAG,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE,CAAU,CAAC;gBAC9E,EAAE,IAAI,EAAE,MAAM,EAAE;aACjB,CAAC,CAAC;YAEH,IAAA,cAAM,EAAC,uBAAC,6BAAmB,IAAC,SAAS,EAAE,SAAS,EAAE,aAAa,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,GAAI,CAAC,CAAC;YACvF,MAAM,oBAAS,CAAC,IAAI,CAAC,cAAM,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,IAAI,EAAE,kBAAkB,EAAE,CAAC,EAAE,WAAW,CAAC,CAAC;YAC7F,MAAM,IAAA,uBAAe,GAAE,CAAC;YAExB,MAAM,IAAA,0CAAmC,EAAC,0BAA0B,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/client/src/components/ai-enhanced/__tests__/assistant.chunking.test.tsx"],"sourcesContent":["import { render, screen } from '@testing-library/react';\nimport EnhancedAIAssistant from '../EnhancedAIAssistant';\nimport userEvent from '@testing-library/user-event';\nimport { makeFakeTransport } from '../test-utils/fakes';\nimport { expectLastAssistantMessageToContain } from '../test-utils/text';\nimport { flushMicrotasks } from '../test-utils/flush';\n\nfunction chunksFrom(text: string, cuts: number[]) {\n  const idxs = [0, ...cuts, text.length].sort((a, b) => a - b);\n  const out: string[] = [];\n  for (let i = 0; i < idxs.length - 1; i++) out.push(text.slice(idxs[i], idxs[i + 1]));\n  return out;\n}\n\nconst target = 'I understand your query';\n\ndescribe('chunk-boundary invariance', () => {\n  beforeAll(() => jest.useRealTimers());\n\n  const cases = [\n    [], // whole string\n    [1], // minimal head split\n    [2, 12], // a couple of interior splits\n    [1, 2, 3, 4], // many tiny chunks\n    [5, 7, 14, 18],\n  ];\n\n  for (const cuts of cases) {\n    it(`renders correctly for cuts=${JSON.stringify(cuts)}`, async () => {\n      const transport = makeFakeTransport([\n        ...chunksFrom(target, cuts).map((v) => ({ type: 'token', value: v }) as const),\n        { type: 'done' },\n      ]);\n\n      render(<EnhancedAIAssistant transport={transport} typingDelayMs={0} debounceMs={0} />);\n      await userEvent.type(screen.getByRole('textbox', { name: /assistant-input/i }), 'go{enter}');\n      await flushMicrotasks();\n\n      await expectLastAssistantMessageToContain(/I understand your query/i);\n    });\n  }\n});\n"],"version":3}