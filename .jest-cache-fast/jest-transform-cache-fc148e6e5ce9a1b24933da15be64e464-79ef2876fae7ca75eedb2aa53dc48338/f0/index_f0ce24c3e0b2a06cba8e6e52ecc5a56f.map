{"file":"/Users/brianlong/Developer/summit/packages/gdr/src/index.ts","mappings":";;;;;;AAAA,gEAA6C;AAS7C,MAAa,GAAG;IACN,MAAM,CAAS;IAEvB,YAAY,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,SAAS,IAAI,uBAAuB,EAAE,SAAS,GAAG,OAAO,EAAE,SAAS,GAAG,UAAU;QAClH,IAAI,CAAC,MAAM,GAAG,sBAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,sBAAK,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC;IAC/E,CAAC;IAED,KAAK,CAAC,yBAAyB;QAC7B,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;QACtC,MAAM,SAAS,GAAmB,EAAE,CAAC;QACrC,IAAI,CAAC;YACH,mDAAmD;YACnD,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,GAAG,CAC9B,qEAAqE,CACtE,CAAC;YACF,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;gBAC9B,SAAS,CAAC,IAAI,CAAC;oBACb,MAAM,EAAE,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC;oBAC5B,MAAM,EAAE,oCAAoC;oBAC5C,QAAQ,EAAE,QAAQ;iBACnB,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,gEAAgE;YAChE,MAAM,eAAe,GAAG,MAAM,OAAO,CAAC,GAAG,CACvC,0FAA0F,CAC3F,CAAC;YACF,eAAe,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;gBACvC,SAAS,CAAC,IAAI,CAAC;oBACb,MAAM,EAAE,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC;oBAC5B,MAAM,EAAE,yCAAyC;oBACjD,QAAQ,EAAE,MAAM;iBACjB,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QAEL,CAAC;gBAAS,CAAC;YACT,MAAM,OAAO,CAAC,KAAK,EAAE,CAAC;QACxB,CAAC;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,KAAK,CAAC,KAAK;QACT,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;IAC5B,CAAC;CACF;AA5CD,kBA4CC","names":[],"sources":["/Users/brianlong/Developer/summit/packages/gdr/src/index.ts"],"sourcesContent":["import neo4j, { Driver } from 'neo4j-driver';\n\nexport interface GraphAnomaly {\n  nodeId?: string;\n  edgeId?: string;\n  reason: string;\n  severity: 'low' | 'medium' | 'high';\n}\n\nexport class GDR {\n  private driver: Driver;\n\n  constructor(neo4jUrl = process.env.NEO4J_URI || 'bolt://localhost:7687', neo4jUser = 'neo4j', neo4jPass = 'password') {\n    this.driver = neo4j.driver(neo4jUrl, neo4j.auth.basic(neo4jUser, neo4jPass));\n  }\n\n  async detectProvenanceAnomalies(): Promise<GraphAnomaly[]> {\n    const session = this.driver.session();\n    const anomalies: GraphAnomaly[] = [];\n    try {\n      // Example: Nodes without expected provenance edges\n      const result = await session.run(\n        `MATCH (n) WHERE NOT (n)-[:HAS_PROVENANCE]->() RETURN n.id AS nodeId`\n      );\n      result.records.forEach(record => {\n        anomalies.push({\n          nodeId: record.get('nodeId'),\n          reason: \"Node lacks provenance information.\",\n          severity: \"medium\",\n        });\n      });\n\n      // Example: High-degree nodes with no witness paths (simplified)\n      const highDegreeNodes = await session.run(\n        `MATCH (n) WHERE size((n)--()) > 10 AND NOT (n)-[:WITNESSED_BY]->() RETURN n.id AS nodeId`\n      );\n      highDegreeNodes.records.forEach(record => {\n        anomalies.push({\n          nodeId: record.get('nodeId'),\n          reason: \"High-degree node without witness paths.\",\n          severity: \"high\",\n        });\n      });\n\n    } finally {\n      await session.close();\n    }\n    return anomalies;\n  }\n\n  async close(): Promise<void> {\n    await this.driver.close();\n  }\n}"],"version":3}