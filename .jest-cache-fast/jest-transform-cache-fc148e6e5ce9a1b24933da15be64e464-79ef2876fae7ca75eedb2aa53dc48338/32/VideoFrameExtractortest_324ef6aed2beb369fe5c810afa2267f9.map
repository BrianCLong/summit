{"file":"/Users/brianlong/Developer/summit/server/src/ai/engines/__tests__/VideoFrameExtractor.test.ts","mappings":"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","names":[],"sources":["/Users/brianlong/Developer/summit/server/src/ai/engines/__tests__/VideoFrameExtractor.test.ts"],"sourcesContent":["import { VideoFrameExtractor } from '../VideoFrameExtractor';\nimport ffmpeg from 'fluent-ffmpeg';\nimport fs from 'fs/promises';\nimport path from 'path';\n\n// Mock ffmpeg and fs/promises\njest.mock('fluent-ffmpeg');\njest.mock('fs/promises');\n\ndescribe('VideoFrameExtractor', () => {\n  let extractor: VideoFrameExtractor;\n  const mockFfmpegPath = '/usr/bin/ffmpeg';\n  const mockFfprobePath = '/usr/bin/ffprobe';\n  const mockTempDir = '/tmp/test-temp';\n  const mockVideoPath = '/path/to/test-video.mp4';\n\n  beforeEach(() => {\n    extractor = new VideoFrameExtractor(mockFfmpegPath, mockFfprobePath, mockTempDir);\n    // Reset mocks\n    (ffmpeg as jest.Mocked<typeof ffmpeg>).mockClear();\n    (fs.mkdir as jest.Mock).mockClear();\n    (fs.rm as jest.Mock).mockClear();\n\n    // Mock ffmpeg chainable methods\n    (ffmpeg as any).mockImplementation(() => ({\n      seekInput: jest.fn().mockReturnThis(),\n      duration: jest.fn().mockReturnThis(),\n      fps: jest.fn().mockReturnThis(),\n      addOption: jest.fn().mockReturnThis(),\n      output: jest.fn().mockReturnThis(),\n      noVideo: jest.fn().mockReturnThis(),\n      audioCodec: jest.fn().mockReturnThis(),\n      on: jest.fn((event, callback) => {\n        if (event === 'end') {\n          // Simulate successful end\n          callback();\n        } else if (event === 'filenames') {\n          // Simulate filenames being emitted\n          callback(['frame-0.000.png', 'frame-1.000.png']);\n        }\n        return this;\n      }),\n      run: jest.fn(),\n    }));\n\n    // Mock ffprobe\n    (ffmpeg.ffprobe as jest.Mock).mockImplementation((_path, callback) => {\n      callback(null, { format: { duration: 10 } }); // Mock video duration\n    });\n  });\n\n  it('should extract frames with default options', async () => {\n    const { frames, audio } = await extractor.extract(mockVideoPath);\n\n    expect(fs.mkdir).toHaveBeenCalledWith(expect.stringContaining(mockTempDir), { recursive: true });\n    expect(ffmpeg).toHaveBeenCalledWith(mockVideoPath);\n    expect((ffmpeg as any).mock.results[0].value.fps).toHaveBeenCalledWith(1); // Default fps\n    expect((ffmpeg as any).mock.results[0].value.output).toHaveBeenCalledWith(expect.stringContaining('frame-%s.png'));\n    expect((ffmpeg as any).mock.results[0].value.run).toHaveBeenCalled();\n    expect(frames.length).toBe(2);\n    expect(frames[0].framePath).toContain('frame-0.000.png');\n    expect(frames[1].framePath).toContain('frame-1.000.png');\n    expect(audio).toBeUndefined();\n  });\n\n  it('should extract frames with specified frameRate', async () => {\n    await extractor.extract(mockVideoPath, { frameRate: 5 });\n    expect((ffmpeg as any).mock.results[0].value.fps).toHaveBeenCalledWith(5);\n  });\n\n  it('should extract frames with specified interval', async () => {\n    await extractor.extract(mockVideoPath, { interval: 2 });\n    expect((ffmpeg as any).mock.results[0].value.addOption).toHaveBeenCalledWith('-vf', 'fps=1/2');\n  });\n\n  it('should extract audio when extractAudio is true', async () => {\n    const { audio } = await extractor.extract(mockVideoPath, { extractAudio: true });\n    expect(audio).toBeDefined();\n    expect(audio?.audioPath).toContain('audio-');\n    expect(audio?.audioPath).toContain('.mp3');\n    expect(audio?.duration).toBe(10);\n    expect((ffmpeg as any).mock.results[1].value.noVideo).toHaveBeenCalled(); // Second ffmpeg call for audio\n    expect((ffmpeg as any).mock.results[1].value.audioCodec).toHaveBeenCalledWith('libmp3lame');\n  });\n\n  it('should clean up temporary directory', async () => {\n    const tempDirToClean = '/tmp/some-temp-dir';\n    await extractor.cleanup(tempDirToClean);\n    expect(fs.rm).toHaveBeenCalledWith(tempDirToClean, { recursive: true, force: true });\n  });\n\n  it('should handle ffmpeg errors during frame extraction', async () => {\n    (ffmpeg as any).mockImplementationOnce(() => ({\n      seekInput: jest.fn().mockReturnThis(),\n      duration: jest.fn().mockReturnThis(),\n      fps: jest.fn().mockReturnThis(),\n      addOption: jest.fn().mockReturnThis(),\n      output: jest.fn().mockReturnThis(),\n      on: jest.fn((event, callback) => {\n        if (event === 'error') {\n          callback(new Error('ffmpeg test error'));\n        }\n        return this;\n      }),\n      run: jest.fn(),\n    }));\n\n    await expect(extractor.extract(mockVideoPath)).rejects.toThrow('ffmpeg test error');\n  });\n});\n"],"version":3}