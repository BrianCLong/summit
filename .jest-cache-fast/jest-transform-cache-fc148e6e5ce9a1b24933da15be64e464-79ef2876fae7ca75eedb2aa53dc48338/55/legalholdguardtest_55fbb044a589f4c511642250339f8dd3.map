{"file":"/Users/brianlong/Developer/summit/server/tests/legal-hold-guard.test.ts","mappings":";;AAAA,oEAA6D;AAE7D,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAChC,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;QAC/C,MAAM,GAAG,GAAG;YACV,MAAM,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE;YACpB,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,UAAU,EAAE,KAAK,IAAI,EAAE,CAAC,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE;SACzD,CAAC;QACT,MAAM,KAAK,GAAQ;YACjB,MAAM,EAAE,CAAC;YACT,IAAI,EAAE,IAAI;YACV,IAAI,CAAC,IAAY;gBACf,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;gBACnB,OAAO,IAAI,CAAC;YACd,CAAC;YACD,IAAI,CAAC,OAAY;gBACf,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC;YACtB,CAAC;SACF,CAAC;QACF,MAAM,IAAA,+BAAY,EAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAC/B,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC/B,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,qCAAqC,EAAE,CAAC,CAAC;IAC/E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;QAC3C,MAAM,GAAG,GAAG;YACV,MAAM,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE;YACpB,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,UAAU,EAAE,KAAK,IAAI,EAAE,CAAC,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE;SAC1D,CAAC;QACT,MAAM,KAAK,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,EAAS,CAAC;QAC3E,MAAM,IAAA,+BAAY,EAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAC/B,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;IAC5C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/server/tests/legal-hold-guard.test.ts"],"sourcesContent":["import { denyWhenHold } from '../src/cases/legal-hold-guard';\n\ndescribe('legal hold guard', () => {\n  it('denies when case has legal hold', async () => {\n    const req = {\n      params: { id: 'c1' },\n      db: { case: { findUnique: async () => ({ legalHold: true }) } },\n    } as any;\n    const reply: any = {\n      status: 0,\n      body: null,\n      code(code: number) {\n        this.status = code;\n        return this;\n      },\n      send(payload: any) {\n        this.body = payload;\n      },\n    };\n    await denyWhenHold(req, reply);\n    expect(reply.status).toBe(423);\n    expect(reply.body).toEqual({ error: 'Legal hold active: operation locked' });\n  });\n\n  it('passes through when no hold', async () => {\n    const req = {\n      params: { id: 'c1' },\n      db: { case: { findUnique: async () => ({ legalHold: false }) } },\n    } as any;\n    const reply = { code: jest.fn().mockReturnThis(), send: jest.fn() } as any;\n    await denyWhenHold(req, reply);\n    expect(reply.code).not.toHaveBeenCalled();\n  });\n});\n"],"version":3}