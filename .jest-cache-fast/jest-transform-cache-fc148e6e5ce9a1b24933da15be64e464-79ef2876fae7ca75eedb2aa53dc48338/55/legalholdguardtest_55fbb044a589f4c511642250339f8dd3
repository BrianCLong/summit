7c37a8ebdbaddf6e97cecd255b1f17b9
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const legal_hold_guard_1 = require("../src/cases/legal-hold-guard");
describe('legal hold guard', () => {
    it('denies when case has legal hold', async () => {
        const req = {
            params: { id: 'c1' },
            db: { case: { findUnique: async () => ({ legalHold: true }) } },
        };
        const reply = {
            status: 0,
            body: null,
            code(code) {
                this.status = code;
                return this;
            },
            send(payload) {
                this.body = payload;
            },
        };
        await (0, legal_hold_guard_1.denyWhenHold)(req, reply);
        expect(reply.status).toBe(423);
        expect(reply.body).toEqual({ error: 'Legal hold active: operation locked' });
    });
    it('passes through when no hold', async () => {
        const req = {
            params: { id: 'c1' },
            db: { case: { findUnique: async () => ({ legalHold: false }) } },
        };
        const reply = { code: jest.fn().mockReturnThis(), send: jest.fn() };
        await (0, legal_hold_guard_1.denyWhenHold)(req, reply);
        expect(reply.code).not.toHaveBeenCalled();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3NlcnZlci90ZXN0cy9sZWdhbC1ob2xkLWd1YXJkLnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSxvRUFBNkQ7QUFFN0QsUUFBUSxDQUFDLGtCQUFrQixFQUFFLEdBQUcsRUFBRTtJQUNoQyxFQUFFLENBQUMsaUNBQWlDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDL0MsTUFBTSxHQUFHLEdBQUc7WUFDVixNQUFNLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFO1lBQ3BCLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLFVBQVUsRUFBRSxLQUFLLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFO1NBQ3pELENBQUM7UUFDVCxNQUFNLEtBQUssR0FBUTtZQUNqQixNQUFNLEVBQUUsQ0FBQztZQUNULElBQUksRUFBRSxJQUFJO1lBQ1YsSUFBSSxDQUFDLElBQVk7Z0JBQ2YsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7Z0JBQ25CLE9BQU8sSUFBSSxDQUFDO1lBQ2QsQ0FBQztZQUNELElBQUksQ0FBQyxPQUFZO2dCQUNmLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDO1lBQ3RCLENBQUM7U0FDRixDQUFDO1FBQ0YsTUFBTSxJQUFBLCtCQUFZLEVBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsS0FBSyxFQUFFLHFDQUFxQyxFQUFFLENBQUMsQ0FBQztJQUMvRSxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyw2QkFBNkIsRUFBRSxLQUFLLElBQUksRUFBRTtRQUMzQyxNQUFNLEdBQUcsR0FBRztZQUNWLE1BQU0sRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUU7WUFDcEIsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsVUFBVSxFQUFFLEtBQUssSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7U0FDMUQsQ0FBQztRQUNULE1BQU0sS0FBSyxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxjQUFjLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFTLENBQUM7UUFDM0UsTUFBTSxJQUFBLCtCQUFZLEVBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDNUMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvYnJpYW5sb25nL0RldmVsb3Blci9zdW1taXQvc2VydmVyL3Rlc3RzL2xlZ2FsLWhvbGQtZ3VhcmQudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZW55V2hlbkhvbGQgfSBmcm9tICcuLi9zcmMvY2FzZXMvbGVnYWwtaG9sZC1ndWFyZCc7XG5cbmRlc2NyaWJlKCdsZWdhbCBob2xkIGd1YXJkJywgKCkgPT4ge1xuICBpdCgnZGVuaWVzIHdoZW4gY2FzZSBoYXMgbGVnYWwgaG9sZCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCByZXEgPSB7XG4gICAgICBwYXJhbXM6IHsgaWQ6ICdjMScgfSxcbiAgICAgIGRiOiB7IGNhc2U6IHsgZmluZFVuaXF1ZTogYXN5bmMgKCkgPT4gKHsgbGVnYWxIb2xkOiB0cnVlIH0pIH0gfSxcbiAgICB9IGFzIGFueTtcbiAgICBjb25zdCByZXBseTogYW55ID0ge1xuICAgICAgc3RhdHVzOiAwLFxuICAgICAgYm9keTogbnVsbCxcbiAgICAgIGNvZGUoY29kZTogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuc3RhdHVzID0gY29kZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9LFxuICAgICAgc2VuZChwYXlsb2FkOiBhbnkpIHtcbiAgICAgICAgdGhpcy5ib2R5ID0gcGF5bG9hZDtcbiAgICAgIH0sXG4gICAgfTtcbiAgICBhd2FpdCBkZW55V2hlbkhvbGQocmVxLCByZXBseSk7XG4gICAgZXhwZWN0KHJlcGx5LnN0YXR1cykudG9CZSg0MjMpO1xuICAgIGV4cGVjdChyZXBseS5ib2R5KS50b0VxdWFsKHsgZXJyb3I6ICdMZWdhbCBob2xkIGFjdGl2ZTogb3BlcmF0aW9uIGxvY2tlZCcgfSk7XG4gIH0pO1xuXG4gIGl0KCdwYXNzZXMgdGhyb3VnaCB3aGVuIG5vIGhvbGQnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgcmVxID0ge1xuICAgICAgcGFyYW1zOiB7IGlkOiAnYzEnIH0sXG4gICAgICBkYjogeyBjYXNlOiB7IGZpbmRVbmlxdWU6IGFzeW5jICgpID0+ICh7IGxlZ2FsSG9sZDogZmFsc2UgfSkgfSB9LFxuICAgIH0gYXMgYW55O1xuICAgIGNvbnN0IHJlcGx5ID0geyBjb2RlOiBqZXN0LmZuKCkubW9ja1JldHVyblRoaXMoKSwgc2VuZDogamVzdC5mbigpIH0gYXMgYW55O1xuICAgIGF3YWl0IGRlbnlXaGVuSG9sZChyZXEsIHJlcGx5KTtcbiAgICBleHBlY3QocmVwbHkuY29kZSkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==