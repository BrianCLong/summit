{"file":"/Users/brianlong/Developer/summit/server/src/tests/semanticSearch.test.ts","mappings":"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","names":[],"sources":["/Users/brianlong/Developer/summit/server/src/tests/semanticSearch.test.ts"],"sourcesContent":["import SemanticSearchService from \"../services/SemanticSearchService\";\n\ndescribe(\"SemanticSearchService\", () => {\n  class MockEmbeddingService {\n    async generateEmbedding({ text }: { text: string }): Promise<number[]> {\n      return [text.includes(\"threat\") ? 1 : 0];\n    }\n  }\n\n  class MockWeaviateClient {\n    docs: any[] = [];\n    data = {\n      creator: () => {\n        const ctx = this;\n        const record: any = {};\n        return {\n          withClassName(name: string) {\n            record.className = name;\n            return this;\n          },\n          withId(id: string) {\n            record.id = id;\n            return this;\n          },\n          withVector(vector: number[]) {\n            record.vector = vector;\n            return this;\n          },\n          withProperties(props: any) {\n            record.props = props;\n            return this;\n          },\n          async do() {\n            ctx.docs.push(record);\n          },\n        };\n      },\n    };\n    graphql = {\n      get: () => {\n        const ctx = this;\n        const query: any = { limit: 10 };\n        return {\n          withClassName(name: string) {\n            query.className = name;\n            return this;\n          },\n          withFields(_f: string) {\n            return this;\n          },\n          withNearVector(nv: any) {\n            query.nearVector = nv;\n            return this;\n          },\n          withWhere(where: any) {\n            query.where = where;\n            return this;\n          },\n          withLimit(limit: number) {\n            query.limit = limit;\n            return this;\n          },\n          async do() {\n            let items = ctx.docs;\n            if (query.where?.operands) {\n              for (const op of query.where.operands) {\n                const field = op.path[0];\n                const val = op.valueString ?? op.valueInt ?? op.valueDate;\n                if (op.operator === \"Equal\") {\n                  items = items.filter((d) => d.props[field] === val);\n                } else if (op.operator === \"GreaterThanEqual\") {\n                  items = items.filter((d) => d.props[field] >= val);\n                } else if (op.operator === \"LessThanEqual\") {\n                  items = items.filter((d) => d.props[field] <= val);\n                }\n              }\n            }\n            items = items\n              .map((d) => ({\n                ...d.props,\n                _additional: {\n                  distance: Math.abs(d.vector[0] - query.nearVector.vector[0]),\n                },\n              }))\n              .sort((a, b) => a._additional.distance - b._additional.distance)\n              .slice(0, query.limit);\n            const data: any = {};\n            data[query.className] = items;\n            return { data: { Get: data } };\n          },\n        };\n      },\n    };\n  }\n\n  it(\"performs search with metadata filters\", async () => {\n    const client = new MockWeaviateClient();\n    const service = new SemanticSearchService(\n      client as any,\n      new MockEmbeddingService() as any,\n    );\n\n    await service.indexDocument({\n      id: \"1\",\n      text: \"threat report one\",\n      source: \"OSINT\",\n      date: \"2024-01-01\",\n      threatLevel: 3,\n      graphId: \"e1\",\n    });\n    await service.indexDocument({\n      id: \"2\",\n      text: \"benign report\",\n      source: \"OSINT\",\n      date: \"2024-01-02\",\n      threatLevel: 1,\n      graphId: \"e2\",\n    });\n\n    const results = await service.search(\"threat\", {\n      source: \"OSINT\",\n      threatLevel: 3,\n    });\n    expect(results).toHaveLength(1);\n    expect(results[0].metadata.graphId).toBe(\"e1\");\n  });\n});\n"],"version":3}