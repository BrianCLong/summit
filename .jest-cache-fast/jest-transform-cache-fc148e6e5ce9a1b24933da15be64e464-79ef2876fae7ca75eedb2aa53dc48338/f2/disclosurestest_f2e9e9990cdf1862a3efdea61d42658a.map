{"file":"/Users/brianlong/Developer/summit/server/src/routes/__tests__/disclosures.test.ts","mappings":"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","names":[],"sources":["/Users/brianlong/Developer/summit/server/src/routes/__tests__/disclosures.test.ts"],"sourcesContent":["import request from 'supertest';\nimport express from 'express';\nimport fs from 'fs';\nimport path from 'path';\n\njest.mock('../../disclosure/export-service.js', () => ({\n  disclosureExportService: {\n    createJob: jest.fn(),\n    listJobsForTenant: jest.fn(),\n    getJob: jest.fn(),\n    getDownload: jest.fn(),\n  },\n}));\n\njest.mock('../../metrics/disclosureMetrics.js', () => ({\n  disclosureMetrics: {\n    uiEvent: jest.fn(),\n  },\n}));\n\nconst { disclosureExportService } = jest.requireMock('../../disclosure/export-service.js');\nconst { disclosureMetrics } = jest.requireMock('../../metrics/disclosureMetrics.js');\n\nimport disclosuresRouter from '../disclosures.js';\n\nconst app = express();\napp.use('/disclosures', disclosuresRouter);\n\ndescribe('Disclosures routes', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('POST /disclosures/export', () => {\n    it('creates a disclosure export job when tenant matches header', async () => {\n      const job = {\n        id: 'job-1',\n        tenantId: 'tenant-a',\n        status: 'pending',\n        createdAt: new Date().toISOString(),\n        warnings: [],\n        artifactStats: {},\n      };\n      disclosureExportService.createJob.mockResolvedValueOnce(job);\n\n      const response = await request(app)\n        .post('/disclosures/export')\n        .set('x-tenant-id', 'tenant-a')\n        .send({ tenantId: 'tenant-a', startTime: '2024-01-01T00:00:00Z', endTime: '2024-01-02T00:00:00Z' });\n\n      expect(response.status).toBe(202);\n      expect(response.body.job).toEqual(job);\n      expect(disclosureExportService.createJob).toHaveBeenCalledWith({\n        tenantId: 'tenant-a',\n        startTime: '2024-01-01T00:00:00Z',\n        endTime: '2024-01-02T00:00:00Z',\n      });\n    });\n\n    it('rejects mismatched tenant headers', async () => {\n      const response = await request(app)\n        .post('/disclosures/export')\n        .set('x-tenant-id', 'tenant-a')\n        .send({ tenantId: 'tenant-b', startTime: '2024-01-01T00:00:00Z', endTime: '2024-01-02T00:00:00Z' });\n\n      expect(response.status).toBe(403);\n      expect(disclosureExportService.createJob).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('GET /disclosures/export/:jobId', () => {\n    it('returns job status when tenant is authorized', async () => {\n      const job = {\n        id: 'job-1',\n        tenantId: 'tenant-a',\n        status: 'completed',\n        createdAt: new Date().toISOString(),\n        warnings: [],\n        artifactStats: {},\n      };\n      disclosureExportService.getJob.mockReturnValueOnce(job);\n\n      const response = await request(app)\n        .get('/disclosures/export/job-1')\n        .set('x-tenant-id', 'tenant-a');\n\n      expect(response.status).toBe(200);\n      expect(response.body.job).toEqual(job);\n    });\n\n    it('returns 404 when job is missing', async () => {\n      disclosureExportService.getJob.mockReturnValueOnce(undefined);\n\n      const response = await request(app)\n        .get('/disclosures/export/missing')\n        .set('x-tenant-id', 'tenant-a');\n\n      expect(response.status).toBe(404);\n    });\n  });\n\n  describe('GET /disclosures/export/:jobId/download', () => {\n    it('streams the zip when export completed', async () => {\n      const tempDir = fs.mkdtempSync(path.join(process.cwd(), 'tmp-test-'));\n      const filePath = path.join(tempDir, 'bundle.zip');\n      fs.writeFileSync(filePath, 'zip-data');\n\n      const job = {\n        id: 'job-1',\n        tenantId: 'tenant-a',\n        status: 'completed',\n        createdAt: new Date().toISOString(),\n        warnings: [],\n        artifactStats: {},\n      };\n\n      disclosureExportService.getDownload.mockReturnValueOnce({ job, filePath });\n\n      const response = await request(app)\n        .get('/disclosures/export/job-1/download')\n        .set('x-tenant-id', 'tenant-a');\n\n      expect(response.status).toBe(200);\n      expect(response.headers['content-disposition']).toContain('attachment');\n\n      fs.rmSync(tempDir, { recursive: true, force: true });\n    });\n  });\n\n  describe('POST /disclosures/analytics', () => {\n    it('records analytics events when payload valid', async () => {\n      const response = await request(app)\n        .post('/disclosures/analytics')\n        .set('x-tenant-id', 'tenant-a')\n        .send({ event: 'view', tenantId: 'tenant-a' });\n\n      expect(response.status).toBe(202);\n      expect(disclosureMetrics.uiEvent).toHaveBeenCalledWith('view', 'tenant-a');\n    });\n  });\n});\n"],"version":3}