{"file":"/Users/brianlong/Developer/summit/server/src/conductor/mission-control/conflict-resolution.ts","mappings":"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","names":[],"sources":["/Users/brianlong/Developer/summit/server/src/conductor/mission-control/conflict-resolution.ts"],"sourcesContent":["import { performance } from 'perf_hooks';\n\nexport type MissionPriorityLevel = 'critical' | 'high' | 'medium' | 'low';\n\nexport interface MissionSlot {\n  start: string;\n  end: string;\n}\n\nexport interface MissionFlexibility {\n  maxDelayMinutes: number;\n  fallbackSlots?: MissionSlot[];\n  negotiationStance?: 'aggressive' | 'balanced' | 'defensive';\n}\n\nexport interface MissionParticipantRequest {\n  missionId: string;\n  displayName?: string;\n  priorityLevel: MissionPriorityLevel;\n  basePriority: number;\n  missionImpact: number;\n  regulatoryRisk: number;\n  urgencyMinutes: number;\n  requestedSlot: MissionSlot;\n  flexibility: MissionFlexibility;\n}\n\nexport interface MissionControlArbitrationRules {\n  allowPreemption?: boolean;\n  fairnessWeight?: number;\n  missionImpactWeight?: number;\n  urgencyWeight?: number;\n  resilienceWeight?: number;\n  priorityFloor?: number;\n  negotiationLogLimit?: number;\n}\n\nexport interface MissionControlConflictContext {\n  conflictId: string;\n  resourceType: string;\n  resourceId?: string;\n  currentMissionId: string;\n  participants: MissionParticipantRequest[];\n  arbitrationRules?: MissionControlArbitrationRules;\n}\n\nexport interface MissionAssignment {\n  missionId: string;\n  slot: MissionSlot;\n  decision: 'primary' | 'fallback';\n  negotiated: boolean;\n  priorityScore: number;\n  concessions: number;\n}\n\nexport interface MissionDeferral {\n  missionId: string;\n  reason: string;\n  priorityScore: number;\n}\n\nexport interface NegotiationEvent {\n  round: number;\n  type: 'allocation' | 'swap' | 'defer' | 'priority-arbitration';\n  description: string;\n  actors: string[];\n  timestamp: string;\n}\n\nexport interface MissionControlResolution {\n  conflictId: string;\n  resourceType: string;\n  assignments: MissionAssignment[];\n  deferred: MissionDeferral[];\n  negotiationLog: NegotiationEvent[];\n  arbitrationSummary: {\n    totalParticipants: number;\n    assignments: number;\n    deferred: number;\n    fairnessIndex: number;\n    totalConcessions: number;\n    highestPriorityMission: string | null;\n    lowestPriorityMission: string | null;\n    rounds: number;\n    priorityDecisions: string[];\n    resolutionLatencyMs: number;\n  };\n  allowProceed: boolean;\n  currentAssignment?: MissionAssignment;\n}\n\ninterface MissionOptionState {\n  slot: MissionSlot;\n  label: 'primary' | 'fallback';\n  preference: number;\n}\n\ninterface MissionParticipantState {\n  missionId: string;\n  priorityScore: number;\n  options: MissionOptionState[];\n  assignedIndex: number;\n  concessionsUsed: number;\n  maxConcessions: number;\n}\n\ninterface SlotAssignment {\n  missionId: string;\n  optionIndex: number;\n}\n\nconst DEFAULT_RULES: Required<MissionControlArbitrationRules> = {\n  allowPreemption: true,\n  fairnessWeight: 0.15,\n  missionImpactWeight: 0.25,\n  urgencyWeight: 0.2,\n  resilienceWeight: 0.15,\n  priorityFloor: 0,\n  negotiationLogLimit: 75,\n};\n\nconst PRIORITY_MULTIPLIER: Record<MissionPriorityLevel, number> = {\n  critical: 1.3,\n  high: 1.1,\n  medium: 0.9,\n  low: 0.75,\n};\n\nexport class MissionControlConflictResolver {\n  resolve(context: MissionControlConflictContext): MissionControlResolution {\n    if (!context.participants.length) {\n      return {\n        conflictId: context.conflictId,\n        resourceType: context.resourceType,\n        assignments: [],\n        deferred: [],\n        negotiationLog: [],\n        arbitrationSummary: {\n          totalParticipants: 0,\n          assignments: 0,\n          deferred: 0,\n          fairnessIndex: 1,\n          totalConcessions: 0,\n          highestPriorityMission: null,\n          lowestPriorityMission: null,\n          rounds: 0,\n          priorityDecisions: [],\n          resolutionLatencyMs: 0,\n        },\n        allowProceed: false,\n      };\n    }\n\n    const rules = { ...DEFAULT_RULES, ...(context.arbitrationRules || {}) };\n    const start = performance.now();\n\n    const participants = context.participants.map((participant) =>\n      this.buildParticipantState(participant, rules),\n    );\n    participants.sort((a, b) => b.priorityScore - a.priorityScore);\n\n    const statesByMission = new Map<string, MissionParticipantState>();\n    participants.forEach((state) => statesByMission.set(state.missionId, state));\n\n    const assignments = new Map<string, SlotAssignment>();\n    const negotiationLog: NegotiationEvent[] = [];\n    const priorityDecisions: string[] = [];\n\n    let round = 0;\n    for (const participant of participants) {\n      round += 1;\n      const allocated = this.allocateParticipant(\n        participant,\n        assignments,\n        statesByMission,\n        negotiationLog,\n        priorityDecisions,\n        rules,\n        round,\n      );\n\n      if (!allocated) {\n        this.pushNegotiationEvent(\n          negotiationLog,\n          {\n            round,\n            type: 'defer',\n            description: `Mission ${participant.missionId} deferred – no acceptable slot available`,\n            actors: [participant.missionId],\n            timestamp: new Date().toISOString(),\n          },\n          rules.negotiationLogLimit,\n        );\n      }\n    }\n\n    const assignmentsList: MissionAssignment[] = participants\n      .filter((state) => state.assignedIndex >= 0)\n      .map((state) => {\n        const option = state.options[state.assignedIndex];\n        return {\n          missionId: state.missionId,\n          slot: option.slot,\n          decision: option.label,\n          negotiated: option.label === 'fallback',\n          priorityScore: Number(state.priorityScore.toFixed(2)),\n          concessions: state.concessionsUsed,\n        };\n      });\n\n    const deferredList: MissionDeferral[] = participants\n      .filter((state) => state.assignedIndex < 0)\n      .map((state) => ({\n        missionId: state.missionId,\n        reason: 'No viable slot after arbitration',\n        priorityScore: Number(state.priorityScore.toFixed(2)),\n      }));\n\n    const fairnessIndex = this.calculateFairnessIndex(participants);\n    const totalConcessions = participants.reduce(\n      (sum, state) => sum + state.concessionsUsed,\n      0,\n    );\n\n    const resolutionLatencyMs = Math.round(performance.now() - start);\n\n    const currentAssignment = assignmentsList.find(\n      (assignment) => assignment.missionId === context.currentMissionId,\n    );\n\n    return {\n      conflictId: context.conflictId,\n      resourceType: context.resourceType,\n      assignments: assignmentsList,\n      deferred: deferredList,\n      negotiationLog,\n      arbitrationSummary: {\n        totalParticipants: participants.length,\n        assignments: assignmentsList.length,\n        deferred: deferredList.length,\n        fairnessIndex: Number(fairnessIndex.toFixed(2)),\n        totalConcessions,\n        highestPriorityMission: participants[0]?.missionId || null,\n        lowestPriorityMission: participants[participants.length - 1]?.missionId || null,\n        rounds: round,\n        priorityDecisions,\n        resolutionLatencyMs,\n      },\n      allowProceed: Boolean(currentAssignment),\n      currentAssignment,\n    };\n  }\n\n  private buildParticipantState(\n    participant: MissionParticipantRequest,\n    rules: Required<MissionControlArbitrationRules>,\n  ): MissionParticipantState {\n    const priorityScore = this.computePriorityScore(participant, rules);\n    const options = this.buildMissionOptions(participant);\n    const fallbackCount = Math.max(0, options.length - 1);\n    const maxConcessionsByFlex = Math.min(\n      fallbackCount,\n      Math.max(0, Math.floor((participant.flexibility.maxDelayMinutes || 0) / 15)),\n    );\n\n    let maxConcessions = maxConcessionsByFlex;\n    const stance = participant.flexibility.negotiationStance || 'balanced';\n    if (stance === 'aggressive') {\n      maxConcessions = Math.max(0, maxConcessions - 1);\n    } else if (stance === 'defensive') {\n      maxConcessions = Math.min(fallbackCount, maxConcessions + 1);\n    }\n\n    return {\n      missionId: participant.missionId,\n      priorityScore,\n      options,\n      assignedIndex: -1,\n      concessionsUsed: 0,\n      maxConcessions,\n    };\n  }\n\n  private buildMissionOptions(participant: MissionParticipantRequest): MissionOptionState[] {\n    const options: MissionOptionState[] = [];\n    const seen = new Set<string>();\n\n    const addOption = (slot: MissionSlot, label: 'primary' | 'fallback', preference: number) => {\n      const key = this.slotKey(slot);\n      if (seen.has(key)) return;\n      seen.add(key);\n      options.push({ slot, label, preference });\n    };\n\n    addOption(participant.requestedSlot, 'primary', 0);\n\n    participant.flexibility.fallbackSlots?.forEach((slot, index) => {\n      addOption(slot, 'fallback', index + 1);\n    });\n\n    options.sort((a, b) => a.preference - b.preference);\n    return options;\n  }\n\n  private computePriorityScore(\n    participant: MissionParticipantRequest,\n    rules: Required<MissionControlArbitrationRules>,\n  ): number {\n    const levelMultiplier = PRIORITY_MULTIPLIER[participant.priorityLevel];\n    const normalizedBase = Math.min(100, Math.max(0, participant.basePriority));\n    const normalizedImpact = this.clamp01(participant.missionImpact) * 100;\n    const normalizedRisk = this.clamp01(participant.regulatoryRisk) * 100;\n    const urgencyScore = this.calculateUrgencyScore(participant.urgencyMinutes);\n    const flexibilityPenalty = Math.min(\n      25,\n      Math.max(0, participant.flexibility.maxDelayMinutes / 10),\n    );\n\n    let score = normalizedBase * 0.5 * levelMultiplier;\n    score += normalizedImpact * rules.missionImpactWeight;\n    score += normalizedRisk * rules.resilienceWeight;\n    score += urgencyScore * rules.urgencyWeight;\n    score -= flexibilityPenalty;\n    score = Math.max(rules.priorityFloor, score);\n    return Number(score.toFixed(2));\n  }\n\n  private allocateParticipant(\n    participant: MissionParticipantState,\n    assignments: Map<string, SlotAssignment>,\n    statesByMission: Map<string, MissionParticipantState>,\n    negotiationLog: NegotiationEvent[],\n    priorityDecisions: string[],\n    rules: Required<MissionControlArbitrationRules>,\n    round: number,\n  ): boolean {\n    for (let optionIndex = 0; optionIndex < participant.options.length; optionIndex += 1) {\n      const option = participant.options[optionIndex];\n      const key = this.slotKey(option.slot);\n      const currentAssignment = assignments.get(key);\n\n      if (!currentAssignment) {\n        assignments.set(key, { missionId: participant.missionId, optionIndex });\n        participant.assignedIndex = optionIndex;\n        if (option.label === 'fallback') {\n          participant.concessionsUsed = Math.min(\n            participant.maxConcessions,\n            participant.concessionsUsed + 1,\n          );\n        }\n        this.pushNegotiationEvent(\n          negotiationLog,\n          {\n            round,\n            type: 'allocation',\n            description: `Mission ${participant.missionId} assigned to ${option.label} slot ${option.slot.start} → ${option.slot.end}`,\n            actors: [participant.missionId],\n            timestamp: new Date().toISOString(),\n          },\n          rules.negotiationLogLimit,\n        );\n        return true;\n      }\n\n      if (currentAssignment.missionId === participant.missionId) {\n        participant.assignedIndex = optionIndex;\n        return true;\n      }\n\n      const incumbent = statesByMission.get(currentAssignment.missionId);\n      if (!incumbent) {\n        continue;\n      }\n\n      if (!rules.allowPreemption) {\n        continue;\n      }\n\n      if (participant.priorityScore <= incumbent.priorityScore) {\n        continue;\n      }\n\n      const fallbackIndex = this.findFallbackOption(incumbent, assignments);\n      if (fallbackIndex === -1) {\n        continue;\n      }\n\n      const fallbackOption = incumbent.options[fallbackIndex];\n      assignments.set(this.slotKey(fallbackOption.slot), {\n        missionId: incumbent.missionId,\n        optionIndex: fallbackIndex,\n      });\n      incumbent.assignedIndex = fallbackIndex;\n      incumbent.concessionsUsed = Math.min(\n        incumbent.maxConcessions,\n        incumbent.concessionsUsed + 1,\n      );\n\n      this.pushNegotiationEvent(\n        negotiationLog,\n        {\n          round,\n          type: 'swap',\n          description: `Mission ${incumbent.missionId} shifted to fallback slot ${fallbackOption.slot.start} → ${fallbackOption.slot.end}`,\n          actors: [participant.missionId, incumbent.missionId],\n          timestamp: new Date().toISOString(),\n        },\n        rules.negotiationLogLimit,\n      );\n\n      this.pushNegotiationEvent(\n        negotiationLog,\n        {\n          round,\n          type: 'priority-arbitration',\n          description: `Mission ${participant.missionId} preempted ${incumbent.missionId} (scores ${participant.priorityScore.toFixed(2)} vs ${incumbent.priorityScore.toFixed(2)})`,\n          actors: [participant.missionId, incumbent.missionId],\n          timestamp: new Date().toISOString(),\n        },\n        rules.negotiationLogLimit,\n      );\n\n      priorityDecisions.push(\n        `Mission ${participant.missionId} outranked ${incumbent.missionId} (${participant.priorityScore.toFixed(1)} vs ${incumbent.priorityScore.toFixed(1)})`,\n      );\n\n      assignments.set(key, { missionId: participant.missionId, optionIndex });\n      participant.assignedIndex = optionIndex;\n      return true;\n    }\n\n    return false;\n  }\n\n  private findFallbackOption(\n    participant: MissionParticipantState,\n    assignments: Map<string, SlotAssignment>,\n  ): number {\n    if (participant.concessionsUsed >= participant.maxConcessions) {\n      return -1;\n    }\n\n    for (let index = participant.assignedIndex + 1; index < participant.options.length; index += 1) {\n      const option = participant.options[index];\n      if (!assignments.has(this.slotKey(option.slot))) {\n        return index;\n      }\n    }\n\n    return -1;\n  }\n\n  private calculateFairnessIndex(participants: MissionParticipantState[]): number {\n    const totalScore = participants.reduce((sum, p) => sum + p.priorityScore, 0);\n    if (totalScore === 0) {\n      return 1;\n    }\n\n    const assignedScore = participants\n      .filter((p) => p.assignedIndex >= 0)\n      .reduce((sum, p) => sum + p.priorityScore, 0);\n\n    return assignedScore / totalScore;\n  }\n\n  private pushNegotiationEvent(\n    negotiationLog: NegotiationEvent[],\n    event: NegotiationEvent,\n    limit: number,\n  ): void {\n    if (negotiationLog.length >= limit) {\n      return;\n    }\n\n    negotiationLog.push(event);\n  }\n\n  private calculateUrgencyScore(minutes: number): number {\n    if (!Number.isFinite(minutes)) {\n      return 50;\n    }\n\n    const clamped = Math.max(0, Math.min(720, minutes));\n    const score = ((720 - clamped) / 720) * 100;\n    return Number(score.toFixed(2));\n  }\n\n  private clamp01(value: number): number {\n    if (!Number.isFinite(value)) {\n      return 0;\n    }\n\n    if (value < 0) return 0;\n    if (value > 1) return 1;\n    return value;\n  }\n\n  private slotKey(slot: MissionSlot): string {\n    return `${slot.start}|${slot.end}`;\n  }\n}\n"],"version":3}