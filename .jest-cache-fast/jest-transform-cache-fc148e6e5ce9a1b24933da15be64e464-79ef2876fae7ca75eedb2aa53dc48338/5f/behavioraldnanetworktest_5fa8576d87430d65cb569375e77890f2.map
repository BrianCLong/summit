{"file":"/Users/brianlong/Developer/summit/server/tests/behavioral-dna-network.test.ts","mappings":";;AAAA,yEAAsE;AAEtE,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;IACpC,IAAI,CAAC,0CAA0C,EAAE,GAAG,EAAE;QACpD,MAAM,OAAO,GAAG,IAAI,2CAAoB,EAAE,CAAC;QAC3C,OAAO,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;QACnD,OAAO,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;QACnD,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;QAElE,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpC,MAAM,SAAS,GAAG,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAC7C,MAAM,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,uCAAuC,EAAE,GAAG,EAAE;QACjD,MAAM,OAAO,GAAG,IAAI,2CAAoB,EAAE,CAAC;QAC3C,OAAO,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;QACnD,OAAO,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;QACnD,MAAM,UAAU,GAAG,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAE7C,MAAM,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACtC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/server/tests/behavioral-dna-network.test.ts"],"sourcesContent":["import { BehavioralDnaNetwork } from \"../src/ai/behavioralDnaNetwork\";\n\ndescribe(\"BehavioralDnaNetwork\", () => {\n  test(\"updates embeddings and detects anomalies\", () => {\n    const network = new BehavioralDnaNetwork();\n    network.ingest({ entityId: \"u1\", vector: [1, 0] });\n    network.ingest({ entityId: \"u1\", vector: [1, 0] });\n    const result = network.ingest({ entityId: \"u1\", vector: [0, 1] });\n\n    expect(result.isAnomaly).toBe(true);\n    const embedding = network.getEmbedding(\"u1\");\n    expect(embedding).toBeDefined();\n  });\n\n  test(\"predicts next behavior based on trend\", () => {\n    const network = new BehavioralDnaNetwork();\n    network.ingest({ entityId: \"u2\", vector: [1, 0] });\n    network.ingest({ entityId: \"u2\", vector: [0, 1] });\n    const prediction = network.predictNext(\"u2\");\n\n    expect(prediction).toEqual([-1, 2]);\n  });\n});\n"],"version":3}