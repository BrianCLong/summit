{"file":"/Users/brianlong/Developer/summit/server/src/utils/signature.ts","mappings":";;;;;AAEA,0BAMC;AAED,8BASC;AAnBD,oDAA4B;AAE5B,SAAgB,OAAO,CACrB,SAA4B,EAC5B,MAAc,EACd,UAAkB;IAElB,OAAO,gBAAM,CAAC,UAAU,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAC/E,CAAC;AAED,SAAgB,SAAS,CAAC,CAAS,EAAE,CAAS;IAC5C,MAAM,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;IAClC,MAAM,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;IAClC,IAAI,EAAE,CAAC,MAAM,KAAK,EAAE,CAAC,MAAM;QAAE,OAAO,KAAK,CAAC;IAC1C,IAAI,CAAC;QACH,OAAO,gBAAM,CAAC,eAAe,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IACxC,CAAC;IAAC,MAAM,CAAC;QACP,OAAO,KAAK,CAAC;IACf,CAAC;AACH,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/server/src/utils/signature.ts"],"sourcesContent":["import crypto from 'crypto';\n\nexport function hmacHex(\n  algorithm: 'sha256' | 'sha1',\n  secret: string,\n  payloadRaw: Buffer,\n): string {\n  return crypto.createHmac(algorithm, secret).update(payloadRaw).digest('hex');\n}\n\nexport function safeEqual(a: string, b: string): boolean {\n  const ab = Buffer.from(a, 'utf8');\n  const bb = Buffer.from(b, 'utf8');\n  if (ab.length !== bb.length) return false;\n  try {\n    return crypto.timingSafeEqual(ab, bb);\n  } catch {\n    return false;\n  }\n}\n\n"],"version":3}