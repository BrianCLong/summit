{"file":"/Users/brianlong/Developer/summit/server/src/services/PathRankingService.ts","mappings":";;AA0BA,8BA8CC;AA9CD,SAAgB,SAAS,CACvB,KAAU,EACV,OAAuB,EAAE;IAEzB,MAAM,EACJ,WAAW,GAAG,EAAE,EAChB,cAAc,GAAG,EAAE,EACnB,QAAQ,GAAG,IAAI,EACf,OAAO,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,GAC7D,GAAG,IAAI,CAAC;IAET,MAAM,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC;IACpE,MAAM,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;IAEjE,MAAM,MAAM,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE;QAC7B,MAAM,MAAM,GAAG,CAAC,CAAC,CAAC,iCAAiC;QACnD,MAAM,cAAc,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC,qCAAqC;QACxE,MAAM,UAAU,GAAG,WAAW,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC;QAClD,MAAM,YAAY,GAAG,UAAU,GAAG,aAAa,CAAC;QAChD,MAAM,aAAa,GACjB,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QACpE,MAAM,kBAAkB,GAAG,aAAa,GAAG,aAAa,CAAC;QAEzD,IAAI,QAAQ,KAAK,IAAI,EAAE,CAAC;YACtB,MAAM,KAAK,GAAG,cAAc,CAAC;YAC7B,OAAO;gBACL,IAAI,EAAE,CAAC;gBACP,KAAK;gBACL,eAAe,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,EAAE;aAC/D,CAAC;QACJ,CAAC;QAED,MAAM,SAAS,GAAmB;YAChC,MAAM,EAAE,cAAc,GAAG,OAAO,CAAC,MAAM;YACvC,QAAQ,EAAE,YAAY,GAAG,OAAO,CAAC,QAAQ;YACzC,UAAU,EAAE,kBAAkB,GAAG,OAAO,CAAC,UAAU;SACpD,CAAC;QAEF,OAAO;YACL,IAAI,EAAE,CAAC;YACP,KAAK,EAAE,SAAS,CAAC,MAAM,GAAG,SAAS,CAAC,QAAQ,GAAG,SAAS,CAAC,UAAU;YACnE,eAAe,EAAE,SAAS;SAC3B,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;AAClD,CAAC;AAED,kBAAe,SAAS,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/server/src/services/PathRankingService.ts"],"sourcesContent":["export interface ScoreBreakdown {\n  length: number;\n  edgeType: number;\n  centrality: number;\n}\n\nexport interface RankingOptions {\n  edgeWeights?: Record<string, number>;\n  nodeCentrality?: Record<string, number>;\n  strategy?: \"v1\" | \"v2\";\n  weights?: { length: number; edgeType: number; centrality: number };\n}\n\nexport interface WhyPathLike {\n  from: string;\n  to: string;\n  relId: string;\n  type?: string;\n}\n\ninterface RankedPath<T> {\n  path: T;\n  score: number;\n  score_breakdown: ScoreBreakdown;\n}\n\nexport function rankPaths<T extends WhyPathLike>(\n  paths: T[],\n  opts: RankingOptions = {},\n): RankedPath<T>[] {\n  const {\n    edgeWeights = {},\n    nodeCentrality = {},\n    strategy = \"v2\",\n    weights = { length: 0.34, edgeType: 0.33, centrality: 0.33 },\n  } = opts;\n\n  const maxCentrality = Math.max(...Object.values(nodeCentrality), 1);\n  const maxEdgeWeight = Math.max(...Object.values(edgeWeights), 1);\n\n  const ranked = paths.map((p) => {\n    const length = 1; // current paths are single edges\n    const lengthScoreRaw = 1 / length; // higher is better for shorter paths\n    const edgeWeight = edgeWeights[p.type || \"\"] || 1;\n    const edgeScoreRaw = edgeWeight / maxEdgeWeight;\n    const centralityVal =\n      ((nodeCentrality[p.from] || 0) + (nodeCentrality[p.to] || 0)) / 2;\n    const centralityScoreRaw = centralityVal / maxCentrality;\n\n    if (strategy === \"v1\") {\n      const score = lengthScoreRaw;\n      return {\n        path: p,\n        score,\n        score_breakdown: { length: score, edgeType: 0, centrality: 0 },\n      };\n    }\n\n    const breakdown: ScoreBreakdown = {\n      length: lengthScoreRaw * weights.length,\n      edgeType: edgeScoreRaw * weights.edgeType,\n      centrality: centralityScoreRaw * weights.centrality,\n    };\n\n    return {\n      path: p,\n      score: breakdown.length + breakdown.edgeType + breakdown.centrality,\n      score_breakdown: breakdown,\n    };\n  });\n\n  return ranked.sort((a, b) => b.score - a.score);\n}\n\nexport default rankPaths;\n"],"version":3}