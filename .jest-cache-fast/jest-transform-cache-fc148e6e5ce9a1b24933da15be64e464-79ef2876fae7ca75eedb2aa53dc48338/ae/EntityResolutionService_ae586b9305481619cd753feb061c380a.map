{"file":"/Users/brianlong/Developer/summit/server/src/services/EntityResolutionService.ts","mappings":"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","names":[],"sources":["/Users/brianlong/Developer/summit/server/src/services/EntityResolutionService.ts"],"sourcesContent":["import { Session } from \"neo4j-driver\";\nimport pino from \"pino\";\nimport { getPostgresPool } from \"../config/database\";\nimport {\n  BehavioralFingerprintService,\n  BehavioralTelemetry,\n  BehavioralFingerprint,\n} from \"./BehavioralFingerprintService.js\";\n\nconst log = pino({ name: \"EntityResolutionService\" });\n\ninterface NormalizedProperties {\n  name?: string;\n  email?: string;\n  url?: string;\n}\n\nexport class EntityResolutionService {\n  private behavioralService = new BehavioralFingerprintService();\n\n  /**\n   * Normalizes entity properties for deterministic comparison.\n   * @param entity The entity object, typically from Neo4j, with properties.\n   * @returns Normalized properties.\n   */\n  private normalizeEntityProperties(entity: any): NormalizedProperties {\n    const normalized: NormalizedProperties = {};\n    if (entity.name) {\n      normalized.name = String(entity.name).trim().toLowerCase();\n    }\n    if (entity.email) {\n      normalized.email = String(entity.email).trim().toLowerCase();\n    }\n    if (entity.url) {\n      try {\n        const url = new URL(String(entity.url).trim().toLowerCase());\n        normalized.url = url.hostname + url.pathname; // Basic normalization\n      } catch (e) {\n        log.warn(`Invalid URL for normalization: ${entity.url}`);\n      }\n    }\n    return normalized;\n  }\n\n  /**\n   * Generates a canonical key for an entity based on its normalized properties.\n   * This key is used to identify potential duplicates.\n   * @param normalizedProps Normalized entity properties.\n   * @returns A canonical string key.\n   */\n  private generateCanonicalKey(normalizedProps: NormalizedProperties): string {\n    const parts: string[] = [];\n    if (normalizedProps.name) parts.push(`name:${normalizedProps.name}`);\n    if (normalizedProps.email) parts.push(`email:${normalizedProps.email}`);\n    if (normalizedProps.url) parts.push(`url:${normalizedProps.url}`);\n\n    if (parts.length === 0) {\n      return \"\"; // Cannot generate a canonical key without identifying properties\n    }\n    return parts.sort().join(\"|\");\n  }\n\n  /**\n   * Finds potential duplicate entities in Neo4j based on canonical keys.\n   * @param session Neo4j session.\n   * @returns A Map where keys are canonical keys and values are arrays of entity IDs.\n   */\n  public async findDuplicateEntities(\n    session: Session,\n  ): Promise<Map<string, string[]>> {\n    const duplicates = new Map<string, string[]>();\n    const result = await session.run(`\n      MATCH (e:Entity)\n      WHERE e.name IS NOT NULL OR e.email IS NOT NULL OR e.url IS NOT NULL\n      RETURN e.id AS id, e.name AS name, e.email AS email, e.url AS url\n    `);\n\n    for (const record of result.records) {\n      const entityId = record.get(\"id\");\n      const entityProps = {\n        name: record.get(\"name\"),\n        email: record.get(\"email\"),\n        url: record.get(\"url\"),\n      };\n      const normalized = this.normalizeEntityProperties(entityProps);\n      const canonicalKey = this.generateCanonicalKey(normalized);\n\n      if (canonicalKey) {\n        if (!duplicates.has(canonicalKey)) {\n          duplicates.set(canonicalKey, []);\n        }\n        duplicates.get(canonicalKey)!.push(entityId);\n      }\n    }\n\n    // Filter out groups with only one entity (not duplicates)\n    for (const [key, ids] of duplicates.entries()) {\n      if (ids.length < 2) {\n        duplicates.delete(key);\n      }\n    }\n\n    return duplicates;\n  }\n\n  /**\n   * Merges duplicate entities into a master entity.\n   * All relationships from duplicate entities are re-pointed to the master.\n   * Duplicate entities are then deleted.\n   * @param session Neo4j session.\n   * @param masterEntityId The ID of the entity to keep.\n   * @param duplicateEntityIds An array of IDs of entities to merge into the master.\n   */\n  public async mergeEntities(\n    session: Session,\n    masterEntityId: string,\n    duplicateEntityIds: string[],\n  ): Promise<void> {\n    if (duplicateEntityIds.includes(masterEntityId)) {\n      throw new Error(\n        \"Master entity ID cannot be in the list of duplicate entity IDs.\",\n      );\n    }\n\n    const allEntityIds = [masterEntityId, ...duplicateEntityIds];\n\n    // Update canonicalId for all entities being merged to point to the master's canonicalId\n    // This assumes the master already has a canonicalId or will get one from the ER process\n    await session.run(\n      `\n      MATCH (e:Entity)\n      WHERE e.id IN $allEntityIds\n      SET e.canonicalId = $masterEntityId // Set all to master's ID for now, actual canonical key will be set by ER worker\n    `,\n      { allEntityIds, masterEntityId },\n    );\n\n    // Re-point incoming relationships to the master entity\n    await session.run(\n      `\n      MATCH (n)-[r]->(d:Entity)\n      WHERE d.id IN $duplicateEntityIds\n      MATCH (m:Entity {id: $masterEntityId})\n      CREATE (n)-[newRel:RELATIONSHIP]->(m)\n      SET newRel = r\n      DELETE r\n    `,\n      { duplicateEntityIds, masterEntityId },\n    );\n\n    // Re-point outgoing relationships to the master entity\n    await session.run(\n      `\n      MATCH (d:Entity)-[r]->(n)\n      WHERE d.id IN $duplicateEntityIds\n      MATCH (m:Entity {id: $masterEntityId})\n      CREATE (m)-[newRel:RELATIONSHIP]->(n)\n      SET newRel = r\n      DELETE r\n    `,\n      { duplicateEntityIds, masterEntityId },\n    );\n\n    // Delete duplicate entities\n    await session.run(\n      `\n      MATCH (d:Entity)\n      WHERE d.id IN $duplicateEntityIds\n      DETACH DELETE d\n    `,\n      { duplicateEntityIds },\n    );\n\n    log.info(\n      `Merged entities: ${duplicateEntityIds.join(\", \")} into ${masterEntityId}`,\n    );\n\n    // Log to audit_logs\n    const pool = getPostgresPool();\n    await pool.query(\n      `INSERT INTO audit_logs (action, resource_type, resource_id, details)\n       VALUES ($1, $2, $3, $4)`,\n      [\n        \"entity_merge\",\n        \"Entity\",\n        masterEntityId,\n        { merged_from: duplicateEntityIds },\n      ],\n    );\n  }\n\n  public fuseBehavioralFingerprint(telemetry: BehavioralTelemetry[]): {\n    fingerprint: BehavioralFingerprint;\n    score: number;\n  } {\n    const fingerprint = this.behavioralService.computeFingerprint(telemetry);\n    const score = this.behavioralService.scoreFingerprint(fingerprint);\n    return { fingerprint, score };\n  }\n\n  public clusterIdentitiesAcrossProjects(\n    identities: { id: string; telemetry: BehavioralTelemetry[] }[],\n  ): Map<string, string[]> {\n    const items = identities.map((i) => ({\n      id: i.id,\n      fingerprint: this.behavioralService.computeFingerprint(i.telemetry),\n    }));\n    return this.behavioralService.clusterFingerprints(items);\n  }\n}\n"],"version":3}