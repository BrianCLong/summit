{"file":"/Users/brianlong/Developer/summit/server/src/services/cacheService.test.ts","mappings":";;AAAA,iDAA8C;AAE9C,QAAQ,CAAC,gCAAgC,EAAE,GAAG,EAAE;IAC9C,IAAI,KAAmB,CAAC;IAExB,UAAU,CAAC,GAAG,EAAE;QACd,OAAQ,OAAO,CAAC,GAAW,CAAC,SAAS,CAAC;QACtC,KAAK,GAAG,IAAI,2BAAY,EAAE,CAAC;IAC7B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sBAAsB,EAAE,KAAK,IAAI,EAAE;QACpC,MAAM,CAAC,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QACrC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uBAAuB,EAAE,KAAK,IAAI,EAAE;QACrC,MAAM,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QACnC,MAAM,CAAC,GAAG,MAAM,KAAK,CAAC,GAAG,CAAgB,IAAI,CAAC,CAAC;QAC/C,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAC9B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gBAAgB,EAAE,KAAK,IAAI,EAAE;QAC9B,MAAM,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC,OAAO;QAC1C,cAAc;QACd,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,UAAU,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QAC5C,MAAM,CAAC,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAChC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qBAAqB,EAAE,KAAK,IAAI,EAAE;QACnC,MAAM,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;QAC9B,MAAM,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACzB,MAAM,CAAC,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAChC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;IACvB,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/server/src/services/cacheService.test.ts"],"sourcesContent":["import { CacheService } from './cacheService';\n\ndescribe('CacheService (memory fallback)', () => {\n  let cache: CacheService;\n\n  beforeEach(() => {\n    delete (process.env as any).REDIS_URL;\n    cache = new CacheService();\n  });\n\n  it('returns null on miss', async () => {\n    const v = await cache.get('missing');\n    expect(v).toBeNull();\n  });\n\n  it('sets and gets a value', async () => {\n    await cache.set('k1', { a: 1 }, 1);\n    const v = await cache.get<{ a: number }>('k1');\n    expect(v).toEqual({ a: 1 });\n  });\n\n  it('expires by ttl', async () => {\n    await cache.set('k2', 'x', 0.001); // ~1ms\n    // Wait a tick\n    await new Promise((r) => setTimeout(r, 10));\n    const v = await cache.get('k2');\n    expect(v).toBeNull();\n  });\n\n  it('delete clears a key', async () => {\n    await cache.set('k3', 'y', 5);\n    await cache.delete('k3');\n    const v = await cache.get('k3');\n    expect(v).toBeNull();\n  });\n});\n\n"],"version":3}