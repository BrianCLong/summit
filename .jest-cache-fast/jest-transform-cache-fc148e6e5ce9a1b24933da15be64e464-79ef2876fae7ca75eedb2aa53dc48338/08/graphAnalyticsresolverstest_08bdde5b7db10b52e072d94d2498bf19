e33a1b70453b493d547242e343561560
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphAnalyticsResolvers = require("../src/graphql/resolvers.graphAnalytics");
describe('graph analytics GraphQL resolvers', () => {
    const baseUser = { id: 'analyst-1', role: 'ANALYST' };
    it('delegates to the service for PageRank', async () => {
        const calculatePageRank = jest.fn().mockResolvedValue([
            { nodeId: 'n1', label: 'Node 1', score: 0.42 },
        ]);
        const context = {
            user: baseUser,
            services: {
                graphAnalytics: {
                    calculatePageRank,
                    detectCommunities: jest.fn(),
                },
            },
        };
        const result = await graphAnalyticsResolvers.Query.graphPageRank(null, { limit: 25, forceRefresh: true }, context);
        expect(calculatePageRank).toHaveBeenCalledWith(expect.objectContaining({ limit: 25, forceRefresh: true }));
        expect(result).toEqual([
            expect.objectContaining({ nodeId: 'n1', score: 0.42, pageRank: 0.42 }),
        ]);
    });
    it('delegates to the service for community detection', async () => {
        const detectCommunities = jest.fn().mockResolvedValue([
            { communityId: 7, size: 12, algorithm: 'LOUVAIN', nodes: [{ nodeId: 'n1', label: 'Node 1' }] },
        ]);
        const context = {
            user: baseUser,
            services: {
                graphAnalytics: {
                    calculatePageRank: jest.fn(),
                    detectCommunities,
                },
            },
        };
        const result = await graphAnalyticsResolvers.Query.graphCommunities(null, { limit: 10, algorithm: 'LABEL_PROPAGATION' }, context);
        expect(detectCommunities).toHaveBeenCalledWith(expect.objectContaining({ limit: 10, algorithm: 'LABEL_PROPAGATION' }));
        expect(result).toEqual([
            expect.objectContaining({ communityId: 7, size: 12, nodes: [expect.any(Object)] }),
        ]);
    });
    it('throws when the user is missing', async () => {
        await expect(graphAnalyticsResolvers.Query.graphPageRank(null, { limit: 5 }, { services: {} })).rejects.toThrow('Not authenticated');
    });
    it('throws when the user lacks the required role', async () => {
        const context = {
            user: { id: 'viewer', role: 'VIEWER' },
            services: {
                graphAnalytics: {
                    calculatePageRank: jest.fn(),
                    detectCommunities: jest.fn(),
                },
            },
        };
        await expect(graphAnalyticsResolvers.Query.graphCommunities(null, { limit: 1 }, context)).rejects.toThrow('Forbidden');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3NlcnZlci90ZXN0cy9ncmFwaEFuYWx5dGljcy5yZXNvbHZlcnMudGVzdC50cyIsIm1hcHBpbmdzIjoiOztBQUFBLG1GQUFvRjtBQUVwRixRQUFRLENBQUMsbUNBQW1DLEVBQUUsR0FBRyxFQUFFO0lBQ2pELE1BQU0sUUFBUSxHQUFHLEVBQUUsRUFBRSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUM7SUFFdEQsRUFBRSxDQUFDLHVDQUF1QyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3JELE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDO1lBQ3BELEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7U0FDL0MsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxPQUFPLEdBQUc7WUFDZCxJQUFJLEVBQUUsUUFBUTtZQUNkLFFBQVEsRUFBRTtnQkFDUixjQUFjLEVBQUU7b0JBQ2QsaUJBQWlCO29CQUNqQixpQkFBaUIsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO2lCQUM3QjthQUNGO1NBQ0ssQ0FBQztRQUVULE1BQU0sTUFBTSxHQUFHLE1BQU0sdUJBQXVCLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FDOUQsSUFBSSxFQUNKLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLEVBQ2pDLE9BQU8sQ0FDUixDQUFDO1FBRUYsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUMsb0JBQW9CLENBQzVDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxDQUFDLENBQzNELENBQUM7UUFDRixNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDO1lBQ3JCLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUM7U0FDdkUsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsa0RBQWtELEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDaEUsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUM7WUFDcEQsRUFBRSxXQUFXLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUU7U0FDL0YsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxPQUFPLEdBQUc7WUFDZCxJQUFJLEVBQUUsUUFBUTtZQUNkLFFBQVEsRUFBRTtnQkFDUixjQUFjLEVBQUU7b0JBQ2QsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtvQkFDNUIsaUJBQWlCO2lCQUNsQjthQUNGO1NBQ0ssQ0FBQztRQUVULE1BQU0sTUFBTSxHQUFHLE1BQU0sdUJBQXVCLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUNqRSxJQUFJLEVBQ0osRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLFNBQVMsRUFBRSxtQkFBbUIsRUFBRSxFQUM3QyxPQUFPLENBQ1IsQ0FBQztRQUVGLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLG9CQUFvQixDQUM1QyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLFNBQVMsRUFBRSxtQkFBbUIsRUFBRSxDQUFDLENBQ3ZFLENBQUM7UUFDRixNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDO1lBQ3JCLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLFdBQVcsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQztTQUNuRixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxpQ0FBaUMsRUFBRSxLQUFLLElBQUksRUFBRTtRQUMvQyxNQUFNLE1BQU0sQ0FDVix1QkFBdUIsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQVMsQ0FBQyxDQUN6RixDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUN6QyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyw4Q0FBOEMsRUFBRSxLQUFLLElBQUksRUFBRTtRQUM1RCxNQUFNLE9BQU8sR0FBRztZQUNkLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRTtZQUN0QyxRQUFRLEVBQUU7Z0JBQ1IsY0FBYyxFQUFFO29CQUNkLGlCQUFpQixFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7b0JBQzVCLGlCQUFpQixFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7aUJBQzdCO2FBQ0Y7U0FDSyxDQUFDO1FBRVQsTUFBTSxNQUFNLENBQ1YsdUJBQXVCLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FDNUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2pDLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3NlcnZlci90ZXN0cy9ncmFwaEFuYWx5dGljcy5yZXNvbHZlcnMudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZ3JhcGhBbmFseXRpY3NSZXNvbHZlcnMgPSByZXF1aXJlKCcuLi9zcmMvZ3JhcGhxbC9yZXNvbHZlcnMuZ3JhcGhBbmFseXRpY3MnKTtcblxuZGVzY3JpYmUoJ2dyYXBoIGFuYWx5dGljcyBHcmFwaFFMIHJlc29sdmVycycsICgpID0+IHtcbiAgY29uc3QgYmFzZVVzZXIgPSB7IGlkOiAnYW5hbHlzdC0xJywgcm9sZTogJ0FOQUxZU1QnIH07XG5cbiAgaXQoJ2RlbGVnYXRlcyB0byB0aGUgc2VydmljZSBmb3IgUGFnZVJhbmsnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgY2FsY3VsYXRlUGFnZVJhbmsgPSBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoW1xuICAgICAgeyBub2RlSWQ6ICduMScsIGxhYmVsOiAnTm9kZSAxJywgc2NvcmU6IDAuNDIgfSxcbiAgICBdKTtcbiAgICBjb25zdCBjb250ZXh0ID0ge1xuICAgICAgdXNlcjogYmFzZVVzZXIsXG4gICAgICBzZXJ2aWNlczoge1xuICAgICAgICBncmFwaEFuYWx5dGljczoge1xuICAgICAgICAgIGNhbGN1bGF0ZVBhZ2VSYW5rLFxuICAgICAgICAgIGRldGVjdENvbW11bml0aWVzOiBqZXN0LmZuKCksXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0gYXMgYW55O1xuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZ3JhcGhBbmFseXRpY3NSZXNvbHZlcnMuUXVlcnkuZ3JhcGhQYWdlUmFuayhcbiAgICAgIG51bGwsXG4gICAgICB7IGxpbWl0OiAyNSwgZm9yY2VSZWZyZXNoOiB0cnVlIH0sXG4gICAgICBjb250ZXh0LFxuICAgICk7XG5cbiAgICBleHBlY3QoY2FsY3VsYXRlUGFnZVJhbmspLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoeyBsaW1pdDogMjUsIGZvcmNlUmVmcmVzaDogdHJ1ZSB9KSxcbiAgICApO1xuICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwoW1xuICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoeyBub2RlSWQ6ICduMScsIHNjb3JlOiAwLjQyLCBwYWdlUmFuazogMC40MiB9KSxcbiAgICBdKTtcbiAgfSk7XG5cbiAgaXQoJ2RlbGVnYXRlcyB0byB0aGUgc2VydmljZSBmb3IgY29tbXVuaXR5IGRldGVjdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBkZXRlY3RDb21tdW5pdGllcyA9IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShbXG4gICAgICB7IGNvbW11bml0eUlkOiA3LCBzaXplOiAxMiwgYWxnb3JpdGhtOiAnTE9VVkFJTicsIG5vZGVzOiBbeyBub2RlSWQ6ICduMScsIGxhYmVsOiAnTm9kZSAxJyB9XSB9LFxuICAgIF0pO1xuICAgIGNvbnN0IGNvbnRleHQgPSB7XG4gICAgICB1c2VyOiBiYXNlVXNlcixcbiAgICAgIHNlcnZpY2VzOiB7XG4gICAgICAgIGdyYXBoQW5hbHl0aWNzOiB7XG4gICAgICAgICAgY2FsY3VsYXRlUGFnZVJhbms6IGplc3QuZm4oKSxcbiAgICAgICAgICBkZXRlY3RDb21tdW5pdGllcyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSBhcyBhbnk7XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBncmFwaEFuYWx5dGljc1Jlc29sdmVycy5RdWVyeS5ncmFwaENvbW11bml0aWVzKFxuICAgICAgbnVsbCxcbiAgICAgIHsgbGltaXQ6IDEwLCBhbGdvcml0aG06ICdMQUJFTF9QUk9QQUdBVElPTicgfSxcbiAgICAgIGNvbnRleHQsXG4gICAgKTtcblxuICAgIGV4cGVjdChkZXRlY3RDb21tdW5pdGllcykudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7IGxpbWl0OiAxMCwgYWxnb3JpdGhtOiAnTEFCRUxfUFJPUEFHQVRJT04nIH0pLFxuICAgICk7XG4gICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChbXG4gICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7IGNvbW11bml0eUlkOiA3LCBzaXplOiAxMiwgbm9kZXM6IFtleHBlY3QuYW55KE9iamVjdCldIH0pLFxuICAgIF0pO1xuICB9KTtcblxuICBpdCgndGhyb3dzIHdoZW4gdGhlIHVzZXIgaXMgbWlzc2luZycsIGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBleHBlY3QoXG4gICAgICBncmFwaEFuYWx5dGljc1Jlc29sdmVycy5RdWVyeS5ncmFwaFBhZ2VSYW5rKG51bGwsIHsgbGltaXQ6IDUgfSwgeyBzZXJ2aWNlczoge30gfSBhcyBhbnkpLFxuICAgICkucmVqZWN0cy50b1Rocm93KCdOb3QgYXV0aGVudGljYXRlZCcpO1xuICB9KTtcblxuICBpdCgndGhyb3dzIHdoZW4gdGhlIHVzZXIgbGFja3MgdGhlIHJlcXVpcmVkIHJvbGUnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgY29udGV4dCA9IHtcbiAgICAgIHVzZXI6IHsgaWQ6ICd2aWV3ZXInLCByb2xlOiAnVklFV0VSJyB9LFxuICAgICAgc2VydmljZXM6IHtcbiAgICAgICAgZ3JhcGhBbmFseXRpY3M6IHtcbiAgICAgICAgICBjYWxjdWxhdGVQYWdlUmFuazogamVzdC5mbigpLFxuICAgICAgICAgIGRldGVjdENvbW11bml0aWVzOiBqZXN0LmZuKCksXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0gYXMgYW55O1xuXG4gICAgYXdhaXQgZXhwZWN0KFxuICAgICAgZ3JhcGhBbmFseXRpY3NSZXNvbHZlcnMuUXVlcnkuZ3JhcGhDb21tdW5pdGllcyhudWxsLCB7IGxpbWl0OiAxIH0sIGNvbnRleHQpLFxuICAgICkucmVqZWN0cy50b1Rocm93KCdGb3JiaWRkZW4nKTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==