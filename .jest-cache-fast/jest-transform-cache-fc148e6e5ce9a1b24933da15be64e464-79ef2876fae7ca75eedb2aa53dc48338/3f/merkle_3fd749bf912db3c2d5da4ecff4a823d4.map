{"file":"/Users/brianlong/Developer/summit/packages/prov-ledger/src/merkle.ts","mappings":"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","names":[],"sources":["/Users/brianlong/Developer/summit/packages/prov-ledger/src/merkle.ts"],"sourcesContent":["import { createHash } from 'crypto';\nexport function sha256Hex(buf: Buffer | string) {\n  const h = createHash('sha256'); h.update(buf); return h.digest('hex');\n}\n\n// Deterministic leaf encoding for a step\nexport function leafHash(step: any) {\n  const s = JSON.stringify(step, Object.keys(step).sort());\n  return sha256Hex(Buffer.from(s));\n}\n\nexport function buildMerkle(leavesHex: string[]) {\n  if (leavesHex.length === 0) return { root: sha256Hex(Buffer.from('EMPTY')) , layers: [ [] ] };\n  let layer = leavesHex.slice();\n  const layers = [layer];\n  while (layer.length > 1) {\n    const next: string[] = [];\n    for (let i=0;i<layer.length;i+=2){\n      const a = layer[i];\n      const b = i+1 < layer.length ? layer[i+1] : layer[i]; // duplicate last if odd\n      next.push(sha256Hex(Buffer.from(a + b)));\n    }\n    layer = next; layers.push(layer);\n  }\n  return { root: layer[0], layers };\n}\n\nexport function proofForLeaf(index: number, layers: string[][]) {\n  const path: {dir:'L'|'R'; hash:string}[] = [];\n  let idx = index;\n  for (let L=0; L<layers.length-1; L++){\n    const layer = layers[L];\n    const isRight = idx % 2 === 1;\n    const siblingIdx = isRight ? idx-1 : idx+1 >= layer.length ? idx : idx+1;\n    const dir = isRight ? 'L' : 'R';\n    path.push({ dir, hash: layer[siblingIdx] });\n    idx = Math.floor(idx/2);\n  }\n  return path;\n}\n\nexport function verifyProof(leaf: string, path: {dir:'L'|'R'; hash:string}[], expectedRoot: string) {\n  let h = leaf;\n  for (const p of path) {\n    h = p.dir === 'L' ? sha256Hex(Buffer.from(p.hash + h)) : sha256Hex(Buffer.from(h + p.hash));\n  }\n  return h === expectedRoot;\n}"],"version":3}