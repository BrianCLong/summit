c33e32f4be587e8cdfa2a75b7c9a5ad3
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.replayWithSanctions = replayWithSanctions;
function simulate(trace, stress) {
    let drift = 0;
    let costDelta = 0;
    // crude model: fail some steps, enforce stricter policy implies replan
    for (const s of trace.steps) {
        if (Math.random() < stress.apiFailureRate)
            drift += 0.1;
        const cappedTokens = Math.min(s.tokens, stress.tokenCap);
        costDelta += (cappedTokens - s.tokens) * 0.000002; // $ per token
    }
    if (stress.policyStrict)
        drift += 0.2;
    return { drift, costDelta };
}
function proposeSanctions(rr) {
    const s = [];
    if (rr.drift > 0.25)
        s.push({ type: 'proof_required', value: 'strict', rationale: 'High drift under stress' });
    if (rr.drift > 0.4)
        s.push({ type: 'interstitial', value: 'attn', rationale: 'User interstitial advised' });
    if (rr.costDelta < -0.05)
        s.push({ type: 'rate_limit', value: 5, rationale: 'Cost spike risk' });
    return s;
}
function replayWithSanctions(trace, stress) {
    const rr = simulate(trace, stress);
    return { ...rr, sanctions: proposeSanctions(rr) };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3BhY2thZ2VzL2Nyc3Avc3JjL2luZGV4LnRzIiwibWFwcGluZ3MiOiI7O0FBc0JBLGtEQUdDO0FBdkJELFNBQVMsUUFBUSxDQUFDLEtBQWUsRUFBRSxNQUFxQjtJQUN0RCxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7SUFBQyxJQUFJLFNBQVMsR0FBRyxDQUFDLENBQUM7SUFDakMsdUVBQXVFO0lBQ3ZFLEtBQUssTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLEtBQUssRUFBQyxDQUFDO1FBQzNCLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxjQUFjO1lBQUUsS0FBSyxJQUFJLEdBQUcsQ0FBQztRQUN4RCxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3pELFNBQVMsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsY0FBYztJQUNuRSxDQUFDO0lBQ0QsSUFBSSxNQUFNLENBQUMsWUFBWTtRQUFFLEtBQUssSUFBSSxHQUFHLENBQUM7SUFDdEMsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsQ0FBQztBQUM5QixDQUFDO0FBRUQsU0FBUyxnQkFBZ0IsQ0FBQyxFQUFtQztJQUMzRCxNQUFNLENBQUMsR0FBZSxFQUFFLENBQUM7SUFDekIsSUFBSSxFQUFFLENBQUMsS0FBSyxHQUFHLElBQUk7UUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFDLGdCQUFnQixFQUFFLEtBQUssRUFBQyxRQUFRLEVBQUUsU0FBUyxFQUFDLHlCQUF5QixFQUFFLENBQUMsQ0FBQztJQUM1RyxJQUFJLEVBQUUsQ0FBQyxLQUFLLEdBQUcsR0FBRztRQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUMsY0FBYyxFQUFFLEtBQUssRUFBQyxNQUFNLEVBQUUsU0FBUyxFQUFDLDJCQUEyQixFQUFFLENBQUMsQ0FBQztJQUN6RyxJQUFJLEVBQUUsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxJQUFJO1FBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBQyxZQUFZLEVBQUUsS0FBSyxFQUFDLENBQUMsRUFBRSxTQUFTLEVBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO0lBQzlGLE9BQU8sQ0FBQyxDQUFDO0FBQ1gsQ0FBQztBQUVELFNBQWdCLG1CQUFtQixDQUFDLEtBQWUsRUFBRSxNQUFxQjtJQUN4RSxNQUFNLEVBQUUsR0FBRyxRQUFRLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ25DLE9BQU8sRUFBRSxHQUFHLEVBQUUsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztBQUNwRCxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9icmlhbmxvbmcvRGV2ZWxvcGVyL3N1bW1pdC9wYWNrYWdlcy9jcnNwL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSdW5UcmFjZSwgU3RyZXNzUHJvZmlsZSwgUmVwbGF5UmVzdWx0LCBTYW5jdGlvbiB9IGZyb20gJy4vdHlwZXMnO1xuXG5mdW5jdGlvbiBzaW11bGF0ZSh0cmFjZTogUnVuVHJhY2UsIHN0cmVzczogU3RyZXNzUHJvZmlsZSl7XG4gIGxldCBkcmlmdCA9IDA7IGxldCBjb3N0RGVsdGEgPSAwO1xuICAvLyBjcnVkZSBtb2RlbDogZmFpbCBzb21lIHN0ZXBzLCBlbmZvcmNlIHN0cmljdGVyIHBvbGljeSBpbXBsaWVzIHJlcGxhblxuICBmb3IgKGNvbnN0IHMgb2YgdHJhY2Uuc3RlcHMpe1xuICAgIGlmIChNYXRoLnJhbmRvbSgpIDwgc3RyZXNzLmFwaUZhaWx1cmVSYXRlKSBkcmlmdCArPSAwLjE7XG4gICAgY29uc3QgY2FwcGVkVG9rZW5zID0gTWF0aC5taW4ocy50b2tlbnMsIHN0cmVzcy50b2tlbkNhcCk7XG4gICAgY29zdERlbHRhICs9IChjYXBwZWRUb2tlbnMgLSBzLnRva2VucykgKiAwLjAwMDAwMjsgLy8gJCBwZXIgdG9rZW5cbiAgfVxuICBpZiAoc3RyZXNzLnBvbGljeVN0cmljdCkgZHJpZnQgKz0gMC4yO1xuICByZXR1cm4geyBkcmlmdCwgY29zdERlbHRhIH07XG59XG5cbmZ1bmN0aW9uIHByb3Bvc2VTYW5jdGlvbnMocnI6e2RyaWZ0Om51bWJlcjsgY29zdERlbHRhOm51bWJlcn0pOiBTYW5jdGlvbltdIHtcbiAgY29uc3QgczogU2FuY3Rpb25bXSA9IFtdO1xuICBpZiAocnIuZHJpZnQgPiAwLjI1KSBzLnB1c2goeyB0eXBlOidwcm9vZl9yZXF1aXJlZCcsIHZhbHVlOidzdHJpY3QnLCByYXRpb25hbGU6J0hpZ2ggZHJpZnQgdW5kZXIgc3RyZXNzJyB9KTtcbiAgaWYgKHJyLmRyaWZ0ID4gMC40KSBzLnB1c2goeyB0eXBlOidpbnRlcnN0aXRpYWwnLCB2YWx1ZTonYXR0bicsIHJhdGlvbmFsZTonVXNlciBpbnRlcnN0aXRpYWwgYWR2aXNlZCcgfSk7XG4gIGlmIChyci5jb3N0RGVsdGEgPCAtMC4wNSkgcy5wdXNoKHsgdHlwZToncmF0ZV9saW1pdCcsIHZhbHVlOjUsIHJhdGlvbmFsZTonQ29zdCBzcGlrZSByaXNrJyB9KTtcbiAgcmV0dXJuIHM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXBsYXlXaXRoU2FuY3Rpb25zKHRyYWNlOiBSdW5UcmFjZSwgc3RyZXNzOiBTdHJlc3NQcm9maWxlKTogUmVwbGF5UmVzdWx0IHtcbiAgY29uc3QgcnIgPSBzaW11bGF0ZSh0cmFjZSwgc3RyZXNzKTtcbiAgcmV0dXJuIHsgLi4ucnIsIHNhbmN0aW9uczogcHJvcG9zZVNhbmN0aW9ucyhycikgfTtcbn0iXSwidmVyc2lvbiI6M30=