665b013f697ddb948754045398280d1e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.dpNoise = dpNoise;
exports.applyDp = applyDp;
function randomNormal(mu = 0, sigma = 1) {
    // Box-Muller
    let u = 0, v = 0;
    while (u === 0)
        u = Math.random();
    while (v === 0)
        v = Math.random();
    return mu + sigma * Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);
}
function dpNoise(cfg) {
    if (cfg.mechanism === 'laplace') {
        const b = cfg.sensitivity / cfg.epsilon;
        return (Math.random() - 0.5) * 2 * b;
    }
    const sigma = Math.sqrt(2 * Math.log(1.25 / (cfg.delta || 1e-6))) * (cfg.sensitivity / cfg.epsilon);
    return randomNormal(0, sigma);
}
function applyDp(count, cfg) { return count + dpNoise(cfg); }
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3NlcnZlci9zcmMvZHAudHMiLCJtYXBwaW5ncyI6Ijs7QUFRQSwwQkFPQztBQUVELDBCQUFzRjtBQWZ0RixTQUFTLFlBQVksQ0FBQyxFQUFFLEdBQUMsQ0FBQyxFQUFFLEtBQUssR0FBQyxDQUFDO0lBQ2pDLGFBQWE7SUFDYixJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQztJQUFDLE9BQU0sQ0FBQyxLQUFHLENBQUM7UUFBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQUMsT0FBTSxDQUFDLEtBQUcsQ0FBQztRQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDdEUsT0FBTyxFQUFFLEdBQUcsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLENBQUM7QUFDNUUsQ0FBQztBQUVELFNBQWdCLE9BQU8sQ0FBQyxHQUFhO0lBQ25DLElBQUksR0FBRyxDQUFDLFNBQVMsS0FBSyxTQUFTLEVBQUUsQ0FBQztRQUNoQyxNQUFNLENBQUMsR0FBRyxHQUFHLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUM7UUFDeEMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFDRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDcEcsT0FBTyxZQUFZLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ2hDLENBQUM7QUFFRCxTQUFnQixPQUFPLENBQUMsS0FBYSxFQUFFLEdBQWEsSUFBSSxPQUFPLEtBQUssR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9icmlhbmxvbmcvRGV2ZWxvcGVyL3N1bW1pdC9zZXJ2ZXIvc3JjL2RwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB0eXBlIERwQ29uZmlnID0geyBlcHNpbG9uOiBudW1iZXI7IGRlbHRhPzogbnVtYmVyOyBzZW5zaXRpdml0eTogbnVtYmVyOyBtZWNoYW5pc206ICdsYXBsYWNlJ3wnZ2F1c3NpYW4nIH07XG5cbmZ1bmN0aW9uIHJhbmRvbU5vcm1hbChtdT0wLCBzaWdtYT0xKXtcbiAgLy8gQm94LU11bGxlclxuICBsZXQgdT0wLHY9MDsgd2hpbGUodT09PTApdT1NYXRoLnJhbmRvbSgpOyB3aGlsZSh2PT09MCl2PU1hdGgucmFuZG9tKCk7XG4gIHJldHVybiBtdSArIHNpZ21hICogTWF0aC5zcXJ0KC0yLjAqTWF0aC5sb2codSkpICogTWF0aC5jb3MoMi4wKk1hdGguUEkqdik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkcE5vaXNlKGNmZzogRHBDb25maWcpIHtcbiAgaWYgKGNmZy5tZWNoYW5pc20gPT09ICdsYXBsYWNlJykge1xuICAgIGNvbnN0IGIgPSBjZmcuc2Vuc2l0aXZpdHkgLyBjZmcuZXBzaWxvbjtcbiAgICByZXR1cm4gKE1hdGgucmFuZG9tKCkgLSAwLjUpICogMiAqIGI7XG4gIH1cbiAgY29uc3Qgc2lnbWEgPSBNYXRoLnNxcnQoMiAqIE1hdGgubG9nKDEuMjUgLyAoY2ZnLmRlbHRhIHx8IDFlLTYpKSkgKiAoY2ZnLnNlbnNpdGl2aXR5IC8gY2ZnLmVwc2lsb24pO1xuICByZXR1cm4gcmFuZG9tTm9ybWFsKDAsIHNpZ21hKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5RHAoY291bnQ6IG51bWJlciwgY2ZnOiBEcENvbmZpZykgeyByZXR1cm4gY291bnQgKyBkcE5vaXNlKGNmZyk7IH1cblxuIl0sInZlcnNpb24iOjN9