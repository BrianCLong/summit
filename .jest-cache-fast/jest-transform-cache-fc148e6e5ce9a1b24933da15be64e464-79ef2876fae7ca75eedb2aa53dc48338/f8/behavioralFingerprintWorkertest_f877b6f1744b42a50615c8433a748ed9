143042dc4938c168af20cc6afc72f4da
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const behavioralFingerprintWorker_1 = require("../workers/behavioralFingerprintWorker");
describe("behavioral fingerprint job", () => {
    it("scores and clusters identities across projects", async () => {
        const data = [
            {
                id: "alice",
                projectId: "A",
                telemetry: [
                    { clicks: 10, timeInView: 120, editRate: 2 },
                    { clicks: 5, timeInView: 60, editRate: 1 },
                ],
            },
            {
                id: "bob",
                projectId: "B",
                telemetry: [
                    { clicks: 11, timeInView: 118, editRate: 2 },
                    { clicks: 4, timeInView: 70, editRate: 1 },
                ],
            },
            {
                id: "charlie",
                projectId: "C",
                telemetry: [{ clicks: 1, timeInView: 10, editRate: 0.5 }],
            },
        ];
        const result = await (0, behavioralFingerprintWorker_1.runBehavioralFingerprintJob)(data);
        expect(result.fingerprints.length).toBe(3);
        const clusters = Array.from(result.clusters.values());
        const clusterWithAlice = clusters.find((c) => c.includes("alice"));
        expect(clusterWithAlice).toBeDefined();
        expect(clusterWithAlice).toContain("bob");
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3NlcnZlci9zcmMvdGVzdHMvYmVoYXZpb3JhbEZpbmdlcnByaW50V29ya2VyLnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSx3RkFBcUY7QUFFckYsUUFBUSxDQUFDLDRCQUE0QixFQUFFLEdBQUcsRUFBRTtJQUMxQyxFQUFFLENBQUMsZ0RBQWdELEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDOUQsTUFBTSxJQUFJLEdBQUc7WUFDWDtnQkFDRSxFQUFFLEVBQUUsT0FBTztnQkFDWCxTQUFTLEVBQUUsR0FBRztnQkFDZCxTQUFTLEVBQUU7b0JBQ1QsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRTtvQkFDNUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRTtpQkFDM0M7YUFDRjtZQUNEO2dCQUNFLEVBQUUsRUFBRSxLQUFLO2dCQUNULFNBQVMsRUFBRSxHQUFHO2dCQUNkLFNBQVMsRUFBRTtvQkFDVCxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsQ0FBQyxFQUFFO29CQUM1QyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsVUFBVSxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxFQUFFO2lCQUMzQzthQUNGO1lBQ0Q7Z0JBQ0UsRUFBRSxFQUFFLFNBQVM7Z0JBQ2IsU0FBUyxFQUFFLEdBQUc7Z0JBQ2QsU0FBUyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDO2FBQzFEO1NBQ0YsQ0FBQztRQUNGLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBQSx5REFBMkIsRUFBQyxJQUFJLENBQUMsQ0FBQztRQUN2RCxNQUFNLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0MsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDdEQsTUFBTSxnQkFBZ0IsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDbkUsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDdkMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzVDLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3NlcnZlci9zcmMvdGVzdHMvYmVoYXZpb3JhbEZpbmdlcnByaW50V29ya2VyLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcnVuQmVoYXZpb3JhbEZpbmdlcnByaW50Sm9iIH0gZnJvbSBcIi4uL3dvcmtlcnMvYmVoYXZpb3JhbEZpbmdlcnByaW50V29ya2VyXCI7XG5cbmRlc2NyaWJlKFwiYmVoYXZpb3JhbCBmaW5nZXJwcmludCBqb2JcIiwgKCkgPT4ge1xuICBpdChcInNjb3JlcyBhbmQgY2x1c3RlcnMgaWRlbnRpdGllcyBhY3Jvc3MgcHJvamVjdHNcIiwgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGRhdGEgPSBbXG4gICAgICB7XG4gICAgICAgIGlkOiBcImFsaWNlXCIsXG4gICAgICAgIHByb2plY3RJZDogXCJBXCIsXG4gICAgICAgIHRlbGVtZXRyeTogW1xuICAgICAgICAgIHsgY2xpY2tzOiAxMCwgdGltZUluVmlldzogMTIwLCBlZGl0UmF0ZTogMiB9LFxuICAgICAgICAgIHsgY2xpY2tzOiA1LCB0aW1lSW5WaWV3OiA2MCwgZWRpdFJhdGU6IDEgfSxcbiAgICAgICAgXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGlkOiBcImJvYlwiLFxuICAgICAgICBwcm9qZWN0SWQ6IFwiQlwiLFxuICAgICAgICB0ZWxlbWV0cnk6IFtcbiAgICAgICAgICB7IGNsaWNrczogMTEsIHRpbWVJblZpZXc6IDExOCwgZWRpdFJhdGU6IDIgfSxcbiAgICAgICAgICB7IGNsaWNrczogNCwgdGltZUluVmlldzogNzAsIGVkaXRSYXRlOiAxIH0sXG4gICAgICAgIF0sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpZDogXCJjaGFybGllXCIsXG4gICAgICAgIHByb2plY3RJZDogXCJDXCIsXG4gICAgICAgIHRlbGVtZXRyeTogW3sgY2xpY2tzOiAxLCB0aW1lSW5WaWV3OiAxMCwgZWRpdFJhdGU6IDAuNSB9XSxcbiAgICAgIH0sXG4gICAgXTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBydW5CZWhhdmlvcmFsRmluZ2VycHJpbnRKb2IoZGF0YSk7XG4gICAgZXhwZWN0KHJlc3VsdC5maW5nZXJwcmludHMubGVuZ3RoKS50b0JlKDMpO1xuICAgIGNvbnN0IGNsdXN0ZXJzID0gQXJyYXkuZnJvbShyZXN1bHQuY2x1c3RlcnMudmFsdWVzKCkpO1xuICAgIGNvbnN0IGNsdXN0ZXJXaXRoQWxpY2UgPSBjbHVzdGVycy5maW5kKChjKSA9PiBjLmluY2x1ZGVzKFwiYWxpY2VcIikpO1xuICAgIGV4cGVjdChjbHVzdGVyV2l0aEFsaWNlKS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdChjbHVzdGVyV2l0aEFsaWNlKS50b0NvbnRhaW4oXCJib2JcIik7XG4gIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=