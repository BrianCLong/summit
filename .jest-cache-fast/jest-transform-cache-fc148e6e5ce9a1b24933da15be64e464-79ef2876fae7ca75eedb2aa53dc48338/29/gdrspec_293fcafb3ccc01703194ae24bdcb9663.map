{"file":"/Users/brianlong/Developer/summit/packages/gdr/tests/gdr.spec.ts","mappings":";;;;;AAAA,gCAA6B;AAC7B,gEAA6C;AAE7C,QAAQ,CAAC,KAAK,EAAE,GAAG,EAAE;IACnB,IAAI,GAAQ,CAAC;IACb,IAAI,MAAc,CAAC;IAEnB,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,8CAA8C;QAC9C,MAAM,GAAG,sBAAK,CAAC,MAAM,CAAC,uBAAuB,EAAE,sBAAK,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC,CAAC;QACtF,GAAG,GAAG,IAAI,SAAG,CAAC,uBAAuB,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;QAE5D,gDAAgD;QAChD,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC;QACjC,IAAI,CAAC;YACH,MAAM,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;YAC/C,MAAM,OAAO,CAAC,GAAG,CAAC,4EAA4E,CAAC,CAAC;YAChG,MAAM,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC,CAAC,0BAA0B;YAC5E,MAAM,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;YACjD,MAAM,OAAO,CAAC,GAAG,CAAC,gDAAgD,CAAC,CAAC;YACpE,MAAM,OAAO,CAAC,GAAG,CAAC,gDAAgD,CAAC,CAAC;YACpE,MAAM,OAAO,CAAC,GAAG,CAAC,gDAAgD,CAAC,CAAC;YACpE,MAAM,OAAO,CAAC,GAAG,CAAC,gDAAgD,CAAC,CAAC;YACpE,MAAM,OAAO,CAAC,GAAG,CAAC,gDAAgD,CAAC,CAAC;YACpE,MAAM,OAAO,CAAC,GAAG,CAAC,gDAAgD,CAAC,CAAC;YACpE,MAAM,OAAO,CAAC,GAAG,CAAC,gDAAgD,CAAC,CAAC;YACpE,MAAM,OAAO,CAAC,GAAG,CAAC,gDAAgD,CAAC,CAAC;YACpE,MAAM,OAAO,CAAC,GAAG,CAAC,gDAAgD,CAAC,CAAC;YACpE,MAAM,OAAO,CAAC,GAAG,CAAC,gDAAgD,CAAC,CAAC,CAAC,mBAAmB;QAC1F,CAAC;gBAAS,CAAC;YACT,MAAM,OAAO,CAAC,KAAK,EAAE,CAAC;QACxB,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,KAAK,IAAI,EAAE;QAClB,MAAM,GAAG,CAAC,KAAK,EAAE,CAAC;QAClB,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;QACpD,MAAM,SAAS,GAAG,MAAM,GAAG,CAAC,yBAAyB,EAAE,CAAC;QACxD,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAC5C,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC;YAC/C,MAAM,CAAC,gBAAgB,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,oCAAoC,EAAE,CAAC;YACtF,MAAM,CAAC,gBAAgB,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,yCAAyC,EAAE,CAAC;SAC5F,CAAC,CAAC,CAAC;IACN,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/packages/gdr/tests/gdr.spec.ts"],"sourcesContent":["import { GDR } from '../src';\nimport neo4j, { Driver } from 'neo4j-driver';\n\ndescribe('GDR', () => {\n  let gdr: GDR;\n  let driver: Driver;\n\n  beforeAll(async () => {\n    // Connect to a test Neo4j instance or mock it\n    driver = neo4j.driver('bolt://localhost:7687', neo4j.auth.basic('neo4j', 'password'));\n    gdr = new GDR('bolt://localhost:7687', 'neo4j', 'password');\n\n    // Clear existing data and create some test data\n    const session = driver.session();\n    try {\n      await session.run('MATCH (n) DETACH DELETE n');\n      await session.run('CREATE (a:Node {id: \\'a\\'})-[:HAS_PROVENANCE]->(p:Provenance {id: \\'p1\\'})');\n      await session.run('CREATE (b:Node {id: \\'b\\'})'); // Node without provenance\n      await session.run('CREATE (c:Node {id: \\'c\\'})');\n      await session.run('CREATE (c)-[:RELATED_TO]->(d:Node {id: \\'d\\'})');\n      await session.run('CREATE (c)-[:RELATED_TO]->(e:Node {id: \\'e\\'})');\n      await session.run('CREATE (c)-[:RELATED_TO]->(f:Node {id: \\'f\\'})');\n      await session.run('CREATE (c)-[:RELATED_TO]->(g:Node {id: \\'g\\'})');\n      await session.run('CREATE (c)-[:RELATED_TO]->(h:Node {id: \\'h\\'})');\n      await session.run('CREATE (c)-[:RELATED_TO]->(i:Node {id: \\'i\\'})');\n      await session.run('CREATE (c)-[:RELATED_TO]->(j:Node {id: \\'j\\'})');\n      await session.run('CREATE (c)-[:RELATED_TO]->(k:Node {id: \\'k\\'})');\n      await session.run('CREATE (c)-[:RELATED_TO]->(l:Node {id: \\'l\\'})');\n      await session.run('CREATE (c)-[:RELATED_TO]->(m:Node {id: \\'m\\'})'); // High degree node\n    } finally {\n      await session.close();\n    }\n  });\n\n  afterAll(async () => {\n    await gdr.close();\n    await driver.close();\n  });\n\n  test('should detect provenance anomalies', async () => {\n    const anomalies = await gdr.detectProvenanceAnomalies();\n    expect(anomalies.length).toBeGreaterThan(0);\n    expect(anomalies).toEqual(expect.arrayContaining([\n      expect.objectContaining({ nodeId: 'b', reason: 'Node lacks provenance information.' }),\n      expect.objectContaining({ nodeId: 'c', reason: 'High-degree node without witness paths.' }),\n    ]));\n  });\n});\n"],"version":3}