{"file":"/Users/brianlong/Developer/summit/server/src/policy/loader.ts","mappings":";;AAGA,4CAaC;AAhBD,2DAA8C;AAC9C,2BAAoC;AAE7B,KAAK,UAAU,gBAAgB,CAAC,UAAkB,EAAE,OAAgB;IACzE,MAAM,aAAa,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,qBAAqB,IAAI,OAAO,CAAC,CAAC,WAAW,EAAE,KAAK,MAAM,CAAC;IAC9F,IAAI,CAAC,OAAO,IAAI,CAAC,aAAa,EAAE,CAAC;QAC/B,MAAM,IAAI,KAAK,CAAC,0EAA0E,CAAC,CAAC;IAC9F,CAAC;IACD,IAAI,OAAO,EAAE,CAAC;QACZ,MAAM,IAAI,OAAO,CAAO,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CACnC,IAAA,6BAAQ,EAAC,QAAQ,EAAE,CAAC,aAAa,EAAE,aAAa,EAAE,OAAQ,EAAE,UAAU,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CACtG,CAAC;IACJ,CAAC;IACD,MAAM,GAAG,GAAG,MAAM,aAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;IAC1C,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC;QAAE,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;IACrE,OAAO,EAAE,EAAE,EAAE,IAAI,EAAW,CAAC;AAC/B,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/server/src/policy/loader.ts"],"sourcesContent":["import { execFile } from 'node:child_process';\nimport { promises as fs } from 'fs';\n\nexport async function loadSignedPolicy(bundlePath: string, sigPath?: string) {\n  const allowUnsigned = (process.env.ALLOW_UNSIGNED_POLICY || 'false').toLowerCase() === 'true';\n  if (!sigPath && !allowUnsigned) {\n    throw new Error('unsigned policy not allowed (set ALLOW_UNSIGNED_POLICY=true to override)');\n  }\n  if (sigPath) {\n    await new Promise<void>((res, rej) =>\n      execFile('cosign', ['verify-blob', '--signature', sigPath!, bundlePath], (e) => (e ? rej(e) : res())),\n    );\n  }\n  const buf = await fs.readFile(bundlePath);\n  if (!buf || buf.length === 0) throw new Error('empty policy bundle');\n  return { ok: true } as const;\n}\n"],"version":3}