{"file":"/Users/brianlong/Developer/summit/server/src/services/IntelCorroborationService.ts","mappings":";;;AAkBA;;;;;;GAMG;AACH,MAAa,yBAAyB;IAC5B,OAAO,GAAiC,IAAI,GAAG,EAAE,CAAC;IAE1D,gBAAgB,CAAC,OAAe,EAAE,MAAc;QAC9C,IAAI,MAAM,GAAG,CAAC,IAAI,MAAM,GAAG,CAAC,EAAE,CAAC;YAC7B,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;QACpD,CAAC;QACD,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;QAClE,OAAO,CAAC,GAAG,IAAI,MAAM,CAAC;QACtB,OAAO,CAAC,KAAK,EAAE,CAAC;QAChB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IACrC,CAAC;IAED,iBAAiB,CAAC,OAAe;QAC/B,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACtC,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,KAAK,KAAK,CAAC;YAAE,OAAO,IAAI,CAAC;QACzC,OAAO,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC;IAC7B,CAAC;IAED,aAAa,CAAC,OAAe,EAAE,QAAoB;QACjD,IAAI,aAAa,GAAG,CAAC,CAAC;QACtB,IAAI,WAAW,GAAG,CAAC,CAAC;QACpB,MAAM,cAAc,GAAa,EAAE,CAAC;QACpC,MAAM,UAAU,GAAa,EAAE,CAAC;QAChC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAEvB,KAAK,MAAM,CAAC,IAAI,QAAQ,EAAE,CAAC;YACzB,MAAM,EAAE,GAAG,OAAO,CAAC,CAAC,SAAS,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,CAAC;YAC3F,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;YAChE,MAAM,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,oBAAoB;YACvD,MAAM,MAAM,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,GAAG,OAAO,CAAC;YACxC,WAAW,IAAI,MAAM,CAAC;YACtB,IAAI,CAAC,CAAC,QAAQ,EAAE,CAAC;gBACf,aAAa,IAAI,MAAM,CAAC;gBACxB,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;YAChC,CAAC;iBAAM,CAAC;gBACN,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;YAC5B,CAAC;QACH,CAAC;QAED,MAAM,aAAa,GAAG,WAAW,CAAC,CAAC,CAAC,aAAa,GAAG,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC;QACtE,MAAM,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;QAC/C,MAAM,eAAe,GAAG,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,aAAa,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC;QAEtF,OAAO,EAAE,eAAe,EAAE,cAAc,EAAE,UAAU,EAAE,CAAC;IACzD,CAAC;CACF;AA9CD,8DA8CC;AAEY,QAAA,yBAAyB,GAAG,IAAI,yBAAyB,EAAE,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/server/src/services/IntelCorroborationService.ts"],"sourcesContent":["export interface Evidence {\n  source: string;\n  timestamp: number | string | Date;\n  trust: number; // 0-1 trust level\n  supports: boolean; // true if evidence supports the claim\n}\n\ninterface RatingAggregate {\n  sum: number;\n  count: number;\n}\n\nexport interface EvaluationResult {\n  confidenceScore: number;\n  corroboratedBy: string[];\n  disputedBy: string[];\n}\n\n/**\n * IntelCorroborationService\n *\n * Aggregates evidence from multiple sources to produce a confidence score\n * and track corroborating and disputing sources. Analysts can also provide\n * manual ratings which are averaged into the final confidence.\n */\nexport class IntelCorroborationService {\n  private ratings: Map<string, RatingAggregate> = new Map();\n\n  addAnalystRating(claimId: string, rating: number): void {\n    if (rating < 0 || rating > 1) {\n      throw new Error('Rating must be between 0 and 1');\n    }\n    const current = this.ratings.get(claimId) || { sum: 0, count: 0 };\n    current.sum += rating;\n    current.count++;\n    this.ratings.set(claimId, current);\n  }\n\n  getAnalystAverage(claimId: string): number | null {\n    const agg = this.ratings.get(claimId);\n    if (!agg || agg.count === 0) return null;\n    return agg.sum / agg.count;\n  }\n\n  evaluateClaim(claimId: string, evidence: Evidence[]): EvaluationResult {\n    let supportWeight = 0;\n    let totalWeight = 0;\n    const corroboratedBy: string[] = [];\n    const disputedBy: string[] = [];\n    const now = Date.now();\n\n    for (const e of evidence) {\n      const ts = typeof e.timestamp === 'number' ? e.timestamp : new Date(e.timestamp).getTime();\n      const ageDays = Math.max(0, (now - ts) / (1000 * 60 * 60 * 24));\n      const recency = 1 / (1 + ageDays); // simple time decay\n      const weight = (e.trust || 0) * recency;\n      totalWeight += weight;\n      if (e.supports) {\n        supportWeight += weight;\n        corroboratedBy.push(e.source);\n      } else {\n        disputedBy.push(e.source);\n      }\n    }\n\n    const evidenceScore = totalWeight ? supportWeight / totalWeight : 0.5;\n    const manual = this.getAnalystAverage(claimId);\n    const confidenceScore = manual != null ? (evidenceScore + manual) / 2 : evidenceScore;\n\n    return { confidenceScore, corroboratedBy, disputedBy };\n  }\n}\n\nexport const intelCorroborationService = new IntelCorroborationService();\n"],"version":3}