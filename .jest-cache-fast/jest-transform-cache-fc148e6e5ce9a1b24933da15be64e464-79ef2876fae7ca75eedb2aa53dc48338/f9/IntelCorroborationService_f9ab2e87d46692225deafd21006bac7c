949e2d5e6cfc4e57c5f6e1c2de58e102
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.intelCorroborationService = exports.IntelCorroborationService = void 0;
/**
 * IntelCorroborationService
 *
 * Aggregates evidence from multiple sources to produce a confidence score
 * and track corroborating and disputing sources. Analysts can also provide
 * manual ratings which are averaged into the final confidence.
 */
class IntelCorroborationService {
    ratings = new Map();
    addAnalystRating(claimId, rating) {
        if (rating < 0 || rating > 1) {
            throw new Error('Rating must be between 0 and 1');
        }
        const current = this.ratings.get(claimId) || { sum: 0, count: 0 };
        current.sum += rating;
        current.count++;
        this.ratings.set(claimId, current);
    }
    getAnalystAverage(claimId) {
        const agg = this.ratings.get(claimId);
        if (!agg || agg.count === 0)
            return null;
        return agg.sum / agg.count;
    }
    evaluateClaim(claimId, evidence) {
        let supportWeight = 0;
        let totalWeight = 0;
        const corroboratedBy = [];
        const disputedBy = [];
        const now = Date.now();
        for (const e of evidence) {
            const ts = typeof e.timestamp === 'number' ? e.timestamp : new Date(e.timestamp).getTime();
            const ageDays = Math.max(0, (now - ts) / (1000 * 60 * 60 * 24));
            const recency = 1 / (1 + ageDays); // simple time decay
            const weight = (e.trust || 0) * recency;
            totalWeight += weight;
            if (e.supports) {
                supportWeight += weight;
                corroboratedBy.push(e.source);
            }
            else {
                disputedBy.push(e.source);
            }
        }
        const evidenceScore = totalWeight ? supportWeight / totalWeight : 0.5;
        const manual = this.getAnalystAverage(claimId);
        const confidenceScore = manual != null ? (evidenceScore + manual) / 2 : evidenceScore;
        return { confidenceScore, corroboratedBy, disputedBy };
    }
}
exports.IntelCorroborationService = IntelCorroborationService;
exports.intelCorroborationService = new IntelCorroborationService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3NlcnZlci9zcmMvc2VydmljZXMvSW50ZWxDb3Jyb2JvcmF0aW9uU2VydmljZS50cyIsIm1hcHBpbmdzIjoiOzs7QUFrQkE7Ozs7OztHQU1HO0FBQ0gsTUFBYSx5QkFBeUI7SUFDNUIsT0FBTyxHQUFpQyxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBRTFELGdCQUFnQixDQUFDLE9BQWUsRUFBRSxNQUFjO1FBQzlDLElBQUksTUFBTSxHQUFHLENBQUMsSUFBSSxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDN0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BELENBQUM7UUFDRCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQ2xFLE9BQU8sQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDO1FBQ3RCLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVELGlCQUFpQixDQUFDLE9BQWU7UUFDL0IsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxLQUFLLENBQUM7WUFBRSxPQUFPLElBQUksQ0FBQztRQUN6QyxPQUFPLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQztJQUM3QixDQUFDO0lBRUQsYUFBYSxDQUFDLE9BQWUsRUFBRSxRQUFvQjtRQUNqRCxJQUFJLGFBQWEsR0FBRyxDQUFDLENBQUM7UUFDdEIsSUFBSSxXQUFXLEdBQUcsQ0FBQyxDQUFDO1FBQ3BCLE1BQU0sY0FBYyxHQUFhLEVBQUUsQ0FBQztRQUNwQyxNQUFNLFVBQVUsR0FBYSxFQUFFLENBQUM7UUFDaEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBRXZCLEtBQUssTUFBTSxDQUFDLElBQUksUUFBUSxFQUFFLENBQUM7WUFDekIsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLENBQUMsU0FBUyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQzNGLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNoRSxNQUFNLE9BQU8sR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxvQkFBb0I7WUFDdkQsTUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQztZQUN4QyxXQUFXLElBQUksTUFBTSxDQUFDO1lBQ3RCLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUNmLGFBQWEsSUFBSSxNQUFNLENBQUM7Z0JBQ3hCLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ2hDLENBQUM7aUJBQU0sQ0FBQztnQkFDTixVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUM1QixDQUFDO1FBQ0gsQ0FBQztRQUVELE1BQU0sYUFBYSxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsYUFBYSxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO1FBQ3RFLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMvQyxNQUFNLGVBQWUsR0FBRyxNQUFNLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQztRQUV0RixPQUFPLEVBQUUsZUFBZSxFQUFFLGNBQWMsRUFBRSxVQUFVLEVBQUUsQ0FBQztJQUN6RCxDQUFDO0NBQ0Y7QUE5Q0QsOERBOENDO0FBRVksUUFBQSx5QkFBeUIsR0FBRyxJQUFJLHlCQUF5QixFQUFFLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3NlcnZlci9zcmMvc2VydmljZXMvSW50ZWxDb3Jyb2JvcmF0aW9uU2VydmljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgaW50ZXJmYWNlIEV2aWRlbmNlIHtcbiAgc291cmNlOiBzdHJpbmc7XG4gIHRpbWVzdGFtcDogbnVtYmVyIHwgc3RyaW5nIHwgRGF0ZTtcbiAgdHJ1c3Q6IG51bWJlcjsgLy8gMC0xIHRydXN0IGxldmVsXG4gIHN1cHBvcnRzOiBib29sZWFuOyAvLyB0cnVlIGlmIGV2aWRlbmNlIHN1cHBvcnRzIHRoZSBjbGFpbVxufVxuXG5pbnRlcmZhY2UgUmF0aW5nQWdncmVnYXRlIHtcbiAgc3VtOiBudW1iZXI7XG4gIGNvdW50OiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXZhbHVhdGlvblJlc3VsdCB7XG4gIGNvbmZpZGVuY2VTY29yZTogbnVtYmVyO1xuICBjb3Jyb2JvcmF0ZWRCeTogc3RyaW5nW107XG4gIGRpc3B1dGVkQnk6IHN0cmluZ1tdO1xufVxuXG4vKipcbiAqIEludGVsQ29ycm9ib3JhdGlvblNlcnZpY2VcbiAqXG4gKiBBZ2dyZWdhdGVzIGV2aWRlbmNlIGZyb20gbXVsdGlwbGUgc291cmNlcyB0byBwcm9kdWNlIGEgY29uZmlkZW5jZSBzY29yZVxuICogYW5kIHRyYWNrIGNvcnJvYm9yYXRpbmcgYW5kIGRpc3B1dGluZyBzb3VyY2VzLiBBbmFseXN0cyBjYW4gYWxzbyBwcm92aWRlXG4gKiBtYW51YWwgcmF0aW5ncyB3aGljaCBhcmUgYXZlcmFnZWQgaW50byB0aGUgZmluYWwgY29uZmlkZW5jZS5cbiAqL1xuZXhwb3J0IGNsYXNzIEludGVsQ29ycm9ib3JhdGlvblNlcnZpY2Uge1xuICBwcml2YXRlIHJhdGluZ3M6IE1hcDxzdHJpbmcsIFJhdGluZ0FnZ3JlZ2F0ZT4gPSBuZXcgTWFwKCk7XG5cbiAgYWRkQW5hbHlzdFJhdGluZyhjbGFpbUlkOiBzdHJpbmcsIHJhdGluZzogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKHJhdGluZyA8IDAgfHwgcmF0aW5nID4gMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSYXRpbmcgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDEnKTtcbiAgICB9XG4gICAgY29uc3QgY3VycmVudCA9IHRoaXMucmF0aW5ncy5nZXQoY2xhaW1JZCkgfHwgeyBzdW06IDAsIGNvdW50OiAwIH07XG4gICAgY3VycmVudC5zdW0gKz0gcmF0aW5nO1xuICAgIGN1cnJlbnQuY291bnQrKztcbiAgICB0aGlzLnJhdGluZ3Muc2V0KGNsYWltSWQsIGN1cnJlbnQpO1xuICB9XG5cbiAgZ2V0QW5hbHlzdEF2ZXJhZ2UoY2xhaW1JZDogc3RyaW5nKTogbnVtYmVyIHwgbnVsbCB7XG4gICAgY29uc3QgYWdnID0gdGhpcy5yYXRpbmdzLmdldChjbGFpbUlkKTtcbiAgICBpZiAoIWFnZyB8fCBhZ2cuY291bnQgPT09IDApIHJldHVybiBudWxsO1xuICAgIHJldHVybiBhZ2cuc3VtIC8gYWdnLmNvdW50O1xuICB9XG5cbiAgZXZhbHVhdGVDbGFpbShjbGFpbUlkOiBzdHJpbmcsIGV2aWRlbmNlOiBFdmlkZW5jZVtdKTogRXZhbHVhdGlvblJlc3VsdCB7XG4gICAgbGV0IHN1cHBvcnRXZWlnaHQgPSAwO1xuICAgIGxldCB0b3RhbFdlaWdodCA9IDA7XG4gICAgY29uc3QgY29ycm9ib3JhdGVkQnk6IHN0cmluZ1tdID0gW107XG4gICAgY29uc3QgZGlzcHV0ZWRCeTogc3RyaW5nW10gPSBbXTtcbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuXG4gICAgZm9yIChjb25zdCBlIG9mIGV2aWRlbmNlKSB7XG4gICAgICBjb25zdCB0cyA9IHR5cGVvZiBlLnRpbWVzdGFtcCA9PT0gJ251bWJlcicgPyBlLnRpbWVzdGFtcCA6IG5ldyBEYXRlKGUudGltZXN0YW1wKS5nZXRUaW1lKCk7XG4gICAgICBjb25zdCBhZ2VEYXlzID0gTWF0aC5tYXgoMCwgKG5vdyAtIHRzKSAvICgxMDAwICogNjAgKiA2MCAqIDI0KSk7XG4gICAgICBjb25zdCByZWNlbmN5ID0gMSAvICgxICsgYWdlRGF5cyk7IC8vIHNpbXBsZSB0aW1lIGRlY2F5XG4gICAgICBjb25zdCB3ZWlnaHQgPSAoZS50cnVzdCB8fCAwKSAqIHJlY2VuY3k7XG4gICAgICB0b3RhbFdlaWdodCArPSB3ZWlnaHQ7XG4gICAgICBpZiAoZS5zdXBwb3J0cykge1xuICAgICAgICBzdXBwb3J0V2VpZ2h0ICs9IHdlaWdodDtcbiAgICAgICAgY29ycm9ib3JhdGVkQnkucHVzaChlLnNvdXJjZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkaXNwdXRlZEJ5LnB1c2goZS5zb3VyY2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGV2aWRlbmNlU2NvcmUgPSB0b3RhbFdlaWdodCA/IHN1cHBvcnRXZWlnaHQgLyB0b3RhbFdlaWdodCA6IDAuNTtcbiAgICBjb25zdCBtYW51YWwgPSB0aGlzLmdldEFuYWx5c3RBdmVyYWdlKGNsYWltSWQpO1xuICAgIGNvbnN0IGNvbmZpZGVuY2VTY29yZSA9IG1hbnVhbCAhPSBudWxsID8gKGV2aWRlbmNlU2NvcmUgKyBtYW51YWwpIC8gMiA6IGV2aWRlbmNlU2NvcmU7XG5cbiAgICByZXR1cm4geyBjb25maWRlbmNlU2NvcmUsIGNvcnJvYm9yYXRlZEJ5LCBkaXNwdXRlZEJ5IH07XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGludGVsQ29ycm9ib3JhdGlvblNlcnZpY2UgPSBuZXcgSW50ZWxDb3Jyb2JvcmF0aW9uU2VydmljZSgpO1xuIl0sInZlcnNpb24iOjN9