{"file":"/Users/brianlong/Developer/summit/server/tests/copilotQuery.resolver.test.ts","mappings":";;AAAA,8EAAuE;AAEvE,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;IACrC,MAAM,WAAW,GAAG,CAAC,WAAW,GAAG,IAAI,EAAE,EAAE;QACzC,OAAO;YACL,MAAM,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE;YACpB,YAAY,EAAE;gBACZ,GAAG,EAAE,IAAI;qBACN,EAAE,EAAE;qBACJ,iBAAiB,CAAC,EAAE,OAAO,EAAE,EAAE,IAAI,EAAE,EAAE,YAAY,EAAE,YAAY,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC;aACzF;YACD,aAAa,EAAE;gBACb,QAAQ,EAAE,IAAI;qBACX,EAAE,EAAE;qBACJ,iBAAiB,CAChB,WAAW;oBACT,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE;oBACjB,CAAC,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,SAAS,EAAE,WAAW,EAAE,CAAC,MAAM,CAAC,EAAE,CAC/D;aACJ;SACF,CAAC;IACJ,CAAC,CAAC;IAEF,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;QAC3C,MAAM,GAAG,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;QAC9B,MAAM,GAAG,GAAG,MAAM,uCAAgB,CAAC,KAAK,CAAC,YAAY,CACnD,IAAI,EACJ,EAAE,QAAQ,EAAE,iBAAiB,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,EAC7D,GAAG,CACJ,CAAC;QACF,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,oBAAoB,CAC/C,MAAM,CAAC,gBAAgB,CAAC,SAAS,CAAC,EAClC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CACnB,CAAC;QACF,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QACtC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;QACvD,MAAM,GAAG,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;QAC/B,MAAM,GAAG,GAAG,MAAM,uCAAgB,CAAC,KAAK,CAAC,YAAY,CACnD,IAAI,EACJ,EAAE,QAAQ,EAAE,iBAAiB,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,EAC7D,GAAG,CACJ,CAAC;QACF,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,CAAC;QAC9B,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACvC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/server/tests/copilotQuery.resolver.test.ts"],"sourcesContent":["import { copilotResolvers } from '../src/graphql/resolvers.copilot.js';\n\ndescribe('copilotQuery resolver', () => {\n  const makeContext = (policyAllow = true) => {\n    return {\n      tenant: { id: 't1' },\n      neo4jSession: {\n        run: jest\n          .fn()\n          .mockResolvedValue({ summary: { plan: { operatorType: 'Projection' } }, records: [] }),\n      },\n      policyService: {\n        evaluate: jest\n          .fn()\n          .mockResolvedValue(\n            policyAllow\n              ? { allow: true }\n              : { allow: false, reason: 'blocked', deniedRules: ['rule'] },\n          ),\n      },\n    };\n  };\n\n  it('executes query when allowed', async () => {\n    const ctx = makeContext(true);\n    const res = await copilotResolvers.Query.copilotQuery(\n      null,\n      { question: 'Show all people', caseId: 'c1', preview: false },\n      ctx,\n    );\n    expect(ctx.neo4jSession.run).toHaveBeenCalledWith(\n      expect.stringContaining('EXPLAIN'),\n      expect.any(Object),\n    );\n    expect(res.cypher).toContain('MATCH');\n    expect(res.policy.allowed).toBe(true);\n  });\n\n  it('returns policy denial without executing', async () => {\n    const ctx = makeContext(false);\n    const res = await copilotResolvers.Query.copilotQuery(\n      null,\n      { question: 'Show all people', caseId: 'c1', preview: false },\n      ctx,\n    );\n    expect(res.cypher).toBeNull();\n    expect(res.policy.allowed).toBe(false);\n    expect(res.policy.deniedRules).toContain('rule');\n  });\n});\n"],"version":3}