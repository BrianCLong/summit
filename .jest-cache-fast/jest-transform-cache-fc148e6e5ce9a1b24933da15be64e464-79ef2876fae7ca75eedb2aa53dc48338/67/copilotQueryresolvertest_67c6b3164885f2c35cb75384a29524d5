80ba322a3bbf750b7bf9f0769eb85d74
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const resolvers_copilot_js_1 = require("../src/graphql/resolvers.copilot.js");
describe('copilotQuery resolver', () => {
    const makeContext = (policyAllow = true) => {
        return {
            tenant: { id: 't1' },
            neo4jSession: {
                run: jest
                    .fn()
                    .mockResolvedValue({ summary: { plan: { operatorType: 'Projection' } }, records: [] }),
            },
            policyService: {
                evaluate: jest
                    .fn()
                    .mockResolvedValue(policyAllow
                    ? { allow: true }
                    : { allow: false, reason: 'blocked', deniedRules: ['rule'] }),
            },
        };
    };
    it('executes query when allowed', async () => {
        const ctx = makeContext(true);
        const res = await resolvers_copilot_js_1.copilotResolvers.Query.copilotQuery(null, { question: 'Show all people', caseId: 'c1', preview: false }, ctx);
        expect(ctx.neo4jSession.run).toHaveBeenCalledWith(expect.stringContaining('EXPLAIN'), expect.any(Object));
        expect(res.cypher).toContain('MATCH');
        expect(res.policy.allowed).toBe(true);
    });
    it('returns policy denial without executing', async () => {
        const ctx = makeContext(false);
        const res = await resolvers_copilot_js_1.copilotResolvers.Query.copilotQuery(null, { question: 'Show all people', caseId: 'c1', preview: false }, ctx);
        expect(res.cypher).toBeNull();
        expect(res.policy.allowed).toBe(false);
        expect(res.policy.deniedRules).toContain('rule');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3NlcnZlci90ZXN0cy9jb3BpbG90UXVlcnkucmVzb2x2ZXIudGVzdC50cyIsIm1hcHBpbmdzIjoiOztBQUFBLDhFQUF1RTtBQUV2RSxRQUFRLENBQUMsdUJBQXVCLEVBQUUsR0FBRyxFQUFFO0lBQ3JDLE1BQU0sV0FBVyxHQUFHLENBQUMsV0FBVyxHQUFHLElBQUksRUFBRSxFQUFFO1FBQ3pDLE9BQU87WUFDTCxNQUFNLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFO1lBQ3BCLFlBQVksRUFBRTtnQkFDWixHQUFHLEVBQUUsSUFBSTtxQkFDTixFQUFFLEVBQUU7cUJBQ0osaUJBQWlCLENBQUMsRUFBRSxPQUFPLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLENBQUM7YUFDekY7WUFDRCxhQUFhLEVBQUU7Z0JBQ2IsUUFBUSxFQUFFLElBQUk7cUJBQ1gsRUFBRSxFQUFFO3FCQUNKLGlCQUFpQixDQUNoQixXQUFXO29CQUNULENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7b0JBQ2pCLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUMvRDthQUNKO1NBQ0YsQ0FBQztJQUNKLENBQUMsQ0FBQztJQUVGLEVBQUUsQ0FBQyw2QkFBNkIsRUFBRSxLQUFLLElBQUksRUFBRTtRQUMzQyxNQUFNLEdBQUcsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUIsTUFBTSxHQUFHLEdBQUcsTUFBTSx1Q0FBZ0IsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUNuRCxJQUFJLEVBQ0osRUFBRSxRQUFRLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEVBQzdELEdBQUcsQ0FDSixDQUFDO1FBQ0YsTUFBTSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsb0JBQW9CLENBQy9DLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsRUFDbEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FDbkIsQ0FBQztRQUNGLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN4QyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyx5Q0FBeUMsRUFBRSxLQUFLLElBQUksRUFBRTtRQUN2RCxNQUFNLEdBQUcsR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDL0IsTUFBTSxHQUFHLEdBQUcsTUFBTSx1Q0FBZ0IsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUNuRCxJQUFJLEVBQ0osRUFBRSxRQUFRLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEVBQzdELEdBQUcsQ0FDSixDQUFDO1FBQ0YsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUM5QixNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdkMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ25ELENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3NlcnZlci90ZXN0cy9jb3BpbG90UXVlcnkucmVzb2x2ZXIudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb3BpbG90UmVzb2x2ZXJzIH0gZnJvbSAnLi4vc3JjL2dyYXBocWwvcmVzb2x2ZXJzLmNvcGlsb3QuanMnO1xuXG5kZXNjcmliZSgnY29waWxvdFF1ZXJ5IHJlc29sdmVyJywgKCkgPT4ge1xuICBjb25zdCBtYWtlQ29udGV4dCA9IChwb2xpY3lBbGxvdyA9IHRydWUpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdGVuYW50OiB7IGlkOiAndDEnIH0sXG4gICAgICBuZW80alNlc3Npb246IHtcbiAgICAgICAgcnVuOiBqZXN0XG4gICAgICAgICAgLmZuKClcbiAgICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWUoeyBzdW1tYXJ5OiB7IHBsYW46IHsgb3BlcmF0b3JUeXBlOiAnUHJvamVjdGlvbicgfSB9LCByZWNvcmRzOiBbXSB9KSxcbiAgICAgIH0sXG4gICAgICBwb2xpY3lTZXJ2aWNlOiB7XG4gICAgICAgIGV2YWx1YXRlOiBqZXN0XG4gICAgICAgICAgLmZuKClcbiAgICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWUoXG4gICAgICAgICAgICBwb2xpY3lBbGxvd1xuICAgICAgICAgICAgICA/IHsgYWxsb3c6IHRydWUgfVxuICAgICAgICAgICAgICA6IHsgYWxsb3c6IGZhbHNlLCByZWFzb246ICdibG9ja2VkJywgZGVuaWVkUnVsZXM6IFsncnVsZSddIH0sXG4gICAgICAgICAgKSxcbiAgICAgIH0sXG4gICAgfTtcbiAgfTtcblxuICBpdCgnZXhlY3V0ZXMgcXVlcnkgd2hlbiBhbGxvd2VkJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGN0eCA9IG1ha2VDb250ZXh0KHRydWUpO1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGNvcGlsb3RSZXNvbHZlcnMuUXVlcnkuY29waWxvdFF1ZXJ5KFxuICAgICAgbnVsbCxcbiAgICAgIHsgcXVlc3Rpb246ICdTaG93IGFsbCBwZW9wbGUnLCBjYXNlSWQ6ICdjMScsIHByZXZpZXc6IGZhbHNlIH0sXG4gICAgICBjdHgsXG4gICAgKTtcbiAgICBleHBlY3QoY3R4Lm5lbzRqU2Vzc2lvbi5ydW4pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgZXhwZWN0LnN0cmluZ0NvbnRhaW5pbmcoJ0VYUExBSU4nKSxcbiAgICAgIGV4cGVjdC5hbnkoT2JqZWN0KSxcbiAgICApO1xuICAgIGV4cGVjdChyZXMuY3lwaGVyKS50b0NvbnRhaW4oJ01BVENIJyk7XG4gICAgZXhwZWN0KHJlcy5wb2xpY3kuYWxsb3dlZCkudG9CZSh0cnVlKTtcbiAgfSk7XG5cbiAgaXQoJ3JldHVybnMgcG9saWN5IGRlbmlhbCB3aXRob3V0IGV4ZWN1dGluZycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBjdHggPSBtYWtlQ29udGV4dChmYWxzZSk7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgY29waWxvdFJlc29sdmVycy5RdWVyeS5jb3BpbG90UXVlcnkoXG4gICAgICBudWxsLFxuICAgICAgeyBxdWVzdGlvbjogJ1Nob3cgYWxsIHBlb3BsZScsIGNhc2VJZDogJ2MxJywgcHJldmlldzogZmFsc2UgfSxcbiAgICAgIGN0eCxcbiAgICApO1xuICAgIGV4cGVjdChyZXMuY3lwaGVyKS50b0JlTnVsbCgpO1xuICAgIGV4cGVjdChyZXMucG9saWN5LmFsbG93ZWQpLnRvQmUoZmFsc2UpO1xuICAgIGV4cGVjdChyZXMucG9saWN5LmRlbmllZFJ1bGVzKS50b0NvbnRhaW4oJ3J1bGUnKTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==