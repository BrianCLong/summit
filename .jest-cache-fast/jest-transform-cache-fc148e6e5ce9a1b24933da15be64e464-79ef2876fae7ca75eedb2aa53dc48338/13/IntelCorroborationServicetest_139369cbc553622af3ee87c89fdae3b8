349800a701ddb002bbb56dadfce7209b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const IntelCorroborationService_1 = require("../../src/services/IntelCorroborationService");
describe('IntelCorroborationService', () => {
    test('computes confidence with evidence and analyst ratings', () => {
        const service = new IntelCorroborationService_1.IntelCorroborationService();
        const now = Date.now();
        const evidence = [
            { source: 'sourceA', timestamp: now, trust: 0.9, supports: true },
            { source: 'sourceB', timestamp: now, trust: 0.8, supports: true },
            { source: 'sourceC', timestamp: now, trust: 0.6, supports: false },
        ];
        service.addAnalystRating('claim1', 0.8);
        service.addAnalystRating('claim1', 0.6);
        const result = service.evaluateClaim('claim1', evidence);
        expect(result.corroboratedBy).toEqual(['sourceA', 'sourceB']);
        expect(result.disputedBy).toEqual(['sourceC']);
        expect(result.confidenceScore).toBeCloseTo(0.72, 2);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3NlcnZlci90ZXN0cy9zZXJ2aWNlcy9JbnRlbENvcnJvYm9yYXRpb25TZXJ2aWNlLnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSw0RkFBeUY7QUFFekYsUUFBUSxDQUFDLDJCQUEyQixFQUFFLEdBQUcsRUFBRTtJQUN6QyxJQUFJLENBQUMsdURBQXVELEVBQUUsR0FBRyxFQUFFO1FBQ2pFLE1BQU0sT0FBTyxHQUFHLElBQUkscURBQXlCLEVBQUUsQ0FBQztRQUNoRCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDdkIsTUFBTSxRQUFRLEdBQUc7WUFDZixFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUU7WUFDakUsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFO1lBQ2pFLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRTtTQUNuRSxDQUFDO1FBRUYsT0FBTyxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUN4QyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBRXhDLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRXpELE1BQU0sQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDOUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQy9DLE1BQU0sQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN0RCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9icmlhbmxvbmcvRGV2ZWxvcGVyL3N1bW1pdC9zZXJ2ZXIvdGVzdHMvc2VydmljZXMvSW50ZWxDb3Jyb2JvcmF0aW9uU2VydmljZS50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEludGVsQ29ycm9ib3JhdGlvblNlcnZpY2UgfSBmcm9tICcuLi8uLi9zcmMvc2VydmljZXMvSW50ZWxDb3Jyb2JvcmF0aW9uU2VydmljZSc7XG5cbmRlc2NyaWJlKCdJbnRlbENvcnJvYm9yYXRpb25TZXJ2aWNlJywgKCkgPT4ge1xuICB0ZXN0KCdjb21wdXRlcyBjb25maWRlbmNlIHdpdGggZXZpZGVuY2UgYW5kIGFuYWx5c3QgcmF0aW5ncycsICgpID0+IHtcbiAgICBjb25zdCBzZXJ2aWNlID0gbmV3IEludGVsQ29ycm9ib3JhdGlvblNlcnZpY2UoKTtcbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgIGNvbnN0IGV2aWRlbmNlID0gW1xuICAgICAgeyBzb3VyY2U6ICdzb3VyY2VBJywgdGltZXN0YW1wOiBub3csIHRydXN0OiAwLjksIHN1cHBvcnRzOiB0cnVlIH0sXG4gICAgICB7IHNvdXJjZTogJ3NvdXJjZUInLCB0aW1lc3RhbXA6IG5vdywgdHJ1c3Q6IDAuOCwgc3VwcG9ydHM6IHRydWUgfSxcbiAgICAgIHsgc291cmNlOiAnc291cmNlQycsIHRpbWVzdGFtcDogbm93LCB0cnVzdDogMC42LCBzdXBwb3J0czogZmFsc2UgfSxcbiAgICBdO1xuXG4gICAgc2VydmljZS5hZGRBbmFseXN0UmF0aW5nKCdjbGFpbTEnLCAwLjgpO1xuICAgIHNlcnZpY2UuYWRkQW5hbHlzdFJhdGluZygnY2xhaW0xJywgMC42KTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IHNlcnZpY2UuZXZhbHVhdGVDbGFpbSgnY2xhaW0xJywgZXZpZGVuY2UpO1xuXG4gICAgZXhwZWN0KHJlc3VsdC5jb3Jyb2JvcmF0ZWRCeSkudG9FcXVhbChbJ3NvdXJjZUEnLCAnc291cmNlQiddKTtcbiAgICBleHBlY3QocmVzdWx0LmRpc3B1dGVkQnkpLnRvRXF1YWwoWydzb3VyY2VDJ10pO1xuICAgIGV4cGVjdChyZXN1bHQuY29uZmlkZW5jZVNjb3JlKS50b0JlQ2xvc2VUbygwLjcyLCAyKTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==