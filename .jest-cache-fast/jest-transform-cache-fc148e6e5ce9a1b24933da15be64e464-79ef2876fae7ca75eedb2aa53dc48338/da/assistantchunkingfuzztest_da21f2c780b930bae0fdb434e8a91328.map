{"file":"/Users/brianlong/Developer/summit/client/src/components/ai-enhanced/tests/assistant.chunking.fuzz.test.tsx","mappings":";;;;;;AAAA,kDAAwD;AACxD,6EAAoD;AACpD,4DAA4B;AAC5B,iFAAyD;AACzD,+CAAwD;AACxD,6CAAyE;AACzE,+CAAsD;AAEtD,MAAM,MAAM,GAAG,yBAAyB,CAAC;AAEzC,SAAS,cAAc,CAAC,CAAS,EAAE,IAAc;IAC/C,MAAM,OAAO,GAAG,CAAC,CAAC,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAClG,MAAM,GAAG,GAAa,EAAE,CAAC;IACzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE;QAAE,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3F,OAAO,GAAG,CAAC;AACb,CAAC;AAED,IAAI,CAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;IAC5C,IAAI,CAAC,aAAa,EAAE,CAAC;IACrB,MAAM,oBAAE,CAAC,MAAM,CACb,oBAAE,CAAC,aAAa,CACd,oBAAE,CAAC,WAAW,CAAC,oBAAE,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE;QACzD,SAAS,EAAE,CAAC;QACZ,SAAS,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC;KACtC,CAAC,EACF,KAAK,EAAE,IAAI,EAAE,EAAE;QACb,MAAM,MAAM,GAAG,cAAc,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAC5C,MAAM,MAAM,GAAG;YACb,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE,CAAU,CAAC;YAC5D,EAAE,IAAI,EAAE,MAAM,EAAW;SAC1B,CAAC;QACF,MAAM,SAAS,GAAG,IAAA,yBAAiB,EAAC,MAAM,CAAC,CAAC;QAE5C,IAAA,cAAM,EAAC,uBAAC,6BAAmB,IAAC,SAAS,EAAE,SAAS,EAAE,aAAa,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,GAAI,CAAC,CAAC;QACvF,MAAM,oBAAS,CAAC,IAAI,CAClB,cAAM,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,IAAI,EAAE,kBAAkB,EAAE,CAAC,EACzD,WAAW,CACZ,CAAC;QACF,MAAM,IAAA,uBAAe,GAAE,CAAC;QACxB,MAAM,IAAA,0CAAmC,EAAC,0BAA0B,CAAC,CAAC;IACxE,CAAC,CACF,EACD,EAAE,OAAO,EAAE,EAAE,EAAE,CAChB,CAAC;AACJ,CAAC,CAAC,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/client/src/components/ai-enhanced/tests/assistant.chunking.fuzz.test.tsx"],"sourcesContent":["import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport fc from 'fast-check';\nimport EnhancedAIAssistant from '../EnhancedAIAssistant';\nimport { makeFakeTransport } from '../test-utils/fakes';\nimport { expectLastAssistantMessageToContain } from '../test-utils/text';\nimport { flushMicrotasks } from '../test-utils/flush';\n\nconst target = 'I understand your query';\n\nfunction chunkByIndices(s: string, cuts: number[]) {\n  const indices = [0, ...cuts.filter((n) => n > 0 && n < s.length), s.length].sort((a, b) => a - b);\n  const out: string[] = [];\n  for (let i = 0; i < indices.length - 1; i++) out.push(s.slice(indices[i], indices[i + 1]));\n  return out;\n}\n\ntest('chunking invariance (fuzz)', async () => {\n  jest.useRealTimers();\n  await fc.assert(\n    fc.asyncProperty(\n      fc.uniqueArray(fc.integer({ min: 0, max: target.length }), {\n        minLength: 0,\n        maxLength: Math.min(8, target.length),\n      }),\n      async (cuts) => {\n        const chunks = chunkByIndices(target, cuts);\n        const script = [\n          ...chunks.map((v) => ({ type: 'token', value: v }) as const),\n          { type: 'done' } as const,\n        ];\n        const transport = makeFakeTransport(script);\n\n        render(<EnhancedAIAssistant transport={transport} typingDelayMs={0} debounceMs={0} />);\n        await userEvent.type(\n          screen.getByRole('textbox', { name: /assistant-input/i }),\n          'go{enter}',\n        );\n        await flushMicrotasks();\n        await expectLastAssistantMessageToContain(/I understand your query/i);\n      },\n    ),\n    { numRuns: 25 },\n  );\n});\n"],"version":3}