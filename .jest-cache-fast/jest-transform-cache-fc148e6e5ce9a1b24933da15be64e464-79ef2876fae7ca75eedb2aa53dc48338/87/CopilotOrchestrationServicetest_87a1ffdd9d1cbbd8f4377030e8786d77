de204ea93025b748051a65a55a082ee1
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const CopilotOrchestrationService_js_1 = __importDefault(require("../../services/CopilotOrchestrationService.js")); // Note the .js extension
describe('CopilotOrchestrationService', () => {
    let service;
    let mockNeo4jDriver;
    let mockAIExtractionService;
    let mockFederatedSearchService;
    let mockLogger;
    beforeEach(() => {
        mockNeo4jDriver = {
            session: jest.fn(() => ({
                run: jest.fn(() => ({ records: [] })),
                close: jest.fn(),
            })),
        };
        mockAIExtractionService = {
            extractEntities: jest.fn(),
            extractRelationships: jest.fn(),
        };
        mockFederatedSearchService = {
            search: jest.fn(),
        };
        mockLogger = {
            info: jest.fn(),
            error: jest.fn(),
            warn: jest.fn(),
        };
        service = new CopilotOrchestrationService_js_1.default(mockNeo4jDriver, mockAIExtractionService, mockFederatedSearchService, mockLogger);
    });
    it('should initialize with correct properties', () => {
        expect(service.driver).toBe(mockNeo4jDriver);
        expect(service.aiExtraction).toBe(mockAIExtractionService);
        expect(service.federatedSearch).toBe(mockFederatedSearchService);
        expect(service.logger).toBe(mockLogger);
        expect(service.activeQueries).toBeInstanceOf(Map);
        expect(service.queryPlanners).toBeInstanceOf(Map);
        expect(service.executionStrategies).toBeInstanceOf(Map);
        expect(service.domainKnowledge).toBeInstanceOf(Map);
        expect(service.queryPatterns).toBeInstanceOf(Map);
        expect(service.metrics).toBeDefined();
    });
    it('should initialize query planners', () => {
        expect(service.queryPlanners.size).toBeGreaterThan(0);
        expect(service.logger.info).toHaveBeenCalledWith(expect.stringContaining('Initialized'), expect.any(Object));
    });
    it('should load domain knowledge', () => {
        expect(service.domainKnowledge.size).toBeGreaterThan(0);
        expect(service.logger.info).toHaveBeenCalledWith(expect.stringContaining('Loaded domain knowledge'), expect.any(Object));
    });
    it('should orchestrate a simple query', async () => {
        const queryText = 'who is John Doe';
        const context = { userId: 'user1', investigationId: 'inv1' };
        // Mock analyzeQuery to return a simple analysis
        service.analyzeQuery = jest.fn().mockResolvedValue({
            originalText: queryText,
            intent: 'discovery',
            entities: [{ name: 'John Doe', type: 'PERSON' }],
            relationships: [],
            temporalScope: null,
            spatialScope: null,
            complexity: 0.2,
            confidence: 0.8,
            keywords: ['john', 'doe'],
            queryType: 'ENTITY_ANALYSIS',
        });
        // Mock generateExecutionPlan to return a simple plan
        service.generateExecutionPlan = jest.fn().mockResolvedValue({
            queryId: 'mock-query-id',
            strategy: 'ENTITY_ANALYSIS',
            steps: [{ id: 'step1', type: 'GRAPH_QUERY', operation: 'findEntity' }],
            estimatedTime: 1000,
            complexity: 0.2,
            dataSources: ['neo4j'],
            parallelizable: false,
        });
        // Mock executePlan to return simple results
        service.executePlan = jest.fn().mockResolvedValue({
            entities: [{ id: 'e1', label: 'John Doe' }],
            relationships: [],
            insights: [],
            visualizations: [],
            summary: 'Mock summary',
            confidence: 0.9,
            executionDetails: [],
        });
        const result = await service.orchestrateQuery(queryText, context);
        expect(result).toBeDefined();
        expect(result.id).toBeDefined();
        expect(result.text).toEqual(queryText);
        expect(result.status).toEqual('COMPLETED');
        expect(service.analyzeQuery).toHaveBeenCalledWith(queryText, context);
        expect(service.generateExecutionPlan).toHaveBeenCalled();
        expect(service.executePlan).toHaveBeenCalled();
        expect(service.metrics.totalQueries).toEqual(1);
        expect(service.metrics.successfulQueries).toEqual(1);
        expect(service.logger.info).toHaveBeenCalledWith(expect.stringContaining('Query orchestration completed'), expect.any(Object));
    });
    // Add more tests for other methods like analyzeQuery, generateExecutionPlan, executePlan, etc.
    // Test different query types and edge cases.
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3NlcnZlci9zcmMvdGVzdHMvc2VydmljZXMvQ29waWxvdE9yY2hlc3RyYXRpb25TZXJ2aWNlLnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxtSEFBd0YsQ0FBQyx5QkFBeUI7QUFFbEgsUUFBUSxDQUFDLDZCQUE2QixFQUFFLEdBQUcsRUFBRTtJQUMzQyxJQUFJLE9BQU8sQ0FBQztJQUNaLElBQUksZUFBZSxDQUFDO0lBQ3BCLElBQUksdUJBQXVCLENBQUM7SUFDNUIsSUFBSSwwQkFBMEIsQ0FBQztJQUMvQixJQUFJLFVBQVUsQ0FBQztJQUVmLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxlQUFlLEdBQUc7WUFDaEIsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztnQkFDdEIsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUNyQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTthQUNqQixDQUFDLENBQUM7U0FDSixDQUFDO1FBQ0YsdUJBQXVCLEdBQUc7WUFDeEIsZUFBZSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDMUIsb0JBQW9CLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtTQUNoQyxDQUFDO1FBQ0YsMEJBQTBCLEdBQUc7WUFDM0IsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7U0FDbEIsQ0FBQztRQUNGLFVBQVUsR0FBRztZQUNYLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO1lBQ2YsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDaEIsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7U0FDaEIsQ0FBQztRQUVGLE9BQU8sR0FBRyxJQUFJLHdDQUEyQixDQUN2QyxlQUFlLEVBQ2YsdUJBQXVCLEVBQ3ZCLDBC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TSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUMzQyxNQUFNLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLG9CQUFvQixDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN0RSxNQUFNLENBQUMsT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUN6RCxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDL0MsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hELE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JELE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLG9CQUFvQixDQUM5QyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsK0JBQStCLENBQUMsRUFDeEQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FDbkIsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0lBRUgsK0ZBQStGO0lBQy9GLDZDQUE2QztBQUMvQyxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvYnJpYW5sb25nL0RldmVsb3Blci9zdW1taXQvc2VydmVyL3NyYy90ZXN0cy9zZXJ2aWNlcy9Db3BpbG90T3JjaGVzdHJhdGlvblNlcnZpY2UudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ29waWxvdE9yY2hlc3RyYXRpb25TZXJ2aWNlIGZyb20gJy4uLy4uL3NlcnZpY2VzL0NvcGlsb3RPcmNoZXN0cmF0aW9uU2VydmljZS5qcyc7IC8vIE5vdGUgdGhlIC5qcyBleHRlbnNpb25cblxuZGVzY3JpYmUoJ0NvcGlsb3RPcmNoZXN0cmF0aW9uU2VydmljZScsICgpID0+IHtcbiAgbGV0IHNlcnZpY2U7XG4gIGxldCBtb2NrTmVvNGpEcml2ZXI7XG4gIGxldCBtb2NrQUlFeHRyYWN0aW9uU2VydmljZTtcbiAgbGV0IG1vY2tGZWRlcmF0ZWRTZWFyY2hTZXJ2aWNlO1xuICBsZXQgbW9ja0xvZ2dlcjtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBtb2NrTmVvNGpEcml2ZXIgPSB7XG4gICAgICBzZXNzaW9uOiBqZXN0LmZuKCgpID0+ICh7XG4gICAgICAgIHJ1bjogamVzdC5mbigoKSA9PiAoeyByZWNvcmRzOiBbXSB9KSksXG4gICAgICAgIGNsb3NlOiBqZXN0LmZuKCksXG4gICAgICB9KSksXG4gICAgfTtcbiAgICBtb2NrQUlFeHRyYWN0aW9uU2VydmljZSA9IHtcbiAgICAgIGV4dHJhY3RFbnRpdGllczogamVzdC5mbigpLFxuICAgICAgZXh0cmFjdFJlbGF0aW9uc2hpcHM6IGplc3QuZm4oKSxcbiAgICB9O1xuICAgIG1vY2tGZWRlcmF0ZWRTZWFyY2hTZXJ2aWNlID0ge1xuICAgICAgc2VhcmNoOiBqZXN0LmZuKCksXG4gICAgfTtcbiAgICBtb2NrTG9nZ2VyID0ge1xuICAgICAgaW5mbzogamVzdC5mbigpLFxuICAgICAgZXJyb3I6IGplc3QuZm4oKSxcbiAgICAgIHdhcm46IGplc3QuZm4oKSxcbiAgICB9O1xuXG4gICAgc2VydmljZSA9IG5ldyBDb3BpbG90T3JjaGVzdHJhdGlvblNlcnZpY2UoXG4gICAgICBtb2NrTmVvNGpEcml2ZXIsXG4gICAgICBtb2NrQUlFeHRyYWN0aW9uU2VydmljZSxcbiAgICAgIG1vY2tGZWRlcmF0ZWRTZWFyY2hTZXJ2aWNlLFxuICAgICAgbW9ja0xvZ2dlclxuICAgICk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB3aXRoIGNvcnJlY3QgcHJvcGVydGllcycsICgpID0+IHtcbiAgICBleHBlY3Qoc2VydmljZS5kcml2ZXIpLnRvQmUobW9ja05lbzRqRHJpdmVyKTtcbiAgICBleHBlY3Qoc2VydmljZS5haUV4dHJhY3Rpb24pLnRvQmUobW9ja0FJRXh0cmFjdGlvblNlcnZpY2UpO1xuICAgIGV4cGVjdChzZXJ2aWNlLmZlZGVyYXRlZFNlYXJjaCkudG9CZShtb2NrRmVkZXJhdGVkU2VhcmNoU2VydmljZSk7XG4gICAgZXhwZWN0KHNlcnZpY2UubG9nZ2VyKS50b0JlKG1vY2tMb2dnZXIpO1xuICAgIGV4cGVjdChzZXJ2aWNlLmFjdGl2ZVF1ZXJpZXMpLnRvQmVJbnN0YW5jZU9mKE1hcCk7XG4gICAgZXhwZWN0KHNlcnZpY2UucXVlcnlQbGFubmVycykudG9CZUluc3RhbmNlT2YoTWFwKTtcbiAgICBleHBlY3Qoc2VydmljZS5leGVjdXRpb25TdHJhdGVnaWVzKS50b0JlSW5zdGFuY2VPZihNYXApO1xuICAgIGV4cGVjdChzZXJ2aWNlLmRvbWFpbktub3dsZWRnZSkudG9CZUluc3RhbmNlT2YoTWFwKTtcbiAgICBleHBlY3Qoc2VydmljZS5xdWVyeVBhdHRlcm5zKS50b0JlSW5zdGFuY2VPZihNYXApO1xuICAgIGV4cGVjdChzZXJ2aWNlLm1ldHJpY3MpLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSBxdWVyeSBwbGFubmVycycsICgpID0+IHtcbiAgICBleHBlY3Qoc2VydmljZS5xdWVyeVBsYW5uZXJzLnNpemUpLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICBleHBlY3Qoc2VydmljZS5sb2dnZXIuaW5mbykudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICBleHBlY3Quc3RyaW5nQ29udGFpbmluZygnSW5pdGlhbGl6ZWQnKSxcbiAgICAgIGV4cGVjdC5hbnkoT2JqZWN0KVxuICAgICk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgbG9hZCBkb21haW4ga25vd2xlZGdlJywgKCkgPT4ge1xuICAgIGV4cGVjdChzZXJ2aWNlLmRvbWFpbktub3dsZWRnZS5zaXplKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgZXhwZWN0KHNlcnZpY2UubG9nZ2VyLmluZm8pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgZXhwZWN0LnN0cmluZ0NvbnRhaW5pbmcoJ0xvYWRlZCBkb21haW4ga25vd2xlZGdlJyksXG4gICAgICBleHBlY3QuYW55KE9iamVjdClcbiAgICApO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIG9yY2hlc3RyYXRlIGEgc2ltcGxlIHF1ZXJ5JywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHF1ZXJ5VGV4dCA9ICd3aG8gaXMgSm9obiBEb2UnO1xuICAgIGNvbnN0IGNvbnRleHQgPSB7IHVzZXJJZDogJ3VzZXIxJywgaW52ZXN0aWdhdGlvbklkOiAnaW52MScgfTtcblxuICAgIC8vIE1vY2sgYW5hbHl6ZVF1ZXJ5IHRvIHJldHVybiBhIHNpbXBsZSBhbmFseXNpc1xuICAgIHNlcnZpY2UuYW5hbHl6ZVF1ZXJ5ID0gamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgIG9yaWdpbmFsVGV4dDogcXVlcnlUZXh0LFxuICAgICAgaW50ZW50OiAnZGlzY292ZXJ5JyxcbiAgICAgIGVudGl0aWVzOiBbeyBuYW1lOiAnSm9obiBEb2UnLCB0eXBlOiAnUEVSU09OJyB9XSxcbiAgICAgIHJlbGF0aW9uc2hpcHM6IFtdLFxuICAgICAgdGVtcG9yYWxTY29wZTogbnVsbCxcbiAgICAgIHNwYXRpYWxTY29wZTogbnVsbCxcbiAgICAgIGNvbXBsZXhpdHk6IDAuMixcbiAgICAgIGNvbmZpZGVuY2U6IDAuOCxcbiAgICAgIGtleXdvcmRzOiBbJ2pvaG4nLCAnZG9lJ10sXG4gICAgICBxdWVyeVR5cGU6ICdFTlRJVFlfQU5BTFlTSVMnLFxuICAgIH0pO1xuXG4gICAgLy8gTW9jayBnZW5lcmF0ZUV4ZWN1dGlvblBsYW4gdG8gcmV0dXJuIGEgc2ltcGxlIHBsYW5cbiAgICBzZXJ2aWNlLmdlbmVyYXRlRXhlY3V0aW9uUGxhbiA9IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICBxdWVyeUlkOiAnbW9jay1xdWVyeS1pZCcsXG4gICAgICBzdHJhdGVneTogJ0VOVElUWV9BTkFMWVNJUycsXG4gICAgICBzdGVwczogW3sgaWQ6ICdzdGVwMScsIHR5cGU6ICdHUkFQSF9RVUVSWScsIG9wZXJhdGlvbjogJ2ZpbmRFbnRpdHknIH1dLFxuICAgICAgZXN0aW1hdGVkVGltZTogMTAwMCxcbiAgICAgIGNvbXBsZXhpdHk6IDAuMixcbiAgICAgIGRhdGFTb3VyY2VzOiBbJ25lbzRqJ10sXG4gICAgICBwYXJhbGxlbGl6YWJsZTogZmFsc2UsXG4gICAgfSk7XG5cbiAgICAvLyBNb2NrIGV4ZWN1dGVQbGFuIHRvIHJldHVybiBzaW1wbGUgcmVzdWx0c1xuICAgIHNlcnZpY2UuZXhlY3V0ZVBsYW4gPSBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgZW50aXRpZXM6IFt7IGlkOiAnZTEnLCBsYWJlbDogJ0pvaG4gRG9lJyB9XSxcbiAgICAgIHJlbGF0aW9uc2hpcHM6IFtdLFxuICAgICAgaW5zaWdodHM6IFtdLFxuICAgICAgdmlzdWFsaXphdGlvbnM6IFtdLFxuICAgICAgc3VtbWFyeTogJ01vY2sgc3VtbWFyeScsXG4gICAgICBjb25maWRlbmNlOiAwLjksXG4gICAgICBleGVjdXRpb25EZXRhaWxzOiBbXSxcbiAgICB9KTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNlcnZpY2Uub3JjaGVzdHJhdGVRdWVyeShxdWVyeVRleHQsIGNvbnRleHQpO1xuXG4gICAgZXhwZWN0KHJlc3VsdCkudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3QocmVzdWx0LmlkKS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdChyZXN1bHQudGV4dCkudG9FcXVhbChxdWVyeVRleHQpO1xuICAgIGV4cGVjdChyZXN1bHQuc3RhdHVzKS50b0VxdWFsKCdDT01QTEVURUQnKTtcbiAgICBleHBlY3Qoc2VydmljZS5hbmFseXplUXVlcnkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHF1ZXJ5VGV4dCwgY29udGV4dCk7XG4gICAgZXhwZWN0KHNlcnZpY2UuZ2VuZXJhdGVFeGVjdXRpb25QbGFuKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgZXhwZWN0KHNlcnZpY2UuZXhlY3V0ZVBsYW4pLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICBleHBlY3Qoc2VydmljZS5tZXRyaWNzLnRvdGFsUXVlcmllcykudG9FcXVhbCgxKTtcbiAgICBleHBlY3Qoc2VydmljZS5tZXRyaWNzLnN1Y2Nlc3NmdWxRdWVyaWVzKS50b0VxdWFsKDEpO1xuICAgIGV4cGVjdChzZXJ2aWNlLmxvZ2dlci5pbmZvKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgIGV4cGVjdC5zdHJpbmdDb250YWluaW5nKCdRdWVyeSBvcmNoZXN0cmF0aW9uIGNvbXBsZXRlZCcpLFxuICAgICAgZXhwZWN0LmFueShPYmplY3QpXG4gICAgKTtcbiAgfSk7XG5cbiAgLy8gQWRkIG1vcmUgdGVzdHMgZm9yIG90aGVyIG1ldGhvZHMgbGlrZSBhbmFseXplUXVlcnksIGdlbmVyYXRlRXhlY3V0aW9uUGxhbiwgZXhlY3V0ZVBsYW4sIGV0Yy5cbiAgLy8gVGVzdCBkaWZmZXJlbnQgcXVlcnkgdHlwZXMgYW5kIGVkZ2UgY2FzZXMuXG59KTsiXSwidmVyc2lvbiI6M30=