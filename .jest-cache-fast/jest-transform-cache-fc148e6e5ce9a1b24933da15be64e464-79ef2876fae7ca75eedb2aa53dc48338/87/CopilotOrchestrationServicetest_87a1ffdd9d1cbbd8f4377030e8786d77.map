{"file":"/Users/brianlong/Developer/summit/server/src/tests/services/CopilotOrchestrationService.test.ts","mappings":"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","names":[],"sources":["/Users/brianlong/Developer/summit/server/src/tests/services/CopilotOrchestrationService.test.ts"],"sourcesContent":["import CopilotOrchestrationService from '../../services/CopilotOrchestrationService.js'; // Note the .js extension\n\ndescribe('CopilotOrchestrationService', () => {\n  let service;\n  let mockNeo4jDriver;\n  let mockAIExtractionService;\n  let mockFederatedSearchService;\n  let mockLogger;\n\n  beforeEach(() => {\n    mockNeo4jDriver = {\n      session: jest.fn(() => ({\n        run: jest.fn(() => ({ records: [] })),\n        close: jest.fn(),\n      })),\n    };\n    mockAIExtractionService = {\n      extractEntities: jest.fn(),\n      extractRelationships: jest.fn(),\n    };\n    mockFederatedSearchService = {\n      search: jest.fn(),\n    };\n    mockLogger = {\n      info: jest.fn(),\n      error: jest.fn(),\n      warn: jest.fn(),\n    };\n\n    service = new CopilotOrchestrationService(\n      mockNeo4jDriver,\n      mockAIExtractionService,\n      mockFederatedSearchService,\n      mockLogger\n    );\n  });\n\n  it('should initialize with correct properties', () => {\n    expect(service.driver).toBe(mockNeo4jDriver);\n    expect(service.aiExtraction).toBe(mockAIExtractionService);\n    expect(service.federatedSearch).toBe(mockFederatedSearchService);\n    expect(service.logger).toBe(mockLogger);\n    expect(service.activeQueries).toBeInstanceOf(Map);\n    expect(service.queryPlanners).toBeInstanceOf(Map);\n    expect(service.executionStrategies).toBeInstanceOf(Map);\n    expect(service.domainKnowledge).toBeInstanceOf(Map);\n    expect(service.queryPatterns).toBeInstanceOf(Map);\n    expect(service.metrics).toBeDefined();\n  });\n\n  it('should initialize query planners', () => {\n    expect(service.queryPlanners.size).toBeGreaterThan(0);\n    expect(service.logger.info).toHaveBeenCalledWith(\n      expect.stringContaining('Initialized'),\n      expect.any(Object)\n    );\n  });\n\n  it('should load domain knowledge', () => {\n    expect(service.domainKnowledge.size).toBeGreaterThan(0);\n    expect(service.logger.info).toHaveBeenCalledWith(\n      expect.stringContaining('Loaded domain knowledge'),\n      expect.any(Object)\n    );\n  });\n\n  it('should orchestrate a simple query', async () => {\n    const queryText = 'who is John Doe';\n    const context = { userId: 'user1', investigationId: 'inv1' };\n\n    // Mock analyzeQuery to return a simple analysis\n    service.analyzeQuery = jest.fn().mockResolvedValue({\n      originalText: queryText,\n      intent: 'discovery',\n      entities: [{ name: 'John Doe', type: 'PERSON' }],\n      relationships: [],\n      temporalScope: null,\n      spatialScope: null,\n      complexity: 0.2,\n      confidence: 0.8,\n      keywords: ['john', 'doe'],\n      queryType: 'ENTITY_ANALYSIS',\n    });\n\n    // Mock generateExecutionPlan to return a simple plan\n    service.generateExecutionPlan = jest.fn().mockResolvedValue({\n      queryId: 'mock-query-id',\n      strategy: 'ENTITY_ANALYSIS',\n      steps: [{ id: 'step1', type: 'GRAPH_QUERY', operation: 'findEntity' }],\n      estimatedTime: 1000,\n      complexity: 0.2,\n      dataSources: ['neo4j'],\n      parallelizable: false,\n    });\n\n    // Mock executePlan to return simple results\n    service.executePlan = jest.fn().mockResolvedValue({\n      entities: [{ id: 'e1', label: 'John Doe' }],\n      relationships: [],\n      insights: [],\n      visualizations: [],\n      summary: 'Mock summary',\n      confidence: 0.9,\n      executionDetails: [],\n    });\n\n    const result = await service.orchestrateQuery(queryText, context);\n\n    expect(result).toBeDefined();\n    expect(result.id).toBeDefined();\n    expect(result.text).toEqual(queryText);\n    expect(result.status).toEqual('COMPLETED');\n    expect(service.analyzeQuery).toHaveBeenCalledWith(queryText, context);\n    expect(service.generateExecutionPlan).toHaveBeenCalled();\n    expect(service.executePlan).toHaveBeenCalled();\n    expect(service.metrics.totalQueries).toEqual(1);\n    expect(service.metrics.successfulQueries).toEqual(1);\n    expect(service.logger.info).toHaveBeenCalledWith(\n      expect.stringContaining('Query orchestration completed'),\n      expect.any(Object)\n    );\n  });\n\n  // Add more tests for other methods like analyzeQuery, generateExecutionPlan, executePlan, etc.\n  // Test different query types and edge cases.\n});"],"version":3}