{"file":"/Users/brianlong/Developer/summit/server/src/ai/nl-to-cypher/nl-to-cypher.service.ts","mappings":";;;;;;AACA,mCAA8C;AAC9C,gDAAwB;AAExB,MAAM,MAAM,GAAG,IAAA,cAAI,EAAC,EAAE,IAAI,EAAE,cAAc,EAAE,CAAC,CAAC;AAgD9C,MAAa,iBAAiB;IAIC;IAHZ,WAAW,GAAG,IAAI,GAAG,EAA8B,CAAC;IACpD,gBAAgB,GAAwE,EAAE,CAAC;IAE5G,YAA6B,OAAqB;QAArB,YAAO,GAAP,OAAO,CAAc;IAAG,CAAC;IAEtD,KAAK,CAAC,oBAAoB,CAAC,MAAc,EAAE,MAAc,EAAE,QAAgB;QACzE,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAC7B,MAAM,OAAO,GAAG,IAAA,mBAAM,GAAE,CAAC;QAEzB,oBAAoB;QACpB,MAAM,QAAQ,GAAG,GAAG,QAAQ,IAAI,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,EAAE,CAAC;QAC9D,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC;YACnC,MAAM,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,wCAAwC,CAAC,CAAC;YACnG,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAE,CAAC;QACzC,CAAC;QAED,IAAI,CAAC;YACH,kBAAkB;YAClB,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YAE1D,kBAAkB;YAClB,MAAM,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC;YAExD,gBAAgB;YAChB,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;YAExD,qBAAqB;YACrB,MAAM,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,eAAe,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;YAE5E,MAAM,QAAQ,GAAuB;gBACnC,EAAE,EAAE,OAAO;gBACX,cAAc,EAAE,MAAM;gBACtB,eAAe;gBACf,UAAU;gBACV,YAAY;gBACZ,UAAU;gBACV,UAAU,EAAE,UAAU,CAAC,OAAO,IAAI,YAAY,CAAC,SAAS,KAAK,WAAW,IAAI,UAAU,CAAC,SAAS,KAAK,MAAM;gBAC3G,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB,CAAC;YAEF,qBAAqB;YACrB,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;YAEzC,eAAe;YACf,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;YACzC,MAAM,CAAC,IAAI,CAAC;gBACV,OAAO;gBACP,MAAM;gBACN,QAAQ;gBACR,WAAW,EAAE,SAAS;gBACtB,QAAQ,EAAE,UAAU,CAAC,OAAO;gBAC5B,aAAa,EAAE,YAAY,CAAC,aAAa;gBACzC,SAAS,EAAE,YAAY,CAAC,SAAS;gBACjC,SAAS,EAAE,UAAU,CAAC,SAAS;aAChC,EAAE,iCAAiC,CAAC,CAAC;YAEtC,OAAO,QAAQ,CAAC;QAClB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,CAAC,KAAK,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,EAAE,8BAA8B,CAAC,CAAC;YACnF,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED,KAAK,CAAC,cAAc,CAClB,OAAe,EACf,MAAc,EACd,UAAmC;QACjC,QAAQ,EAAE,IAAI;QACd,OAAO,EAAE,KAAK;QACd,OAAO,EAAE,GAAG;KACb;QAED,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAE7B,IAAI,CAAC;YACH,yCAAyC;YACzC,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,EAAE,CAAC;gBACxD,OAAO;oBACL,OAAO,EAAE,KAAK;oBACd,eAAe,EAAE,CAAC;oBAClB,KAAK,EAAE,uCAAuC;oBAC9C,QAAQ,EAAE,EAAE;iBACb,CAAC;YACJ,CAAC;YAED,kCAAkC;YAClC,MAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;YAE1D,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;gBACnB,OAAO;oBACL,OAAO,EAAE,IAAI;oBACb,eAAe,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS;oBACvC,QAAQ,EAAE,CAAC,4BAA4B,UAAU,EAAE,CAAC;iBACrD,CAAC;YACJ,CAAC;YAED,uDAAuD;YACvD,8BAA8B;YAC9B,MAAM,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;YAEpD,MAAM,aAAa,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;YAE7C,4DAA4D;YAC5D,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;gBACzB,OAAO;gBACP,aAAa;gBACb,QAAQ,EAAE,QAAQ,CAAC,MAAM;aAC1B,CAAC,CAAC;YAEH,MAAM,CAAC,IAAI,CAAC;gBACV,OAAO;gBACP,eAAe,EAAE,aAAa;gBAC9B,QAAQ,EAAE,QAAQ,CAAC,MAAM;gBACzB,UAAU;aACX,EAAE,6BAA6B,CAAC,CAAC;YAElC,OAAO;gBACL,OAAO,EAAE,IAAI;gBACb,IAAI,EAAE,QAAQ;gBACd,eAAe,EAAE,aAAa;gBAC9B,QAAQ,EAAE,EAAE;aACb,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,CAAC,KAAK,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE,0BAA0B,CAAC,CAAC;YAC7D,OAAO;gBACL,OAAO,EAAE,KAAK;gBACd,eAAe,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS;gBACvC,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,yBAAyB;gBACzE,QAAQ,EAAE,EAAE;aACb,CAAC;QACJ,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,cAAc,CAAC,MAAc;QACzC,+CAA+C;QAC/C,IAAI,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;YACnC,OAAO,6BAA6B,CAAC;QACvC,CAAC;QAED,IAAI,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;YAChC,OAAO,oCAAoC,CAAC;QAC9C,CAAC;QAED,IAAI,sBAAsB,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;YACxC,OAAO,gEAAgE,CAAC;QAC1E,CAAC;QAED,IAAI,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;YACnC,OAAO,yFAAyF,CAAC;QACnG,CAAC;QAED,IAAI,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;YAClC,OAAO,4EAA4E,CAAC;QACtF,CAAC;QAED,4BAA4B;QAC5B,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IACvC,CAAC;IAEO,cAAc,CAAC,MAAc;QACnC,MAAM,MAAM,GAAa,EAAE,CAAC;QAC5B,MAAM,QAAQ,GAAa,EAAE,CAAC;QAE9B,0BAA0B;QAC1B,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC;YACnB,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC7B,CAAC;QAED,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;YACxF,QAAQ,CAAC,IAAI,CAAC,+CAA+C,CAAC,CAAC;QACjE,CAAC;QAED,6BAA6B;QAC7B,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC;YACtF,QAAQ,CAAC,IAAI,CAAC,4DAA4D,CAAC,CAAC;QAC9E,CAAC;QAED,IAAI,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;YACzE,QAAQ,CAAC,IAAI,CAAC,kDAAkD,CAAC,CAAC;QACpE,CAAC;QAED,iCAAiC;QACjC,MAAM,YAAY,GAAG,CAAC,QAAQ,EAAE,eAAe,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;QACnE,KAAK,MAAM,EAAE,IAAI,YAAY,EAAE,CAAC;YAC9B,IAAI,MAAM,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC;gBACtC,MAAM,CAAC,IAAI,CAAC,iCAAiC,EAAE,EAAE,CAAC,CAAC;YACrD,CAAC;QACH,CAAC;QAED,OAAO;YACL,OAAO,EAAE,MAAM,CAAC,MAAM,KAAK,CAAC;YAC5B,YAAY,EAAE,MAAM;YACpB,QAAQ;SACT,CAAC;IACJ,CAAC;IAEO,YAAY,CAAC,MAAc;QACjC,IAAI,aAAa,GAAG,GAAG,CAAC;QACxB,IAAI,SAAS,GAA8B,KAAK,CAAC;QACjD,IAAI,eAAe,GAAG,EAAE,CAAC;QACzB,IAAI,QAAQ,GAAG,EAAE,CAAC;QAElB,MAAM,WAAW,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC;QAEzC,2BAA2B;QAC3B,IAAI,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;YAC9B,aAAa,IAAI,EAAE,CAAC;YACpB,SAAS,GAAG,MAAM,CAAC;YACnB,eAAe,IAAI,EAAE,CAAC;YACtB,QAAQ,IAAI,CAAC,CAAC;QAChB,CAAC;QAED,IAAI,WAAW,CAAC,QAAQ,CAAC,cAAc,CAAC,EAAE,CAAC;YACzC,aAAa,IAAI,CAAC,CAAC;YACnB,SAAS,GAAG,SAAS,KAAK,MAAM,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ,CAAC;YAC1D,eAAe,IAAI,CAAC,CAAC;YACrB,QAAQ,IAAI,CAAC,CAAC;QAChB,CAAC;QAED,+BAA+B;QAC/B,MAAM,UAAU,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC;QAC1D,IAAI,UAAU,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC;YACrD,aAAa,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,UAAU,GAAG,CAAC,CAAC,CAAC;YAC9C,SAAS,GAAG,WAAW,CAAC;YACxB,eAAe,IAAI,EAAE,CAAC;YACtB,QAAQ,IAAI,EAAE,CAAC;QACjB,CAAC;QAED,mCAAmC;QACnC,MAAM,UAAU,GAAG,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC;QACxD,IAAI,UAAU,EAAE,CAAC;YACf,eAAe,GAAG,IAAI,CAAC,GAAG,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC;QAC1D,CAAC;QAED,OAAO;YACL,aAAa;YACb,SAAS;YACT,eAAe;YACf,QAAQ;SACT,CAAC;IACJ,CAAC;IAEO,gBAAgB,CAAC,MAAc,EAAE,MAAc,EAAE,QAAgB;QACvE,MAAM,KAAK,GAAa,EAAE,CAAC;QAC3B,IAAI,SAAS,GAA4B,KAAK,CAAC;QAC/C,IAAI,SAAS,GAAG,KAAK,CAAC;QACtB,MAAM,mBAAmB,GAAa,EAAE,CAAC;QAEzC,MAAM,WAAW,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC;QAEzC,gCAAgC;QAChC,MAAM,SAAS,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;QAC/D,KAAK,MAAM,KAAK,IAAI,SAAS,EAAE,CAAC;YAC9B,IAAI,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC;gBAChC,SAAS,GAAG,IAAI,CAAC;gBACjB,KAAK,CAAC,IAAI,CAAC,+CAA+C,KAAK,EAAE,CAAC,CAAC;gBACnE,SAAS,GAAG,QAAQ,CAAC;YACvB,CAAC;QACH,CAAC;QAED,8BAA8B;QAC9B,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC;YACpE,KAAK,CAAC,IAAI,CAAC,gDAAgD,CAAC,CAAC;YAC7D,SAAS,GAAG,QAAQ,CAAC;QACvB,CAAC;QAED,gCAAgC;QAChC,MAAM,SAAS,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;QACjE,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE,CAAC;YACjC,IAAI,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;gBACnC,mBAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACnC,KAAK,CAAC,IAAI,CAAC,sCAAsC,QAAQ,EAAE,CAAC,CAAC;gBAC7D,SAAS,GAAG,MAAM,CAAC;YACrB,CAAC;QACH,CAAC;QAED,OAAO;YACL,SAAS;YACT,KAAK;YACL,SAAS;YACT,mBAAmB;SACpB,CAAC;IACJ,CAAC;IAEO,iBAAiB,CAAC,MAAc;QACtC,MAAM,SAAS,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;QACzE,MAAM,WAAW,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC;QACzC,OAAO,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,WAAW,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;IACxD,CAAC;IAEO,QAAQ,CAAC,MAAc,EAAE,OAAe;QAC9C,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC;QAE/B,2BAA2B;QAC3B,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC;YAChD,UAAU,IAAI,UAAU,OAAO,EAAE,CAAC;QACpC,CAAC;QAED,OAAO,UAAU,CAAC;IACpB,CAAC;IAEO,iBAAiB,CAAC,MAAc;QACtC,mCAAmC;QACnC,MAAM,QAAQ,GAAG;YACf,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,QAAQ,EAAE;YAC3C,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,cAAc,EAAE;YACjD,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE;SAC3C,CAAC;QAEF,oCAAoC;QACpC,IAAI,MAAM,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC;YAC3C,OAAO,CAAC,EAAE,KAAK,EAAE,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;QACtC,CAAC;QAED,OAAO,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;IAC7C,CAAC;IAEO,uBAAuB,CAAC,MAAc;QAC5C,8CAA8C;QAC9C,MAAM,cAAc,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE;YACtD,wCAAwC;YACxC,OAAO,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;QAEH,IAAI,cAAc,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO,IAAI,CAAC;QAE7C,MAAM,OAAO,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,aAAa,EAAE,CAAC,CAAC,GAAG,cAAc,CAAC,MAAM,CAAC;QACpG,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,qEAAqE;IACrE,UAAU,CAAC,QAAgB,EAAE,MAAc;QACzC,6BAA6B;QAC7B,MAAM,aAAa,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;QAC9D,MAAM,WAAW,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;QAE1D,MAAM,SAAS,GAAa,EAAE,CAAC;QAC/B,MAAM,SAAS,GAAa,EAAE,CAAC;QAC/B,MAAM,aAAa,GAAa,EAAE,CAAC;QAEnC,gCAAgC;QAChC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACzB,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;gBAClC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACvB,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAC3B,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;gBAChC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACvB,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,aAAa,EAAE,CAAC;IACjD,CAAC;IAED,sCAAsC;IACtC,UAAU;QACR,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;QACzB,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;IACzC,CAAC;IAED,2CAA2C;IAC3C,KAAK,CAAC,SAAS,CAAC,MAAc;QAC5B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;QAC5E,OAAO,MAAM,CAAC,eAAe,CAAC;IAChC,CAAC;CACF;AAhXD,8CAgXC","names":[],"sources":["/Users/brianlong/Developer/summit/server/src/ai/nl-to-cypher/nl-to-cypher.service.ts"],"sourcesContent":["import type { ModelAdapter } from './model-adapter';\nimport { randomUUID as uuidv4 } from 'crypto';\nimport pino from 'pino';\n\nconst logger = pino({ name: 'nl-to-cypher' });\n\nexport interface CypherValidationResult {\n  isValid: boolean;\n  syntaxErrors: string[];\n  warnings: string[];\n}\n\nexport interface CostEstimate {\n  estimatedRows: number;\n  costClass: 'low' | 'medium' | 'high' | 'very-high';\n  executionTimeMs: number;\n  memoryMb: number;\n}\n\nexport interface PolicyRisk {\n  riskLevel: 'low' | 'medium' | 'high';\n  risks: string[];\n  piiAccess: boolean;\n  sensitiveOperations: string[];\n}\n\nexport interface NlToCypherResponse {\n  id: string;\n  originalPrompt: string;\n  generatedCypher: string;\n  validation: CypherValidationResult;\n  costEstimate: CostEstimate;\n  policyRisk: PolicyRisk;\n  canExecute: boolean;\n  timestamp: Date;\n}\n\nexport interface SandboxExecutionOptions {\n  readOnly: boolean;\n  timeout: number;\n  maxRows: number;\n  dryRun?: boolean;\n}\n\nexport interface SandboxExecutionResult {\n  success: boolean;\n  rows?: any[];\n  executionTimeMs: number;\n  error?: string;\n  warnings: string[];\n}\n\nexport class NlToCypherService {\n  private readonly promptCache = new Map<string, NlToCypherResponse>();\n  private readonly executionHistory: Array<{ queryId: string; executionTime: number; rowCount: number }> = [];\n\n  constructor(private readonly adapter: ModelAdapter) {}\n\n  async translateWithPreview(prompt: string, userId: string, tenantId: string): Promise<NlToCypherResponse> {\n    const startTime = Date.now();\n    const queryId = uuidv4();\n\n    // Check cache first\n    const cacheKey = `${tenantId}:${prompt.trim().toLowerCase()}`;\n    if (this.promptCache.has(cacheKey)) {\n      logger.info({ queryId, userId, tenantId, cached: true }, 'Returning cached NL→Cypher translation');\n      return this.promptCache.get(cacheKey)!;\n    }\n\n    try {\n      // Generate Cypher\n      const generatedCypher = await this.generateCypher(prompt);\n\n      // Validate syntax\n      const validation = this.validateCypher(generatedCypher);\n\n      // Estimate cost\n      const costEstimate = this.estimateCost(generatedCypher);\n\n      // Assess policy risk\n      const policyRisk = this.assessPolicyRisk(generatedCypher, userId, tenantId);\n\n      const response: NlToCypherResponse = {\n        id: queryId,\n        originalPrompt: prompt,\n        generatedCypher,\n        validation,\n        costEstimate,\n        policyRisk,\n        canExecute: validation.isValid && costEstimate.costClass !== 'very-high' && policyRisk.riskLevel !== 'high',\n        timestamp: new Date()\n      };\n\n      // Cache the response\n      this.promptCache.set(cacheKey, response);\n\n      // Emit metrics\n      const parseTime = Date.now() - startTime;\n      logger.info({\n        queryId,\n        userId,\n        tenantId,\n        parseTimeMs: parseTime,\n        validity: validation.isValid,\n        estimatedRows: costEstimate.estimatedRows,\n        costClass: costEstimate.costClass,\n        riskLevel: policyRisk.riskLevel\n      }, 'NL→Cypher translation completed');\n\n      return response;\n    } catch (error) {\n      logger.error({ queryId, userId, tenantId, error }, 'NL→Cypher translation failed');\n      throw error;\n    }\n  }\n\n  async executeSandbox(\n    queryId: string,\n    cypher: string,\n    options: SandboxExecutionOptions = {\n      readOnly: true,\n      timeout: 30000,\n      maxRows: 100\n    }\n  ): Promise<SandboxExecutionResult> {\n    const startTime = Date.now();\n\n    try {\n      // Validate the query is safe for sandbox\n      if (!options.readOnly && this.containsMutations(cypher)) {\n        return {\n          success: false,\n          executionTimeMs: 0,\n          error: 'Mutations not allowed in sandbox mode',\n          warnings: []\n        };\n      }\n\n      // Add LIMIT clause if not present\n      const safeCypher = this.makeSafe(cypher, options.maxRows);\n\n      if (options.dryRun) {\n        return {\n          success: true,\n          executionTimeMs: Date.now() - startTime,\n          warnings: [`Dry run - would execute: ${safeCypher}`]\n        };\n      }\n\n      // TODO: Integrate with actual Neo4j sandbox connection\n      // For now, simulate execution\n      const mockRows = this.simulateExecution(safeCypher);\n\n      const executionTime = Date.now() - startTime;\n\n      // Record execution history for cost estimation improvements\n      this.executionHistory.push({\n        queryId,\n        executionTime,\n        rowCount: mockRows.length\n      });\n\n      logger.info({\n        queryId,\n        executionTimeMs: executionTime,\n        rowCount: mockRows.length,\n        safeCypher\n      }, 'Sandbox execution completed');\n\n      return {\n        success: true,\n        rows: mockRows,\n        executionTimeMs: executionTime,\n        warnings: []\n      };\n    } catch (error) {\n      logger.error({ queryId, error }, 'Sandbox execution failed');\n      return {\n        success: false,\n        executionTimeMs: Date.now() - startTime,\n        error: error instanceof Error ? error.message : 'Unknown execution error',\n        warnings: []\n      };\n    }\n  }\n\n  private async generateCypher(prompt: string): Promise<string> {\n    // Enhanced pattern matching for common queries\n    if (/show all nodes/i.test(prompt)) {\n      return 'MATCH (n) RETURN n LIMIT 25';\n    }\n\n    if (/count nodes/i.test(prompt)) {\n      return 'MATCH (n) RETURN count(n) AS count';\n    }\n\n    if (/find.*connected.*to/i.test(prompt)) {\n      return 'MATCH (a)-[r]-(b) WHERE a.name = $name RETURN a, r, b LIMIT 50';\n    }\n\n    if (/shortest.*path/i.test(prompt)) {\n      return 'MATCH p = shortestPath((a)-[*..5]-(b)) WHERE a.id = $startId AND b.id = $endId RETURN p';\n    }\n\n    if (/neighbors.*of/i.test(prompt)) {\n      return 'MATCH (n)-[r]-(neighbor) WHERE n.id = $nodeId RETURN neighbor, r LIMIT 100';\n    }\n\n    // Fallback to model adapter\n    return this.adapter.generate(prompt);\n  }\n\n  private validateCypher(cypher: string): CypherValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Basic syntax validation\n    if (!cypher.trim()) {\n      errors.push('Empty query');\n    }\n\n    if (!cypher.toUpperCase().includes('MATCH') && !cypher.toUpperCase().includes('CREATE')) {\n      warnings.push('Query does not contain MATCH or CREATE clause');\n    }\n\n    // Check for potential issues\n    if (!cypher.toUpperCase().includes('LIMIT') && cypher.toUpperCase().includes('MATCH')) {\n      warnings.push('No LIMIT clause found - query may return large result sets');\n    }\n\n    if (cypher.includes('*') && cypher.includes('[') && cypher.includes(']')) {\n      warnings.push('Variable length path detected - may be expensive');\n    }\n\n    // Check for dangerous operations\n    const dangerousOps = ['DELETE', 'DETACH DELETE', 'DROP', 'REMOVE'];\n    for (const op of dangerousOps) {\n      if (cypher.toUpperCase().includes(op)) {\n        errors.push(`Dangerous operation detected: ${op}`);\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      syntaxErrors: errors,\n      warnings\n    };\n  }\n\n  private estimateCost(cypher: string): CostEstimate {\n    let estimatedRows = 100;\n    let costClass: CostEstimate['costClass'] = 'low';\n    let executionTimeMs = 50;\n    let memoryMb = 10;\n\n    const upperCypher = cypher.toUpperCase();\n\n    // Analyze query complexity\n    if (upperCypher.includes('*')) {\n      estimatedRows *= 10;\n      costClass = 'high';\n      executionTimeMs *= 20;\n      memoryMb *= 5;\n    }\n\n    if (upperCypher.includes('SHORTESTPATH')) {\n      estimatedRows *= 2;\n      costClass = costClass === 'high' ? 'very-high' : 'medium';\n      executionTimeMs *= 5;\n      memoryMb *= 2;\n    }\n\n    // Check for cartesian products\n    const matchCount = (cypher.match(/MATCH/gi) || []).length;\n    if (matchCount > 1 && !upperCypher.includes('WHERE')) {\n      estimatedRows *= Math.pow(10, matchCount - 1);\n      costClass = 'very-high';\n      executionTimeMs *= 50;\n      memoryMb *= 10;\n    }\n\n    // Use historical data if available\n    const avgHistory = this.getAverageExecutionTime(cypher);\n    if (avgHistory) {\n      executionTimeMs = Math.max(executionTimeMs, avgHistory);\n    }\n\n    return {\n      estimatedRows,\n      costClass,\n      executionTimeMs,\n      memoryMb\n    };\n  }\n\n  private assessPolicyRisk(cypher: string, userId: string, tenantId: string): PolicyRisk {\n    const risks: string[] = [];\n    let riskLevel: PolicyRisk['riskLevel'] = 'low';\n    let piiAccess = false;\n    const sensitiveOperations: string[] = [];\n\n    const upperCypher = cypher.toUpperCase();\n\n    // Check for PII access patterns\n    const piiFields = ['EMAIL', 'PHONE', 'SSN', 'ADDRESS', 'NAME'];\n    for (const field of piiFields) {\n      if (upperCypher.includes(field)) {\n        piiAccess = true;\n        risks.push(`Query accesses potentially sensitive field: ${field}`);\n        riskLevel = 'medium';\n      }\n    }\n\n    // Check for broad data access\n    if (!upperCypher.includes('WHERE') && upperCypher.includes('MATCH')) {\n      risks.push('Query lacks WHERE clause - may access all data');\n      riskLevel = 'medium';\n    }\n\n    // Check for mutation operations\n    const mutations = ['CREATE', 'DELETE', 'SET', 'REMOVE', 'MERGE'];\n    for (const mutation of mutations) {\n      if (upperCypher.includes(mutation)) {\n        sensitiveOperations.push(mutation);\n        risks.push(`Query contains mutation operation: ${mutation}`);\n        riskLevel = 'high';\n      }\n    }\n\n    return {\n      riskLevel,\n      risks,\n      piiAccess,\n      sensitiveOperations\n    };\n  }\n\n  private containsMutations(cypher: string): boolean {\n    const mutations = ['CREATE', 'DELETE', 'SET', 'REMOVE', 'MERGE', 'DROP'];\n    const upperCypher = cypher.toUpperCase();\n    return mutations.some(op => upperCypher.includes(op));\n  }\n\n  private makeSafe(cypher: string, maxRows: number): string {\n    let safeCypher = cypher.trim();\n\n    // Add LIMIT if not present\n    if (!safeCypher.toUpperCase().includes('LIMIT')) {\n      safeCypher += ` LIMIT ${maxRows}`;\n    }\n\n    return safeCypher;\n  }\n\n  private simulateExecution(cypher: string): any[] {\n    // Mock execution for demo purposes\n    const mockData = [\n      { id: '1', name: 'Node 1', type: 'Person' },\n      { id: '2', name: 'Node 2', type: 'Organization' },\n      { id: '3', name: 'Node 3', type: 'Event' }\n    ];\n\n    // Return subset based on query type\n    if (cypher.toUpperCase().includes('COUNT')) {\n      return [{ count: mockData.length }];\n    }\n\n    return mockData.slice(0, Math.min(3, 100));\n  }\n\n  private getAverageExecutionTime(cypher: string): number | null {\n    // Simple pattern matching for historical data\n    const similarQueries = this.executionHistory.filter(h => {\n      // This is a simplified similarity check\n      return cypher.includes('MATCH') && cypher.includes('RETURN');\n    });\n\n    if (similarQueries.length === 0) return null;\n\n    const avgTime = similarQueries.reduce((sum, q) => sum + q.executionTime, 0) / similarQueries.length;\n    return avgTime;\n  }\n\n  // Method for computing diff between generated and user-edited Cypher\n  diffCypher(original: string, edited: string): { additions: string[]; deletions: string[]; modifications: string[] } {\n    // Simple diff implementation\n    const originalLines = original.split('\\n').map(l => l.trim());\n    const editedLines = edited.split('\\n').map(l => l.trim());\n\n    const additions: string[] = [];\n    const deletions: string[] = [];\n    const modifications: string[] = [];\n\n    // Basic line-by-line comparison\n    editedLines.forEach(line => {\n      if (!originalLines.includes(line)) {\n        additions.push(line);\n      }\n    });\n\n    originalLines.forEach(line => {\n      if (!editedLines.includes(line)) {\n        deletions.push(line);\n      }\n    });\n\n    return { additions, deletions, modifications };\n  }\n\n  // Cleanup method for cache management\n  clearCache(): void {\n    this.promptCache.clear();\n    logger.info('NL→Cypher cache cleared');\n  }\n\n  // Legacy method for backward compatibility\n  async translate(prompt: string): Promise<string> {\n    const result = await this.translateWithPreview(prompt, 'system', 'default');\n    return result.generatedCypher;\n  }\n}"],"version":3}