{"file":"/Users/brianlong/Developer/summit/server/tests/presence.test.ts","mappings":";;;;;AAIA,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE,GAAG,EAAE,CAAC,CAAC;IACrC,WAAW,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,KAAa,EAAE,EAAE;QAC3C,IAAI,KAAK,KAAK,IAAI,EAAE,CAAC;YACnB,OAAO,EAAE,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,gBAAgB,EAAE,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;QAC7E,CAAC;QACD,IAAI,KAAK,KAAK,IAAI,EAAE,CAAC;YACnB,OAAO,EAAE,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,gBAAgB,EAAE,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;QAC7E,CAAC;QACD,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;IACnC,CAAC,CAAC;CACH,CAAC,CAAC,CAAC;AAdJ,gDAAwB;AACxB,wEAAwC;AACxC,mDAAoD;AAcpD,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,IAAI,MAAmB,CAAC;IACxB,IAAI,GAAW,CAAC;IAChB,IAAI,EAAO,CAAC;IAEZ,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE;QACjB,MAAM,GAAG,cAAI,CAAC,YAAY,EAAE,CAAC;QAC7B,EAAE,GAAG,IAAA,mBAAU,EAAC,MAAM,CAAC,CAAC;QACxB,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE;YACjB,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,EAAS,CAAC;YACxC,GAAG,GAAG,oBAAoB,OAAO,CAAC,IAAI,WAAW,CAAC;YAClD,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,CAAC,IAAI,EAAE,EAAE;QAChB,EAAE,CAAC,KAAK,EAAE,CAAC;QACX,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACrB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,CAAC,IAAI,EAAE,EAAE;QAC9C,MAAM,OAAO,GAAG,IAAA,0BAAQ,EAAC,GAAG,EAAE;YAC5B,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE;YACzC,UAAU,EAAE,CAAC,WAAW,CAAC;SAC1B,CAAC,CAAC;QACH,OAAO,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,KAAY,EAAE,EAAE;YAC/C,MAAM,CAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAC9B,MAAM,OAAO,GAAG,IAAA,0BAAQ,EAAC,GAAG,EAAE;gBAC5B,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE;gBACzC,UAAU,EAAE,CAAC,WAAW,CAAC;aAC1B,CAAC,CAAC;YACH,OAAO,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,KAAY,EAAE,EAAE;gBAC/C,MAAM,CAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;gBAC9B,OAAO,CAAC,KAAK,EAAE,CAAC;gBAChB,OAAO,CAAC,KAAK,EAAE,CAAC;gBAChB,IAAI,EAAE,CAAC;YACT,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/server/tests/presence.test.ts"],"sourcesContent":["import http from 'http';\nimport ioClient from 'socket.io-client';\nimport { initSocket } from '../src/realtime/socket';\n\njest.mock('../src/lib/auth.js', () => ({\n  verifyToken: jest.fn(async (token: string) => {\n    if (token === 't1') {\n      return { id: '1', email: 'u1@example.com', username: 'u1', role: 'ADMIN' };\n    }\n    if (token === 't2') {\n      return { id: '2', email: 'u2@example.com', username: 'u2', role: 'ADMIN' };\n    }\n    throw new Error('Invalid token');\n  }),\n}));\n\ndescribe('presence websocket', () => {\n  let server: http.Server;\n  let url: string;\n  let io: any;\n\n  beforeAll((done) => {\n    server = http.createServer();\n    io = initSocket(server);\n    server.listen(() => {\n      const address = server.address() as any;\n      url = `http://localhost:${address.port}/realtime`;\n      done();\n    });\n  });\n\n  afterAll((done) => {\n    io.close();\n    server.close(done);\n  });\n\n  it('broadcasts presence to workspace', (done) => {\n    const clientA = ioClient(url, {\n      auth: { token: 't1', workspaceId: 'ws1' },\n      transports: ['websocket'],\n    });\n    clientA.once('presence:update', (listA: any[]) => {\n      expect(listA).toHaveLength(1);\n      const clientB = ioClient(url, {\n        auth: { token: 't2', workspaceId: 'ws1' },\n        transports: ['websocket'],\n      });\n      clientA.once('presence:update', (listB: any[]) => {\n        expect(listB).toHaveLength(2);\n        clientA.close();\n        clientB.close();\n        done();\n      });\n    });\n  });\n});\n"],"version":3}