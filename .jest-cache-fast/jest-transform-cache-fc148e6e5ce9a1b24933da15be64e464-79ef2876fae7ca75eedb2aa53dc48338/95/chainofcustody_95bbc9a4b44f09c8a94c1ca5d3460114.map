{"file":"/Users/brianlong/Developer/summit/server/src/cases/chain-of-custody.ts","mappings":";;AAeA,4BAaC;AAMD,kCAmBC;AArDD,mCAA6D;AAW7D;;;GAGG;AACI,KAAK,UAAU,QAAQ,CAC5B,EAAO,EACP,KAAmB,EACnB,QAAgB,EAChB,UAAqB;IAErB,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACtC,MAAM,SAAS,GAAG,IAAA,mBAAU,EAAC,QAAQ,CAAC;SACnC,MAAM,CAAC,QAAQ,GAAG,OAAO,CAAC;SAC1B,MAAM,CAAC,KAAK,CAAC,CAAC;IACjB,MAAM,SAAS,GAAG,IAAA,aAAI,EAAC,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,UAAU,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACpF,MAAM,EAAE,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,EAAE,GAAG,KAAK,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,EAAE,CAAC,CAAC;IACrF,OAAO,SAAS,CAAC;AACnB,CAAC;AAED;;;GAGG;AACH,SAAgB,WAAW,CAAC,MAAa,EAAE,SAAoB;IAC7D,IAAI,QAAQ,GAAG,SAAS,CAAC;IACzB,KAAK,MAAM,CAAC,IAAI,MAAM,EAAE,CAAC;QACvB,MAAM,EAAE,MAAM,EAAE,YAAY,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE,EAAE,OAAO,EAAE,GAAG,CAAC,CAAC;QACjE,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,YAAY,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;QAC1F,MAAM,IAAI,GAAG,IAAA,mBAAU,EAAC,QAAQ,CAAC;aAC9B,MAAM,CAAC,QAAQ,GAAG,UAAU,CAAC;aAC7B,MAAM,CAAC,KAAK,CAAC,CAAC;QACjB,IAAI,IAAI,KAAK,CAAC,CAAC,SAAS;YAAE,OAAO,KAAK,CAAC;QACvC,MAAM,EAAE,GAAG,IAAA,eAAM,EACf,IAAI,EACJ,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,EACxB,SAAS,EACT,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,EAAE,QAAQ,CAAC,CACnC,CAAC;QACF,IAAI,CAAC,EAAE;YAAE,OAAO,KAAK,CAAC;QACtB,QAAQ,GAAG,CAAC,CAAC,SAAS,CAAC;IACzB,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/server/src/cases/chain-of-custody.ts"],"sourcesContent":["import { createHash, sign, verify, KeyObject } from 'crypto';\n\nexport interface CustodyEvent {\n  caseId: string;\n  attachmentId?: string;\n  actorId: string;\n  action: string;\n  at?: Date;\n  payload?: Record<string, any>;\n}\n\n/**\n * Append a custody event to the chain with an Ed25519 signature.\n * Returns the computed event hash which should be used as the next prevHash.\n */\nexport async function writeCoC(\n  db: any,\n  event: CustodyEvent,\n  prevHash: string,\n  privateKey: KeyObject,\n): Promise<string> {\n  const payload = JSON.stringify(event);\n  const eventHash = createHash('sha256')\n    .update(prevHash + payload)\n    .digest('hex');\n  const signature = sign(null, Buffer.from(eventHash), privateKey).toString('base64');\n  await db.custodyEvent.create({ data: { ...event, prevHash, eventHash, signature } });\n  return eventHash;\n}\n\n/**\n * Verify a chain of custody events. Returns true if the chain is intact and\n * signatures are valid.\n */\nexport function verifyChain(events: any[], publicKey: KeyObject): boolean {\n  let prevHash = 'GENESIS';\n  for (const e of events) {\n    const { caseId, attachmentId, actorId, action, at, payload } = e;\n    const payloadStr = JSON.stringify({ caseId, attachmentId, actorId, action, at, payload });\n    const hash = createHash('sha256')\n      .update(prevHash + payloadStr)\n      .digest('hex');\n    if (hash !== e.eventHash) return false;\n    const ok = verify(\n      null,\n      Buffer.from(e.eventHash),\n      publicKey,\n      Buffer.from(e.signature, 'base64'),\n    );\n    if (!ok) return false;\n    prevHash = e.eventHash;\n  }\n  return true;\n}\n"],"version":3}