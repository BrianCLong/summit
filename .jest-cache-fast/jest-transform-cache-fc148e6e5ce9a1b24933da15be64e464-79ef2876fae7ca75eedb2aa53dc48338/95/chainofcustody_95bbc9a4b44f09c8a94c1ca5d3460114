9215fc34f0a035e72a58ead2b11fa03d
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeCoC = writeCoC;
exports.verifyChain = verifyChain;
const crypto_1 = require("crypto");
/**
 * Append a custody event to the chain with an Ed25519 signature.
 * Returns the computed event hash which should be used as the next prevHash.
 */
async function writeCoC(db, event, prevHash, privateKey) {
    const payload = JSON.stringify(event);
    const eventHash = (0, crypto_1.createHash)('sha256')
        .update(prevHash + payload)
        .digest('hex');
    const signature = (0, crypto_1.sign)(null, Buffer.from(eventHash), privateKey).toString('base64');
    await db.custodyEvent.create({ data: { ...event, prevHash, eventHash, signature } });
    return eventHash;
}
/**
 * Verify a chain of custody events. Returns true if the chain is intact and
 * signatures are valid.
 */
function verifyChain(events, publicKey) {
    let prevHash = 'GENESIS';
    for (const e of events) {
        const { caseId, attachmentId, actorId, action, at, payload } = e;
        const payloadStr = JSON.stringify({ caseId, attachmentId, actorId, action, at, payload });
        const hash = (0, crypto_1.createHash)('sha256')
            .update(prevHash + payloadStr)
            .digest('hex');
        if (hash !== e.eventHash)
            return false;
        const ok = (0, crypto_1.verify)(null, Buffer.from(e.eventHash), publicKey, Buffer.from(e.signature, 'base64'));
        if (!ok)
            return false;
        prevHash = e.eventHash;
    }
    return true;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3NlcnZlci9zcmMvY2FzZXMvY2hhaW4tb2YtY3VzdG9keS50cyIsIm1hcHBpbmdzIjoiOztBQWVBLDRCQWFDO0FBTUQsa0NBbUJDO0FBckRELG1DQUE2RDtBQVc3RDs7O0dBR0c7QUFDSSxLQUFLLFVBQVUsUUFBUSxDQUM1QixFQUFPLEVBQ1AsS0FBbUIsRUFDbkIsUUFBZ0IsRUFDaEIsVUFBcUI7SUFFckIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QyxNQUFNLFNBQVMsR0FBRyxJQUFBLG1CQUFVLEVBQUMsUUFBUSxDQUFDO1NBQ25DLE1BQU0sQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO1NBQzFCLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNqQixNQUFNLFNBQVMsR0FBRyxJQUFBLGFBQUksRUFBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDcEYsTUFBTSxFQUFFLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEdBQUcsS0FBSyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3JGLE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUM7QUFFRDs7O0dBR0c7QUFDSCxTQUFnQixXQUFXLENBQUMsTUFBYSxFQUFFLFNBQW9CO0lBQzdELElBQUksUUFBUSxHQUFHLFNBQVMsQ0FBQztJQUN6QixLQUFLLE1BQU0sQ0FBQyxJQUFJLE1BQU0sRUFBRSxDQUFDO1FBQ3ZCLE1BQU0sRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNqRSxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQzFGLE1BQU0sSUFBSSxHQUFHLElBQUEsbUJBQVUsRUFBQyxRQUFRLENBQUM7YUFDOUIsTUFBTSxDQUFDLFFBQVEsR0FBRyxVQUFVLENBQUM7YUFDN0IsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2pCLElBQUksSUFBSSxLQUFLLENBQUMsQ0FBQyxTQUFTO1lBQUUsT0FBTyxLQUFLLENBQUM7UUFDdkMsTUFBTSxFQUFFLEdBQUcsSUFBQSxlQUFNLEVBQ2YsSUFBSSxFQUNKLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUN4QixTQUFTLEVBQ1QsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUNuQyxDQUFDO1FBQ0YsSUFBSSxDQUFDLEVBQUU7WUFBRSxPQUFPLEtBQUssQ0FBQztRQUN0QixRQUFRLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUN6QixDQUFDO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9icmlhbmxvbmcvRGV2ZWxvcGVyL3N1bW1pdC9zZXJ2ZXIvc3JjL2Nhc2VzL2NoYWluLW9mLWN1c3RvZHkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlSGFzaCwgc2lnbiwgdmVyaWZ5LCBLZXlPYmplY3QgfSBmcm9tICdjcnlwdG8nO1xuXG5leHBvcnQgaW50ZXJmYWNlIEN1c3RvZHlFdmVudCB7XG4gIGNhc2VJZDogc3RyaW5nO1xuICBhdHRhY2htZW50SWQ/OiBzdHJpbmc7XG4gIGFjdG9ySWQ6IHN0cmluZztcbiAgYWN0aW9uOiBzdHJpbmc7XG4gIGF0PzogRGF0ZTtcbiAgcGF5bG9hZD86IFJlY29yZDxzdHJpbmcsIGFueT47XG59XG5cbi8qKlxuICogQXBwZW5kIGEgY3VzdG9keSBldmVudCB0byB0aGUgY2hhaW4gd2l0aCBhbiBFZDI1NTE5IHNpZ25hdHVyZS5cbiAqIFJldHVybnMgdGhlIGNvbXB1dGVkIGV2ZW50IGhhc2ggd2hpY2ggc2hvdWxkIGJlIHVzZWQgYXMgdGhlIG5leHQgcHJldkhhc2guXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB3cml0ZUNvQyhcbiAgZGI6IGFueSxcbiAgZXZlbnQ6IEN1c3RvZHlFdmVudCxcbiAgcHJldkhhc2g6IHN0cmluZyxcbiAgcHJpdmF0ZUtleTogS2V5T2JqZWN0LFxuKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgY29uc3QgcGF5bG9hZCA9IEpTT04uc3RyaW5naWZ5KGV2ZW50KTtcbiAgY29uc3QgZXZlbnRIYXNoID0gY3JlYXRlSGFzaCgnc2hhMjU2JylcbiAgICAudXBkYXRlKHByZXZIYXNoICsgcGF5bG9hZClcbiAgICAuZGlnZXN0KCdoZXgnKTtcbiAgY29uc3Qgc2lnbmF0dXJlID0gc2lnbihudWxsLCBCdWZmZXIuZnJvbShldmVudEhhc2gpLCBwcml2YXRlS2V5KS50b1N0cmluZygnYmFzZTY0Jyk7XG4gIGF3YWl0IGRiLmN1c3RvZHlFdmVudC5jcmVhdGUoeyBkYXRhOiB7IC4uLmV2ZW50LCBwcmV2SGFzaCwgZXZlbnRIYXNoLCBzaWduYXR1cmUgfSB9KTtcbiAgcmV0dXJuIGV2ZW50SGFzaDtcbn1cblxuLyoqXG4gKiBWZXJpZnkgYSBjaGFpbiBvZiBjdXN0b2R5IGV2ZW50cy4gUmV0dXJucyB0cnVlIGlmIHRoZSBjaGFpbiBpcyBpbnRhY3QgYW5kXG4gKiBzaWduYXR1cmVzIGFyZSB2YWxpZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZlcmlmeUNoYWluKGV2ZW50czogYW55W10sIHB1YmxpY0tleTogS2V5T2JqZWN0KTogYm9vbGVhbiB7XG4gIGxldCBwcmV2SGFzaCA9ICdHRU5FU0lTJztcbiAgZm9yIChjb25zdCBlIG9mIGV2ZW50cykge1xuICAgIGNvbnN0IHsgY2FzZUlkLCBhdHRhY2htZW50SWQsIGFjdG9ySWQsIGFjdGlvbiwgYXQsIHBheWxvYWQgfSA9IGU7XG4gICAgY29uc3QgcGF5bG9hZFN0ciA9IEpTT04uc3RyaW5naWZ5KHsgY2FzZUlkLCBhdHRhY2htZW50SWQsIGFjdG9ySWQsIGFjdGlvbiwgYXQsIHBheWxvYWQgfSk7XG4gICAgY29uc3QgaGFzaCA9IGNyZWF0ZUhhc2goJ3NoYTI1NicpXG4gICAgICAudXBkYXRlKHByZXZIYXNoICsgcGF5bG9hZFN0cilcbiAgICAgIC5kaWdlc3QoJ2hleCcpO1xuICAgIGlmIChoYXNoICE9PSBlLmV2ZW50SGFzaCkgcmV0dXJuIGZhbHNlO1xuICAgIGNvbnN0IG9rID0gdmVyaWZ5KFxuICAgICAgbnVsbCxcbiAgICAgIEJ1ZmZlci5mcm9tKGUuZXZlbnRIYXNoKSxcbiAgICAgIHB1YmxpY0tleSxcbiAgICAgIEJ1ZmZlci5mcm9tKGUuc2lnbmF0dXJlLCAnYmFzZTY0JyksXG4gICAgKTtcbiAgICBpZiAoIW9rKSByZXR1cm4gZmFsc2U7XG4gICAgcHJldkhhc2ggPSBlLmV2ZW50SGFzaDtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbiJdLCJ2ZXJzaW9uIjozfQ==