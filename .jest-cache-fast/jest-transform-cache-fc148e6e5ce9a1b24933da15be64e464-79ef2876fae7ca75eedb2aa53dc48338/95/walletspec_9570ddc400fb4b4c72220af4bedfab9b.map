{"file":"/Users/brianlong/Developer/summit/packages/prov-ledger/tests/wallet.spec.ts","mappings":";;AAAA,0CAAwE;AAExE,mCAA6C;AAE7C,IAAI,CAAC,oCAAoC,EAAE,GAAG,EAAE;IAC9C,MAAM,EAAE,UAAU,EAAE,SAAS,EAAE,GAAG,IAAA,4BAAmB,EAAC,KAAK,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC;IACtF,MAAM,KAAK,GAAiB,KAAK,CAAC,IAAI,CAAC,EAAC,MAAM,EAAC,CAAC,EAAC,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,EAAE,CAAA,CAAC;QACzD,EAAE,EAAC,IAAI,CAAC,EAAE,EAAE,IAAI,EAAC,aAAa,EAAE,SAAS,EAAC,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,EAAE,OAAO,EAAC,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;QACpG,SAAS,EAAC,GAAG,GAAC,CAAC,EAAE,UAAU,EAAC,GAAG,GAAC,CAAC,EAAE,UAAU,EAAC,GAAG,GAAC,CAAC,EAAE,SAAS,EAAC,GAAG,GAAC,CAAC;KACrE,CAAC,CAAC,CAAC;IACJ,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,GAAG,IAAA,oBAAW,EAAC,MAAM,EAAC,OAAO,EAAC,KAAK,EAAE,UAAU,CAAC,MAAM,CAAC,EAAC,IAAI,EAAC,OAAO,EAAC,MAAM,EAAC,KAAK,EAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;IACpI,MAAM,MAAM,GAAG,IAAA,iBAAQ,EAAC,CAAC,IAAI,EAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;IAC1D,MAAM,EAAE,GAAG,IAAA,yBAAgB,EAAC,MAAM,EAAE,SAAS,CAAC,MAAM,CAAC,EAAC,IAAI,EAAC,OAAO,EAAC,MAAM,EAAC,KAAK,EAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;IAC9F,MAAM,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/packages/prov-ledger/tests/wallet.spec.ts"],"sourcesContent":["import { buildWallet, disclose, verifyDisclosure } from '../src/wallet';\nimport { StepCommit } from '../src/types';\nimport { generateKeyPairSync } from 'crypto';\n\ntest('selective disclosure proofs verify', () => {\n  const { privateKey, publicKey } = generateKeyPairSync('rsa', { modulusLength: 2048 });\n  const steps: StepCommit[] = Array.from({length:5}, (_,i)=>({\n    id:`s${i}`, tool:'graph.query', startedAt:new Date().toISOString(), endedAt:new Date().toISOString(),\n    inputHash:'i'+i, outputHash:'o'+i, policyHash:'p'+i, modelHash:'m'+i\n  }));\n  const { manifest, steps: S, leaves } = buildWallet('run1','case1',steps, privateKey.export({type:'pkcs1',format:'pem'}).toString());\n  const bundle = disclose(['s1','s3'], manifest, S, leaves);\n  const ok = verifyDisclosure(bundle, publicKey.export({type:'pkcs1',format:'pem'}).toString());\n  expect(ok).toBe(true);\n});"],"version":3}