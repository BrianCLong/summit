{"file":"/Users/brianlong/Developer/summit/server/tests/ticket-links.test.ts","mappings":"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","names":[],"sources":["/Users/brianlong/Developer/summit/server/tests/ticket-links.test.ts"],"sourcesContent":["import { jest, describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport { \n  addTicketRunLink, \n  addTicketDeploymentLink, \n  extractTicketFromPR,\n  extractTicketFromMetadata,\n  TicketIdentifier \n} from '../src/services/ticket-links.js';\n\n// Mock the database connection\njest.mock('../src/db/postgres.js', () => ({\n  getPostgresPool: jest.fn(() => ({\n    query: jest.fn()\n  }))\n}));\n\ndescribe('Ticket Linking Service', () => {\n  let mockPool: any;\n  \n  beforeEach(() => {\n    const { getPostgresPool } = require('../src/db/postgres.js');\n    mockPool = {\n      query: jest.fn()\n    };\n    getPostgresPool.mockReturnValue(mockPool);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('addTicketRunLink', () => {\n    it('should create a link between ticket and run', async () => {\n      // Mock run exists\n      mockPool.query.mockResolvedValueOnce({ rows: [{ id: 'run-123' }] });\n      // Mock ticket exists\n      mockPool.query.mockResolvedValueOnce({ rows: [{ id: 'ticket-456' }] });\n      // Mock insert\n      mockPool.query.mockResolvedValueOnce({ rows: [] });\n\n      const ticket: TicketIdentifier = {\n        provider: 'github',\n        externalId: '123'\n      };\n\n      await addTicketRunLink(ticket, 'run-123', { source: 'test' });\n\n      expect(mockPool.query).toHaveBeenCalledTimes(3);\n      expect(mockPool.query).toHaveBeenCalledWith('SELECT id FROM runs WHERE id = $1', ['run-123']);\n      expect(mockPool.query).toHaveBeenCalledWith(\n        'SELECT id FROM tickets WHERE provider = $1 AND external_id = $2',\n        ['github', '123']\n      );\n    });\n\n    it('should throw error if run does not exist', async () => {\n      // Mock run does not exist\n      mockPool.query.mockResolvedValueOnce({ rows: [] });\n\n      const ticket: TicketIdentifier = {\n        provider: 'github',\n        externalId: '123'\n      };\n\n      await expect(addTicketRunLink(ticket, 'nonexistent-run', {}))\n        .rejects.toThrow('Run nonexistent-run not found');\n    });\n\n    it('should handle idempotent calls', async () => {\n      // Mock run exists\n      mockPool.query.mockResolvedValueOnce({ rows: [{ id: 'run-123' }] });\n      // Mock ticket exists\n      mockPool.query.mockResolvedValueOnce({ rows: [{ id: 'ticket-456' }] });\n      // Mock insert with conflict handling\n      mockPool.query.mockResolvedValueOnce({ rows: [] });\n\n      const ticket: TicketIdentifier = {\n        provider: 'github',\n        externalId: '123'\n      };\n\n      await addTicketRunLink(ticket, 'run-123', { source: 'test' });\n      \n      // Should not throw on duplicate call\n      expect(() => addTicketRunLink(ticket, 'run-123', { source: 'test' }))\n        .not.toThrow();\n    });\n  });\n\n  describe('extractTicketFromPR', () => {\n    it('should extract GitHub issue number from PR URL', () => {\n      const result = extractTicketFromPR('https://github.com/owner/repo/pull/123');\n      expect(result).toEqual({\n        provider: 'github',\n        externalId: '123'\n      });\n    });\n\n    it('should extract GitHub issue from PR body', () => {\n      const result = extractTicketFromPR(\n        'https://github.com/owner/repo/pull/456',\n        'This PR fixes #123'\n      );\n      expect(result).toEqual({\n        provider: 'github',\n        externalId: '123'\n      });\n    });\n\n    it('should extract Jira ticket from PR body', () => {\n      const result = extractTicketFromPR(\n        'https://github.com/owner/repo/pull/456',\n        'This PR implements PROJ-789 feature'\n      );\n      expect(result).toEqual({\n        provider: 'jira',\n        externalId: 'PROJ-789'\n      });\n    });\n\n    it('should return null if no ticket found', () => {\n      const result = extractTicketFromPR(\n        'https://github.com/owner/repo/pull/456',\n        'This PR has no ticket reference'\n      );\n      expect(result).toBeNull();\n    });\n\n    it('should handle multiple patterns and return first match', () => {\n      const result = extractTicketFromPR(\n        'https://github.com/owner/repo/pull/456',\n        'This PR fixes #123 and relates to PROJ-789'\n      );\n      // Should prefer GitHub issue pattern\n      expect(result).toEqual({\n        provider: 'github',\n        externalId: '123'\n      });\n    });\n  });\n\n  describe('extractTicketFromMetadata', () => {\n    it('should extract direct ticket reference', () => {\n      const metadata = {\n        ticket: {\n          provider: 'jira',\n          external_id: 'PROJ-456'\n        }\n      };\n\n      const result = extractTicketFromMetadata(metadata);\n      expect(result).toEqual({\n        provider: 'jira',\n        externalId: 'PROJ-456'\n      });\n    });\n\n    it('should extract from PR URL in metadata', () => {\n      const metadata = {\n        pr_url: 'https://github.com/owner/repo/pull/789',\n        pr_body: 'Fixes #123'\n      };\n\n      const result = extractTicketFromMetadata(metadata);\n      expect(result).toEqual({\n        provider: 'github',\n        externalId: '123'\n      });\n    });\n\n    it('should extract from commit message', () => {\n      const metadata = {\n        commit_message: 'feat: implement PROJ-999 authentication'\n      };\n\n      const result = extractTicketFromMetadata(metadata);\n      expect(result).toEqual({\n        provider: 'jira',\n        externalId: 'PROJ-999'\n      });\n    });\n\n    it('should return null if no ticket information found', () => {\n      const metadata = {\n        random_field: 'no ticket here'\n      };\n\n      const result = extractTicketFromMetadata(metadata);\n      expect(result).toBeNull();\n    });\n  });\n\n  describe('addTicketDeploymentLink', () => {\n    it('should create a link between ticket and deployment', async () => {\n      // Mock deployment exists\n      mockPool.query.mockResolvedValueOnce({ rows: [{ id: 'deploy-789' }] });\n      // Mock ticket exists\n      mockPool.query.mockResolvedValueOnce({ rows: [{ id: 'ticket-456' }] });\n      // Mock insert\n      mockPool.query.mockResolvedValueOnce({ rows: [] });\n\n      const ticket: TicketIdentifier = {\n        provider: 'jira',\n        externalId: 'PROJ-456'\n      };\n\n      await addTicketDeploymentLink(ticket, 'deploy-789', { environment: 'staging' });\n\n      expect(mockPool.query).toHaveBeenCalledTimes(3);\n      expect(mockPool.query).toHaveBeenCalledWith(\n        'SELECT id FROM deployments WHERE id = $1',\n        ['deploy-789']\n      );\n    });\n\n    it('should throw error if deployment does not exist', async () => {\n      // Mock deployment does not exist\n      mockPool.query.mockResolvedValueOnce({ rows: [] });\n\n      const ticket: TicketIdentifier = {\n        provider: 'jira',\n        externalId: 'PROJ-456'\n      };\n\n      await expect(addTicketDeploymentLink(ticket, 'nonexistent-deploy', {}))\n        .rejects.toThrow('Deployment nonexistent-deploy not found');\n    });\n  });\n});"],"version":3}