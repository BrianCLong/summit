{"file":"/Users/brianlong/Developer/summit/server/tests/realtime-collab.test.ts","mappings":";;;;;AAAA,gDAAwB;AACxB,wEAAwC;AACxC,mDAAsD;AAEtD,QAAQ,CAAC,+BAA+B,EAAE,GAAG,EAAE;IAC7C,IAAI,MAAmB,CAAC;IACxB,IAAI,GAAW,CAAC;IAChB,IAAI,EAAO,CAAC;IAEZ,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,MAAM,GAAG,cAAI,CAAC,YAAY,EAAE,CAAC;QAC7B,EAAE,GAAG,MAAM,IAAA,qBAAY,EAAC,MAAM,CAAC,CAAC;QAChC,MAAM,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,EAAE;YAClC,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE;gBACjB,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,EAAS,CAAC;gBACxC,GAAG,GAAG,oBAAoB,OAAO,CAAC,IAAI,KAAK,CAAC;gBAC5C,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,CAAC,IAAI,EAAE,EAAE;QAChB,EAAE,CAAC,KAAK,EAAE,CAAC;QACX,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACrB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oCAAoC,EAAE,CAAC,IAAI,EAAE,EAAE;QAChD,MAAM,EAAE,GAAG,IAAA,0BAAQ,EAAC,GAAG,EAAE;YACvB,IAAI,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE;YACtC,UAAU,EAAE,CAAC,WAAW,CAAC;SAC1B,CAAC,CAAC;QACH,MAAM,EAAE,GAAG,IAAA,0BAAQ,EAAC,GAAG,EAAE;YACvB,IAAI,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE;YACtC,UAAU,EAAE,CAAC,WAAW,CAAC;SAC1B,CAAC,CAAC;QAEH,EAAE,CAAC,EAAE,CAAC,eAAe,EAAE,CAAC,OAAO,EAAE,EAAE;YACjC,IAAI,OAAO,CAAC,MAAM,KAAK,IAAI,EAAE,CAAC;gBAC5B,EAAE,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YAChE,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,EAAE,CAAC,aAAa,EAAE,CAAC,OAAO,EAAE,EAAE;YAC/B,IAAI,CAAC;gBACH,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAClC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC1B,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC1B,EAAE,CAAC,KAAK,EAAE,CAAC;gBACX,EAAE,CAAC,KAAK,EAAE,CAAC;gBACX,IAAI,EAAE,CAAC;YACT,CAAC;YAAC,OAAO,GAAG,EAAE,CAAC;gBACb,IAAI,CAAC,GAAG,CAAC,CAAC;YACZ,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC,CAAC;QAC3C,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/server/tests/realtime-collab.test.ts"],"sourcesContent":["import http from 'http';\nimport ioClient from 'socket.io-client';\nimport { initRealtime } from '../src/realtime/collab';\n\ndescribe('realtime collaboration basics', () => {\n  let server: http.Server;\n  let url: string;\n  let io: any;\n\n  beforeAll(async () => {\n    server = http.createServer();\n    io = await initRealtime(server);\n    await new Promise<void>((resolve) => {\n      server.listen(() => {\n        const address = server.address() as any;\n        url = `http://localhost:${address.port}/ws`;\n        resolve();\n      });\n    });\n  });\n\n  afterAll((done) => {\n    io.close();\n    server.close(done);\n  });\n\n  it('shares presence and cursor updates', (done) => {\n    const c1 = ioClient(url, {\n      auth: { tenantId: 't1', userId: 'u1' },\n      transports: ['websocket'],\n    });\n    const c2 = ioClient(url, {\n      auth: { tenantId: 't1', userId: 'u2' },\n      transports: ['websocket'],\n    });\n\n    c1.on('presence:join', (payload) => {\n      if (payload.userId === 'u2') {\n        c2.emit('cursor:move', { investigationId: 'i1', x: 5, y: 6 });\n      }\n    });\n\n    c1.on('cursor:move', (payload) => {\n      try {\n        expect(payload.userId).toBe('u2');\n        expect(payload.x).toBe(5);\n        expect(payload.y).toBe(6);\n        c1.close();\n        c2.close();\n        done();\n      } catch (err) {\n        done(err);\n      }\n    });\n\n    c1.emit('join', { investigationId: 'i1' });\n    c2.emit('join', { investigationId: 'i1' });\n  });\n});\n"],"version":3}