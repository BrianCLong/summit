{"file":"/Users/brianlong/Developer/summit/server/tests/provenanceRepo.test.ts","mappings":"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","names":[],"sources":["/Users/brianlong/Developer/summit/server/tests/provenanceRepo.test.ts"],"sourcesContent":["import { ProvenanceRepo } from '../src/repos/ProvenanceRepo.js';\n\nclass FakeClient {\n  private responses: Array<{ match: RegExp; result: any; error?: boolean }> = [];\n  lastSql = '';\n  addResponse(match: RegExp, result: any, error = false) {\n    this.responses.push({ match, result, error });\n  }\n  async query(sql: string, _params: any[]) {\n    this.lastSql = sql;\n    const hit = this.responses.find((r) => r.match.test(sql));\n    if (!hit) throw new Error('no mock for sql');\n    if (hit.error) throw new Error('forced error');\n    return hit.result;\n  }\n  release() {}\n}\n\nclass FakePool {\n  client: any;\n  constructor(client: any) {\n    this.client = client;\n  }\n  async connect() {\n    return this.client;\n  }\n}\n\ndescribe('ProvenanceRepo', () => {\n  test('maps classic audit_events rows', async () => {\n    const client = new FakeClient();\n    const now = new Date();\n    client.addResponse(/FROM audit_events .*target_type/, {\n      rows: [\n        {\n          id: 'r1',\n          action: 'policy',\n          target_type: 'incident',\n          target_id: 'inc1',\n          metadata: { reasonCode: 'POLICY_DENY' },\n          created_at: now,\n        },\n      ],\n    });\n    const pool = new FakePool(client) as any;\n    const repo = new ProvenanceRepo(pool);\n    const rows = await repo.by('incident', 'inc1', undefined, 10, 0, 'tenant-1');\n    expect(rows).toHaveLength(1);\n    expect(rows[0]).toMatchObject({ id: 'r1', kind: 'policy' });\n    expect(new Date(rows[0].createdAt).toISOString()).toBe(now.toISOString());\n    expect(rows[0].metadata.reasonCode).toBe('POLICY_DENY');\n  });\n\n  test('falls back to provenance table and maps fields', async () => {\n    const client = new FakeClient();\n    const now = new Date();\n    // Force errors on audit_events queries to trigger fallback\n    client.addResponse(/FROM audit_events .*target_type/, null, true);\n    client.addResponse(/FROM audit_events .*resource_type/, null, true);\n    client.addResponse(/FROM provenance /, {\n      rows: [\n        {\n          id: 'p1',\n          source: 'graphrag',\n          subject_type: 'investigation',\n          subject_id: 'inv1',\n          note: 'note1',\n          created_at: now,\n        },\n      ],\n    });\n    const pool = new FakePool(client) as any;\n    const repo = new ProvenanceRepo(pool);\n    const rows = await repo.by('investigation', 'inv1', undefined, 10, 0, 'tenant-1');\n    expect(rows).toHaveLength(1);\n    expect(rows[0]).toMatchObject({ id: 'p1', kind: 'graphrag' });\n    expect(new Date(rows[0].createdAt).toISOString()).toBe(now.toISOString());\n    expect(rows[0].metadata).toMatchObject({ note: 'note1' });\n  });\n});\n\ntest('includes filters in WHERE (contains + reasonCodeIn)', async () => {\n  const client = new FakeClient();\n  const now = new Date();\n  client.addResponse(/FROM audit_events .*target_type/, { rows: [] });\n  client.addResponse(/FROM audit_events .*resource_type/, {\n    rows: [\n      {\n        id: 'r2',\n        action: 'policy',\n        resource_type: 'investigation',\n        resource_id: 'inv1',\n        resource_data: { reasonCode: 'RATE_LIMIT' },\n        timestamp: now,\n      },\n    ],\n  });\n  const pool = new FakePool(client) as any;\n  const repo = new ProvenanceRepo(pool);\n  const rows = await repo.by(\n    'investigation',\n    'inv1',\n    { contains: 'policy', reasonCodeIn: ['RATE_LIMIT'] },\n    10,\n    0,\n    'tenant-1',\n  );\n  expect(rows.length).toBeGreaterThanOrEqual(0);\n  // Ensure SQL had ILIKE and reasonCode filter\n  expect(client.lastSql).toMatch(/ILIKE/);\n  expect(client.lastSql).toMatch(/metadata->>'reasonCode'/);\n});\n"],"version":3}