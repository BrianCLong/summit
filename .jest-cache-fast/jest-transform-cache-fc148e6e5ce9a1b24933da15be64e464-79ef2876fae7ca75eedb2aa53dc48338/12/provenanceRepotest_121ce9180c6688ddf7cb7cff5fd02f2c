abd28be3b2016ca31ab15e101847b59b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ProvenanceRepo_js_1 = require("../src/repos/ProvenanceRepo.js");
class FakeClient {
    responses = [];
    lastSql = '';
    addResponse(match, result, error = false) {
        this.responses.push({ match, result, error });
    }
    async query(sql, _params) {
        this.lastSql = sql;
        const hit = this.responses.find((r) => r.match.test(sql));
        if (!hit)
            throw new Error('no mock for sql');
        if (hit.error)
            throw new Error('forced error');
        return hit.result;
    }
    release() { }
}
class FakePool {
    client;
    constructor(client) {
        this.client = client;
    }
    async connect() {
        return this.client;
    }
}
describe('ProvenanceRepo', () => {
    test('maps classic audit_events rows', async () => {
        const client = new FakeClient();
        const now = new Date();
        client.addResponse(/FROM audit_events .*target_type/, {
            rows: [
                {
                    id: 'r1',
                    action: 'policy',
                    target_type: 'incident',
                    target_id: 'inc1',
                    metadata: { reasonCode: 'POLICY_DENY' },
                    created_at: now,
                },
            ],
        });
        const pool = new FakePool(client);
        const repo = new ProvenanceRepo_js_1.ProvenanceRepo(pool);
        const rows = await repo.by('incident', 'inc1', undefined, 10, 0, 'tenant-1');
        expect(rows).toHaveLength(1);
        expect(rows[0]).toMatchObject({ id: 'r1', kind: 'policy' });
        expect(new Date(rows[0].createdAt).toISOString()).toBe(now.toISOString());
        expect(rows[0].metadata.reasonCode).toBe('POLICY_DENY');
    });
    test('falls back to provenance table and maps fields', async () => {
        const client = new FakeClient();
        const now = new Date();
        // Force errors on audit_events queries to trigger fallback
        client.addResponse(/FROM audit_events .*target_type/, null, true);
        client.addResponse(/FROM audit_events .*resource_type/, null, true);
        client.addResponse(/FROM provenance /, {
            rows: [
                {
                    id: 'p1',
                    source: 'graphrag',
                    subject_type: 'investigation',
                    subject_id: 'inv1',
                    note: 'note1',
                    created_at: now,
                },
            ],
        });
        const pool = new FakePool(client);
        const repo = new ProvenanceRepo_js_1.ProvenanceRepo(pool);
        const rows = await repo.by('investigation', 'inv1', undefined, 10, 0, 'tenant-1');
        expect(rows).toHaveLength(1);
        expect(rows[0]).toMatchObject({ id: 'p1', kind: 'graphrag' });
        expect(new Date(rows[0].createdAt).toISOString()).toBe(now.toISOString());
        expect(rows[0].metadata).toMatchObject({ note: 'note1' });
    });
});
test('includes filters in WHERE (contains + reasonCodeIn)', async () => {
    const client = new FakeClient();
    const now = new Date();
    client.addResponse(/FROM audit_events .*target_type/, { rows: [] });
    client.addResponse(/FROM audit_events .*resource_type/, {
        rows: [
            {
                id: 'r2',
                action: 'policy',
                resource_type: 'investigation',
                resource_id: 'inv1',
                resource_data: { reasonCode: 'RATE_LIMIT' },
                timestamp: now,
            },
        ],
    });
    const pool = new FakePool(client);
    const repo = new ProvenanceRepo_js_1.ProvenanceRepo(pool);
    const rows = await repo.by('investigation', 'inv1', { contains: 'policy', reasonCodeIn: ['RATE_LIMIT'] }, 10, 0, 'tenant-1');
    expect(rows.length).toBeGreaterThanOrEqual(0);
    // Ensure SQL had ILIKE and reasonCode filter
    expect(client.lastSql).toMatch(/ILIKE/);
    expect(client.lastSql).toMatch(/metadata->>'reasonCode'/);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3NlcnZlci90ZXN0cy9wcm92ZW5hbmNlUmVwby50ZXN0LnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsc0VBQWdFO0FBRWhFLE1BQU0sVUFBVTtJQUNOLFNBQVMsR0FBMkQsRUFBRSxDQUFDO0lBQy9FLE9BQU8sR0FBRyxFQUFFLENBQUM7SUFDYixXQUFXLENBQUMsS0FBYSxFQUFFLE1BQVcsRUFBRSxLQUFLLEdBQUcsS0FBSztRQUNuRCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBQ0QsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFXLEVBQUUsT0FBYztRQUNyQyxJQUFJLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQztRQUNuQixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMxRCxJQUFJLENBQUMsR0FBRztZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUM3QyxJQUFJLEdBQUcsQ0FBQyxLQUFLO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUMvQyxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUM7SUFDcEIsQ0FBQztJQUNELE9BQU8sS0FBSSxDQUFDO0NBQ2I7QUFFRCxNQUFNLFFBQVE7SUFDWixNQUFNLENBQU07SUFDWixZQUFZLE1BQVc7UUFDckIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDdkIsQ0FBQztJQUNELEtBQUssQ0FBQyxPQUFPO1FBQ1gsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7Q0FDRjtBQUVELFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxH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Q0FDeEIsZUFBZSxFQUNmLE1BQU0sRUFDTixFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLENBQUMsWUFBWSxDQUFDLEVBQUUsRUFDcEQsRUFBRSxFQUNGLENBQUMsRUFDRCxVQUFVLENBQ1gsQ0FBQztJQUNGLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUMsNkNBQTZDO0lBQzdDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3hDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLHlCQUF5QixDQUFDLENBQUM7QUFDNUQsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3NlcnZlci90ZXN0cy9wcm92ZW5hbmNlUmVwby50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByb3ZlbmFuY2VSZXBvIH0gZnJvbSAnLi4vc3JjL3JlcG9zL1Byb3ZlbmFuY2VSZXBvLmpzJztcblxuY2xhc3MgRmFrZUNsaWVudCB7XG4gIHByaXZhdGUgcmVzcG9uc2VzOiBBcnJheTx7IG1hdGNoOiBSZWdFeHA7IHJlc3VsdDogYW55OyBlcnJvcj86IGJvb2xlYW4gfT4gPSBbXTtcbiAgbGFzdFNxbCA9ICcnO1xuICBhZGRSZXNwb25zZShtYXRjaDogUmVnRXhwLCByZXN1bHQ6IGFueSwgZXJyb3IgPSBmYWxzZSkge1xuICAgIHRoaXMucmVzcG9uc2VzLnB1c2goeyBtYXRjaCwgcmVzdWx0LCBlcnJvciB9KTtcbiAgfVxuICBhc3luYyBxdWVyeShzcWw6IHN0cmluZywgX3BhcmFtczogYW55W10pIHtcbiAgICB0aGlzLmxhc3RTcWwgPSBzcWw7XG4gICAgY29uc3QgaGl0ID0gdGhpcy5yZXNwb25zZXMuZmluZCgocikgPT4gci5tYXRjaC50ZXN0KHNxbCkpO1xuICAgIGlmICghaGl0KSB0aHJvdyBuZXcgRXJyb3IoJ25vIG1vY2sgZm9yIHNxbCcpO1xuICAgIGlmIChoaXQuZXJyb3IpIHRocm93IG5ldyBFcnJvcignZm9yY2VkIGVycm9yJyk7XG4gICAgcmV0dXJuIGhpdC5yZXN1bHQ7XG4gIH1cbiAgcmVsZWFzZSgpIHt9XG59XG5cbmNsYXNzIEZha2VQb29sIHtcbiAgY2xpZW50OiBhbnk7XG4gIGNvbnN0cnVjdG9yKGNsaWVudDogYW55KSB7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gIH1cbiAgYXN5bmMgY29ubmVjdCgpIHtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQ7XG4gIH1cbn1cblxuZGVzY3JpYmUoJ1Byb3ZlbmFuY2VSZXBvJywgKCkgPT4ge1xuICB0ZXN0KCdtYXBzIGNsYXNzaWMgYXVkaXRfZXZlbnRzIHJvd3MnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgY2xpZW50ID0gbmV3IEZha2VDbGllbnQoKTtcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgIGNsaWVudC5hZGRSZXNwb25zZSgvRlJPTSBhdWRpdF9ldmVudHMgLip0YXJnZXRfdHlwZS8sIHtcbiAgICAgIHJvd3M6IFtcbiAgICAgICAge1xuICAgICAgICAgIGlkOiAncjEnLFxuICAgICAgICAgIGFjdGlvbjogJ3BvbGljeScsXG4gICAgICAgICAgdGFyZ2V0X3R5cGU6ICdpbmNpZGVudCcsXG4gICAgICAgICAgdGFyZ2V0X2lkOiAnaW5jMScsXG4gICAgICAgICAgbWV0YWRhdGE6IHsgcmVhc29uQ29kZTogJ1BPTElDWV9ERU5ZJyB9LFxuICAgICAgICAgIGNyZWF0ZWRfYXQ6IG5vdyxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSk7XG4gICAgY29uc3QgcG9vbCA9IG5ldyBGYWtlUG9vbChjbGllbnQpIGFzIGFueTtcbiAgICBjb25zdCByZXBvID0gbmV3IFByb3ZlbmFuY2VSZXBvKHBvb2wpO1xuICAgIGNvbnN0IHJvd3MgPSBhd2FpdCByZXBvLmJ5KCdpbmNpZGVudCcsICdpbmMxJywgdW5kZWZpbmVkLCAxMCwgMCwgJ3RlbmFudC0xJyk7XG4gICAgZXhwZWN0KHJvd3MpLnRvSGF2ZUxlbmd0aCgxKTtcbiAgICBleHBlY3Qocm93c1swXSkudG9NYXRjaE9iamVjdCh7IGlkOiAncjEnLCBraW5kOiAncG9saWN5JyB9KTtcbiAgICBleHBlY3QobmV3IERhdGUocm93c1swXS5jcmVhdGVkQXQpLnRvSVNPU3RyaW5nKCkpLnRvQmUobm93LnRvSVNPU3RyaW5nKCkpO1xuICAgIGV4cGVjdChyb3dzWzBdLm1ldGFkYXRhLnJlYXNvbkNvZGUpLnRvQmUoJ1BPTElDWV9ERU5ZJyk7XG4gIH0pO1xuXG4gIHRlc3QoJ2ZhbGxzIGJhY2sgdG8gcHJvdmVuYW5jZSB0YWJsZSBhbmQgbWFwcyBmaWVsZHMnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgY2xpZW50ID0gbmV3IEZha2VDbGllbnQoKTtcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgIC8vIEZvcmNlIGVycm9ycyBvbiBhdWRpdF9ldmVudHMgcXVlcmllcyB0byB0cmlnZ2VyIGZhbGxiYWNrXG4gICAgY2xpZW50LmFkZFJlc3BvbnNlKC9GUk9NIGF1ZGl0X2V2ZW50cyAuKnRhcmdldF90eXBlLywgbnVsbCwgdHJ1ZSk7XG4gICAgY2xpZW50LmFkZFJlc3BvbnNlKC9GUk9NIGF1ZGl0X2V2ZW50cyAuKnJlc291cmNlX3R5cGUvLCBudWxsLCB0cnVlKTtcbiAgICBjbGllbnQuYWRkUmVzcG9uc2UoL0ZST00gcHJvdmVuYW5jZSAvLCB7XG4gICAgICByb3dzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogJ3AxJyxcbiAgICAgICAgICBzb3VyY2U6ICdncmFwaHJhZycsXG4gICAgICAgICAgc3ViamVjdF90eXBlOiAnaW52ZXN0aWdhdGlvbicsXG4gICAgICAgICAgc3ViamVjdF9pZDogJ2ludjEnLFxuICAgICAgICAgIG5vdGU6ICdub3RlMScsXG4gICAgICAgICAgY3JlYXRlZF9hdDogbm93LFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KTtcbiAgICBjb25zdCBwb29sID0gbmV3IEZha2VQb29sKGNsaWVudCkgYXMgYW55O1xuICAgIGNvbnN0IHJlcG8gPSBuZXcgUHJvdmVuYW5jZVJlcG8ocG9vbCk7XG4gICAgY29uc3Qgcm93cyA9IGF3YWl0IHJlcG8uYnkoJ2ludmVzdGlnYXRpb24nLCAnaW52MScsIHVuZGVmaW5lZCwgMTAsIDAsICd0ZW5hbnQtMScpO1xuICAgIGV4cGVjdChyb3dzKS50b0hhdmVMZW5ndGgoMSk7XG4gICAgZXhwZWN0KHJvd3NbMF0pLnRvTWF0Y2hPYmplY3QoeyBpZDogJ3AxJywga2luZDogJ2dyYXBocmFnJyB9KTtcbiAgICBleHBlY3QobmV3IERhdGUocm93c1swXS5jcmVhdGVkQXQpLnRvSVNPU3RyaW5nKCkpLnRvQmUobm93LnRvSVNPU3RyaW5nKCkpO1xuICAgIGV4cGVjdChyb3dzWzBdLm1ldGFkYXRhKS50b01hdGNoT2JqZWN0KHsgbm90ZTogJ25vdGUxJyB9KTtcbiAgfSk7XG59KTtcblxudGVzdCgnaW5jbHVkZXMgZmlsdGVycyBpbiBXSEVSRSAoY29udGFpbnMgKyByZWFzb25Db2RlSW4pJywgYXN5bmMgKCkgPT4ge1xuICBjb25zdCBjbGllbnQgPSBuZXcgRmFrZUNsaWVudCgpO1xuICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICBjbGllbnQuYWRkUmVzcG9uc2UoL0ZST00gYXVkaXRfZXZlbnRzIC4qdGFyZ2V0X3R5cGUvLCB7IHJvd3M6IFtdIH0pO1xuICBjbGllbnQuYWRkUmVzcG9uc2UoL0ZST00gYXVkaXRfZXZlbnRzIC4qcmVzb3VyY2VfdHlwZS8sIHtcbiAgICByb3dzOiBbXG4gICAgICB7XG4gICAgICAgIGlkOiAncjInLFxuICAgICAgICBhY3Rpb246ICdwb2xpY3knLFxuICAgICAgICByZXNvdXJjZV90eXBlOiAnaW52ZXN0aWdhdGlvbicsXG4gICAgICAgIHJlc291cmNlX2lkOiAnaW52MScsXG4gICAgICAgIHJlc291cmNlX2RhdGE6IHsgcmVhc29uQ29kZTogJ1JBVEVfTElNSVQnIH0sXG4gICAgICAgIHRpbWVzdGFtcDogbm93LFxuICAgICAgfSxcbiAgICBdLFxuICB9KTtcbiAgY29uc3QgcG9vbCA9IG5ldyBGYWtlUG9vbChjbGllbnQpIGFzIGFueTtcbiAgY29uc3QgcmVwbyA9IG5ldyBQcm92ZW5hbmNlUmVwbyhwb29sKTtcbiAgY29uc3Qgcm93cyA9IGF3YWl0IHJlcG8uYnkoXG4gICAgJ2ludmVzdGlnYXRpb24nLFxuICAgICdpbnYxJyxcbiAgICB7IGNvbnRhaW5zOiAncG9saWN5JywgcmVhc29uQ29kZUluOiBbJ1JBVEVfTElNSVQnXSB9LFxuICAgIDEwLFxuICAgIDAsXG4gICAgJ3RlbmFudC0xJyxcbiAgKTtcbiAgZXhwZWN0KHJvd3MubGVuZ3RoKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDApO1xuICAvLyBFbnN1cmUgU1FMIGhhZCBJTElLRSBhbmQgcmVhc29uQ29kZSBmaWx0ZXJcbiAgZXhwZWN0KGNsaWVudC5sYXN0U3FsKS50b01hdGNoKC9JTElLRS8pO1xuICBleHBlY3QoY2xpZW50Lmxhc3RTcWwpLnRvTWF0Y2goL21ldGFkYXRhLT4+J3JlYXNvbkNvZGUnLyk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==