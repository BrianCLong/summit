db1a5421650fef5b3d6b6b147ab9e094
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Minimal auth stub for tests
jest.mock('../src/middleware/auth', () => ({
    auth: () => (_req, _res, next) => next(),
}));
jest.mock('../src/middleware/rateLimit', () => ({
    rateLimit: () => (_req, _res, next) => next(),
}));
jest.mock('../src/db/audit', () => ({ logAssistantEvent: jest.fn().mockResolvedValue(undefined) }));
const express_1 = __importDefault(require("express"));
const body_parser_1 = __importDefault(require("body-parser"));
const supertest_1 = __importDefault(require("supertest"));
const assistant_1 = require("../src/routes/assistant");
const requestId_1 = require("../src/middleware/requestId");
function makeApp() {
    const app = (0, express_1.default)();
    app.use((0, requestId_1.requestId)());
    app.use(body_parser_1.default.json());
    (0, assistant_1.mountAssistant)(app);
    return app;
}
describe('POST /assistant/stream', () => {
    it('streams tokens and completes', async () => {
        const app = makeApp();
        const res = await (0, supertest_1.default)(app)
            .post('/assistant/stream')
            .send({ input: 'hello world' })
            .buffer(true) // collect body
            .parse((res, cb) => {
            // Accumulate chunks as text
            res.setEncoding('utf8');
            let data = '';
            res.on('data', (c) => (data += c));
            res.on('end', () => cb(null, data));
        });
        expect(res.status).toBe(200);
        expect(res.type).toMatch(/text\/plain/);
        expect(res.text.replace(/\s+/g, ' ')).toMatch(/I understand your query: hello world/);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3NlcnZlci90ZXN0cy9hc3Npc3RhbnQuc3RyZWFtLnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFNQSw4QkFBOEI7QUFDOUIsSUFBSSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ3pDLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLElBQVMsRUFBRSxJQUFTLEVBQUUsSUFBUyxFQUFFLEVBQUUsQ0FBQyxJQUFJLEVBQUU7Q0FDeEQsQ0FBQyxDQUFDLENBQUM7QUFDSixJQUFJLENBQUMsSUFBSSxDQUFDLDZCQUE2QixFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDOUMsU0FBUyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsSUFBUyxFQUFFLElBQVMsRUFBRSxJQUFTLEVBQUUsRUFBRSxDQUFDLElBQUksRUFBRTtDQUM3RCxDQUFDLENBQUMsQ0FBQztBQUNKLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLGlCQUFpQixFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQWJwRyxzREFBOEI7QUFDOUIsOERBQXFDO0FBQ3JDLDBEQUFnQztBQUNoQyx1REFBeUQ7QUFDekQsMkRBQXdEO0FBV3hELFNBQVMsT0FBTztJQUNkLE1BQU0sR0FBRyxHQUFHLElBQUEsaUJBQU8sR0FBRSxDQUFDO0lBQ3RCLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBQSxxQkFBUyxHQUFFLENBQUMsQ0FBQztJQUNyQixHQUFHLENBQUMsR0FBRyxDQUFDLHFCQUFVLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUMzQixJQUFBLDBCQUFjLEVBQUMsR0FBRyxDQUFDLENBQUM7SUFDcEIsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDO0FBRUQsUUFBUSxDQUFDLHdCQUF3QixFQUFFLEdBQUcsRUFBRTtJQUN0QyxFQUFFLENBQUMsOEJBQThCLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDNUMsTUFBTSxHQUFHLEdBQUcsT0FBTyxFQUFFLENBQUM7UUFDdEIsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFBLG1CQUFPLEVBQUMsR0FBRyxDQUFDO2FBQzNCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQzthQUN6QixJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLENBQUM7YUFDOUIsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLGVBQWU7YUFDNUIsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFO1lBQ2pCLDRCQUE0QjtZQUM1QixHQUFHLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3hCLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztZQUNkLEdBQUcsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzNDLEdBQUcsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUN0QyxDQUFDLENBQUMsQ0FBQztRQUVMLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzdCLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3hDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsc0NBQXNDLENBQUMsQ0FBQztJQUN4RixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9icmlhbmxvbmcvRGV2ZWxvcGVyL3N1bW1pdC9zZXJ2ZXIvdGVzdHMvYXNzaXN0YW50LnN0cmVhbS50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IGJvZHlQYXJzZXIgZnJvbSAnYm9keS1wYXJzZXInO1xuaW1wb3J0IHJlcXVlc3QgZnJvbSAnc3VwZXJ0ZXN0JztcbmltcG9ydCB7IG1vdW50QXNzaXN0YW50IH0gZnJvbSAnLi4vc3JjL3JvdXRlcy9hc3Npc3RhbnQnO1xuaW1wb3J0IHsgcmVxdWVzdElkIH0gZnJvbSAnLi4vc3JjL21pZGRsZXdhcmUvcmVxdWVzdElkJztcblxuLy8gTWluaW1hbCBhdXRoIHN0dWIgZm9yIHRlc3RzXG5qZXN0Lm1vY2soJy4uL3NyYy9taWRkbGV3YXJlL2F1dGgnLCAoKSA9PiAoe1xuICBhdXRoOiAoKSA9PiAoX3JlcTogYW55LCBfcmVzOiBhbnksIG5leHQ6IGFueSkgPT4gbmV4dCgpLFxufSkpO1xuamVzdC5tb2NrKCcuLi9zcmMvbWlkZGxld2FyZS9yYXRlTGltaXQnLCAoKSA9PiAoe1xuICByYXRlTGltaXQ6ICgpID0+IChfcmVxOiBhbnksIF9yZXM6IGFueSwgbmV4dDogYW55KSA9PiBuZXh0KCksXG59KSk7XG5qZXN0Lm1vY2soJy4uL3NyYy9kYi9hdWRpdCcsICgpID0+ICh7IGxvZ0Fzc2lzdGFudEV2ZW50OiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKSB9KSk7XG5cbmZ1bmN0aW9uIG1ha2VBcHAoKSB7XG4gIGNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcbiAgYXBwLnVzZShyZXF1ZXN0SWQoKSk7XG4gIGFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpO1xuICBtb3VudEFzc2lzdGFudChhcHApO1xuICByZXR1cm4gYXBwO1xufVxuXG5kZXNjcmliZSgnUE9TVCAvYXNzaXN0YW50L3N0cmVhbScsICgpID0+IHtcbiAgaXQoJ3N0cmVhbXMgdG9rZW5zIGFuZCBjb21wbGV0ZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgYXBwID0gbWFrZUFwcCgpO1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgLnBvc3QoJy9hc3Npc3RhbnQvc3RyZWFtJylcbiAgICAgIC5zZW5kKHsgaW5wdXQ6ICdoZWxsbyB3b3JsZCcgfSlcbiAgICAgIC5idWZmZXIodHJ1ZSkgLy8gY29sbGVjdCBib2R5XG4gICAgICAucGFyc2UoKHJlcywgY2IpID0+IHtcbiAgICAgICAgLy8gQWNjdW11bGF0ZSBjaHVua3MgYXMgdGV4dFxuICAgICAgICByZXMuc2V0RW5jb2RpbmcoJ3V0ZjgnKTtcbiAgICAgICAgbGV0IGRhdGEgPSAnJztcbiAgICAgICAgcmVzLm9uKCdkYXRhJywgKGM6IHN0cmluZykgPT4gKGRhdGEgKz0gYykpO1xuICAgICAgICByZXMub24oJ2VuZCcsICgpID0+IGNiKG51bGwsIGRhdGEpKTtcbiAgICAgIH0pO1xuXG4gICAgZXhwZWN0KHJlcy5zdGF0dXMpLnRvQmUoMjAwKTtcbiAgICBleHBlY3QocmVzLnR5cGUpLnRvTWF0Y2goL3RleHRcXC9wbGFpbi8pO1xuICAgIGV4cGVjdChyZXMudGV4dC5yZXBsYWNlKC9cXHMrL2csICcgJykpLnRvTWF0Y2goL0kgdW5kZXJzdGFuZCB5b3VyIHF1ZXJ5OiBoZWxsbyB3b3JsZC8pO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9