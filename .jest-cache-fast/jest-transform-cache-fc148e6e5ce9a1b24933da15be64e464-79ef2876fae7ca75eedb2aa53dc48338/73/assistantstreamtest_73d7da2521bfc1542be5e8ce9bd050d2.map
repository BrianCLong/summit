{"file":"/Users/brianlong/Developer/summit/server/tests/assistant.stream.test.ts","mappings":";;;;;AAMA,8BAA8B;AAC9B,IAAI,CAAC,IAAI,CAAC,wBAAwB,EAAE,GAAG,EAAE,CAAC,CAAC;IACzC,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC,IAAS,EAAE,IAAS,EAAE,IAAS,EAAE,EAAE,CAAC,IAAI,EAAE;CACxD,CAAC,CAAC,CAAC;AACJ,IAAI,CAAC,IAAI,CAAC,6BAA6B,EAAE,GAAG,EAAE,CAAC,CAAC;IAC9C,SAAS,EAAE,GAAG,EAAE,CAAC,CAAC,IAAS,EAAE,IAAS,EAAE,IAAS,EAAE,EAAE,CAAC,IAAI,EAAE;CAC7D,CAAC,CAAC,CAAC;AACJ,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,iBAAiB,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;AAbpG,sDAA8B;AAC9B,8DAAqC;AACrC,0DAAgC;AAChC,uDAAyD;AACzD,2DAAwD;AAWxD,SAAS,OAAO;IACd,MAAM,GAAG,GAAG,IAAA,iBAAO,GAAE,CAAC;IACtB,GAAG,CAAC,GAAG,CAAC,IAAA,qBAAS,GAAE,CAAC,CAAC;IACrB,GAAG,CAAC,GAAG,CAAC,qBAAU,CAAC,IAAI,EAAE,CAAC,CAAC;IAC3B,IAAA,0BAAc,EAAC,GAAG,CAAC,CAAC;IACpB,OAAO,GAAG,CAAC;AACb,CAAC;AAED,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;IACtC,EAAE,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;QAC5C,MAAM,GAAG,GAAG,OAAO,EAAE,CAAC;QACtB,MAAM,GAAG,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;aAC3B,IAAI,CAAC,mBAAmB,CAAC;aACzB,IAAI,CAAC,EAAE,KAAK,EAAE,aAAa,EAAE,CAAC;aAC9B,MAAM,CAAC,IAAI,CAAC,CAAC,eAAe;aAC5B,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE;YACjB,4BAA4B;YAC5B,GAAG,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;YACxB,IAAI,IAAI,GAAG,EAAE,CAAC;YACd,GAAG,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,CAAS,EAAE,EAAE,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC;YAC3C,GAAG,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEL,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC7B,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QACxC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,sCAAsC,CAAC,CAAC;IACxF,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/server/tests/assistant.stream.test.ts"],"sourcesContent":["import express from 'express';\nimport bodyParser from 'body-parser';\nimport request from 'supertest';\nimport { mountAssistant } from '../src/routes/assistant';\nimport { requestId } from '../src/middleware/requestId';\n\n// Minimal auth stub for tests\njest.mock('../src/middleware/auth', () => ({\n  auth: () => (_req: any, _res: any, next: any) => next(),\n}));\njest.mock('../src/middleware/rateLimit', () => ({\n  rateLimit: () => (_req: any, _res: any, next: any) => next(),\n}));\njest.mock('../src/db/audit', () => ({ logAssistantEvent: jest.fn().mockResolvedValue(undefined) }));\n\nfunction makeApp() {\n  const app = express();\n  app.use(requestId());\n  app.use(bodyParser.json());\n  mountAssistant(app);\n  return app;\n}\n\ndescribe('POST /assistant/stream', () => {\n  it('streams tokens and completes', async () => {\n    const app = makeApp();\n    const res = await request(app)\n      .post('/assistant/stream')\n      .send({ input: 'hello world' })\n      .buffer(true) // collect body\n      .parse((res, cb) => {\n        // Accumulate chunks as text\n        res.setEncoding('utf8');\n        let data = '';\n        res.on('data', (c: string) => (data += c));\n        res.on('end', () => cb(null, data));\n      });\n\n    expect(res.status).toBe(200);\n    expect(res.type).toMatch(/text\\/plain/);\n    expect(res.text.replace(/\\s+/g, ' ')).toMatch(/I understand your query: hello world/);\n  });\n});\n"],"version":3}