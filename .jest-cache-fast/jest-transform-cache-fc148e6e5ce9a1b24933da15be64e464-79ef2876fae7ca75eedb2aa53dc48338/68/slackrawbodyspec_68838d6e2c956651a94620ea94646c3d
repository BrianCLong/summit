c5f4c146e20e748cfd727c02033dd2c3
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const supertest_1 = __importDefault(require("supertest"));
const express_1 = __importDefault(require("express"));
const crypto_1 = __importDefault(require("crypto"));
const slack_1 = __importDefault(require("../src/routes/slack"));
describe('Slack raw-body route', () => {
    const app = (0, express_1.default)();
    app.use('/', slack_1.default);
    const HAS_SECRET = !!process.env.SLACK_SIGNING_SECRET;
    (HAS_SECRET ? it : it.skip)('accepts raw payload with valid signature', async () => {
        const bodyObj = { type: 'url_verification' };
        const raw = Buffer.from(JSON.stringify(bodyObj), 'utf8');
        const ts = Math.floor(Date.now() / 1000).toString();
        const base = `v0:${ts}:${raw.toString()}`;
        const hmac = crypto_1.default.createHmac('sha256', process.env.SLACK_SIGNING_SECRET).update(base).digest('hex');
        const sig = `v0=${hmac}`;
        const res = await (0, supertest_1.default)(app)
            .post('/webhooks/slack')
            .set('Content-Type', 'application/json')
            .set('x-slack-request-timestamp', ts)
            .set('x-slack-signature', sig)
            .send(raw);
        expect([200, 204, 503]).toContain(res.status);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3NlcnZlci90ZXN0cy9zbGFjay1yYXctYm9keS5zcGVjLnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsMERBQWdDO0FBQ2hDLHNEQUE4QjtBQUM5QixvREFBNEI7QUFDNUIsZ0VBQThDO0FBRTlDLFFBQVEsQ0FBQyxzQkFBc0IsRUFBRSxHQUFHLEVBQUU7SUFDcEMsTUFBTSxHQUFHLEdBQUcsSUFBQSxpQkFBTyxHQUFFLENBQUM7SUFDdEIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsZUFBVyxDQUFDLENBQUM7SUFFMUIsTUFBTSxVQUFVLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUM7SUFDdEQsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLDBDQUEwQyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ2pGLE1BQU0sT0FBTyxHQUFHLEVBQUUsSUFBSSxFQUFFLGtCQUFrQixFQUFFLENBQUM7UUFDN0MsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3pELE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3BELE1BQU0sSUFBSSxHQUFHLE1BQU0sRUFBRSxJQUFJLEdBQUcsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDO1FBQzFDLE1BQU0sSUFBSSxHQUFHLGdCQUFNLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUE4QixDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNoSCxNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUksRUFBRSxDQUFDO1FBRXpCLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBQSxtQkFBTyxFQUFDLEdBQUcsQ0FBQzthQUMzQixJQUFJLENBQUMsaUJBQWlCLENBQUM7YUFDdkIsR0FBRyxDQUFDLGNBQWMsRUFBRSxrQkFBa0IsQ0FBQzthQUN2QyxHQUFHLENBQUMsMkJBQTJCLEVBQUUsRUFBRSxDQUFDO2FBQ3BDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLENBQUM7YUFDN0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRWIsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDaEQsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvYnJpYW5sb25nL0RldmVsb3Blci9zdW1taXQvc2VydmVyL3Rlc3RzL3NsYWNrLXJhdy1ib2R5LnNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJlcXVlc3QgZnJvbSAnc3VwZXJ0ZXN0JztcbmltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IGNyeXB0byBmcm9tICdjcnlwdG8nO1xuaW1wb3J0IHNsYWNrUm91dGVyIGZyb20gJy4uL3NyYy9yb3V0ZXMvc2xhY2snO1xuXG5kZXNjcmliZSgnU2xhY2sgcmF3LWJvZHkgcm91dGUnLCAoKSA9PiB7XG4gIGNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcbiAgYXBwLnVzZSgnLycsIHNsYWNrUm91dGVyKTtcblxuICBjb25zdCBIQVNfU0VDUkVUID0gISFwcm9jZXNzLmVudi5TTEFDS19TSUdOSU5HX1NFQ1JFVDtcbiAgKEhBU19TRUNSRVQgPyBpdCA6IGl0LnNraXApKCdhY2NlcHRzIHJhdyBwYXlsb2FkIHdpdGggdmFsaWQgc2lnbmF0dXJlJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGJvZHlPYmogPSB7IHR5cGU6ICd1cmxfdmVyaWZpY2F0aW9uJyB9O1xuICAgIGNvbnN0IHJhdyA9IEJ1ZmZlci5mcm9tKEpTT04uc3RyaW5naWZ5KGJvZHlPYmopLCAndXRmOCcpO1xuICAgIGNvbnN0IHRzID0gTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCkudG9TdHJpbmcoKTtcbiAgICBjb25zdCBiYXNlID0gYHYwOiR7dHN9OiR7cmF3LnRvU3RyaW5nKCl9YDtcbiAgICBjb25zdCBobWFjID0gY3J5cHRvLmNyZWF0ZUhtYWMoJ3NoYTI1NicsIHByb2Nlc3MuZW52LlNMQUNLX1NJR05JTkdfU0VDUkVUIGFzIHN0cmluZykudXBkYXRlKGJhc2UpLmRpZ2VzdCgnaGV4Jyk7XG4gICAgY29uc3Qgc2lnID0gYHYwPSR7aG1hY31gO1xuXG4gICAgY29uc3QgcmVzID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAucG9zdCgnL3dlYmhvb2tzL3NsYWNrJylcbiAgICAgIC5zZXQoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi9qc29uJylcbiAgICAgIC5zZXQoJ3gtc2xhY2stcmVxdWVzdC10aW1lc3RhbXAnLCB0cylcbiAgICAgIC5zZXQoJ3gtc2xhY2stc2lnbmF0dXJlJywgc2lnKVxuICAgICAgLnNlbmQocmF3KTtcblxuICAgIGV4cGVjdChbMjAwLCAyMDQsIDUwM10pLnRvQ29udGFpbihyZXMuc3RhdHVzKTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==