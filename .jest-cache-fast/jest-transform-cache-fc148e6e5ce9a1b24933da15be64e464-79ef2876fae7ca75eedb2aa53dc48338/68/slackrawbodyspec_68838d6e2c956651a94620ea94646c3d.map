{"file":"/Users/brianlong/Developer/summit/server/tests/slack-raw-body.spec.ts","mappings":";;;;;AAAA,0DAAgC;AAChC,sDAA8B;AAC9B,oDAA4B;AAC5B,gEAA8C;AAE9C,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;IACpC,MAAM,GAAG,GAAG,IAAA,iBAAO,GAAE,CAAC;IACtB,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,eAAW,CAAC,CAAC;IAE1B,MAAM,UAAU,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC;IACtD,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;QACjF,MAAM,OAAO,GAAG,EAAE,IAAI,EAAE,kBAAkB,EAAE,CAAC;QAC7C,MAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,MAAM,CAAC,CAAC;QACzD,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,QAAQ,EAAE,CAAC;QACpD,MAAM,IAAI,GAAG,MAAM,EAAE,IAAI,GAAG,CAAC,QAAQ,EAAE,EAAE,CAAC;QAC1C,MAAM,IAAI,GAAG,gBAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,oBAA8B,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAChH,MAAM,GAAG,GAAG,MAAM,IAAI,EAAE,CAAC;QAEzB,MAAM,GAAG,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;aAC3B,IAAI,CAAC,iBAAiB,CAAC;aACvB,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;aACvC,GAAG,CAAC,2BAA2B,EAAE,EAAE,CAAC;aACpC,GAAG,CAAC,mBAAmB,EAAE,GAAG,CAAC;aAC7B,IAAI,CAAC,GAAG,CAAC,CAAC;QAEb,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/server/tests/slack-raw-body.spec.ts"],"sourcesContent":["import request from 'supertest';\nimport express from 'express';\nimport crypto from 'crypto';\nimport slackRouter from '../src/routes/slack';\n\ndescribe('Slack raw-body route', () => {\n  const app = express();\n  app.use('/', slackRouter);\n\n  const HAS_SECRET = !!process.env.SLACK_SIGNING_SECRET;\n  (HAS_SECRET ? it : it.skip)('accepts raw payload with valid signature', async () => {\n    const bodyObj = { type: 'url_verification' };\n    const raw = Buffer.from(JSON.stringify(bodyObj), 'utf8');\n    const ts = Math.floor(Date.now() / 1000).toString();\n    const base = `v0:${ts}:${raw.toString()}`;\n    const hmac = crypto.createHmac('sha256', process.env.SLACK_SIGNING_SECRET as string).update(base).digest('hex');\n    const sig = `v0=${hmac}`;\n\n    const res = await request(app)\n      .post('/webhooks/slack')\n      .set('Content-Type', 'application/json')\n      .set('x-slack-request-timestamp', ts)\n      .set('x-slack-signature', sig)\n      .send(raw);\n\n    expect([200, 204, 503]).toContain(res.status);\n  });\n});\n"],"version":3}