{"file":"/Users/brianlong/Developer/summit/server/src/services/LLMAnalystService.ts","mappings":";;;;;;AAAA,+BAAkC;AAClC,oEAAyC;AAUzC;;;;;GAKG;AACH,MAAa,iBAAiB;IACpB,GAAG,CAAa;IAChB,QAAQ,CAAgC;IAEhD,YAAY,aAAyB,IAAI,uBAAU,EAAE;QACnD,IAAI,CAAC,GAAG,GAAG,UAAU,CAAC;QACtB,IAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,EAAE,CAAC;IAC5B,CAAC;IAEO,KAAK,CAAC,QAAQ,CACpB,IAA8B,EAC9B,MAAc;QAEd,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC;YACtC,MAAM;YACN,SAAS,EAAE,GAAG;YACd,WAAW,EAAE,GAAG;SACjB,CAAC,CAAC;QAEH,MAAM,OAAO,GAAqB;YAChC,EAAE,EAAE,IAAA,SAAI,GAAE;YACV,IAAI;YACJ,OAAO;YACP,MAAM,EAAE,SAAS;YACjB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,CAAC;QAEF,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;QACvC,OAAO,OAAO,CAAC;IACjB,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,qBAAqB,CAAC,UAAe,EAAE,WAAgB;QAC3D,MAAM,MAAM,GAAG,4JAA4J,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,sBAAsB,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,cAAc,CAAC;QAErQ,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;IAC1C,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,cAAc,CAAC,UAAe,EAAE,WAAgB;QACpD,MAAM,MAAM,GAAG,qLAAqL,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,sBAAsB,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,aAAa,CAAC;QAE7R,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IACzC,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,2BAA2B,CAAC,UAAe,EAAE,WAAgB;QACjE,MAAM,MAAM,GAAG,6JAA6J,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,sBAAsB,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,sBAAsB,CAAC;QAE9Q,OAAO,IAAI,CAAC,QAAQ,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC;IAChD,CAAC;IAED;;OAEG;IACH,cAAc,CAAC,EAAU;QACvB,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QACtC,IAAI,CAAC,OAAO;YAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;QACnD,OAAO,CAAC,MAAM,GAAG,UAAU,CAAC;QAC5B,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;QAC/B,OAAO,OAAO,CAAC;IACjB,CAAC;IAED;;OAEG;IACH,WAAW;QACT,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,CAC9C,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,SAAS,CAC9B,CAAC;IACJ,CAAC;CACF;AA7ED,8CA6EC;AAEY,QAAA,iBAAiB,GAAG,IAAI,iBAAiB,EAAE,CAAC;AACzD,kBAAe,iBAAiB,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/server/src/services/LLMAnalystService.ts"],"sourcesContent":["import { v4 as uuid } from \"uuid\";\nimport LLMService from \"./LLMService.js\";\n\nexport interface GeneratedProduct {\n  id: string;\n  type: \"summary\" | \"report\" | \"investigation\";\n  content: string;\n  status: \"PENDING\" | \"APPROVED\";\n  createdAt: string;\n}\n\n/**\n * Prototype service where LLMs assist analysts with intelligence products.\n * Provides summarization, report generation and investigation suggestions\n * based on graph state and threat models. Every product requires explicit\n * analyst approval before it is considered final.\n */\nexport class LLMAnalystService {\n  private llm: LLMService;\n  private products: Map<string, GeneratedProduct>;\n\n  constructor(llmService: LLMService = new LLMService()) {\n    this.llm = llmService;\n    this.products = new Map();\n  }\n\n  private async generate(\n    type: GeneratedProduct[\"type\"],\n    prompt: string,\n  ): Promise<GeneratedProduct> {\n    const content = await this.llm.complete({\n      prompt,\n      maxTokens: 800,\n      temperature: 0.2,\n    });\n\n    const product: GeneratedProduct = {\n      id: uuid(),\n      type,\n      content,\n      status: \"PENDING\",\n      createdAt: new Date().toISOString(),\n    };\n\n    this.products.set(product.id, product);\n    return product;\n  }\n\n  /**\n   * Summarize current intelligence graph.\n   */\n  async summarizeIntelligence(graphState: any, threatModel: any) {\n    const prompt = `You are an intelligence analyst assistant. Summarize key insights from the following graph state and threat model in 3-4 bullet points.\\n\\nGraph State:\\n${JSON.stringify(graphState)}\\n\\nThreat Model:\\n${JSON.stringify(threatModel)}\\n\\nSummary:`;\n\n    return this.generate(\"summary\", prompt);\n  }\n\n  /**\n   * Draft a full report with findings and actions.\n   */\n  async generateReport(graphState: any, threatModel: any) {\n    const prompt = `You are an intelligence analyst assistant. Create a concise analytical report based on the graph state and threat model. Include findings and potential actions.\\n\\nGraph State:\\n${JSON.stringify(graphState)}\\n\\nThreat Model:\\n${JSON.stringify(threatModel)}\\n\\nReport:`;\n\n    return this.generate(\"report\", prompt);\n  }\n\n  /**\n   * Recommend investigation paths for analysts.\n   */\n  async recommendInvestigationPaths(graphState: any, threatModel: any) {\n    const prompt = `You are assisting investigators. Using the graph state and threat model, suggest the next best investigation paths with brief rationale.\\n\\nGraph State:\\n${JSON.stringify(graphState)}\\n\\nThreat Model:\\n${JSON.stringify(threatModel)}\\n\\nRecommendations:`;\n\n    return this.generate(\"investigation\", prompt);\n  }\n\n  /**\n   * Mark a generated product as approved by an analyst.\n   */\n  approveProduct(id: string) {\n    const product = this.products.get(id);\n    if (!product) throw new Error(\"Product not found\");\n    product.status = \"APPROVED\";\n    this.products.set(id, product);\n    return product;\n  }\n\n  /**\n   * List products awaiting analyst approval.\n   */\n  listPending() {\n    return Array.from(this.products.values()).filter(\n      (p) => p.status === \"PENDING\",\n    );\n  }\n}\n\nexport const llmAnalystService = new LLMAnalystService();\nexport default LLMAnalystService;\n"],"version":3}