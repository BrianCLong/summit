5803a576947609fab1d9c5dcffc28cb3
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toGitHub = toGitHub;
function toGitHub(flow) {
    const jobs = {};
    flow.nodes.forEach(n => {
        const steps = (n.type === "build") ? [
            { uses: "actions/checkout@v4" },
            { uses: ".github/actions/setup-turbo" },
            { run: "pnpm turbo run build --filter=...[HEAD^]" }
        ] :
            (n.type === "test") ? [
                { run: "node tools/ci/tia_select.ts" },
                { run: "npx jest --ci --runTestsByPath $(cat tia-tests.txt)" }
            ] :
                (n.type === "deploy") ? [
                    { uses: ".github/actions/docker-build-push", with: { image: "ghcr.io/${{ github.repository }}/maestro", context: ".", tags: "ghcr.io/${{ github.repository }}/maestro:${{ github.sha }}" } },
                    { uses: ".github/actions/helm-deploy", with: { chart: "charts/maestro", namespace: "maestro" } }
                ] : [{ run: "echo custom" }];
        jobs[n.id] = { "runs-on": "ubuntu-latest", steps };
    });
    // add needs from edges
    flow.edges.forEach(e => { jobs[e.to].needs = [...new Set([...(jobs[e.to].needs || []), e.from])]; });
    return { name: flow.name, on: flow.triggers, jobs };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3BhY2thZ2VzL21hZXN0cm9mbG93L3NyYy90cmFuc3BpbGUvZ2l0aHViLnRzIiwibWFwcGluZ3MiOiI7O0FBQ0EsNEJBcUJDO0FBckJELFNBQWdCLFFBQVEsQ0FBQyxJQUFTO0lBQ2hDLE1BQU0sSUFBSSxHQUFPLEVBQUUsQ0FBQztJQUNwQixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUEsRUFBRTtRQUNwQixNQUFNLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUcsT0FBTyxDQUFDLENBQUEsQ0FBQyxDQUFBO1lBQy9CLEVBQUUsSUFBSSxFQUFFLHFCQUFxQixFQUFFO1lBQy9CLEVBQUUsSUFBSSxFQUFFLDZCQUE2QixFQUFFO1lBQ3ZDLEVBQUUsR0FBRyxFQUFFLDBDQUEwQyxFQUFFO1NBQ3BELENBQUEsQ0FBQztZQUNGLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBRyxNQUFNLENBQUMsQ0FBQSxDQUFDLENBQUE7Z0JBQ2hCLEVBQUUsR0FBRyxFQUFFLDZCQUE2QixFQUFFO2dCQUN0QyxFQUFFLEdBQUcsRUFBRSxxREFBcUQsRUFBRTthQUMvRCxDQUFBLENBQUM7Z0JBQ0YsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFHLFFBQVEsQ0FBQyxDQUFBLENBQUMsQ0FBQTtvQkFDbEIsRUFBRSxJQUFJLEVBQUUsbUNBQW1DLEVBQUUsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLDBDQUEwQyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLDREQUE0RCxFQUFFLEVBQUU7b0JBQzVMLEVBQUUsSUFBSSxFQUFFLDZCQUE2QixFQUFFLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxnQkFBZ0IsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLEVBQUU7aUJBQ2pHLENBQUEsQ0FBQyxDQUFBLENBQUMsRUFBRSxHQUFHLEVBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQztRQUMxQixJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsU0FBUyxFQUFDLGVBQWUsRUFBRSxLQUFLLEVBQUUsQ0FBQztJQUNwRCxDQUFDLENBQUMsQ0FBQztJQUNILHVCQUF1QjtJQUN2QixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUEsRUFBRSxHQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssSUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakcsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDO0FBQ3RELENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3BhY2thZ2VzL21hZXN0cm9mbG93L3NyYy90cmFuc3BpbGUvZ2l0aHViLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZsb3cgfSBmcm9tIFwiLi90eXBlc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHRvR2l0SHViKGZsb3c6Rmxvdyl7XG4gIGNvbnN0IGpvYnM6YW55ID0ge307XG4gIGZsb3cubm9kZXMuZm9yRWFjaChuPT57XG4gICAgY29uc3Qgc3RlcHMgPSAobi50eXBlPT09XCJidWlsZFwiKT9bXG4gICAgICB7IHVzZXM6IFwiYWN0aW9ucy9jaGVja291dEB2NFwiIH0sXG4gICAgICB7IHVzZXM6IFwiLmdpdGh1Yi9hY3Rpb25zL3NldHVwLXR1cmJvXCIgfSxcbiAgICAgIHsgcnVuOiBcInBucG0gdHVyYm8gcnVuIGJ1aWxkIC0tZmlsdGVyPS4uLltIRUFEXl1cIiB9XG4gICAgXTpcbiAgICAobi50eXBlPT09XCJ0ZXN0XCIpP1tcbiAgICAgIHsgcnVuOiBcIm5vZGUgdG9vbHMvY2kvdGlhX3NlbGVjdC50c1wiIH0sXG4gICAgICB7IHJ1bjogXCJucHggamVzdCAtLWNpIC0tcnVuVGVzdHNCeVBhdGggJChjYXQgdGlhLXRlc3RzLnR4dClcIiB9XG4gICAgXTpcbiAgICAobi50eXBlPT09XCJkZXBsb3lcIik/W1xuICAgICAgeyB1c2VzOiBcIi5naXRodWIvYWN0aW9ucy9kb2NrZXItYnVpbGQtcHVzaFwiLCB3aXRoOiB7IGltYWdlOiBcImdoY3IuaW8vJHt7IGdpdGh1Yi5yZXBvc2l0b3J5IH19L21hZXN0cm9cIiwgY29udGV4dDogXCIuXCIsIHRhZ3M6IFwiZ2hjci5pby8ke3sgZ2l0aHViLnJlcG9zaXRvcnkgfX0vbWFlc3Rybzoke3sgZ2l0aHViLnNoYSB9fVwiIH0gfSxcbiAgICAgIHsgdXNlczogXCIuZ2l0aHViL2FjdGlvbnMvaGVsbS1kZXBsb3lcIiwgd2l0aDogeyBjaGFydDogXCJjaGFydHMvbWFlc3Ryb1wiLCBuYW1lc3BhY2U6IFwibWFlc3Ryb1wiIH0gfVxuICAgIF06W3sgcnVuOlwiZWNobyBjdXN0b21cIiB9XTtcbiAgICBqb2JzW24uaWRdID0geyBcInJ1bnMtb25cIjpcInVidW50dS1sYXRlc3RcIiwgc3RlcHMgfTtcbiAgfSk7XG4gIC8vIGFkZCBuZWVkcyBmcm9tIGVkZ2VzXG4gIGZsb3cuZWRnZXMuZm9yRWFjaChlPT57IGpvYnNbZS50b10ubmVlZHMgPSBbLi4ubmV3IFNldChbLi4uKGpvYnNbZS50b10ubmVlZHN8fFtdKSwgZS5mcm9tXSldOyB9KTtcbiAgcmV0dXJuIHsgbmFtZTogZmxvdy5uYW1lLCBvbjogZmxvdy50cmlnZ2Vycywgam9icyB9O1xufSJdLCJ2ZXJzaW9uIjozfQ==