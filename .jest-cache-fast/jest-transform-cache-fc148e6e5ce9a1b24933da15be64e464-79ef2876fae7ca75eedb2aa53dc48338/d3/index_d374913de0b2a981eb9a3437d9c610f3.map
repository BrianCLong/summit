{"file":"/Users/brianlong/Developer/summit/server/src/conductor/router/index.ts","mappings":"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","names":[],"sources":["/Users/brianlong/Developer/summit/server/src/conductor/router/index.ts"],"sourcesContent":["// System-level Mixture-of-Experts Router\n// Routes tasks to the optimal expert based on task characteristics and constraints\n\nimport {\n  ConductInput,\n  RouteDecision,\n  ExpertType,\n  RoutingFeatures,\n  ExpertCapabilities,\n} from '../types';\n\nexport class MoERouter {\n  private expertCapabilities: Record<ExpertType, ExpertCapabilities>;\n  private routingHistory: Map<string, RouteDecision> = new Map();\n\n  constructor() {\n    this.expertCapabilities = {\n      LLM_LIGHT: {\n        type: 'LLM_LIGHT',\n        costPerToken: 0.0001,\n        avgLatencyMs: 800,\n        maxTokens: 2000,\n        supportedModalities: ['text'],\n        securityLevel: 'low',\n        description: 'Fast, lightweight language model for simple queries',\n      },\n      LLM_HEAVY: {\n        type: 'LLM_HEAVY',\n        costPerToken: 0.001,\n        avgLatencyMs: 3000,\n        maxTokens: 8000,\n        supportedModalities: ['text', 'reasoning'],\n        securityLevel: 'medium',\n        description: 'Powerful language model with MoE architecture for complex tasks',\n      },\n      GRAPH_TOOL: {\n        type: 'GRAPH_TOOL',\n        costPerToken: 0.0001,\n        avgLatencyMs: 500,\n        maxTokens: 10000,\n        supportedModalities: ['cypher', 'graph-analysis'],\n        securityLevel: 'high',\n        description: 'Neo4j graph operations via MCP',\n      },\n      RAG_TOOL: {\n        type: 'RAG_TOOL',\n        costPerToken: 0.0005,\n        avgLatencyMs: 1200,\n        maxTokens: 4000,\n        supportedModalities: ['text', 'retrieval'],\n        securityLevel: 'medium',\n        description: 'Retrieval-augmented generation for contextual answers',\n      },\n      FILES_TOOL: {\n        type: 'FILES_TOOL',\n        costPerToken: 0.0002,\n        avgLatencyMs: 600,\n        maxTokens: 5000,\n        supportedModalities: ['files', 'documents'],\n        securityLevel: 'high',\n        description: 'File operations with policy controls via MCP',\n      },\n      OSINT_TOOL: {\n        type: 'OSINT_TOOL',\n        costPerToken: 0.0003,\n        avgLatencyMs: 2000,\n        maxTokens: 3000,\n        supportedModalities: ['web', 'osint'],\n        securityLevel: 'medium',\n        description: 'Open source intelligence gathering via MCP',\n      },\n      EXPORT_TOOL: {\n        type: 'EXPORT_TOOL',\n        costPerToken: 0.0001,\n        avgLatencyMs: 1000,\n        maxTokens: 10000,\n        supportedModalities: ['export', 'documents'],\n        securityLevel: 'high',\n        description: 'Export operations for reports and case files',\n      },\n    };\n  }\n\n  /**\n   * Route a task to the best expert based on task characteristics\n   */\n  public route(input: ConductInput): RouteDecision {\n    const features = this.extractFeatures(input);\n    const candidates = this.getCandidateExperts(features);\n    const selected = this.selectBestExpert(candidates, features);\n\n    const decision: RouteDecision = {\n      expert: selected.expert,\n      reason: selected.reason,\n      confidence: selected.confidence,\n      features: features,\n      alternatives: candidates.filter((c) => c !== selected.expert),\n    };\n\n    // Store for learning and metrics\n    this.routingHistory.set(this.generateTaskKey(input), decision);\n\n    return decision;\n  }\n\n  /**\n   * Extract routing features from the input task\n   */\n  private extractFeatures(input: ConductInput): RoutingFeatures {\n    const task = input.task.toLowerCase();\n\n    return {\n      taskLength: input.task.length,\n      hasGraphKeywords: this.hasGraphKeywords(task),\n      hasFileKeywords: this.hasFileKeywords(task),\n      hasOSINTKeywords: this.hasOSINTKeywords(task),\n      hasExportKeywords: this.hasExportKeywords(task),\n      complexityScore: this.calculateComplexity(task),\n      sensitivityLevel: input.sensitivity || 'low',\n      maxLatencyMs: input.maxLatencyMs || 4000,\n      userRole: input.userContext?.role,\n      investigationContext: !!input.investigationId,\n    };\n  }\n\n  /**\n   * Check for graph-related keywords\n   */\n  private hasGraphKeywords(task: string): boolean {\n    const graphKeywords = [\n      'cypher',\n      'graph',\n      'pagerank',\n      'betweenness',\n      'neighbors',\n      'neo4j',\n      'relationship',\n      'node',\n      'edge',\n      'community',\n      'centrality',\n      'path',\n      'shortest',\n      'traverse',\n      'match',\n      'return',\n      'where',\n    ];\n    return graphKeywords.some((keyword) => task.includes(keyword));\n  }\n\n  /**\n   * Check for file-related keywords\n   */\n  private hasFileKeywords(task: string): boolean {\n    const fileKeywords = [\n      'file',\n      'document',\n      'upload',\n      'download',\n      'pdf',\n      'docx',\n      'csv',\n      'attachment',\n      'blob',\n      'storage',\n      'read',\n      'write',\n      'search files',\n    ];\n    return fileKeywords.some((keyword) => task.includes(keyword));\n  }\n\n  /**\n   * Check for OSINT-related keywords\n   */\n  private hasOSINTKeywords(task: string): boolean {\n    const osintKeywords = [\n      'web',\n      'search',\n      'scrape',\n      'fetch',\n      'url',\n      'domain',\n      'whois',\n      'threat intelligence',\n      'osint',\n      'external',\n      'public',\n      'social media',\n    ];\n    return osintKeywords.some((keyword) => task.includes(keyword));\n  }\n\n  /**\n   * Check for export-related keywords\n   */\n  private hasExportKeywords(task: string): boolean {\n    const exportKeywords = [\n      'export',\n      'report',\n      'generate',\n      'case file',\n      'summary',\n      'pdf report',\n      'dashboard',\n      'visualization',\n      'chart',\n      'download report',\n    ];\n    return exportKeywords.some((keyword) => task.includes(keyword));\n  }\n\n  /**\n   * Calculate task complexity score\n   */\n  private calculateComplexity(task: string): number {\n    let score = 0;\n\n    // Length-based complexity\n    if (task.length > 1000) score += 3;\n    else if (task.length > 500) score += 2;\n    else if (task.length > 100) score += 1;\n\n    // Complexity keywords\n    const complexKeywords = [\n      'analyze',\n      'complex',\n      'deep',\n      'comprehensive',\n      'detailed',\n      'multi-step',\n      'advanced',\n      'forensic',\n      'investigation',\n      'legal',\n      'policy',\n      'regulatory',\n    ];\n\n    complexKeywords.forEach((keyword) => {\n      if (task.includes(keyword)) score += 1;\n    });\n\n    return Math.min(score, 10); // Cap at 10\n  }\n\n  /**\n   * Get candidate experts based on features\n   */\n  private getCandidateExperts(features: RoutingFeatures): ExpertType[] {\n    const candidates: ExpertType[] = [];\n\n    // Rule-based candidate selection\n    if (features.hasGraphKeywords) {\n      candidates.push('GRAPH_TOOL');\n    }\n\n    if (features.hasFileKeywords) {\n      candidates.push('FILES_TOOL');\n    }\n\n    if (features.hasOSINTKeywords) {\n      candidates.push('OSINT_TOOL');\n    }\n\n    if (features.hasExportKeywords) {\n      candidates.push('EXPORT_TOOL');\n    }\n\n    // Always include LLM options\n    if (features.maxLatencyMs < 1500 || features.complexityScore <= 2) {\n      candidates.push('LLM_LIGHT');\n    }\n\n    if (features.complexityScore >= 5 || features.taskLength > 1000) {\n      candidates.push('LLM_HEAVY');\n    }\n\n    // Default to RAG for general queries\n    if (candidates.length === 0 || features.investigationContext) {\n      candidates.push('RAG_TOOL');\n    }\n\n    // Remove duplicates\n    return [...new Set(candidates)];\n  }\n\n  /**\n   * Select the best expert from candidates\n   */\n  private selectBestExpert(\n    candidates: ExpertType[],\n    features: RoutingFeatures,\n  ): {\n    expert: ExpertType;\n    reason: string;\n    confidence: number;\n  } {\n    // Priority-based selection with confidence scoring\n    for (const candidate of candidates) {\n      const capability = this.expertCapabilities[candidate];\n\n      // Check latency constraints\n      if (capability.avgLatencyMs && capability.avgLatencyMs > features.maxLatencyMs) {\n        continue;\n      }\n\n      // Check security constraints\n      if (features.sensitivityLevel === 'secret' && capability.securityLevel === 'low') {\n        continue;\n      }\n\n      // Calculate confidence based on feature matching\n      const confidence = this.calculateConfidence(candidate, features);\n\n      // Return first viable candidate with reasoning\n      return {\n        expert: candidate,\n        reason: this.generateReason(candidate, features),\n        confidence,\n      };\n    }\n\n    // Fallback to LLM_LIGHT\n    return {\n      expert: 'LLM_LIGHT',\n      reason: 'Fallback to lightweight LLM - no specific tool matches found',\n      confidence: 0.5,\n    };\n  }\n\n  /**\n   * Calculate confidence score for expert selection\n   */\n  private calculateConfidence(expert: ExpertType, features: RoutingFeatures): number {\n    let confidence = 0.5; // Base confidence\n\n    switch (expert) {\n      case 'GRAPH_TOOL':\n        if (features.hasGraphKeywords) confidence += 0.4;\n        break;\n      case 'FILES_TOOL':\n        if (features.hasFileKeywords) confidence += 0.4;\n        break;\n      case 'OSINT_TOOL':\n        if (features.hasOSINTKeywords) confidence += 0.4;\n        break;\n      case 'EXPORT_TOOL':\n        if (features.hasExportKeywords) confidence += 0.4;\n        break;\n      case 'LLM_HEAVY':\n        if (features.complexityScore >= 5) confidence += 0.3;\n        if (features.taskLength > 1000) confidence += 0.2;\n        break;\n      case 'LLM_LIGHT':\n        if (features.maxLatencyMs < 1500) confidence += 0.3;\n        if (features.complexityScore <= 2) confidence += 0.2;\n        break;\n      case 'RAG_TOOL':\n        if (features.investigationContext) confidence += 0.3;\n        break;\n    }\n\n    return Math.min(confidence, 1.0);\n  }\n\n  /**\n   * Generate human-readable reasoning\n   */\n  private generateReason(expert: ExpertType, features: RoutingFeatures): string {\n    const reasons: string[] = [];\n\n    switch (expert) {\n      case 'GRAPH_TOOL':\n        if (features.hasGraphKeywords) reasons.push('graph-related keywords detected');\n        break;\n      case 'FILES_TOOL':\n        if (features.hasFileKeywords) reasons.push('file operations required');\n        break;\n      case 'OSINT_TOOL':\n        if (features.hasOSINTKeywords) reasons.push('OSINT/web research needed');\n        break;\n      case 'EXPORT_TOOL':\n        if (features.hasExportKeywords) reasons.push('export/report generation requested');\n        break;\n      case 'LLM_HEAVY':\n        if (features.complexityScore >= 5) reasons.push('high complexity task');\n        if (features.taskLength > 1000) reasons.push('long-form content');\n        break;\n      case 'LLM_LIGHT':\n        if (features.maxLatencyMs < 1500) reasons.push('tight latency budget');\n        if (features.complexityScore <= 2) reasons.push('simple query');\n        break;\n      case 'RAG_TOOL':\n        if (features.investigationContext) reasons.push('investigation context available');\n        reasons.push('general knowledge retrieval');\n        break;\n    }\n\n    return reasons.length > 0 ? reasons.join(', ') : 'best available option';\n  }\n\n  /**\n   * Generate a unique key for task caching\n   */\n  private generateTaskKey(input: ConductInput): string {\n    const hash = input.task.substring(0, 50) + (input.investigationId || '');\n    return Buffer.from(hash).toString('base64').substring(0, 16);\n  }\n\n  /**\n   * Get routing statistics for observability\n   */\n  public getRoutingStats(): {\n    totalDecisions: number;\n    expertDistribution: Record<ExpertType, number>;\n    avgConfidence: number;\n  } {\n    const decisions = Array.from(this.routingHistory.values());\n    const expertCounts: Record<string, number> = {};\n    let totalConfidence = 0;\n\n    decisions.forEach((decision) => {\n      expertCounts[decision.expert] = (expertCounts[decision.expert] || 0) + 1;\n      totalConfidence += decision.confidence;\n    });\n\n    return {\n      totalDecisions: decisions.length,\n      expertDistribution: expertCounts as Record<ExpertType, number>,\n      avgConfidence: decisions.length > 0 ? totalConfidence / decisions.length : 0,\n    };\n  }\n}\n\n// Export singleton instance\nexport const moERouter = new MoERouter();\n"],"version":3}