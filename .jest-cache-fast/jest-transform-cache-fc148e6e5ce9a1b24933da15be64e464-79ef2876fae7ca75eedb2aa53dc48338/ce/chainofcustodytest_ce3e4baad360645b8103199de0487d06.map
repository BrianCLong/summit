{"file":"/Users/brianlong/Developer/summit/server/tests/chain-of-custody.test.ts","mappings":";;AAAA,mCAAgE;AAChE,oEAAsE;AAEtE,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAChC,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;QACjD,MAAM,MAAM,GAAU,EAAE,CAAC;QACzB,MAAM,EAAE,GAAG;YACT,YAAY,EAAE;gBACZ,MAAM,EAAE,CAAC,EAAE,IAAI,EAAO,EAAE,EAAE;oBACxB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACpB,CAAC;aACF;SACF,CAAC;QACF,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,GAAG,IAAA,4BAAmB,EAAC,SAAS,CAAC,CAAC;QACjE,IAAI,QAAQ,GAAG,SAAS,CAAC;QACzB,QAAQ,GAAG,MAAM,IAAA,2BAAQ,EACvB,EAAE,EACF,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,EAAE,EAC3E,QAAQ,EACR,UAAU,CACX,CAAC;QACF,QAAQ,GAAG,MAAM,IAAA,2BAAQ,EACvB,EAAE,EACF,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,QAAQ,EAAE,EAAE,EAClF,QAAQ,EACR,UAAU,CACX,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QACrD,MAAM,UAAU,GAAG,IAAA,eAAM,EACvB,IAAI,EACJ,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,EAChC,SAAS,EACT,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,QAAQ,CAAC,CAC3C,CAAC;QACF,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC9B,MAAM,CAAC,IAAA,8BAAW,EAAC,MAAM,EAAE,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/server/tests/chain-of-custody.test.ts"],"sourcesContent":["import { generateKeyPairSync, KeyObject, verify } from 'crypto';\nimport { writeCoC, verifyChain } from '../src/cases/chain-of-custody';\n\ndescribe('chain of custody', () => {\n  it('builds a hash-linked signed chain', async () => {\n    const events: any[] = [];\n    const db = {\n      custodyEvent: {\n        create: ({ data }: any) => {\n          events.push(data);\n        },\n      },\n    };\n    const { publicKey, privateKey } = generateKeyPairSync('ed25519');\n    let prevHash = 'GENESIS';\n    prevHash = await writeCoC(\n      db,\n      { caseId: 'c1', actorId: 'u1', action: 'CREATE', payload: { device: 'a' } },\n      prevHash,\n      privateKey,\n    );\n    prevHash = await writeCoC(\n      db,\n      { caseId: 'c1', actorId: 'u2', action: 'TRANSFER', payload: { reason: 'review' } },\n      prevHash,\n      privateKey,\n    );\n    expect(events[1].prevHash).toBe(events[0].eventHash);\n    const firstValid = verify(\n      null,\n      Buffer.from(events[0].eventHash),\n      publicKey,\n      Buffer.from(events[0].signature, 'base64'),\n    );\n    expect(firstValid).toBe(true);\n    expect(verifyChain(events, publicKey)).toBe(true);\n  });\n});\n"],"version":3}