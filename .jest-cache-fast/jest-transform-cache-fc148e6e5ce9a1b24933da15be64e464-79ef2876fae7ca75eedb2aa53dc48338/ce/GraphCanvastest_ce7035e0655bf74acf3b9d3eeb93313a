404bef277f558b5228ecf7591a981931
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
jest.mock('cytoscape', () => () => ({
    destroy: jest.fn(),
    add: jest.fn(),
    layout: jest.fn(() => ({ run: jest.fn() })),
    elements: jest.fn(() => ({ unselect: jest.fn() })),
    nodes: jest.fn(() => ({ forEach: jest.fn() })),
    $: jest.fn(() => ({ find: jest.fn() })),
    $id: jest.fn(() => ({ grabbed: jest.fn(() => false), ungrabify: jest.fn(), grabify: jest.fn() })),
    fit: jest.fn(),
}));
// Mock the generated GraphQL hooks
jest.mock('../../../generated/graphql.js', () => ({
    useGwGraphDataQuery: () => ({
        data: {
            graphData: {
                nodes: [{ id: '1', label: 'Test Node', type: 'Test', description: 'Test node' }],
                edges: [{ id: '1', fromEntityId: '1', toEntityId: '1', label: 'Test Edge', type: 'Test' }],
            },
        },
        loading: false,
        error: null,
    }),
    useGwSearchEntitiesLazyQuery: () => [jest.fn(), { data: null, loading: false }],
}));
const react_1 = require("@testing-library/react");
const testing_1 = require("@apollo/client/testing");
const GraphCanvas_1 = __importDefault(require("../GraphCanvas"));
test('mounts graph canvas and binds interactions', () => {
    (0, react_1.render)((0, jsx_runtime_1.jsx)(testing_1.MockedProvider, { mocks: [], children: (0, jsx_runtime_1.jsx)(GraphCanvas_1.default, {}) }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L2NsaWVudC9zcmMvcGFnZXMvR3JhcGhXb3JrYmVuY2gvX190ZXN0c19fL0dyYXBoQ2FudmFzLnRlc3QudHN4IiwibWFwcGluZ3MiOiI7Ozs7OztBQUtBLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDbEMsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7SUFDbEIsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7SUFDZCxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDM0MsUUFBUSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ2xELEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUM5QyxDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDdkMsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDakcsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7Q0FDZixDQUFDLENBQUMsQ0FBQztBQUVKLG1DQUFtQztBQUNuQyxJQUFJLENBQUMsSUFBSSxDQUFDLCtCQUErQixFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDaEQsbUJBQW1CLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUMxQixJQUFJLEVBQUU7WUFDSixTQUFTLEVBQUU7Z0JBQ1QsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLENBQUM7Z0JBQ2hGLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxZQUFZLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUM7YUFDM0Y7U0FDRjtRQUNELE9BQU8sRUFBRSxLQUFLO1FBQ2QsS0FBSyxFQUFFLElBQUk7S0FDWixDQUFDO0lBQ0YsNEJBQTRCLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQztDQUNoRixDQUFDLENBQUMsQ0FBQztBQTVCSixrREFBZ0Q7QUFDaEQsb0RBQXdEO0FBQ3hELGlFQUF5QztBQTRCekMsSUFBSSxDQUFDLDRDQUE0QyxFQUFFLEdBQUcsRUFBRTtJQUN0RCxJQUFBLGNBQU0sRUFDSix1QkFBQyx3QkFBYyxJQUFDLEtBQUssRUFBRSxFQUFFLFlBQ3ZCLHVCQUFDLHFCQUFXLEtBQUcsR0FDQSxDQUNsQixDQUFDO0FBQ0osQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L2NsaWVudC9zcmMvcGFnZXMvR3JhcGhXb3JrYmVuY2gvX190ZXN0c19fL0dyYXBoQ2FudmFzLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0JztcbmltcG9ydCB7IE1vY2tlZFByb3ZpZGVyIH0gZnJvbSAnQGFwb2xsby9jbGllbnQvdGVzdGluZyc7XG5pbXBvcnQgR3JhcGhDYW52YXMgZnJvbSAnLi4vR3JhcGhDYW52YXMnO1xuXG5qZXN0Lm1vY2soJ2N5dG9zY2FwZScsICgpID0+ICgpID0+ICh7XG4gIGRlc3Ryb3k6IGplc3QuZm4oKSxcbiAgYWRkOiBqZXN0LmZuKCksXG4gIGxheW91dDogamVzdC5mbigoKSA9PiAoeyBydW46IGplc3QuZm4oKSB9KSksXG4gIGVsZW1lbnRzOiBqZXN0LmZuKCgpID0+ICh7IHVuc2VsZWN0OiBqZXN0LmZuKCkgfSkpLFxuICBub2RlczogamVzdC5mbigoKSA9PiAoeyBmb3JFYWNoOiBqZXN0LmZuKCkgfSkpLFxuICAkOiBqZXN0LmZuKCgpID0+ICh7IGZpbmQ6IGplc3QuZm4oKSB9KSksXG4gICRpZDogamVzdC5mbigoKSA9PiAoeyBncmFiYmVkOiBqZXN0LmZuKCgpID0+IGZhbHNlKSwgdW5ncmFiaWZ5OiBqZXN0LmZuKCksIGdyYWJpZnk6IGplc3QuZm4oKSB9KSksXG4gIGZpdDogamVzdC5mbigpLFxufSkpO1xuXG4vLyBNb2NrIHRoZSBnZW5lcmF0ZWQgR3JhcGhRTCBob29rc1xuamVzdC5tb2NrKCcuLi8uLi8uLi9nZW5lcmF0ZWQvZ3JhcGhxbC5qcycsICgpID0+ICh7XG4gIHVzZUd3R3JhcGhEYXRhUXVlcnk6ICgpID0+ICh7XG4gICAgZGF0YToge1xuICAgICAgZ3JhcGhEYXRhOiB7XG4gICAgICAgIG5vZGVzOiBbeyBpZDogJzEnLCBsYWJlbDogJ1Rlc3QgTm9kZScsIHR5cGU6ICdUZXN0JywgZGVzY3JpcHRpb246ICdUZXN0IG5vZGUnIH1dLFxuICAgICAgICBlZGdlczogW3sgaWQ6ICcxJywgZnJvbUVudGl0eUlkOiAnMScsIHRvRW50aXR5SWQ6ICcxJywgbGFiZWw6ICdUZXN0IEVkZ2UnLCB0eXBlOiAnVGVzdCcgfV0sXG4gICAgICB9LFxuICAgIH0sXG4gICAgbG9hZGluZzogZmFsc2UsXG4gICAgZXJyb3I6IG51bGwsXG4gIH0pLFxuICB1c2VHd1NlYXJjaEVudGl0aWVzTGF6eVF1ZXJ5OiAoKSA9PiBbamVzdC5mbigpLCB7IGRhdGE6IG51bGwsIGxvYWRpbmc6IGZhbHNlIH1dLFxufSkpO1xuXG50ZXN0KCdtb3VudHMgZ3JhcGggY2FudmFzIGFuZCBiaW5kcyBpbnRlcmFjdGlvbnMnLCAoKSA9PiB7XG4gIHJlbmRlcihcbiAgICA8TW9ja2VkUHJvdmlkZXIgbW9ja3M9e1tdfT5cbiAgICAgIDxHcmFwaENhbnZhcyAvPlxuICAgIDwvTW9ja2VkUHJvdmlkZXI+LFxuICApO1xufSk7XG4iXSwidmVyc2lvbiI6M30=