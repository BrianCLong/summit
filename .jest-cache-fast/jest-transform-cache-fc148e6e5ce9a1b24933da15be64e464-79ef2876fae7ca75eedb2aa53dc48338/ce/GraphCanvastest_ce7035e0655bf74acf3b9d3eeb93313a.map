{"file":"/Users/brianlong/Developer/summit/client/src/pages/GraphWorkbench/__tests__/GraphCanvas.test.tsx","mappings":";;;;;;AAKA,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;IAClC,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;IAClB,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;IACd,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAC3C,QAAQ,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAClD,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAC9C,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IACvC,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,EAAE,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IACjG,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;CACf,CAAC,CAAC,CAAC;AAEJ,mCAAmC;AACnC,IAAI,CAAC,IAAI,CAAC,+BAA+B,EAAE,GAAG,EAAE,CAAC,CAAC;IAChD,mBAAmB,EAAE,GAAG,EAAE,CAAC,CAAC;QAC1B,IAAI,EAAE;YACJ,SAAS,EAAE;gBACT,KAAK,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE,MAAM,EAAE,WAAW,EAAE,WAAW,EAAE,CAAC;gBAChF,KAAK,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,YAAY,EAAE,GAAG,EAAE,UAAU,EAAE,GAAG,EAAE,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;aAC3F;SACF;QACD,OAAO,EAAE,KAAK;QACd,KAAK,EAAE,IAAI;KACZ,CAAC;IACF,4BAA4B,EAAE,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;CAChF,CAAC,CAAC,CAAC;AA5BJ,kDAAgD;AAChD,oDAAwD;AACxD,iEAAyC;AA4BzC,IAAI,CAAC,4CAA4C,EAAE,GAAG,EAAE;IACtD,IAAA,cAAM,EACJ,uBAAC,wBAAc,IAAC,KAAK,EAAE,EAAE,YACvB,uBAAC,qBAAW,KAAG,GACA,CAClB,CAAC;AACJ,CAAC,CAAC,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/client/src/pages/GraphWorkbench/__tests__/GraphCanvas.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render } from '@testing-library/react';\nimport { MockedProvider } from '@apollo/client/testing';\nimport GraphCanvas from '../GraphCanvas';\n\njest.mock('cytoscape', () => () => ({\n  destroy: jest.fn(),\n  add: jest.fn(),\n  layout: jest.fn(() => ({ run: jest.fn() })),\n  elements: jest.fn(() => ({ unselect: jest.fn() })),\n  nodes: jest.fn(() => ({ forEach: jest.fn() })),\n  $: jest.fn(() => ({ find: jest.fn() })),\n  $id: jest.fn(() => ({ grabbed: jest.fn(() => false), ungrabify: jest.fn(), grabify: jest.fn() })),\n  fit: jest.fn(),\n}));\n\n// Mock the generated GraphQL hooks\njest.mock('../../../generated/graphql.js', () => ({\n  useGwGraphDataQuery: () => ({\n    data: {\n      graphData: {\n        nodes: [{ id: '1', label: 'Test Node', type: 'Test', description: 'Test node' }],\n        edges: [{ id: '1', fromEntityId: '1', toEntityId: '1', label: 'Test Edge', type: 'Test' }],\n      },\n    },\n    loading: false,\n    error: null,\n  }),\n  useGwSearchEntitiesLazyQuery: () => [jest.fn(), { data: null, loading: false }],\n}));\n\ntest('mounts graph canvas and binds interactions', () => {\n  render(\n    <MockedProvider mocks={[]}>\n      <GraphCanvas />\n    </MockedProvider>,\n  );\n});\n"],"version":3}