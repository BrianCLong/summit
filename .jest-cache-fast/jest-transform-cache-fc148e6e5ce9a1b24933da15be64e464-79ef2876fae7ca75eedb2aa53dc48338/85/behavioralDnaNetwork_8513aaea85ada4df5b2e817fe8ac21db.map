{"file":"/Users/brianlong/Developer/summit/server/src/ai/behavioralDnaNetwork.ts","mappings":"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","names":[],"sources":["/Users/brianlong/Developer/summit/server/src/ai/behavioralDnaNetwork.ts"],"sourcesContent":["import { EventEmitter } from \"events\";\n\nexport interface BehaviorEvent {\n  entityId: string;\n  /**\n   * Raw behavior vector before transformation.\n   */\n  vector: number[];\n  timestamp?: number;\n}\n\nexport interface AnomalyDetectionResult {\n  entityId: string;\n  isAnomaly: boolean;\n  score: number;\n}\n\n/**\n * Maps behavioral events into a continuously updated vector space.\n * Emits `update` events whenever an entity's embedding changes.\n */\nexport class BehavioralDnaNetwork extends EventEmitter {\n  private history: Map<string, number[][]> = new Map();\n  private embeddings: Map<string, number[]> = new Map();\n\n  constructor(private anomalyThreshold = 3) {\n    super();\n  }\n\n  /**\n   * Ingest a behavior event, update embeddings and perform anomaly detection.\n   */\n  ingest(event: BehaviorEvent): AnomalyDetectionResult {\n    const normalized = this.normalize(event.vector);\n    const history = this.history.get(event.entityId) ?? [];\n    const anomaly = this.detectAnomaly(event.entityId, normalized, history);\n\n    history.push(normalized);\n    this.history.set(event.entityId, history);\n    this.embeddings.set(event.entityId, this.mean(history));\n\n    this.emit(\"update\", {\n      entityId: event.entityId,\n      embedding: this.embeddings.get(event.entityId),\n      anomaly,\n    });\n\n    return anomaly;\n  }\n\n  /**\n   * Retrieve the latest embedding for an entity.\n   */\n  getEmbedding(entityId: string): number[] | undefined {\n    return this.embeddings.get(entityId);\n  }\n\n  /**\n   * Predict the next behavior vector based on recent trend.\n   */\n  predictNext(entityId: string): number[] | undefined {\n    const history = this.history.get(entityId);\n    if (!history || history.length < 2) return undefined;\n    const last = history[history.length - 1];\n    const prev = history[history.length - 2];\n    const trend = last.map((v, i) => v - prev[i]);\n    return last.map((v, i) => v + trend[i]);\n  }\n\n  /**\n   * Normalize a raw vector.\n   */\n  private normalize(vector: number[]): number[] {\n    const magnitude = Math.sqrt(vector.reduce((s, v) => s + v * v, 0));\n    if (magnitude === 0) return vector.map(() => 0);\n    return vector.map((v) => v / magnitude);\n  }\n\n  private mean(vectors: number[][]): number[] {\n    const length = vectors[0]?.length ?? 0;\n    const sum = new Array(length).fill(0);\n    vectors.forEach((vec) => {\n      for (let i = 0; i < length; i++) {\n        sum[i] += vec[i];\n      }\n    });\n    return sum.map((v) => v / vectors.length);\n  }\n\n  private detectAnomaly(\n    entityId: string,\n    vector: number[],\n    history: number[][],\n  ): AnomalyDetectionResult {\n    if (history.length === 0) {\n      return { entityId, isAnomaly: false, score: 0 };\n    }\n    const meanVec = this.mean(history);\n    const distance = this.distance(vector, meanVec);\n    const stdDev = this.stdDev(history, meanVec);\n    const isAnomaly =\n      stdDev === 0 ? distance > 0 : distance > this.anomalyThreshold * stdDev;\n    const score = stdDev === 0 ? distance : distance / stdDev;\n    return { entityId, isAnomaly, score };\n  }\n\n  private stdDev(history: number[][], meanVec: number[]): number {\n    const distances = history.map((vec) => this.distance(vec, meanVec));\n    const avg = distances.reduce((a, b) => a + b, 0) / distances.length;\n    const variance =\n      distances.reduce((a, b) => a + (b - avg) ** 2, 0) / distances.length;\n    return Math.sqrt(variance);\n  }\n\n  private distance(a: number[], b: number[]): number {\n    return Math.sqrt(a.reduce((sum, v, i) => sum + (v - b[i]) ** 2, 0));\n  }\n}\n\n// Legacy placeholder to maintain backward compatibility with existing tests.\nexport function correlateBehavioralDna(): number {\n  return 0;\n}\n"],"version":3}