{"file":"/Users/brianlong/Developer/summit/server/tests/stats.cache.test.ts","mappings":";;AAEA,IAAI,CAAC,IAAI,CAAC,2BAA2B,EAAE,GAAG,EAAE;IAC1C,MAAM,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,GAAW,EAAE,OAAc,EAAE,EAAE;QAC1D,IAAI,iBAAiB,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;YAChC,OAAO;gBACL,IAAI,EAAE;oBACJ,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE;oBACxB,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,EAAE;iBAC3B;aACF,CAAC;QACJ,CAAC;QACD,IAAI,qCAAqC,CAAC,IAAI,CAAC,GAAG,CAAC;YAAE,OAAO,EAAE,IAAI,EAAE,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC;QACzF,IAAI,0CAA0C,CAAC,IAAI,CAAC,GAAG,CAAC;YACtD,OAAO,EAAE,IAAI,EAAE,CAAC,EAAE,aAAa,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC;QAC3C,IAAI,2CAA2C,CAAC,IAAI,CAAC,GAAG,CAAC;YACvD,OAAO,EAAE,IAAI,EAAE,CAAC,EAAE,cAAc,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;QAC3C,OAAO,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC;IACtB,CAAC,CAAC,CAAC;IACH,OAAO;QACL,eAAe,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC;KACnC,CAAC;AACJ,CAAC,CAAC,CAAC;AAtBH,0DAAgE;AAwBhE,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;IAC7B,IAAI,CAAC,8DAA8D,EAAE,KAAK,IAAI,EAAE;QAC9E,MAAM,GAAG,GAAQ,EAAE,IAAI,EAAE,EAAE,MAAM,EAAE,QAAQ,EAAE,EAAE,CAAC;QAChD,gCAAgC;QAChC,MAAM,sBAAc,CAAC,KAAK,CAAC,UAAU,CAAC,IAAW,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC;QAC5D,MAAM,sBAAc,CAAC,KAAK,CAAC,YAAY,CAAC,IAAW,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC;QAE9D,uDAAuD;QACvD,MAAM,GAAG,GAAG,OAAO,CAAC,2BAA2B,CAAC,CAAC;QAChD,GAAG,CAAC,eAAe,EAAE,CAAC,KAAa,CAAC,SAAS,EAAE,CAAC;QAEjD,MAAM,sBAAc,CAAC,KAAK,CAAC,UAAU,CAAC,IAAW,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC;QAC5D,MAAM,sBAAc,CAAC,KAAK,CAAC,YAAY,CAAC,IAAW,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC;QAE9D,MAAM,CAAC,GAAG,CAAC,eAAe,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;IAC7D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/server/tests/stats.cache.test.ts"],"sourcesContent":["import { statsResolvers } from '../src/graphql/resolvers/stats';\n\njest.mock('../src/config/database.js', () => {\n  const query = jest.fn(async (sql: string, _params: any[]) => {\n    if (/GROUP BY status/.test(sql)) {\n      return {\n        rows: [\n          { status: 'OPEN', c: 3 },\n          { status: 'CLOSED', c: 1 },\n        ],\n      };\n    }\n    if (/SELECT COUNT\\(\\*\\)::int AS entities/.test(sql)) return { rows: [{ entities: 42 }] };\n    if (/SELECT COUNT\\(\\*\\)::int AS relationships/.test(sql))\n      return { rows: [{ relationships: 99 }] };\n    if (/SELECT COUNT\\(\\*\\)::int AS investigations/.test(sql))\n      return { rows: [{ investigations: 7 }] };\n    return { rows: [] };\n  });\n  return {\n    getPostgresPool: () => ({ query }),\n  };\n});\n\ndescribe('stats caching', () => {\n  test('caseCounts and summaryStats are cached via local/redis cache', async () => {\n    const ctx: any = { user: { tenant: 't-test' } };\n    // First pass -> populates cache\n    await statsResolvers.Query.caseCounts(null as any, {}, ctx);\n    await statsResolvers.Query.summaryStats(null as any, {}, ctx);\n\n    // Reset db mock counters by re-mocking getPostgresPool\n    const mod = require('../src/config/database.js');\n    (mod.getPostgresPool().query as any).mockClear();\n\n    await statsResolvers.Query.caseCounts(null as any, {}, ctx);\n    await statsResolvers.Query.summaryStats(null as any, {}, ctx);\n\n    expect(mod.getPostgresPool().query).not.toHaveBeenCalled();\n  });\n});\n"],"version":3}