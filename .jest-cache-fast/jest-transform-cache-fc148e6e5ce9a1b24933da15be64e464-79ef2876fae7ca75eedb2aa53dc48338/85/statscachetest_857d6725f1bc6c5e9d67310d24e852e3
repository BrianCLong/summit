e68d3bd03a72e37ce68f476e2954c6c9
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('../src/config/database.js', () => {
    const query = jest.fn(async (sql, _params) => {
        if (/GROUP BY status/.test(sql)) {
            return {
                rows: [
                    { status: 'OPEN', c: 3 },
                    { status: 'CLOSED', c: 1 },
                ],
            };
        }
        if (/SELECT COUNT\(\*\)::int AS entities/.test(sql))
            return { rows: [{ entities: 42 }] };
        if (/SELECT COUNT\(\*\)::int AS relationships/.test(sql))
            return { rows: [{ relationships: 99 }] };
        if (/SELECT COUNT\(\*\)::int AS investigations/.test(sql))
            return { rows: [{ investigations: 7 }] };
        return { rows: [] };
    });
    return {
        getPostgresPool: () => ({ query }),
    };
});
const stats_1 = require("../src/graphql/resolvers/stats");
describe('stats caching', () => {
    test('caseCounts and summaryStats are cached via local/redis cache', async () => {
        const ctx = { user: { tenant: 't-test' } };
        // First pass -> populates cache
        await stats_1.statsResolvers.Query.caseCounts(null, {}, ctx);
        await stats_1.statsResolvers.Query.summaryStats(null, {}, ctx);
        // Reset db mock counters by re-mocking getPostgresPool
        const mod = require('../src/config/database.js');
        mod.getPostgresPool().query.mockClear();
        await stats_1.statsResolvers.Query.caseCounts(null, {}, ctx);
        await stats_1.statsResolvers.Query.summaryStats(null, {}, ctx);
        expect(mod.getPostgresPool().query).not.toHaveBeenCalled();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3NlcnZlci90ZXN0cy9zdGF0cy5jYWNoZS50ZXN0LnRzIiwibWFwcGluZ3MiOiI7O0FBRUEsSUFBSSxDQUFDLElBQUksQ0FBQywyQkFBMkIsRUFBRSxHQUFHLEVBQUU7SUFDMUMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsR0FBVyxFQUFFLE9BQWMsRUFBRSxFQUFFO1FBQzFELElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDaEMsT0FBTztnQkFDTCxJQUFJLEVBQUU7b0JBQ0osRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7b0JBQ3hCLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO2lCQUMzQjthQUNGLENBQUM7UUFDSixDQUFDO1FBQ0QsSUFBSSxxQ0FBcUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1lBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUN6RixJQUFJLDBDQUEwQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7WUFDdEQsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsYUFBYSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUMzQyxJQUFJLDJDQUEyQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7WUFDdkQsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsY0FBYyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUMzQyxPQUFPLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDO0lBQ3RCLENBQUMsQ0FBQyxDQUFDO0lBQ0gsT0FBTztRQUNMLGVBQWUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUM7S0FDbkMsQ0FBQztBQUNKLENBQUMsQ0FBQyxDQUFDO0FBdEJILDBEQUFnRTtBQXdCaEUsUUFBUSxDQUFDLGVBQWUsRUFBRSxHQUFHLEVBQUU7SUFDN0IsSUFBSSxDQUFDLDhEQUE4RCxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQzlFLE1BQU0sR0FBRyxHQUFRLEVBQUUsSUFBSSxFQUFFLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUM7UUFDaEQsZ0NBQWdDO1FBQ2hDLE1BQU0sc0JBQWMsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLElBQVcsRUFBRSxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDNUQsTUFBTSxzQkFBYyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsSUFBVyxFQUFFLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUU5RCx1REFBdUQ7UUFDdkQsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLDJCQUEyQixDQUFDLENBQUM7UUFDaEQsR0FBRyxDQUFDLGVBQWUsRUFBRSxDQUFDLEtBQWEsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUVqRCxNQUFNLHNCQUFjLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFXLEVBQUUsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzVELE1BQU0sc0JBQWMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLElBQVcsRUFBRSxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFOUQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUM3RCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9icmlhbmxvbmcvRGV2ZWxvcGVyL3N1bW1pdC9zZXJ2ZXIvdGVzdHMvc3RhdHMuY2FjaGUudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzdGF0c1Jlc29sdmVycyB9IGZyb20gJy4uL3NyYy9ncmFwaHFsL3Jlc29sdmVycy9zdGF0cyc7XG5cbmplc3QubW9jaygnLi4vc3JjL2NvbmZpZy9kYXRhYmFzZS5qcycsICgpID0+IHtcbiAgY29uc3QgcXVlcnkgPSBqZXN0LmZuKGFzeW5jIChzcWw6IHN0cmluZywgX3BhcmFtczogYW55W10pID0+IHtcbiAgICBpZiAoL0dST1VQIEJZIHN0YXR1cy8udGVzdChzcWwpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByb3dzOiBbXG4gICAgICAgICAgeyBzdGF0dXM6ICdPUEVOJywgYzogMyB9LFxuICAgICAgICAgIHsgc3RhdHVzOiAnQ0xPU0VEJywgYzogMSB9LFxuICAgICAgICBdLFxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKC9TRUxFQ1QgQ09VTlRcXChcXCpcXCk6OmludCBBUyBlbnRpdGllcy8udGVzdChzcWwpKSByZXR1cm4geyByb3dzOiBbeyBlbnRpdGllczogNDIgfV0gfTtcbiAgICBpZiAoL1NFTEVDVCBDT1VOVFxcKFxcKlxcKTo6aW50IEFTIHJlbGF0aW9uc2hpcHMvLnRlc3Qoc3FsKSlcbiAgICAgIHJldHVybiB7IHJvd3M6IFt7IHJlbGF0aW9uc2hpcHM6IDk5IH1dIH07XG4gICAgaWYgKC9TRUxFQ1QgQ09VTlRcXChcXCpcXCk6OmludCBBUyBpbnZlc3RpZ2F0aW9ucy8udGVzdChzcWwpKVxuICAgICAgcmV0dXJuIHsgcm93czogW3sgaW52ZXN0aWdhdGlvbnM6IDcgfV0gfTtcbiAgICByZXR1cm4geyByb3dzOiBbXSB9O1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBnZXRQb3N0Z3Jlc1Bvb2w6ICgpID0+ICh7IHF1ZXJ5IH0pLFxuICB9O1xufSk7XG5cbmRlc2NyaWJlKCdzdGF0cyBjYWNoaW5nJywgKCkgPT4ge1xuICB0ZXN0KCdjYXNlQ291bnRzIGFuZCBzdW1tYXJ5U3RhdHMgYXJlIGNhY2hlZCB2aWEgbG9jYWwvcmVkaXMgY2FjaGUnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgY3R4OiBhbnkgPSB7IHVzZXI6IHsgdGVuYW50OiAndC10ZXN0JyB9IH07XG4gICAgLy8gRmlyc3QgcGFzcyAtPiBwb3B1bGF0ZXMgY2FjaGVcbiAgICBhd2FpdCBzdGF0c1Jlc29sdmVycy5RdWVyeS5jYXNlQ291bnRzKG51bGwgYXMgYW55LCB7fSwgY3R4KTtcbiAgICBhd2FpdCBzdGF0c1Jlc29sdmVycy5RdWVyeS5zdW1tYXJ5U3RhdHMobnVsbCBhcyBhbnksIHt9LCBjdHgpO1xuXG4gICAgLy8gUmVzZXQgZGIgbW9jayBjb3VudGVycyBieSByZS1tb2NraW5nIGdldFBvc3RncmVzUG9vbFxuICAgIGNvbnN0IG1vZCA9IHJlcXVpcmUoJy4uL3NyYy9jb25maWcvZGF0YWJhc2UuanMnKTtcbiAgICAobW9kLmdldFBvc3RncmVzUG9vbCgpLnF1ZXJ5IGFzIGFueSkubW9ja0NsZWFyKCk7XG5cbiAgICBhd2FpdCBzdGF0c1Jlc29sdmVycy5RdWVyeS5jYXNlQ291bnRzKG51bGwgYXMgYW55LCB7fSwgY3R4KTtcbiAgICBhd2FpdCBzdGF0c1Jlc29sdmVycy5RdWVyeS5zdW1tYXJ5U3RhdHMobnVsbCBhcyBhbnksIHt9LCBjdHgpO1xuXG4gICAgZXhwZWN0KG1vZC5nZXRQb3N0Z3Jlc1Bvb2woKS5xdWVyeSkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==