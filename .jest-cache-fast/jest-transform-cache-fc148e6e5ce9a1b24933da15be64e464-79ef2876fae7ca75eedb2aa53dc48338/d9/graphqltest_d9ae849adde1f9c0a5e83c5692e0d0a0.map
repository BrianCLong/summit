{"file":"/Users/brianlong/Developer/summit/server/tests/graphql.test.ts","mappings":"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","names":[],"sources":["/Users/brianlong/Developer/summit/server/tests/graphql.test.ts"],"sourcesContent":["import request from 'supertest';\nimport { createApp } from '../src/app';\n\ndescribe('GraphQL Integration Tests', () => {\n  let app;\n  let server;\n  let authToken;\n  let testUserId;\n\n  beforeAll(async () => {\n    app = await createApp();\n    server = app.listen(0); // Listen on a random port\n\n    // Register a test user\n    const registerRes = await request(server)\n      .post('/graphql')\n      .send({\n        query: `\n          mutation Register($input: RegisterInput!) {\n            register(input: $input) {\n              token\n              user { id email }\n            }\n          }\n        `,\n        variables: {\n          input: {\n            email: 'testuser@example.com',\n            password: 'password123',\n            firstName: 'Test',\n            lastName: 'User',\n          },\n        },\n      });\n    \n    expect(registerRes.statusCode).toEqual(200);\n    expect(registerRes.body.data.register.token).toBeDefined();\n    expect(registerRes.body.data.register.user.id).toBeDefined();\n    authToken = registerRes.body.data.register.token;\n    testUserId = registerRes.body.data.register.user.id;\n  });\n\n  afterAll(async () => {\n    await server.close();\n  });\n\n  it('should allow user login', async () => {\n    const res = await request(server)\n      .post('/graphql')\n      .send({\n        query: `\n          mutation Login($input: LoginInput!) {\n            login(input: $input) {\n              token\n              user { id email }\n            }\n          }\n        `,\n        variables: {\n          input: {\n            email: 'testuser@example.com',\n            password: 'password123',\n          },\n        },\n      });\n\n    expect(res.statusCode).toEqual(200);\n    expect(res.body.data.login.token).toBeDefined();\n    expect(res.body.data.login.user.email).toEqual('testuser@example.com');\n  });\n\n  it('should create, fetch, update, and delete an entity', async () => {\n    // Create Entity\n    const createRes = await request(server)\n      .post('/graphql')\n      .set('Authorization', `Bearer ${authToken}`)\n      .send({\n        query: `\n          mutation CreateEntity($input: EntityInput!) {\n            createEntity(input: $input) {\n              id\n              label\n              type\n              investigationId\n            }\n          }\n        `,\n        variables: {\n          input: {\n            type: 'PERSON',\n            label: 'John Doe',\n            investigationId: 'test-investigation-123',\n          },\n        },\n      });\n\n    expect(createRes.statusCode).toEqual(200);\n    expect(createRes.body.data.createEntity.id).toBeDefined();\n    expect(createRes.body.data.createEntity.label).toEqual('John Doe');\n    const entityId = createRes.body.data.createEntity.id;\n\n    // Fetch Entity\n    const fetchRes = await request(server)\n      .post('/graphql')\n      .set('Authorization', `Bearer ${authToken}`)\n      .send({\n        query: `\n          query Entity($id: ID!) {\n            entity(id: $id) {\n              id\n              label\n            }\n          }\n        `,\n        variables: { id: entityId },\n      });\n\n    expect(fetchRes.statusCode).toEqual(200);\n    expect(fetchRes.body.data.entity.id).toEqual(entityId);\n    expect(fetchRes.body.data.entity.label).toEqual('John Doe');\n\n    // Update Entity\n    const updateRes = await request(server)\n      .post('/graphql')\n      .set('Authorization', `Bearer ${authToken}`)\n      .send({\n        query: `\n          mutation UpdateEntity($id: ID!, $input: EntityUpdateInput!) {\n            updateEntity(id: $id, input: $input) {\n              id\n              label\n            }\n          }\n        `,\n        variables: {\n          id: entityId,\n          input: {\n            label: 'Jane Doe',\n          },\n        },\n      });\n\n    expect(updateRes.statusCode).toEqual(200);\n    expect(updateRes.body.data.updateEntity.id).toEqual(entityId);\n    expect(updateRes.body.data.updateEntity.label).toEqual('Jane Doe');\n\n    // Delete Entity\n    const deleteRes = await request(server)\n      .post('/graphql')\n      .set('Authorization', `Bearer ${authToken}`)\n      .send({\n        query: `\n          mutation DeleteEntity($id: ID!) {\n            deleteEntity(id: $id)\n          }\n        `,\n        variables: { id: entityId },\n      });\n\n    expect(deleteRes.statusCode).toEqual(200);\n    expect(deleteRes.body.data.deleteEntity).toEqual(true);\n  });\n\n  it('should create and delete an investigation', async () => {\n    // Create Investigation\n    const createRes = await request(server)\n      .post('/graphql')\n      .set('Authorization', `Bearer ${authToken}`)\n      .send({\n        query: `\n          mutation CreateInvestigation($input: InvestigationInput!) {\n            createInvestigation(input: $input) {\n              id\n              title\n            }\n          }\n        `,\n        variables: {\n          input: {\n            title: 'Test Investigation',\n            description: 'A test investigation',\n          },\n        },\n      });\n\n    expect(createRes.statusCode).toEqual(200);\n    expect(createRes.body.data.createInvestigation.id).toBeDefined();\n    expect(createRes.body.data.createInvestigation.title).toEqual('Test Investigation');\n    const investigationId = createRes.body.data.createInvestigation.id;\n\n    // Delete Investigation\n    const deleteRes = await request(server)\n      .post('/graphql')\n      .set('Authorization', `Bearer ${authToken}`)\n      .send({\n        query: `\n          mutation DeleteInvestigation($id: ID!) {\n            deleteInvestigation(id: $id)\n          }\n        `,\n        variables: { id: investigationId },\n      });\n\n    expect(deleteRes.statusCode).toEqual(200);\n    expect(deleteRes.body.data.deleteInvestigation).toEqual(true);\n  });\n\n  it('should create and delete a relationship', async () => {\n    // Create two entities first\n    const createEntity1Res = await request(server)\n      .post('/graphql')\n      .set('Authorization', `Bearer ${authToken}`)\n      .send({\n        query: `\n          mutation CreateEntity($input: EntityInput!) {\n            createEntity(input: $input) {\n              id\n            }\n          }\n        `,\n        variables: {\n          input: {\n            type: 'PERSON',\n            label: 'Entity 1',\n            investigationId: 'test-investigation-rel-1',\n          },\n        },\n      });\n    const entity1Id = createEntity1Res.body.data.createEntity.id;\n\n    const createEntity2Res = await request(server)\n      .post('/graphql')\n      .set('Authorization', `Bearer ${authToken}`)\n      .send({\n        query: `\n          mutation CreateEntity($input: EntityInput!) {\n            createEntity(input: $input) {\n              id\n            }\n          }\n        `,\n        variables: {\n          input: {\n            type: 'PERSON',\n            label: 'Entity 2',\n            investigationId: 'test-investigation-rel-1',\n          },\n        },\n      });\n    const entity2Id = createEntity2Res.body.data.createEntity.id;\n\n    // Create Relationship\n    const createRelRes = await request(server)\n      .post('/graphql')\n      .set('Authorization', `Bearer ${authToken}`)\n      .send({\n        query: `\n          mutation CreateRelationship($input: RelationshipInput!) {\n            createRelationship(input: $input) {\n              id\n              type\n              fromEntityId\n              toEntityId\n            }\n          }\n        `,\n        variables: {\n          input: {\n            type: 'CONNECTED_TO',\n            fromEntityId: entity1Id,\n            toEntityId: entity2Id,\n            investigationId: 'test-investigation-rel-1',\n          },\n        },\n      });\n\n    expect(createRelRes.statusCode).toEqual(200);\n    expect(createRelRes.body.data.createRelationship.id).toBeDefined();\n    expect(createRelRes.body.data.createRelationship.type).toEqual('CONNECTED_TO');\n    const relationshipId = createRelRes.body.data.createRelationship.id;\n\n    // Delete Relationship\n    const deleteRelRes = await request(server)\n      .post('/graphql')\n      .set('Authorization', `Bearer ${authToken}`)\n      .send({\n        query: `\n          mutation DeleteRelationship($id: ID!) {\n            deleteRelationship(id: $id)\n          }\n        `,\n        variables: { id: relationshipId },\n      });\n\n    expect(deleteRelRes.statusCode).toEqual(200);\n    expect(deleteRelRes.body.data.deleteRelationship).toEqual(true);\n  });\n\n  it('should fetch related entities', async () => {\n    // Create a test entity\n    const createEntityRes = await request(server)\n      .post('/graphql')\n      .set('Authorization', `Bearer ${authToken}`)\n      .send({\n        query: `\n          mutation CreateEntity($input: EntityInput!) {\n            createEntity(input: $input) {\n              id\n              label\n              type\n              investigationId\n            }\n          }\n        `,\n        variables: {\n          input: {\n            type: 'PERSON',\n            label: 'Related Entity Test',\n            investigationId: 'test-investigation-related',\n          },\n        },\n      });\n    const entityId = createEntityRes.body.data.createEntity.id;\n\n    // Create another entity\n    const createRelatedEntityRes = await request(server)\n      .post('/graphql')\n      .set('Authorization', `Bearer ${authToken}`)\n      .send({\n        query: `\n          mutation CreateEntity($input: EntityInput!) {\n            createEntity(input: $input) {\n              id\n            }\n          }\n        `,\n        variables: {\n          input: {\n            type: 'ORGANIZATION',\n            label: 'Related Org',\n            investigationId: 'test-investigation-related',\n          },\n        },\n      });\n    const relatedEntityId = createRelatedEntityRes.body.data.createEntity.id;\n\n    // Create a relationship between them\n    await request(server)\n      .post('/graphql')\n      .set('Authorization', `Bearer ${authToken}`)\n      .send({\n        query: `\n          mutation CreateRelationship($input: RelationshipInput!) {\n            createRelationship(input: $input) {\n              id\n            }\n          }\n        `,\n        variables: {\n          input: {\n            type: 'WORKS_FOR',\n            fromEntityId: entityId,\n            toEntityId: relatedEntityId,\n            investigationId: 'test-investigation-related',\n          },\n        },\n      });\n\n    // Fetch related entities\n    const fetchRelatedRes = await request(server)\n      .post('/graphql')\n      .set('Authorization', `Bearer ${authToken}`)\n      .send({\n        query: `\n          query RelatedEntities($entityId: ID!) {\n            relatedEntities(entityId: $entityId) {\n              entity {\n                id\n                label\n              }\n              strength\n              relationshipType\n            }\n          }\n        `,\n        variables: { entityId: entityId },\n      });\n\n    expect(fetchRelatedRes.statusCode).toEqual(200);\n    expect(fetchRelatedRes.body.data.relatedEntities).toBeDefined();\n    expect(fetchRelatedRes.body.data.relatedEntities.length).toBeGreaterThan(0);\n    expect(fetchRelatedRes.body.data.relatedEntities[0].entity.id).toEqual(relatedEntityId);\n    expect(fetchRelatedRes.body.data.relatedEntities[0].strength).toBeGreaterThan(0);\n    expect(fetchRelatedRes.body.data.relatedEntities[0].relationshipType).toEqual('WORKS_FOR');\n  });\n\n  it('should generate entities and relationships from text', async () => {\n    const res = await request(server)\n      .post('/graphql')\n      .set('Authorization', `Bearer ${authToken}`)\n      .send({\n        query: `\n          mutation Generate($investigationId: ID!, $text: String!) {\n            generateEntitiesFromText(investigationId: $investigationId, text: $text) {\n              entities { id label }\n              relationships { id type from to }\n            }\n          }\n        `,\n        variables: {\n          investigationId: 'test-gen-1',\n          text: 'Alice works with Bob',\n        },\n      });\n\n    expect(res.statusCode).toEqual(200);\n    expect(res.body.data.generateEntitiesFromText.entities.length).toBeGreaterThan(0);\n    expect(res.body.data.generateEntitiesFromText.relationships.length).toBeGreaterThan(0);\n  });\n});"],"version":3}