84143b61375119a47f5ed5e7a03eb00b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.issueHIT = issueHIT;
exports.verifyHIT = verifyHIT;
function issueHIT(subjectId, nodes, signatures) {
    // Placeholder for actual threshold-signature or PBFT logic
    if (signatures.length < nodes.length * (2 / 3)) {
        throw new Error("Not enough weighted signatures to issue HIT");
    }
    const score = signatures.length / nodes.length; // Simple score for MVP
    return {
        subjectId,
        epoch: Math.floor(Date.now() / 1000),
        attestations: signatures,
        score
    };
}
function verifyHIT(hit, _nodes) {
    // Placeholder for actual threshold-signature or PBFT verification
    return hit.score > 0.5; // Simple verification for MVP
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3BhY2thZ2VzL2hybi9zcmMvaW5kZXgudHMiLCJtYXBwaW5ncyI6Ijs7QUFhQSw0QkFZQztBQUVELDhCQUdDO0FBakJELFNBQWdCLFFBQVEsQ0FBQyxTQUFpQixFQUFFLEtBQTBCLEVBQUUsVUFBb0I7SUFDMUYsMkRBQTJEO0lBQzNELElBQUksVUFBVSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDN0MsTUFBTSxJQUFJLEtBQUssQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUFDRCxNQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyx1QkFBdUI7SUFDdkUsT0FBTztRQUNMLFNBQVM7UUFDVCxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBQ3BDLFlBQVksRUFBRSxVQUFVO1FBQ3hCLEtBQUs7S0FDTixDQUFDO0FBQ0osQ0FBQztBQUVELFNBQWdCLFNBQVMsQ0FBQyxHQUFRLEVBQUUsTUFBMkI7SUFDN0Qsa0VBQWtFO0lBQ2xFLE9BQU8sR0FBRyxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsQ0FBQyw4QkFBOEI7QUFDeEQsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvYnJpYW5sb25nL0RldmVsb3Blci9zdW1taXQvcGFja2FnZXMvaHJuL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgaW50ZXJmYWNlIEhJVCB7XG4gIHN1YmplY3RJZDogc3RyaW5nOyAgICAgICAvLyBjb250ZW50IG9yIGFjY291bnRcbiAgZXBvY2g6IG51bWJlcjsgICAgICAgICAgIC8vIHBlcmlvZFxuICBhdHRlc3RhdGlvbnM6IHN0cmluZ1tdOyAgLy8gYXR0ZXN0ZXIgc2lncyAoYmxpbmQgb3IgU0QtSldUKVxuICBzY29yZTogbnVtYmVyOyAgICAgICAgICAgLy8gZGVyaXZlZCBjcmVkaWJpbGl0eVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIENyZWRlbnRpYWxpbmdOb2RlIHtcbiAgaWQ6IHN0cmluZztcbiAgcHVibGljS2V5OiBzdHJpbmc7XG4gIHdlaWdodDogbnVtYmVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNzdWVISVQoc3ViamVjdElkOiBzdHJpbmcsIG5vZGVzOiBDcmVkZW50aWFsaW5nTm9kZVtdLCBzaWduYXR1cmVzOiBzdHJpbmdbXSk6IEhJVCB7XG4gIC8vIFBsYWNlaG9sZGVyIGZvciBhY3R1YWwgdGhyZXNob2xkLXNpZ25hdHVyZSBvciBQQkZUIGxvZ2ljXG4gIGlmIChzaWduYXR1cmVzLmxlbmd0aCA8IG5vZGVzLmxlbmd0aCAqICgyLzMpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTm90IGVub3VnaCB3ZWlnaHRlZCBzaWduYXR1cmVzIHRvIGlzc3VlIEhJVFwiKTtcbiAgfVxuICBjb25zdCBzY29yZSA9IHNpZ25hdHVyZXMubGVuZ3RoIC8gbm9kZXMubGVuZ3RoOyAvLyBTaW1wbGUgc2NvcmUgZm9yIE1WUFxuICByZXR1cm4ge1xuICAgIHN1YmplY3RJZCxcbiAgICBlcG9jaDogTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCksXG4gICAgYXR0ZXN0YXRpb25zOiBzaWduYXR1cmVzLFxuICAgIHNjb3JlXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2ZXJpZnlISVQoaGl0OiBISVQsIF9ub2RlczogQ3JlZGVudGlhbGluZ05vZGVbXSk6IGJvb2xlYW4ge1xuICAvLyBQbGFjZWhvbGRlciBmb3IgYWN0dWFsIHRocmVzaG9sZC1zaWduYXR1cmUgb3IgUEJGVCB2ZXJpZmljYXRpb25cbiAgcmV0dXJuIGhpdC5zY29yZSA+IDAuNTsgLy8gU2ltcGxlIHZlcmlmaWNhdGlvbiBmb3IgTVZQXG59Il0sInZlcnNpb24iOjN9