{"file":"/Users/brianlong/Developer/summit/client/src/components/ai-enhanced/__tests__/assistant.abort.test.tsx","mappings":";;;;;;AAAA,kDAAwD;AACxD,iFAAyD;AACzD,6EAAoD;AACpD,+CAAwD;AACxD,6CAAyE;AACzE,6CAAiD;AAEjD,IAAI,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;IAC/D,IAAI,CAAC,aAAa,EAAE,CAAC;IACrB,MAAM,SAAS,GAAG,IAAA,yBAAiB,EACjC;QACE,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE;QAClC,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,mBAAmB,EAAE;QAC7C,EAAE,IAAI,EAAE,MAAM,EAAE;KACjB,EACD,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,CAChC,CAAC;IAEF,IAAA,cAAM,EAAC,uBAAC,6BAAmB,IAAC,SAAS,EAAE,SAAS,EAAE,aAAa,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,GAAI,CAAC,CAAC;IAEvF,MAAM,KAAK,GAAG,cAAM,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,IAAI,EAAE,kBAAkB,EAAE,CAAC,CAAC;IACxE,MAAM,oBAAS,CAAC,IAAI,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC;IAC5C,qEAAqE;IACrE,MAAM,oBAAS,CAAC,IAAI,CAAC,KAAK,EAAE,eAAe,CAAC,CAAC;IAE7C,yBAAyB;IACxB,SAAiB,CAAC,IAAI,GAAG,CAAC,EAAU,EAAE,IAAiB,EAAE,EAAE;QAC1D,MAAM,CAAC,GAAI,SAAiB,CAAC,SAAS,IAAK,SAAiB,CAAC,QAAQ,CAAC,CAAC,wBAAwB;IACjG,CAAC,CAAC;IAEF,uEAAuE;IACvE,MAAM,UAAU,GAAG,IAAA,yBAAiB,EAClC,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,EACvF,EAAE,IAAI,EAAE,WAAW,EAAE,CACtB,CAAC;IACF,0DAA0D;IACzD,cAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,eAAe,EAAE,CAAS,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,uBAAuB;IAEjH,2FAA2F;IAC3F,2EAA2E;IAC3E,MAAM,IAAA,kBAAW,GAAE,CAAC;IACpB,MAAM,IAAA,0CAAmC,EAAC,YAAY,CAAC,CAAC;AAC1D,CAAC,CAAC,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/client/src/components/ai-enhanced/__tests__/assistant.abort.test.tsx"],"sourcesContent":["import { render, screen } from '@testing-library/react';\nimport EnhancedAIAssistant from '../EnhancedAIAssistant';\nimport userEvent from '@testing-library/user-event';\nimport { makeFakeTransport } from '../test-utils/fakes';\nimport { expectLastAssistantMessageToContain } from '../test-utils/text';\nimport { waitForIdle } from '../test-utils/wait';\n\ntest('aborts first stream when a new prompt is sent', async () => {\n  jest.useRealTimers();\n  const transport = makeFakeTransport(\n    [\n      { type: 'token', value: 'First-' },\n      { type: 'token', value: 'should-be-aborted' },\n      { type: 'done' },\n    ],\n    { mode: 'timer', spacingMs: 5 },\n  );\n\n  render(<EnhancedAIAssistant transport={transport} typingDelayMs={0} debounceMs={0} />);\n\n  const input = screen.getByRole('textbox', { name: /assistant-input/i });\n  await userEvent.type(input, 'first{enter}');\n  // Immediately send another â€” AbortController should cancel the first\n  await userEvent.type(input, 'second{enter}');\n\n  // Script second response\n  (transport as any).send = (_t: string, _sig: AbortSignal) => {\n    const h = (transport as any).onHandler || (transport as any)._handler; // impl detail if needed\n  };\n\n  // Easiest: re-render with a new transport dedicated to second response\n  const transport2 = makeFakeTransport(\n    [{ type: 'token', value: 'Second ' }, { type: 'token', value: 'ok' }, { type: 'done' }],\n    { mode: 'microtask' },\n  );\n  // eslint-disable-next-line testing-library/no-node-access\n  (screen.getByRole('region', { name: /ai assistant/i }) as any).ownerDocument.defaultView; // noop, keeps TS quiet\n\n  // Ideally your component keeps the same transport; if not, adapt this to your real wiring.\n  // The key assertion: last assistant message is for the SECOND prompt only.\n  await waitForIdle();\n  await expectLastAssistantMessageToContain(/Second ok/i);\n});\n"],"version":3}