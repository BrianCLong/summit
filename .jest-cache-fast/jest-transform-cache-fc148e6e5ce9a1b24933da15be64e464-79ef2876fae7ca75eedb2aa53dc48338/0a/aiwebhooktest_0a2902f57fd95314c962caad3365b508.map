{"file":"/Users/brianlong/Developer/summit/server/src/tests/ai.webhook.test.ts","mappings":"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","names":[],"sources":["/Users/brianlong/Developer/summit/server/src/tests/ai.webhook.test.ts"],"sourcesContent":["import request from \"supertest\";\nimport crypto from \"crypto\";\nimport { createApp } from \"../app\"; // assumes your express app export\n\nconst SECRET = process.env.ML_WEBHOOK_SECRET || \"test-secret\";\n\nfunction sign(body: any){\n  const raw = JSON.stringify(body);\n  const h = crypto.createHmac(\"sha256\", SECRET).update(raw).digest(\"hex\");\n  return { raw, sig: h };\n}\n\ndescribe(\"AI webhook\", () => {\n  let app;\n\n  beforeAll(async () => {\n    app = await createApp();\n  });\n\n  it(\"accepts signed webhook and creates insights\", async () => {\n    const body = { \n      job_id: \"11111111-1111-1111-1111-111111111111\", \n      kind: \"link_prediction\", \n      predictions: [{u:\"a\", v:\"b\", score:3}] \n    };\n    const { sig } = sign(body);\n    const res = await request(app)\n      .post(\"/ai/webhook\")\n      .set(\"X-IntelGraph-Signature\", sig)\n      .send(body);\n    expect(res.status).toBe(200);\n    expect(res.body.ok).toBe(true);\n  });\n\n  it(\"rejects webhook with invalid signature\", async () => {\n    const body = { \n      job_id: \"22222222-2222-2222-2222-222222222222\", \n      kind: \"nlp_entities\", \n      results: [] \n    };\n    const res = await request(app)\n      .post(\"/ai/webhook\")\n      .set(\"X-IntelGraph-Signature\", \"invalid-signature\")\n      .send(body);\n    expect(res.status).toBe(401);\n    expect(res.body.error).toBe(\"invalid signature\");\n  });\n\n  it(\"handles entity resolution webhook\", async () => {\n    const body = { \n      job_id: \"33333333-3333-3333-3333-333333333333\", \n      kind: \"entity_resolution\", \n      links: [[\"entity1\", \"entity2\", 0.95]] \n    };\n    const { sig } = sign(body);\n    const res = await request(app)\n      .post(\"/ai/webhook\")\n      .set(\"X-IntelGraph-Signature\", sig)\n      .send(body);\n    expect(res.status).toBe(200);\n  });\n\n  it(\"handles community detection webhook\", async () => {\n    const body = { \n      job_id: \"44444444-4444-4444-4444-444444444444\", \n      kind: \"community_detect\", \n      communities: [\n        { community_id: \"c1\", members: [\"node1\", \"node2\", \"node3\"] },\n        { community_id: \"c2\", members: [\"node4\", \"node5\"] }\n      ]\n    };\n    const { sig } = sign(body);\n    const res = await request(app)\n      .post(\"/ai/webhook\")\n      .set(\"X-IntelGraph-Signature\", sig)\n      .send(body);\n    expect(res.status).toBe(200);\n  });\n\n  it(\"handles NLP entities webhook\", async () => {\n    const body = { \n      job_id: \"55555555-5555-5555-5555-555555555555\", \n      kind: \"nlp_entities\", \n      results: [\n        {\n          doc_id: \"doc1\",\n          entities: [\n            { text: \"John Doe\", label: \"PERSON\", confidence: 0.95 },\n            { text: \"New York\", label: \"GPE\", confidence: 0.89 }\n          ]\n        }\n      ]\n    };\n    const { sig } = sign(body);\n    const res = await request(app)\n      .post(\"/ai/webhook\")\n      .set(\"X-IntelGraph-Signature\", sig)\n      .send(body);\n    expect(res.status).toBe(200);\n  });\n\n  it(\"handles malformed webhook gracefully\", async () => {\n    const body = { invalid: \"data\" };\n    const { sig } = sign(body);\n    const res = await request(app)\n      .post(\"/ai/webhook\")\n      .set(\"X-IntelGraph-Signature\", sig)\n      .send(body);\n    // Should still return 200 but handle the malformed data gracefully\n    expect(res.status).toBe(200);\n  });\n\n  it(\"verifies timing-safe signature comparison\", async () => {\n    const body = { job_id: \"test\", kind: \"test\", results: [] };\n    const validSig = crypto.createHmac(\"sha256\", SECRET).update(JSON.stringify(body)).digest(\"hex\");\n    const almostValidSig = validSig.slice(0, -1) + \"x\"; // Change last char\n    \n    const res = await request(app)\n      .post(\"/ai/webhook\")\n      .set(\"X-IntelGraph-Signature\", almostValidSig)\n      .send(body);\n    expect(res.status).toBe(401);\n  });\n});"],"version":3}