{"file":"/Users/brianlong/Developer/summit/packages/atl/src/index.ts","mappings":";;AAeA,4BAcC;AAED,kCAOC;AAvBD,SAAgB,QAAQ,CAAC,WAA6B;IACpD,iDAAiD;IACjD,OAAO;QACL,OAAO,EAAE,CAAC,QAAiB,EAAE,EAAE;YAC7B,2BAA2B;YAC3B,2DAA2D;YAC3D,MAAM,EAAE,GAAG,QAAuB,CAAC;YACnC,MAAM,KAAK,GAAG,CAAC,EAAE,CAAC,WAAW,CAAC,MAAM,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,kBAAkB;YACnE,OAAO,KAAK,CAAC;QACf,CAAC;QACD,KAAK,EAAE,CAAC,KAAuB,EAAE,EAAE;YACjC,6DAA6D;QAC/D,CAAC;KACF,CAAC;AACJ,CAAC;AAED,SAAgB,WAAW,CAAC,KAAe,EAAE,EAAe;IAC1D,MAAM,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,+CAA+C;IAChF,OAAO;QACL,aAAa,EAAE,KAAK,GAAG,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,UAAU;QAClD,SAAS,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC;QAClD,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC;KACrC,CAAC;AACJ,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/packages/atl/src/index.ts"],"sourcesContent":["import { Fingerprint } from '@intelgraph/afl-store/src/types';\nimport { Tariff } from '@intelgraph/gateway-tariff/src/index';\n\nexport type Outcome = { accepted: number; disputed: number; retracted: number; beliefDecay: number; };\n\nexport interface HistoricalData {\n  fp: Fingerprint;\n  outcome: Outcome;\n}\n\nexport interface ATLModel {\n  predict(features: unknown): number; // Placeholder for ML model prediction\n  train(data: HistoricalData[]): void;\n}\n\nexport function trainATL(_historical: HistoricalData[]): ATLModel {\n  // Placeholder for actual ML model training logic\n  return {\n    predict: (features: unknown) => {\n      // Simple heuristic for MVP\n      // Assuming features is a Fingerprint for this simple model\n      const fp = features as Fingerprint;\n      const score = (fp.contentHash.length % 10) / 10; // Example scoring\n      return score;\n    },\n    train: (_data: HistoricalData[]) => {\n      // console.log(`Model trained with ${data.length} samples.`);\n    }\n  };\n}\n\nexport function inferTariff(model: ATLModel, fp: Fingerprint): Tariff {\n  const score = model.predict(fp); // Assuming fp can be directly used as features\n  return {\n    minProofLevel: score > 0.7 ? 'strict' : 'standard',\n    rateLimit: Math.max(1, Math.floor(10 - score * 5)),\n    throttleMs: Math.floor(score * 5000)\n  };\n}"],"version":3}