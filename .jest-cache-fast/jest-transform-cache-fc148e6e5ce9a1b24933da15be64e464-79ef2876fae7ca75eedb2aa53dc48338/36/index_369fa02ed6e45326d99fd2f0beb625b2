4c9b34f44ca3490aa5e7e77168e61caa
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.nl2cypher = nl2cypher;
const costEstimator_1 = require("./costEstimator");
function nl2cypher(prompt) {
    const text = prompt.trim();
    const find = /^find\s+(\w+)(?:\s+where\s+(\w+)\s+(?:is|=)\s+([\w\s]+))?$/i.exec(text);
    if (find) {
        const [, label, prop, value] = find;
        const ast = {
            type: 'find',
            label,
            filter: prop && value ? { property: prop, value: value.trim() } : undefined,
        };
        let cypher = `MATCH (n:${label}`;
        const rationale = [
            { phrase: `find ${label}`, clause: `MATCH (n:${label})` },
        ];
        if (prop && value) {
            const val = value.trim();
            cypher += ` {${prop}: '${val}'}`;
            rationale.push({ phrase: `where ${prop} is ${val}`, clause: `${prop}: '${val}'` });
        }
        cypher += ') RETURN n';
        rationale.push({ phrase: 'return nodes', clause: 'RETURN n' });
        const estimatedCost = (0, costEstimator_1.estimateCost)(ast);
        return { ast, cypher, rationale, estimatedCost };
    }
    const count = /^count\s+(\w+)(?:\s+where\s+(\w+)\s+(?:is|=)\s+([\w\s]+))?$/i.exec(text);
    if (count) {
        const [, label, prop, value] = count;
        const ast = {
            type: 'count',
            label,
            filter: prop && value ? { property: prop, value: value.trim() } : undefined,
        };
        let cypher = `MATCH (n:${label}`;
        const rationale = [
            { phrase: `count ${label}`, clause: `MATCH (n:${label})` },
        ];
        if (prop && value) {
            const val = value.trim();
            cypher += ` {${prop}: '${val}'}`;
            rationale.push({ phrase: `where ${prop} is ${val}`, clause: `${prop}: '${val}'` });
        }
        cypher += ') RETURN count(n) AS count';
        rationale.push({ phrase: 'return count', clause: 'count(n)' });
        const estimatedCost = (0, costEstimator_1.estimateCost)(ast);
        return { ast, cypher, rationale, estimatedCost };
    }
    throw new Error('Unsupported query');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3NlcnZlci9zcmMvbmwyY3lwaGVyL2luZGV4LnRzIiwibWFwcGluZ3MiOiI7O0FBU0EsOEJBK0NDO0FBeERELG1EQUF3RDtBQVN4RCxTQUFnQixTQUFTLENBQUMsTUFBYztJQUN0QyxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDM0IsTUFBTSxJQUFJLEdBQUcsNkRBQTZELENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3RGLElBQUksSUFBSSxFQUFFLENBQUM7UUFDVCxNQUFNLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQztRQUNwQyxNQUFNLEdBQUcsR0FBWTtZQUNuQixJQUFJLEVBQUUsTUFBTTtZQUNaLEtBQUs7WUFDTCxNQUFNLEVBQUUsSUFBSSxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUztTQUM1RSxDQUFDO1FBQ0YsSUFBSSxNQUFNLEdBQUcsWUFBWSxLQUFLLEVBQUUsQ0FBQztRQUNqQyxNQUFNLFNBQVMsR0FBeUM7WUFDdEQsRUFBRSxNQUFNLEVBQUUsUUFBUSxLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUUsWUFBWSxLQUFLLEdBQUcsRUFBRTtTQUMxRCxDQUFDO1FBQ0YsSUFBSSxJQUFJLElBQUksS0FBSyxFQUFFLENBQUM7WUFDbEIsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ3pCLE1BQU0sSUFBSSxLQUFLLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQztZQUNqQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLFNBQVMsSUFBSSxPQUFPLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxHQUFHLElBQUksTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDckYsQ0FBQztRQUNELE1BQU0sSUFBSSxZQUFZLENBQUM7UUFDdkIsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUM7UUFDL0QsTUFBTSxhQUFhLEdBQUcsSUFBQSw0QkFBWSxFQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3hDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxhQUFhLEVBQUUsQ0FBQztJQUNuRCxDQUFDO0lBQ0QsTUFBTSxLQUFLLEdBQUcsOERBQThELENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3hGLElBQUksS0FBSyxFQUFFLENBQUM7UUFDVixNQUFNLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUNyQyxNQUFNLEdBQUcsR0FBWTtZQUNuQixJQUFJLEVBQUUsT0FBTztZQUNiLEtBQUs7WUFDTCxNQUFNLEVBQUUsSUFBSSxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUztTQUM1RSxDQUFDO1FBQ0YsSUFBSSxNQUFNLEdBQUcsWUFBWSxLQUFLLEVBQUUsQ0FBQztRQUNqQyxNQUFNLFNBQVMsR0FBeUM7WUFDdEQsRUFBRSxNQUFNLEVBQUUsU0FBUyxLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUUsWUFBWSxLQUFLLEdBQUcsRUFBRTtTQUMzRCxDQUFDO1FBQ0YsSUFBSSxJQUFJLElBQUksS0FBSyxFQUFFLENBQUM7WUFDbEIsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ3pCLE1BQU0sSUFBSSxLQUFLLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQztZQUNqQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLFNBQVMsSUFBSSxPQUFPLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxHQUFHLElBQUksTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDckYsQ0FBQztRQUNELE1BQU0sSUFBSSw0QkFBNEIsQ0FBQztRQUN2QyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztRQUMvRCxNQUFNLGFBQWEsR0FBRyxJQUFBLDRCQUFZLEVBQUMsR0FBRyxDQUFDLENBQUM7UUFDeEMsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBRSxDQUFDO0lBQ25ELENBQUM7SUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFDdkMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvYnJpYW5sb25nL0RldmVsb3Blci9zdW1taXQvc2VydmVyL3NyYy9ubDJjeXBoZXIvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXN0aW1hdGVDb3N0LCBBc3ROb2RlIH0gZnJvbSAnLi9jb3N0RXN0aW1hdG9yJztcblxuZXhwb3J0IGludGVyZmFjZSBUcmFuc2xhdGlvblJlc3VsdCB7XG4gIGFzdDogQXN0Tm9kZTtcbiAgY3lwaGVyOiBzdHJpbmc7XG4gIHJhdGlvbmFsZTogeyBwaHJhc2U6IHN0cmluZzsgY2xhdXNlOiBzdHJpbmcgfVtdO1xuICBlc3RpbWF0ZWRDb3N0OiBudW1iZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBubDJjeXBoZXIocHJvbXB0OiBzdHJpbmcpOiBUcmFuc2xhdGlvblJlc3VsdCB7XG4gIGNvbnN0IHRleHQgPSBwcm9tcHQudHJpbSgpO1xuICBjb25zdCBmaW5kID0gL15maW5kXFxzKyhcXHcrKSg/Olxccyt3aGVyZVxccysoXFx3KylcXHMrKD86aXN8PSlcXHMrKFtcXHdcXHNdKykpPyQvaS5leGVjKHRleHQpO1xuICBpZiAoZmluZCkge1xuICAgIGNvbnN0IFssIGxhYmVsLCBwcm9wLCB2YWx1ZV0gPSBmaW5kO1xuICAgIGNvbnN0IGFzdDogQXN0Tm9kZSA9IHtcbiAgICAgIHR5cGU6ICdmaW5kJyxcbiAgICAgIGxhYmVsLFxuICAgICAgZmlsdGVyOiBwcm9wICYmIHZhbHVlID8geyBwcm9wZXJ0eTogcHJvcCwgdmFsdWU6IHZhbHVlLnRyaW0oKSB9IDogdW5kZWZpbmVkLFxuICAgIH07XG4gICAgbGV0IGN5cGhlciA9IGBNQVRDSCAobjoke2xhYmVsfWA7XG4gICAgY29uc3QgcmF0aW9uYWxlOiB7IHBocmFzZTogc3RyaW5nOyBjbGF1c2U6IHN0cmluZyB9W10gPSBbXG4gICAgICB7IHBocmFzZTogYGZpbmQgJHtsYWJlbH1gLCBjbGF1c2U6IGBNQVRDSCAobjoke2xhYmVsfSlgIH0sXG4gICAgXTtcbiAgICBpZiAocHJvcCAmJiB2YWx1ZSkge1xuICAgICAgY29uc3QgdmFsID0gdmFsdWUudHJpbSgpO1xuICAgICAgY3lwaGVyICs9IGAgeyR7cHJvcH06ICcke3ZhbH0nfWA7XG4gICAgICByYXRpb25hbGUucHVzaCh7IHBocmFzZTogYHdoZXJlICR7cHJvcH0gaXMgJHt2YWx9YCwgY2xhdXNlOiBgJHtwcm9wfTogJyR7dmFsfSdgIH0pO1xuICAgIH1cbiAgICBjeXBoZXIgKz0gJykgUkVUVVJOIG4nO1xuICAgIHJhdGlvbmFsZS5wdXNoKHsgcGhyYXNlOiAncmV0dXJuIG5vZGVzJywgY2xhdXNlOiAnUkVUVVJOIG4nIH0pO1xuICAgIGNvbnN0IGVzdGltYXRlZENvc3QgPSBlc3RpbWF0ZUNvc3QoYXN0KTtcbiAgICByZXR1cm4geyBhc3QsIGN5cGhlciwgcmF0aW9uYWxlLCBlc3RpbWF0ZWRDb3N0IH07XG4gIH1cbiAgY29uc3QgY291bnQgPSAvXmNvdW50XFxzKyhcXHcrKSg/Olxccyt3aGVyZVxccysoXFx3KylcXHMrKD86aXN8PSlcXHMrKFtcXHdcXHNdKykpPyQvaS5leGVjKHRleHQpO1xuICBpZiAoY291bnQpIHtcbiAgICBjb25zdCBbLCBsYWJlbCwgcHJvcCwgdmFsdWVdID0gY291bnQ7XG4gICAgY29uc3QgYXN0OiBBc3ROb2RlID0ge1xuICAgICAgdHlwZTogJ2NvdW50JyxcbiAgICAgIGxhYmVsLFxuICAgICAgZmlsdGVyOiBwcm9wICYmIHZhbHVlID8geyBwcm9wZXJ0eTogcHJvcCwgdmFsdWU6IHZhbHVlLnRyaW0oKSB9IDogdW5kZWZpbmVkLFxuICAgIH07XG4gICAgbGV0IGN5cGhlciA9IGBNQVRDSCAobjoke2xhYmVsfWA7XG4gICAgY29uc3QgcmF0aW9uYWxlOiB7IHBocmFzZTogc3RyaW5nOyBjbGF1c2U6IHN0cmluZyB9W10gPSBbXG4gICAgICB7IHBocmFzZTogYGNvdW50ICR7bGFiZWx9YCwgY2xhdXNlOiBgTUFUQ0ggKG46JHtsYWJlbH0pYCB9LFxuICAgIF07XG4gICAgaWYgKHByb3AgJiYgdmFsdWUpIHtcbiAgICAgIGNvbnN0IHZhbCA9IHZhbHVlLnRyaW0oKTtcbiAgICAgIGN5cGhlciArPSBgIHske3Byb3B9OiAnJHt2YWx9J31gO1xuICAgICAgcmF0aW9uYWxlLnB1c2goeyBwaHJhc2U6IGB3aGVyZSAke3Byb3B9IGlzICR7dmFsfWAsIGNsYXVzZTogYCR7cHJvcH06ICcke3ZhbH0nYCB9KTtcbiAgICB9XG4gICAgY3lwaGVyICs9ICcpIFJFVFVSTiBjb3VudChuKSBBUyBjb3VudCc7XG4gICAgcmF0aW9uYWxlLnB1c2goeyBwaHJhc2U6ICdyZXR1cm4gY291bnQnLCBjbGF1c2U6ICdjb3VudChuKScgfSk7XG4gICAgY29uc3QgZXN0aW1hdGVkQ29zdCA9IGVzdGltYXRlQ29zdChhc3QpO1xuICAgIHJldHVybiB7IGFzdCwgY3lwaGVyLCByYXRpb25hbGUsIGVzdGltYXRlZENvc3QgfTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIHF1ZXJ5Jyk7XG59XG4iXSwidmVyc2lvbiI6M30=