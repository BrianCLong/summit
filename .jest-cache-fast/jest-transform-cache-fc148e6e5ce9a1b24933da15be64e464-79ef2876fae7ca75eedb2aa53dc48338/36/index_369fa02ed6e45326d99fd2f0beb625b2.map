{"file":"/Users/brianlong/Developer/summit/server/src/nl2cypher/index.ts","mappings":"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","names":[],"sources":["/Users/brianlong/Developer/summit/server/src/nl2cypher/index.ts"],"sourcesContent":["import { estimateCost, AstNode } from './costEstimator';\n\nexport interface TranslationResult {\n  ast: AstNode;\n  cypher: string;\n  rationale: { phrase: string; clause: string }[];\n  estimatedCost: number;\n}\n\nexport function nl2cypher(prompt: string): TranslationResult {\n  const text = prompt.trim();\n  const find = /^find\\s+(\\w+)(?:\\s+where\\s+(\\w+)\\s+(?:is|=)\\s+([\\w\\s]+))?$/i.exec(text);\n  if (find) {\n    const [, label, prop, value] = find;\n    const ast: AstNode = {\n      type: 'find',\n      label,\n      filter: prop && value ? { property: prop, value: value.trim() } : undefined,\n    };\n    let cypher = `MATCH (n:${label}`;\n    const rationale: { phrase: string; clause: string }[] = [\n      { phrase: `find ${label}`, clause: `MATCH (n:${label})` },\n    ];\n    if (prop && value) {\n      const val = value.trim();\n      cypher += ` {${prop}: '${val}'}`;\n      rationale.push({ phrase: `where ${prop} is ${val}`, clause: `${prop}: '${val}'` });\n    }\n    cypher += ') RETURN n';\n    rationale.push({ phrase: 'return nodes', clause: 'RETURN n' });\n    const estimatedCost = estimateCost(ast);\n    return { ast, cypher, rationale, estimatedCost };\n  }\n  const count = /^count\\s+(\\w+)(?:\\s+where\\s+(\\w+)\\s+(?:is|=)\\s+([\\w\\s]+))?$/i.exec(text);\n  if (count) {\n    const [, label, prop, value] = count;\n    const ast: AstNode = {\n      type: 'count',\n      label,\n      filter: prop && value ? { property: prop, value: value.trim() } : undefined,\n    };\n    let cypher = `MATCH (n:${label}`;\n    const rationale: { phrase: string; clause: string }[] = [\n      { phrase: `count ${label}`, clause: `MATCH (n:${label})` },\n    ];\n    if (prop && value) {\n      const val = value.trim();\n      cypher += ` {${prop}: '${val}'}`;\n      rationale.push({ phrase: `where ${prop} is ${val}`, clause: `${prop}: '${val}'` });\n    }\n    cypher += ') RETURN count(n) AS count';\n    rationale.push({ phrase: 'return count', clause: 'count(n)' });\n    const estimatedCost = estimateCost(ast);\n    return { ast, cypher, rationale, estimatedCost };\n  }\n  throw new Error('Unsupported query');\n}\n"],"version":3}