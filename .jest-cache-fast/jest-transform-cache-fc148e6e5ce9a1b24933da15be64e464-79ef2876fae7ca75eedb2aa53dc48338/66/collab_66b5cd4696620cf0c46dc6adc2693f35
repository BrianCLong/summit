9104806b5364d2531099316b74c3575e
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initRealtime = initRealtime;
const redis_adapter_1 = require("@socket.io/redis-adapter");
const socket_io_1 = require("socket.io");
const ioredis_1 = __importDefault(require("ioredis"));
async function initRealtime(httpServer) {
    const io = new socket_io_1.Server(httpServer, { path: '/ws' });
    const url = process.env.REDIS_URL;
    if (url) {
        try {
            const pub = new ioredis_1.default(url);
            const sub = pub.duplicate();
            io.adapter((0, redis_adapter_1.createAdapter)(pub, sub));
        }
        catch (err) {
            console.warn('Redis adapter disabled', err);
        }
    }
    io.use((socket, next) => {
        const { tenantId, userId } = socket.handshake.auth;
        if (!tenantId || !userId) {
            return next(new Error('FORBIDDEN'));
        }
        socket.ctx = { tenantId, userId };
        next();
    });
    io.on('connection', (socket) => {
        const { tenantId, userId } = socket.ctx;
        socket.on('join', ({ investigationId }) => {
            const room = `tenant:${tenantId}:investigation:${investigationId}`;
            socket.join(room);
            io.to(room).emit('presence:join', { userId, ts: Date.now() });
        });
        socket.on('cursor:move', ({ investigationId, x, y }) => {
            const room = `tenant:${tenantId}:investigation:${investigationId}`;
            socket.to(room).emit('cursor:move', { userId, x, y, ts: Date.now() });
        });
        socket.on('lock:acquire', ({ investigationId, id, kind }) => {
            const room = `tenant:${tenantId}:investigation:${investigationId}`;
            socket.to(room).emit('lock:update', { id, kind, userId, locked: true });
        });
        socket.on('lock:release', ({ investigationId, id, kind }) => {
            const room = `tenant:${tenantId}:investigation:${investigationId}`;
            socket.to(room).emit('lock:update', { id, kind, userId, locked: false });
        });
        socket.on('disconnect', () => {
            for (const room of socket.rooms) {
                if (room.startsWith('tenant:')) {
                    io.to(room).emit('presence:leave', { userId });
                }
            }
        });
    });
    return io;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3NlcnZlci9zcmMvcmVhbHRpbWUvY29sbGFiLnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBVUEsb0NBeURDO0FBbkVELDREQUF5RDtBQUN6RCx5Q0FBbUM7QUFFbkMsc0RBQTRCO0FBT3JCLEtBQUssVUFBVSxZQUFZLENBQUMsVUFBc0I7SUFDdkQsTUFBTSxFQUFFLEdBQUcsSUFBSSxrQkFBTSxDQUFDLFVBQVUsRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBRW5ELE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDO0lBQ2xDLElBQUksR0FBRyxFQUFFLENBQUM7UUFDUixJQUFJLENBQUM7WUFDSCxNQUFNLEdBQUcsR0FBRyxJQUFJLGlCQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDM0IsTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQzVCLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBQSw2QkFBYSxFQUFDLEdBQVUsRUFBRSxHQUFVLENBQUMsQ0FBQyxDQUFDO1FBQ3BELENBQUM7UUFBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1lBQ2IsT0FBTyxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUM5QyxDQUFDO0lBQ0gsQ0FBQztJQUVELEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEVBQUU7UUFDdEIsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQVcsQ0FBQztRQUMxRCxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDekIsT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUN0QyxDQUFDO1FBQ0EsTUFBYyxDQUFDLEdBQUcsR0FBRyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQWUsQ0FBQztRQUN4RCxJQUFJLEVBQUUsQ0FBQztJQUNULENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRTtRQUM3QixNQUFNLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxHQUFJLE1BQWMsQ0FBQyxHQUFnQixDQUFDO1FBRTlELE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxlQUFlLEVBQUUsRUFBRSxFQUFFO1lBQ3hDLE1BQU0sSUFBSSxHQUFHLFVBQVUsUUFBUSxrQkFBa0IsZUFBZSxFQUFFLENBQUM7WUFDbkUsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNsQixFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDaEUsQ0FBQyxDQUFDLENBQUM7UUFFSCxNQUFNLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDLEVBQUUsZUFBZSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFO1lBQ3JELE1BQU0sSUFBSSxHQUFHLFVBQVUsUUFBUSxrQkFBa0IsZUFBZSxFQUFFLENBQUM7WUFDbkUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDeEUsQ0FBQyxDQUFDLENBQUM7UUFFSCxNQUFNLENBQUMsRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUFDLEVBQUUsZUFBZSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFO1lBQzFELE1BQU0sSUFBSSxHQUFHLFVBQVUsUUFBUSxrQkFBa0IsZUFBZSxFQUFFLENBQUM7WUFDbkUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDMUUsQ0FBQyxDQUFDLENBQUM7UUFFSCxNQUFNLENBQUMsRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUFDLEVBQUUsZUFBZSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFO1lBQzFELE1BQU0sSUFBSSxHQUFHLFVBQVUsUUFBUSxrQkFBa0IsZUFBZSxFQUFFLENBQUM7WUFDbkUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDM0UsQ0FBQyxDQUFDLENBQUM7UUFFSCxNQUFNLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxHQUFHLEVBQUU7WUFDM0IsS0FBSyxNQUFNLElBQUksSUFBSSxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ2hDLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDO29CQUMvQixFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7Z0JBQ2pELENBQUM7WUFDSCxDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sRUFBRSxDQUFDO0FBQ1osQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvYnJpYW5sb25nL0RldmVsb3Blci9zdW1taXQvc2VydmVyL3NyYy9yZWFsdGltZS9jb2xsYWIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlQWRhcHRlciB9IGZyb20gJ0Bzb2NrZXQuaW8vcmVkaXMtYWRhcHRlcic7XG5pbXBvcnQgeyBTZXJ2ZXIgfSBmcm9tICdzb2NrZXQuaW8nO1xuaW1wb3J0IHR5cGUgeyBTZXJ2ZXIgYXMgSHR0cFNlcnZlciB9IGZyb20gJ2h0dHAnO1xuaW1wb3J0IFJlZGlzIGZyb20gJ2lvcmVkaXMnO1xuXG5pbnRlcmZhY2UgU29ja2V0Q3R4IHtcbiAgdGVuYW50SWQ6IHN0cmluZztcbiAgdXNlcklkOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbml0UmVhbHRpbWUoaHR0cFNlcnZlcjogSHR0cFNlcnZlcikge1xuICBjb25zdCBpbyA9IG5ldyBTZXJ2ZXIoaHR0cFNlcnZlciwgeyBwYXRoOiAnL3dzJyB9KTtcblxuICBjb25zdCB1cmwgPSBwcm9jZXNzLmVudi5SRURJU19VUkw7XG4gIGlmICh1cmwpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcHViID0gbmV3IFJlZGlzKHVybCk7XG4gICAgICBjb25zdCBzdWIgPSBwdWIuZHVwbGljYXRlKCk7XG4gICAgICBpby5hZGFwdGVyKGNyZWF0ZUFkYXB0ZXIocHViIGFzIGFueSwgc3ViIGFzIGFueSkpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc29sZS53YXJuKCdSZWRpcyBhZGFwdGVyIGRpc2FibGVkJywgZXJyKTtcbiAgICB9XG4gIH1cblxuICBpby51c2UoKHNvY2tldCwgbmV4dCkgPT4ge1xuICAgIGNvbnN0IHsgdGVuYW50SWQsIHVzZXJJZCB9ID0gc29ja2V0LmhhbmRzaGFrZS5hdXRoIGFzIGFueTtcbiAgICBpZiAoIXRlbmFudElkIHx8ICF1c2VySWQpIHtcbiAgICAgIHJldHVybiBuZXh0KG5ldyBFcnJvcignRk9SQklEREVOJykpO1xuICAgIH1cbiAgICAoc29ja2V0IGFzIGFueSkuY3R4ID0geyB0ZW5hbnRJZCwgdXNlcklkIH0gYXMgU29ja2V0Q3R4O1xuICAgIG5leHQoKTtcbiAgfSk7XG5cbiAgaW8ub24oJ2Nvbm5lY3Rpb24nLCAoc29ja2V0KSA9PiB7XG4gICAgY29uc3QgeyB0ZW5hbnRJZCwgdXNlcklkIH0gPSAoc29ja2V0IGFzIGFueSkuY3R4IGFzIFNvY2tldEN0eDtcblxuICAgIHNvY2tldC5vbignam9pbicsICh7IGludmVzdGlnYXRpb25JZCB9KSA9PiB7XG4gICAgICBjb25zdCByb29tID0gYHRlbmFudDoke3RlbmFudElkfTppbnZlc3RpZ2F0aW9uOiR7aW52ZXN0aWdhdGlvbklkfWA7XG4gICAgICBzb2NrZXQuam9pbihyb29tKTtcbiAgICAgIGlvLnRvKHJvb20pLmVtaXQoJ3ByZXNlbmNlOmpvaW4nLCB7IHVzZXJJZCwgdHM6IERhdGUubm93KCkgfSk7XG4gICAgfSk7XG5cbiAgICBzb2NrZXQub24oJ2N1cnNvcjptb3ZlJywgKHsgaW52ZXN0aWdhdGlvbklkLCB4LCB5IH0pID0+IHtcbiAgICAgIGNvbnN0IHJvb20gPSBgdGVuYW50OiR7dGVuYW50SWR9OmludmVzdGlnYXRpb246JHtpbnZlc3RpZ2F0aW9uSWR9YDtcbiAgICAgIHNvY2tldC50byhyb29tKS5lbWl0KCdjdXJzb3I6bW92ZScsIHsgdXNlcklkLCB4LCB5LCB0czogRGF0ZS5ub3coKSB9KTtcbiAgICB9KTtcblxuICAgIHNvY2tldC5vbignbG9jazphY3F1aXJlJywgKHsgaW52ZXN0aWdhdGlvbklkLCBpZCwga2luZCB9KSA9PiB7XG4gICAgICBjb25zdCByb29tID0gYHRlbmFudDoke3RlbmFudElkfTppbnZlc3RpZ2F0aW9uOiR7aW52ZXN0aWdhdGlvbklkfWA7XG4gICAgICBzb2NrZXQudG8ocm9vbSkuZW1pdCgnbG9jazp1cGRhdGUnLCB7IGlkLCBraW5kLCB1c2VySWQsIGxvY2tlZDogdHJ1ZSB9KTtcbiAgICB9KTtcblxuICAgIHNvY2tldC5vbignbG9jazpyZWxlYXNlJywgKHsgaW52ZXN0aWdhdGlvbklkLCBpZCwga2luZCB9KSA9PiB7XG4gICAgICBjb25zdCByb29tID0gYHRlbmFudDoke3RlbmFudElkfTppbnZlc3RpZ2F0aW9uOiR7aW52ZXN0aWdhdGlvbklkfWA7XG4gICAgICBzb2NrZXQudG8ocm9vbSkuZW1pdCgnbG9jazp1cGRhdGUnLCB7IGlkLCBraW5kLCB1c2VySWQsIGxvY2tlZDogZmFsc2UgfSk7XG4gICAgfSk7XG5cbiAgICBzb2NrZXQub24oJ2Rpc2Nvbm5lY3QnLCAoKSA9PiB7XG4gICAgICBmb3IgKGNvbnN0IHJvb20gb2Ygc29ja2V0LnJvb21zKSB7XG4gICAgICAgIGlmIChyb29tLnN0YXJ0c1dpdGgoJ3RlbmFudDonKSkge1xuICAgICAgICAgIGlvLnRvKHJvb20pLmVtaXQoJ3ByZXNlbmNlOmxlYXZlJywgeyB1c2VySWQgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIGlvO1xufVxuIl0sInZlcnNpb24iOjN9