{"file":"/Users/brianlong/Developer/summit/packages/tasks-core/test/schema.validate.spec.ts","mappings":";;;;;AAAA,yFAAmD;AAEnD,IAAI,CAAC,qBAAqB,EAAE,KAAK,IAAI,EAAE;IACrC,MAAM,MAAM,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,UAAU,EAAE,EAAE,CAAC,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE,EAAE,QAAQ,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC;IAC1F,MAAM,GAAG,GAAG,MAAM,4BAAI,CAAC,OAAO,CAAC,EAAS,EAAE,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IACnF,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC","names":[],"sources":["/Users/brianlong/Developer/summit/packages/tasks-core/test/schema.validate.spec.ts"],"sourcesContent":["import task from '../src/tasks/schema.validate.js';\n\ntest('valid schema passes', async () => {\n  const schema = { type: 'object', properties: { a: { type: 'number' } }, required: ['a'] };\n  const out = await task.execute({} as any, { payload: { schema, data: { a: 1 } } });\n  expect(out.payload.valid).toBe(true);\n});\n"],"version":3}