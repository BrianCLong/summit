390225b7cd78eec59102de3fa6fa3213
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.enqueue = enqueue;
exports.poll = poll;
exports.ack = ack;
const pg_1 = require("pg");
const crypto_1 = __importDefault(require("crypto"));
const pg = new pg_1.Pool({ connectionString: process.env.DATABASE_URL });
function genId() {
    // ULID-like: time + random base32
    const t = Date.now().toString(36).toUpperCase();
    const r = crypto_1.default.randomBytes(10).toString('base64').replace(/[^0-9A-Z]/g, '').slice(0, 12);
    return (t + r).slice(0, 26);
}
function signEnv({ id, createdAt, payload }) {
    const key = process.env.HUB_PRIVATE_KEY;
    const hash = crypto_1.default.createHash('sha256').update(JSON.stringify(payload)).digest('hex');
    const data = id + '|' + createdAt + '|' + hash;
    if (!key)
        return '';
    const signer = crypto_1.default.createSign('RSA-SHA256');
    signer.update(data);
    signer.end();
    try {
        return signer.sign(key, 'base64');
    }
    catch {
        return '';
    }
}
async function enqueue(siteId, kind, payload) {
    const id = genId();
    const createdAt = new Date().toISOString();
    const msg = { id, kind, siteId, payload, createdAt, sig: signEnv({ id, createdAt, payload }) };
    await pg.query(`INSERT INTO sync_outbox(site_id, kind, ref, payload) VALUES ($1,$2,$3,$4)`, [siteId, kind, id, Buffer.from(JSON.stringify(msg))]);
    return id;
}
async function poll(siteId, max = 50) {
    const { rows } = await pg.query(`SELECT id, payload FROM sync_outbox WHERE site_id=$1 AND status='QUEUED' ORDER BY id ASC LIMIT $2`, [siteId, max]);
    return rows.map((r) => ({ dbId: r.id, ...(JSON.parse(r.payload.toString('utf8'))) }));
}
async function ack(dbIds) {
    if (!dbIds?.length)
        return;
    await pg.query(`UPDATE sync_outbox SET status='ACK' WHERE id = ANY($1::bigint[])`, [dbIds]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3NlcnZlci9zcmMvcmVsYXkvcXVldWUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUF3QkEsMEJBU0M7QUFFRCxvQkFNQztBQUVELGtCQUdDO0FBOUNELDJCQUEwQjtBQUMxQixvREFBNEI7QUFHNUIsTUFBTSxFQUFFLEdBQUcsSUFBSSxTQUFJLENBQUMsRUFBRSxnQkFBZ0IsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7QUFFcEUsU0FBUyxLQUFLO0lBQ1osa0NBQWtDO0lBQ2xDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDaEQsTUFBTSxDQUFDLEdBQUcsZ0JBQU0sQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUMzRixPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDOUIsQ0FBQztBQUVELFNBQVMsT0FBTyxDQUFDLEVBQUUsRUFBRSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQW1EO0lBQzFGLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDO0lBQ3hDLE1BQU0sSUFBSSxHQUFHLGdCQUFNLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3ZGLE1BQU0sSUFBSSxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsU0FBUyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUM7SUFDL0MsSUFBSSxDQUFDLEdBQUc7UUFBRSxPQUFPLEVBQUUsQ0FBQztJQUNwQixNQUFNLE1BQU0sR0FBRyxnQkFBTSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUMvQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3BCLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNiLElBQUksQ0FBQztRQUFDLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFBQyxDQUFDO0lBQUMsTUFBTSxDQUFDO1FBQUMsT0FBTyxFQUFFLENBQUM7SUFBQyxDQUFDO0FBQ2pFLENBQUM7QUFFTSxLQUFLLFVBQVUsT0FBTyxDQUFDLE1BQWMsRUFBRSxJQUFzQixFQUFFLE9BQVk7SUFDaEYsTUFBTSxFQUFFLEdBQUcsS0FBSyxFQUFFLENBQUM7SUFDbkIsTUFBTSxTQUFTLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUMzQyxNQUFNLEdBQUcsR0FBYSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQyxFQUFFLEVBQUUsRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDO0lBQ3pHLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FDWiwyRUFBMkUsRUFDM0UsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUNyRCxDQUFDO0lBQ0YsT0FBTyxFQUFFLENBQUM7QUFDWixDQUFDO0FBRU0sS0FBSyxVQUFVLElBQUksQ0FBQyxNQUFjLEVBQUUsR0FBRyxHQUFHLEVBQUU7SUFDakQsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FDN0IsbUdBQW1HLEVBQ25HLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUNkLENBQUM7SUFDRixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFhLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDekcsQ0FBQztBQUVNLEtBQUssVUFBVSxHQUFHLENBQUMsS0FBZTtJQUN2QyxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQU07UUFBRSxPQUFPO0lBQzNCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxrRUFBa0UsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDOUYsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvYnJpYW5sb25nL0RldmVsb3Blci9zdW1taXQvc2VydmVyL3NyYy9yZWxheS9xdWV1ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQb29sIH0gZnJvbSAncGcnO1xuaW1wb3J0IGNyeXB0byBmcm9tICdjcnlwdG8nO1xuaW1wb3J0IHR5cGUgeyBSZWxheU1zZyB9IGZyb20gJy4vdHlwZXMnO1xuXG5jb25zdCBwZyA9IG5ldyBQb29sKHsgY29ubmVjdGlvblN0cmluZzogcHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMIH0pO1xuXG5mdW5jdGlvbiBnZW5JZCgpIHtcbiAgLy8gVUxJRC1saWtlOiB0aW1lICsgcmFuZG9tIGJhc2UzMlxuICBjb25zdCB0ID0gRGF0ZS5ub3coKS50b1N0cmluZygzNikudG9VcHBlckNhc2UoKTtcbiAgY29uc3QgciA9IGNyeXB0by5yYW5kb21CeXRlcygxMCkudG9TdHJpbmcoJ2Jhc2U2NCcpLnJlcGxhY2UoL1teMC05QS1aXS9nLCAnJykuc2xpY2UoMCwgMTIpO1xuICByZXR1cm4gKHQgKyByKS5zbGljZSgwLCAyNik7XG59XG5cbmZ1bmN0aW9uIHNpZ25FbnYoeyBpZCwgY3JlYXRlZEF0LCBwYXlsb2FkIH06IHsgaWQ6IHN0cmluZzsgY3JlYXRlZEF0OiBzdHJpbmc7IHBheWxvYWQ6IGFueSB9KSB7XG4gIGNvbnN0IGtleSA9IHByb2Nlc3MuZW52LkhVQl9QUklWQVRFX0tFWTtcbiAgY29uc3QgaGFzaCA9IGNyeXB0by5jcmVhdGVIYXNoKCdzaGEyNTYnKS51cGRhdGUoSlNPTi5zdHJpbmdpZnkocGF5bG9hZCkpLmRpZ2VzdCgnaGV4Jyk7XG4gIGNvbnN0IGRhdGEgPSBpZCArICd8JyArIGNyZWF0ZWRBdCArICd8JyArIGhhc2g7XG4gIGlmICgha2V5KSByZXR1cm4gJyc7XG4gIGNvbnN0IHNpZ25lciA9IGNyeXB0by5jcmVhdGVTaWduKCdSU0EtU0hBMjU2Jyk7XG4gIHNpZ25lci51cGRhdGUoZGF0YSk7XG4gIHNpZ25lci5lbmQoKTtcbiAgdHJ5IHsgcmV0dXJuIHNpZ25lci5zaWduKGtleSwgJ2Jhc2U2NCcpOyB9IGNhdGNoIHsgcmV0dXJuICcnOyB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBlbnF1ZXVlKHNpdGVJZDogc3RyaW5nLCBraW5kOiBSZWxheU1zZ1sna2luZCddLCBwYXlsb2FkOiBhbnkpIHtcbiAgY29uc3QgaWQgPSBnZW5JZCgpO1xuICBjb25zdCBjcmVhdGVkQXQgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gIGNvbnN0IG1zZzogUmVsYXlNc2cgPSB7IGlkLCBraW5kLCBzaXRlSWQsIHBheWxvYWQsIGNyZWF0ZWRBdCwgc2lnOiBzaWduRW52KHsgaWQsIGNyZWF0ZWRBdCwgcGF5bG9hZCB9KSB9O1xuICBhd2FpdCBwZy5xdWVyeShcbiAgICBgSU5TRVJUIElOVE8gc3luY19vdXRib3goc2l0ZV9pZCwga2luZCwgcmVmLCBwYXlsb2FkKSBWQUxVRVMgKCQxLCQyLCQzLCQ0KWAsXG4gICAgW3NpdGVJZCwga2luZCwgaWQsIEJ1ZmZlci5mcm9tKEpTT04uc3RyaW5naWZ5KG1zZykpXSxcbiAgKTtcbiAgcmV0dXJuIGlkO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcG9sbChzaXRlSWQ6IHN0cmluZywgbWF4ID0gNTApIHtcbiAgY29uc3QgeyByb3dzIH0gPSBhd2FpdCBwZy5xdWVyeShcbiAgICBgU0VMRUNUIGlkLCBwYXlsb2FkIEZST00gc3luY19vdXRib3ggV0hFUkUgc2l0ZV9pZD0kMSBBTkQgc3RhdHVzPSdRVUVVRUQnIE9SREVSIEJZIGlkIEFTQyBMSU1JVCAkMmAsXG4gICAgW3NpdGVJZCwgbWF4XSxcbiAgKTtcbiAgcmV0dXJuIHJvd3MubWFwKChyOiBhbnkpID0+ICh7IGRiSWQ6IHIuaWQsIC4uLihKU09OLnBhcnNlKHIucGF5bG9hZC50b1N0cmluZygndXRmOCcpKSkgYXMgUmVsYXlNc2cgfSkpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYWNrKGRiSWRzOiBudW1iZXJbXSkge1xuICBpZiAoIWRiSWRzPy5sZW5ndGgpIHJldHVybjtcbiAgYXdhaXQgcGcucXVlcnkoYFVQREFURSBzeW5jX291dGJveCBTRVQgc3RhdHVzPSdBQ0snIFdIRVJFIGlkID0gQU5ZKCQxOjpiaWdpbnRbXSlgLCBbZGJJZHNdKTtcbn1cblxuIl0sInZlcnNpb24iOjN9