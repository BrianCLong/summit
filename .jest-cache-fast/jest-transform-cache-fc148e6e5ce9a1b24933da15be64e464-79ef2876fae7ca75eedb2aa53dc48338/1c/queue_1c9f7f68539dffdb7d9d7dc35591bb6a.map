{"file":"/Users/brianlong/Developer/summit/server/src/relay/queue.ts","mappings":"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","names":[],"sources":["/Users/brianlong/Developer/summit/server/src/relay/queue.ts"],"sourcesContent":["import { Pool } from 'pg';\nimport crypto from 'crypto';\nimport type { RelayMsg } from './types';\n\nconst pg = new Pool({ connectionString: process.env.DATABASE_URL });\n\nfunction genId() {\n  // ULID-like: time + random base32\n  const t = Date.now().toString(36).toUpperCase();\n  const r = crypto.randomBytes(10).toString('base64').replace(/[^0-9A-Z]/g, '').slice(0, 12);\n  return (t + r).slice(0, 26);\n}\n\nfunction signEnv({ id, createdAt, payload }: { id: string; createdAt: string; payload: any }) {\n  const key = process.env.HUB_PRIVATE_KEY;\n  const hash = crypto.createHash('sha256').update(JSON.stringify(payload)).digest('hex');\n  const data = id + '|' + createdAt + '|' + hash;\n  if (!key) return '';\n  const signer = crypto.createSign('RSA-SHA256');\n  signer.update(data);\n  signer.end();\n  try { return signer.sign(key, 'base64'); } catch { return ''; }\n}\n\nexport async function enqueue(siteId: string, kind: RelayMsg['kind'], payload: any) {\n  const id = genId();\n  const createdAt = new Date().toISOString();\n  const msg: RelayMsg = { id, kind, siteId, payload, createdAt, sig: signEnv({ id, createdAt, payload }) };\n  await pg.query(\n    `INSERT INTO sync_outbox(site_id, kind, ref, payload) VALUES ($1,$2,$3,$4)`,\n    [siteId, kind, id, Buffer.from(JSON.stringify(msg))],\n  );\n  return id;\n}\n\nexport async function poll(siteId: string, max = 50) {\n  const { rows } = await pg.query(\n    `SELECT id, payload FROM sync_outbox WHERE site_id=$1 AND status='QUEUED' ORDER BY id ASC LIMIT $2`,\n    [siteId, max],\n  );\n  return rows.map((r: any) => ({ dbId: r.id, ...(JSON.parse(r.payload.toString('utf8'))) as RelayMsg }));\n}\n\nexport async function ack(dbIds: number[]) {\n  if (!dbIds?.length) return;\n  await pg.query(`UPDATE sync_outbox SET status='ACK' WHERE id = ANY($1::bigint[])`, [dbIds]);\n}\n\n"],"version":3}