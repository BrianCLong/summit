2573d00c00be35497b0d59f5cd8254e5
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.startKafkaSource = startKafkaSource;
exports.webhookHandler = webhookHandler;
const pg_1 = require("pg");
// Optional kafka integration: load lazily to avoid hard dep when not used
let Kafka;
try {
    Kafka = require('kafkajs').Kafka;
}
catch { }
const pg = new pg_1.Pool({ connectionString: process.env.DATABASE_URL });
const kafka = Kafka ? new Kafka({ clientId: 'conductor-events', brokers: (process.env.KAFKA || '').split(',').filter(Boolean) }) : null;
async function startKafkaSource(src) {
    if (!kafka)
        throw new Error('kafkajs not available');
    const consumer = kafka.consumer({ groupId: src.group });
    await consumer.connect();
    await consumer.subscribe({ topic: src.topic, fromBeginning: false });
    await consumer.run({
        eachMessage: async ({ partition, message }) => {
            const key = message.key?.toString() || `${partition}:${message.offset}`;
            const off = Number(message.offset);
            const ok = await claimOffset(src, partition, off);
            if (!ok)
                return; // already processed
            await triggerRunbook(src.runbook, { eventKey: key, value: message.value?.toString() });
            await storeOffset(src, partition, off);
        },
    });
}
async function claimOffset(src, partition, offset) {
    const { rowCount } = await pg.query(`INSERT INTO stream_offset(runbook, source_id, partition, offset)
     VALUES ($1,$2,$3,$4)
     ON CONFLICT (runbook,source_id,partition) DO NOTHING`, [src.runbook, src.id, partition, offset]);
    return rowCount > 0;
}
async function storeOffset(src, partition, offset) {
    await pg.query(`UPDATE stream_offset SET offset=$1, updated_at=now() WHERE runbook=$2 AND source_id=$3 AND partition=$4`, [offset, src.runbook, src.id, partition]);
}
async function webhookHandler(req, res) {
    const sig = req.headers['x-hub-signature-256'] || req.headers['x-intelgraph-signature'];
    if (!verifyHmac(sig, req.rawBody, process.env.WEBHOOK_SECRET))
        return res.status(401).end();
    await triggerRunbook(req.query.runbook, { eventKey: req.headers['x-event-id'], value: req.body });
    res.sendStatus(202);
}
function verifyHmac(sig, body, secret) {
    // TODO: implement HMAC-SHA256 check
    return Boolean(sig && body && secret);
}
async function triggerRunbook(runbook, payload) {
    // TODO: enqueue a run with payload
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2JyaWFubG9uZy9EZXZlbG9wZXIvc3VtbWl0L3NlcnZlci9zcmMvY29uZHVjdG9yL2V2ZW50cy9lbmdpbmUudHMiLCJtYXBwaW5ncyI6Ijs7QUFTQSw0Q0FlQztBQWtCRCx3Q0FLQztBQS9DRCwyQkFBMEI7QUFFMUIsMEVBQTBFO0FBQzFFLElBQUksS0FBVSxDQUFDO0FBQ2YsSUFBSSxDQUFDO0lBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUM7QUFBQyxDQUFDO0FBQUMsTUFBTSxDQUFDLENBQUEsQ0FBQztBQUVsRCxNQUFNLEVBQUUsR0FBRyxJQUFJLFNBQUksQ0FBQyxFQUFFLGdCQUFnQixFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQztBQUNwRSxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLEVBQUUsUUFBUSxFQUFFLGtCQUFrQixFQUFFLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFFakksS0FBSyxVQUFVLGdCQUFnQixDQUFDLEdBQWtFO0lBQ3ZHLElBQUksQ0FBQyxLQUFLO1FBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0lBQ3JELE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRSxPQUFPLEVBQUUsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDeEQsTUFBTSxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDekIsTUFBTSxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxLQUFLLEVBQUUsYUFBYSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDckUsTUFBTSxRQUFRLENBQUMsR0FBRyxDQUFDO1FBQ2pCLFdBQVcsRUFBRSxLQUFLLEVBQUUsRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFPLEVBQUUsRUFBRTtZQUNqRCxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLEdBQUcsU0FBUyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUN4RSxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ25DLE1BQU0sRUFBRSxHQUFHLE1BQU0sV0FBVyxDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDbEQsSUFBSSxDQUFDLEVBQUU7Z0JBQUUsT0FBTyxDQUFDLG9CQUFvQjtZQUNyQyxNQUFNLGNBQWMsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDdkYsTUFBTSxXQUFXLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUN6QyxDQUFDO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELEtBQUssVUFBVSxXQUFXLENBQUMsR0FBUSxFQUFFLFNBQWlCLEVBQUUsTUFBYztJQUNwRSxNQUFNLEVBQUUsUUFBUSxFQUFFLEdBQUcsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUNqQzs7MERBRXNELEVBQ3RELENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FDekMsQ0FBQztJQUNGLE9BQU8sUUFBUSxHQUFHLENBQUMsQ0FBQztBQUN0QixDQUFDO0FBQ0QsS0FBSyxVQUFVLFdBQVcsQ0FBQyxHQUFRLEVBQUUsU0FBaUIsRUFBRSxNQUFjO0lBQ3BFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FDWix5R0FBeUcsRUFDekcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLFNBQVMsQ0FBQyxDQUN6QyxDQUFDO0FBQ0osQ0FBQztBQUVNLEtBQUssVUFBVSxjQUFjLENBQUMsR0FBUSxFQUFFLEdBQVE7SUFDckQsTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsd0JBQXdCLENBQUMsQ0FBQztJQUN4RixJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBZSxDQUFDO1FBQUUsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQzdGLE1BQU0sY0FBYyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEVBQUUsUUFBUSxFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ2xHLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDdEIsQ0FBQztBQUNELFNBQVMsVUFBVSxDQUFDLEdBQVcsRUFBRSxJQUFZLEVBQUUsTUFBYztJQUMzRCxvQ0FBb0M7SUFDcEMsT0FBTyxPQUFPLENBQUMsR0FBRyxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsQ0FBQztBQUN4QyxDQUFDO0FBQ0QsS0FBSyxVQUFVLGNBQWMsQ0FBQyxPQUFlLEVBQUUsT0FBWTtJQUN6RCxtQ0FBbUM7QUFDckMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvYnJpYW5sb25nL0RldmVsb3Blci9zdW1taXQvc2VydmVyL3NyYy9jb25kdWN0b3IvZXZlbnRzL2VuZ2luZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQb29sIH0gZnJvbSAncGcnO1xuXG4vLyBPcHRpb25hbCBrYWZrYSBpbnRlZ3JhdGlvbjogbG9hZCBsYXppbHkgdG8gYXZvaWQgaGFyZCBkZXAgd2hlbiBub3QgdXNlZFxubGV0IEthZmthOiBhbnk7XG50cnkgeyBLYWZrYSA9IHJlcXVpcmUoJ2thZmthanMnKS5LYWZrYTsgfSBjYXRjaCB7fVxuXG5jb25zdCBwZyA9IG5ldyBQb29sKHsgY29ubmVjdGlvblN0cmluZzogcHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMIH0pO1xuY29uc3Qga2Fma2EgPSBLYWZrYSA/IG5ldyBLYWZrYSh7IGNsaWVudElkOiAnY29uZHVjdG9yLWV2ZW50cycsIGJyb2tlcnM6IChwcm9jZXNzLmVudi5LQUZLQSB8fCAnJykuc3BsaXQoJywnKS5maWx0ZXIoQm9vbGVhbikgfSkgOiBudWxsO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3RhcnRLYWZrYVNvdXJjZShzcmM6IHsgaWQ6IG51bWJlcjsgdG9waWM6IHN0cmluZzsgZ3JvdXA6IHN0cmluZzsgcnVuYm9vazogc3RyaW5nIH0pIHtcbiAgaWYgKCFrYWZrYSkgdGhyb3cgbmV3IEVycm9yKCdrYWZrYWpzIG5vdCBhdmFpbGFibGUnKTtcbiAgY29uc3QgY29uc3VtZXIgPSBrYWZrYS5jb25zdW1lcih7IGdyb3VwSWQ6IHNyYy5ncm91cCB9KTtcbiAgYXdhaXQgY29uc3VtZXIuY29ubmVjdCgpO1xuICBhd2FpdCBjb25zdW1lci5zdWJzY3JpYmUoeyB0b3BpYzogc3JjLnRvcGljLCBmcm9tQmVnaW5uaW5nOiBmYWxzZSB9KTtcbiAgYXdhaXQgY29uc3VtZXIucnVuKHtcbiAgICBlYWNoTWVzc2FnZTogYXN5bmMgKHsgcGFydGl0aW9uLCBtZXNzYWdlIH06IGFueSkgPT4ge1xuICAgICAgY29uc3Qga2V5ID0gbWVzc2FnZS5rZXk/LnRvU3RyaW5nKCkgfHwgYCR7cGFydGl0aW9ufToke21lc3NhZ2Uub2Zmc2V0fWA7XG4gICAgICBjb25zdCBvZmYgPSBOdW1iZXIobWVzc2FnZS5vZmZzZXQpO1xuICAgICAgY29uc3Qgb2sgPSBhd2FpdCBjbGFpbU9mZnNldChzcmMsIHBhcnRpdGlvbiwgb2ZmKTtcbiAgICAgIGlmICghb2spIHJldHVybjsgLy8gYWxyZWFkeSBwcm9jZXNzZWRcbiAgICAgIGF3YWl0IHRyaWdnZXJSdW5ib29rKHNyYy5ydW5ib29rLCB7IGV2ZW50S2V5OiBrZXksIHZhbHVlOiBtZXNzYWdlLnZhbHVlPy50b1N0cmluZygpIH0pO1xuICAgICAgYXdhaXQgc3RvcmVPZmZzZXQoc3JjLCBwYXJ0aXRpb24sIG9mZik7XG4gICAgfSxcbiAgfSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNsYWltT2Zmc2V0KHNyYzogYW55LCBwYXJ0aXRpb246IG51bWJlciwgb2Zmc2V0OiBudW1iZXIpIHtcbiAgY29uc3QgeyByb3dDb3VudCB9ID0gYXdhaXQgcGcucXVlcnkoXG4gICAgYElOU0VSVCBJTlRPIHN0cmVhbV9vZmZzZXQocnVuYm9vaywgc291cmNlX2lkLCBwYXJ0aXRpb24sIG9mZnNldClcbiAgICAgVkFMVUVTICgkMSwkMiwkMywkNClcbiAgICAgT04gQ09ORkxJQ1QgKHJ1bmJvb2ssc291cmNlX2lkLHBhcnRpdGlvbikgRE8gTk9USElOR2AsXG4gICAgW3NyYy5ydW5ib29rLCBzcmMuaWQsIHBhcnRpdGlvbiwgb2Zmc2V0XSxcbiAgKTtcbiAgcmV0dXJuIHJvd0NvdW50ID4gMDtcbn1cbmFzeW5jIGZ1bmN0aW9uIHN0b3JlT2Zmc2V0KHNyYzogYW55LCBwYXJ0aXRpb246IG51bWJlciwgb2Zmc2V0OiBudW1iZXIpIHtcbiAgYXdhaXQgcGcucXVlcnkoXG4gICAgYFVQREFURSBzdHJlYW1fb2Zmc2V0IFNFVCBvZmZzZXQ9JDEsIHVwZGF0ZWRfYXQ9bm93KCkgV0hFUkUgcnVuYm9vaz0kMiBBTkQgc291cmNlX2lkPSQzIEFORCBwYXJ0aXRpb249JDRgLFxuICAgIFtvZmZzZXQsIHNyYy5ydW5ib29rLCBzcmMuaWQsIHBhcnRpdGlvbl0sXG4gICk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB3ZWJob29rSGFuZGxlcihyZXE6IGFueSwgcmVzOiBhbnkpIHtcbiAgY29uc3Qgc2lnID0gcmVxLmhlYWRlcnNbJ3gtaHViLXNpZ25hdHVyZS0yNTYnXSB8fCByZXEuaGVhZGVyc1sneC1pbnRlbGdyYXBoLXNpZ25hdHVyZSddO1xuICBpZiAoIXZlcmlmeUhtYWMoc2lnLCByZXEucmF3Qm9keSwgcHJvY2Vzcy5lbnYuV0VCSE9PS19TRUNSRVQhKSkgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5lbmQoKTtcbiAgYXdhaXQgdHJpZ2dlclJ1bmJvb2socmVxLnF1ZXJ5LnJ1bmJvb2ssIHsgZXZlbnRLZXk6IHJlcS5oZWFkZXJzWyd4LWV2ZW50LWlkJ10sIHZhbHVlOiByZXEuYm9keSB9KTtcbiAgcmVzLnNlbmRTdGF0dXMoMjAyKTtcbn1cbmZ1bmN0aW9uIHZlcmlmeUhtYWMoc2lnOiBzdHJpbmcsIGJvZHk6IEJ1ZmZlciwgc2VjcmV0OiBzdHJpbmcpIHtcbiAgLy8gVE9ETzogaW1wbGVtZW50IEhNQUMtU0hBMjU2IGNoZWNrXG4gIHJldHVybiBCb29sZWFuKHNpZyAmJiBib2R5ICYmIHNlY3JldCk7XG59XG5hc3luYyBmdW5jdGlvbiB0cmlnZ2VyUnVuYm9vayhydW5ib29rOiBzdHJpbmcsIHBheWxvYWQ6IGFueSkge1xuICAvLyBUT0RPOiBlbnF1ZXVlIGEgcnVuIHdpdGggcGF5bG9hZFxufVxuXG4iXSwidmVyc2lvbiI6M30=