# Docker Compose for IntelGraph with AI/ML capabilities
version: '3.8'

services:
  # Main application with AI support
  intelgraph-ai:
    build:
      context: .
      dockerfile: Dockerfile.ai
    container_name: intelgraph-ai
    restart: unless-stopped
    environment:
      # AI Configuration
      - AI_MODELS_PATH=/app/models
      - AI_TEMP_PATH=/app/temp
      - AI_PYTHON_PATH=/app/venv/bin/python
      - AI_ENABLE_GPU=true
      - AI_MAX_CONCURRENT_JOBS=5
      - AI_BATCH_SIZE=32
      
      # OCR Configuration
      - OCR_DEFAULT_ENGINE=tesseract
      - OCR_LANGUAGES=eng,deu,fra,spa,chi_sim
      - OCR_CONFIDENCE_THRESHOLD=0.6
      - OCR_ENHANCE_IMAGE=true
      
      # Object Detection Configuration
      - OBJECT_DETECTION_MODEL=yolov8n.pt
      - OBJECT_DETECTION_CONFIDENCE=0.5
      - OBJECT_DETECTION_NMS_THRESHOLD=0.4
      - OBJECT_DETECTION_MAX_DETECTIONS=100
      
      # Face Detection Configuration
      - FACE_DETECTION_MODEL=mtcnn
      - FACE_DETECTION_MIN_SIZE=20
      - FACE_DETECTION_CONFIDENCE=0.7
      - FACE_DETECTION_EXTRACT_FEATURES=true
      
      # Speech Recognition Configuration
      - SPEECH_MODEL=whisper-base
      - SPEECH_LANGUAGES=en,de,fr,es,auto
      - SPEECH_ENABLE_DIARIZATION=false
      - SPEECH_ENHANCE_AUDIO=true
      - SPEECH_WORD_TIMESTAMPS=true
      
      # Text Analysis Configuration
      - TEXT_ANALYSIS_MODEL=en_core_web_lg
      - TEXT_ANALYSIS_EXTRACT_ENTITIES=true
      - TEXT_ANALYSIS_SENTIMENT=true
      - TEXT_ANALYSIS_TOPICS=false
      - TEXT_ANALYSIS_LANGUAGE_DETECTION=true
      
      # Embedding Configuration
      - EMBEDDING_MODEL=all-MiniLM-L6-v2
      - EMBEDDING_NORMALIZE=true
      - EMBEDDING_POOLING=mean
      - EMBEDDING_DIMENSION=384
      
      # Vector Search Configuration
      - VECTOR_SIMILARITY_THRESHOLD=0.7
      - VECTOR_TOP_K=10
      - VECTOR_ENABLE_CLUSTERING=true
      
      # NLTK Data
      - NLTK_DATA=/app/models/nltk
      
      # Database connections (using host network for simplicity)
      - NEO4J_URI=bolt://host.docker.internal:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=devpassword
      - POSTGRES_HOST=host.docker.internal
      - POSTGRES_PORT=5432
      - POSTGRES_DB=intelgraph_dev
      - POSTGRES_USER=intelgraph
      - POSTGRES_PASSWORD=devpassword
      - REDIS_HOST=host.docker.internal
      - REDIS_PORT=6379
      - REDIS_PASSWORD=devpassword
    
    volumes:
      # Persistent model storage
      - ai_models:/app/models
      - ai_cache:/home/aiuser/.cache
      # Application data
      - ./server/uploads:/app/uploads
      - ./server/temp:/app/temp
      - ./server/logs:/app/logs
      # Source code for development
      - ./server/src/ai:/app/src/ai
    
    ports:
      - "8000:8000"  # AI service port
    
    # GPU support (uncomment if you have NVIDIA GPU)
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]
    
    networks:
      - intelgraph-network
    
    # Add extra hosts for Docker Desktop on macOS/Windows
    extra_hosts:
      - "host.docker.internal:host-gateway"
    
    healthcheck:
      test: ["/app/healthcheck.sh"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 60s

  # AI-enabled server (alternative approach - extend main server)
  intelgraph-server-ai:
    build:
      context: .
      dockerfile: server/Dockerfile
      target: production
    container_name: intelgraph-server-ai
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=4000
      
      # Database Configuration
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=devpassword
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=intelgraph
      - POSTGRES_USER=intelgraph
      - POSTGRES_PASSWORD=devpassword
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=devpassword
      
      # AI Configuration (using AI container)
      - AI_SERVICE_URL=http://intelgraph-ai:8000
      - AI_ENABLE_GPU=false  # GPU handled by AI container
      - AI_MAX_CONCURRENT_JOBS=5
      
      # Security
      - JWT_SECRET=change_this_in_production_jwt_secret_key_12345
      - JWT_REFRESH_SECRET=change_this_in_production_refresh_secret_67890
    
    volumes:
      - ./server/uploads:/app/uploads
      - ./server/logs:/app/logs
    
    ports:
      - "4000:4000"
    
    depends_on:
      - postgres
      - redis
      - neo4j
      - intelgraph-ai
    
    networks:
      - intelgraph-network
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database services (same as main compose)
  postgres:
    image: postgres:16-alpine
    container_name: intelgraph-postgres-ai
    restart: unless-stopped
    environment:
      - POSTGRES_DB=intelgraph
      - POSTGRES_USER=intelgraph
      - POSTGRES_PASSWORD=devpassword
    volumes:
      - postgres_data_ai:/var/lib/postgresql/data
      - ./server/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - intelgraph-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U intelgraph -d intelgraph"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: intelgraph-redis-ai
    restart: unless-stopped
    command: redis-server --requirepass devpassword --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data_ai:/data
    ports:
      - "6379:6379"
    networks:
      - intelgraph-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  neo4j:
    image: neo4j:5-community
    container_name: intelgraph-neo4j-ai
    restart: unless-stopped
    environment:
      - NEO4J_AUTH=neo4j/devpassword
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
    volumes:
      - neo4j_data_ai:/data
      - neo4j_logs_ai:/logs
      - neo4j_import_ai:/var/lib/neo4j/import
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    networks:
      - intelgraph-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "devpassword", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  cognitive-targeting-engine:
    build: ./cognitive-targeting-engine
    container_name: intelgraph-cognitive-targeting-engine
    restart: unless-stopped
    ports:
      - "8005:8000"
    networks:
      - intelgraph-network

volumes:
  # AI-specific volumes
  ai_models:
    driver: local
  ai_cache:
    driver: local
  
  # Database volumes
  postgres_data_ai:
    driver: local
  redis_data_ai:
    driver: local
  neo4j_data_ai:
    driver: local
  neo4j_logs_ai:
    driver: local
  neo4j_import_ai:
    driver: local

networks:
  intelgraph-network:
    driver: bridge