#!/bin/bash

# IntelGraph Platform - Patch Application Script
# This script applies all patches generated by the Aurelius system

set -e  # Exit on any error

echo "IntelGraph Platform - Patch Application Script"
echo "==============================================="

# Check if we're in the right directory
if [ ! -f "package.json" ]; then
    echo "Error: This script must be run from the root of the IntelGraph repository"
    exit 1
fi

# Parse command line arguments
CHECK_ONLY=false
REVERSE=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --check)
            CHECK_ONLY=true
            shift
            ;;
        --reverse)
            REVERSE=true
            shift
            ;;
        *)
            echo "Unknown option: $1"
            echo "Usage: $0 [--check] [--reverse]"
            exit 1
            ;;
    esac
done

if [ "$CHECK_ONLY" = true ]; then
    echo "Checking patches for applicability..."
    PATCH_DIR="./sprint/impl/diffs"
    if [ -d "$PATCH_DIR" ]; then
        for patch_file in "$PATCH_DIR"/*.patch; do
            if [ -f "$patch_file" ]; then
                echo "Checking patch: $(basename "$patch_file")"
                git apply --check "$patch_file"
                if [ $? -eq 0 ]; then
                    echo "✓ $(basename "$patch_file") can be applied cleanly"
                else
                    echo "✗ $(basename "$patch_file") would fail to apply"
                    exit 1
                fi
            fi
        done
    else
        echo "No patches directory found at $PATCH_DIR"
    fi
    echo "All patches check completed successfully!"
    exit 0
fi

if [ "$REVERSE" = true ]; then
    echo "Reversing patches from IntelGraph platform..."
    PATCH_DIR="./sprint/impl/diffs"
    if [ -d "$PATCH_DIR" ]; then
        # Process patches in reverse order for reversal
        for patch_file in $(ls -r "$PATCH_DIR"/*.patch 2>/dev/null); do
            if [ -f "$patch_file" ]; then
                echo "Reversing patch: $(basename "$patch_file")"
                git apply -R "$patch_file"
                if [ $? -eq 0 ]; then
                    echo "✓ Successfully reversed $(basename "$patch_file")"
                else
                    echo "✗ Failed to reverse $(basename "$patch_file")"
                    exit 1
                fi
            fi
        done
    else
        echo "No patches directory found at $PATCH_DIR"
    fi
    echo ""
    echo "All patches reversed successfully!"
    exit 0
fi

echo "Applying patches to IntelGraph platform..."

# Apply patches in sequence
PATCH_DIR="./sprint/impl/diffs"
if [ -d "$PATCH_DIR" ]; then
    for patch_file in "$PATCH_DIR"/*.patch; do
        if [ -f "$patch_file" ]; then
            echo "Applying patch: $(basename "$patch_file")"
            # Use --3way for better merge handling
            git apply --3way "$patch_file"
            if [ $? -eq 0 ]; then
                echo "✓ Successfully applied $(basename "$patch_file")"
            else
                echo "✗ Failed to apply $(basename "$patch_file")"
                # Try with reject files
                git apply --reject "$patch_file"
                echo "Applied with conflicts, check .rej files"
                exit 1
            fi
        fi
    done
else
    echo "No patches directory found at $PATCH_DIR"
fi

echo ""
echo "All patches applied successfully!"
echo ""
echo "Next steps:"
echo "1. Review the changes in the /sprint directory"
echo "2. Run 'npm run typecheck' to verify TypeScript"
echo "3. Run 'npm run lint' to ensure code quality"
echo "4. Run tests to validate functionality"
echo "5. Commit changes with appropriate commit messages"