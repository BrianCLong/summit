set shell := ["/bin/bash", "-cu"]

# === ENHANCED RAG SYSTEM ===

# Build/rebuild the DuckDB index from rag/corpus (legacy method)
rag-build:
    python3 tools/rag_index.py

# Enhanced ingestion with multiple paths and file types
rag-ingest +paths='rag/corpus':
    python3 tools/rag_ingest.py {{paths}}

# Force re-ingest all files (ignores hash-based caching)
rag-reingest +paths='rag/corpus':
    python3 tools/rag_ingest.py --force {{paths}}

# Ask a question using enhanced search
rag q='':
    python3 tools/rag_query_enhanced.py "{{q}}"

# Legacy simple query (for compatibility)
rag-simple q='':
    python3 tools/rag_query.py "{{q}}"

# Semantic search without answer generation
rag-search q='':
    python3 tools/rag_query_enhanced.py --no-answer "{{q}}"

# Keyword-based search
rag-keyword q='':
    python3 tools/rag_query_enhanced.py --mode keyword "{{q}}"

# Hybrid search (semantic + keyword)
rag-hybrid q='':
    python3 tools/rag_query_enhanced.py --mode hybrid "{{q}}"

# Show database statistics  
rag-stats:
    python3 tools/rag_query_enhanced.py --stats

# List all indexed files
rag-files:
    python3 tools/rag_query_enhanced.py --list-files

# Complete rebuild of RAG database
rag-rebuild:
    rm -f rag/index/rag.duckdb
    python3 tools/rag_ingest.py rag/corpus docs pm --stats

# === SPECIALIZED QUERIES ===

# Query with file filtering
rag-filter q='' filter='':
    python3 tools/rag_query_enhanced.py --file-filter "{{filter}}" "{{q}}"

# High-precision search (higher similarity threshold)  
rag-precise q='':
    python3 tools/rag_query_enhanced.py --min-similarity 0.3 "{{q}}"

# Bulk query from file
rag-batch file='':
    @while read -r line; do \
        echo "Q: $line"; \
        python3 tools/rag_query_enhanced.py "$line"; \
        echo "---"; \
    done < "{{file}}"

# === MAINTENANCE & UTILITIES ===

# Kill any stuck Ollama runners
ollama-kill:
    bash tools/ollama_kill.sh

# === BROWSER AI INTEGRATION ===

# Perplexity helper (opens Chrome)
px q='':
    python3 tools/px.py "{{q}}"

# Browser AI orchestrator (see Justfile.browser for more options)
browser q='':
    python3 tools/browser_ai.py --tool perplexity "{{q}}"

# Hybrid local + browser research
research q='':
    @echo "🔍 Local knowledge search..."
    python3 tools/rag_query_enhanced.py "{{q}}" || echo "No local results"
    @echo ""
    @echo "🌐 Opening browser research..."
    python3 tools/browser_ai.py --research "{{q}}"

# Watch for changes and auto-reindex (legacy)
rag-watch:
    bash tools/rag_watch.sh

# Legacy MMR query (if available)
rag-mmr q='':
    python3 tools/rag_query_mmr.py "{{q}}" || echo "MMR query not available"

# === PMI INTEGRATION ===

# Query PMI governance documents specifically
pmi-query q='':
    python3 tools/rag_query_enhanced.py --file-filter "pm/" "{{q}}"

# Query agent prompts and roles
agent-query q='':
    python3 tools/rag_query_enhanced.py --file-filter "prompts/" "{{q}}"

# === DEVELOPMENT HELPERS ===

# Create sample corpus if empty
rag-sample:
    @if [ ! -d rag/corpus ]; then mkdir -p rag/corpus; fi
    @if [ -z "$(ls -A rag/corpus 2>/dev/null)" ]; then \
        echo "Creating sample corpus..."; \
        echo "IntelGraph is an AI-augmented intelligence analysis platform." > rag/corpus/intro.txt; \
        echo "The RAG system indexes documents for semantic search." > rag/corpus/rag.txt; \
        echo "PMI governance includes charters, RAID registers, and stakeholder management." > rag/corpus/pmi.txt; \
        echo "Sample corpus created. Run 'just rag-ingest' to index."; \
    else \
        echo "Corpus directory exists and is not empty"; \
    fi

# Test RAG system with basic queries
rag-test:
    @echo "Testing RAG system..."
    python3 tools/rag_query_enhanced.py --stats
    @echo "Sample query: What is IntelGraph?"
    python3 tools/rag_query_enhanced.py "What is IntelGraph?"
