# Chaos Engineering: Network Latency Injection
# Tests application resilience to network delays

apiVersion: litmuschaos.io/v1alpha1
kind: ChaosEngine
metadata:
  name: network-latency-experiment
  namespace: intelgraph-staging
  annotations:
    chaos.alpha.kubernetes.io/experiment-type: 'network-chaos'
    chaos.alpha.kubernetes.io/scope: 'scoped'
    chaos.alpha.kubernetes.io/safety-level: 'medium'
spec:
  appinfo:
    appns: intelgraph-staging
    applabel: 'app=intelgraph-server'
    appkind: deployment

  chaosServiceAccount: chaos-service-account
  monitoring: true
  jobCleanUpPolicy: retain

  experiments:
    - name: pod-network-latency
      spec:
        components:
          env:
            # Inject 100ms latency
            - name: NETWORK_LATENCY
              value: '100' # 100ms additional latency

            - name: TOTAL_CHAOS_DURATION
              value: '120' # 2 minutes

            - name: RAMP_TIME
              value: '0'

            # Target specific network interface
            - name: NETWORK_INTERFACE
              value: 'eth0'

            # Apply to 50% of traffic
            - name: NETWORK_PACKET_LOSS_PERCENTAGE
              value: '0' # No packet loss, just latency

            # Jitter configuration
            - name: JITTER
              value: '10' # 10ms jitter

            # Target configuration
            - name: TARGET_CONTAINER
              value: 'intelgraph-server'

            - name: PODS_AFFECTED_PERC
              value: '50' # Affect 50% of pods

            # Destination filtering (optional)
            - name: DESTINATION_IPS
              value: '' # Empty = all destinations

            - name: DESTINATION_HOSTS
              value: '' # Can target specific hosts

        # Health probes during latency injection
        probe:
          - name: 'latency-tolerance-probe'
            type: 'httpProbe'
            mode: 'Continuous'
            runProperties:
              probeTimeout: 10 # Increased timeout for latency
              retry: 3
              interval: 15
            httpProbe/inputs:
              url: 'http://intelgraph-server.intelgraph-staging.svc.cluster.local:4000/health'
              insecureSkipTLS: true
              responseTimeout: 8 # Allow for additional latency
              method:
                get:
                  criteria: '=='
                  responseCode: '200'

          - name: 'graphql-latency-probe'
            type: 'httpProbe'
            mode: 'Continuous'
            runProperties:
              probeTimeout: 15
              retry: 2
              interval: 20
            httpProbe/inputs:
              url: 'http://intelgraph-server.intelgraph-staging.svc.cluster.local:4000/graphql'
              insecureSkipTLS: true
              responseTimeout: 12
              method:
                post:
                  contentType: 'application/json'
                  body: '{"query": "query { __typename }"}'
                  criteria: '=='
                  responseCode: '200'

          - name: 'database-connectivity-probe'
            type: 'cmdProbe'
            mode: 'Edge' # Run at start and end
            runProperties:
              probeTimeout: 10
              retry: 3
              interval: 5
            cmdProbe/inputs:
              command: 'nc'
              args:
                [
                  '-z',
                  '-v',
                  'postgres.intelgraph-staging.svc.cluster.local',
                  '5432',
                ]
              source:
                image: 'busybox:latest'
                inheritInputs: true
              comparator:
                type: 'string'
                criteria: 'contains'
                value: 'open'

---
apiVersion: litmuschaos.io/v1alpha1
kind: ChaosExperiment
metadata:
  name: pod-network-latency
  namespace: intelgraph-staging
  labels:
    name: pod-network-latency
    app.kubernetes.io/part-of: litmus
    app.kubernetes.io/component: chaosexperiment
    app.kubernetes.io/version: latest
spec:
  definition:
    scope: Namespaced
    permissions:
      - apiGroups: ['']
        resources: ['pods']
        verbs: ['list', 'get', 'patch', 'create', 'update', 'delete']
      - apiGroups: ['']
        resources: ['events']
        verbs: ['create', 'get', 'list', 'patch', 'update']
      - apiGroups: ['']
        resources: ['pods/exec']
        verbs: ['get', 'list', 'create']
      - apiGroups: ['litmuschaos.io']
        resources: ['chaosengines', 'chaosexperiments', 'chaosresults']
        verbs: ['get', 'list', 'patch', 'update']

    image: 'litmuschaos/go-runner:latest'
    imagePullPolicy: Always
    args:
      - -c
      - ./experiments -name pod-network-latency

    command:
      - /bin/bash

    env:
      - name: TOTAL_CHAOS_DURATION
        value: '60'

      - name: RAMP_TIME
        value: ''

      - name: NETWORK_INTERFACE
        value: 'eth0'

      - name: NETWORK_LATENCY
        value: '100'

      - name: JITTER
        value: '10'

      - name: TARGET_CONTAINER
        value: ''

      - name: PODS_AFFECTED_PERC
        value: ''

      - name: TARGET_PODS
        value: ''

      - name: CONTAINER_RUNTIME
        value: 'containerd'

      - name: SOCKET_PATH
        value: '/run/containerd/containerd.sock'

      - name: DESTINATION_IPS
        value: ''

      - name: DESTINATION_HOSTS
        value: ''

      - name: DEFAULT_HEALTH_CHECK
        value: 'false'

      - name: SEQUENCE
        value: 'parallel'

    labels:
      name: pod-network-latency
      app.kubernetes.io/part-of: litmus
      app.kubernetes.io/component: experiment-job
      app.kubernetes.io/version: latest

---
# Weekly Network Chaos Schedule
apiVersion: litmuschaos.io/v1alpha1
kind: ChaosSchedule
metadata:
  name: weekly-network-chaos
  namespace: intelgraph-staging
spec:
  # Run weekly on Wednesdays at 3 AM UTC
  schedule:
    now: false
    once: false
    repeat:
      timeRange:
        startTime: '03:00'
        endTime: '03:30'
      properties:
        minChaosInterval: '15m'
      workDays:
        includedDays: 'wed' # Wednesday only
        excludedDays: 'mon,tue,thu,fri,sat,sun'

  engineTemplateSpec:
    appinfo:
      appns: intelgraph-staging
      applabel: 'app=intelgraph-server'
      appkind: deployment

    chaosServiceAccount: chaos-service-account
    monitoring: true

    experiments:
      - name: pod-network-latency
        spec:
          components:
            env:
              - name: NETWORK_LATENCY
                value: '50' # Milder latency for scheduled runs
              - name: TOTAL_CHAOS_DURATION
                value: '90'
              - name: JITTER
                value: '5'
              - name: PODS_AFFECTED_PERC
                value: '30'
