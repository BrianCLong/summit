version: '3.8'

services:
  # IntelGraph Application
  intelgraph-app:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: intelgraph-app-prod
    restart: unless-stopped
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=production
      - PORT=4000
      - NEO4J_URI=bolt://neo4j:7687
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
    env_file:
      - .env.production
    depends_on:
      neo4j:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
    networks:
      - intelgraph-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Load Balancer
  nginx:
    image: nginx:alpine
    container_name: intelgraph-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/load-balancer/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_certs:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - intelgraph-app
    networks:
      - intelgraph-prod
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Neo4j Database
  neo4j:
    image: neo4j:5.15-enterprise
    container_name: intelgraph-neo4j-prod
    restart: unless-stopped
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_AUTH=neo4j/your-secure-neo4j-password
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*,gds.*
      - NEO4J_dbms_security_procedures_allowlist=apoc.*,gds.*
      - NEO4J_dbms_memory_heap_initial__size=1G
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_dbms_memory_pagecache_size=1G
      - NEO4J_dbms_default__database=intelgraph
      - NEO4J_dbms_backup_enabled=true
    volumes:
      - neo4j_data_prod:/data
      - neo4j_logs_prod:/logs
      - neo4j_import_prod:/import
      - neo4j_plugins_prod:/plugins
      - ./infrastructure/neo4j/backups:/backups
    networks:
      - intelgraph-prod
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p your-secure-neo4j-password 'RETURN 1'"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # PostgreSQL Database  
  postgres:
    image: postgres:15-alpine
    container_name: intelgraph-postgres-prod
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=intelgraph_prod
      - POSTGRES_USER=intelgraph
      - POSTGRES_PASSWORD=your-secure-postgres-password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./infrastructure/postgres/init:/docker-entrypoint-initdb.d
      - ./infrastructure/postgres/backups:/backups
    networks:
      - intelgraph-prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U intelgraph -d intelgraph_prod"]
      interval: 30s
      timeout: 10s
      retries: 5
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: intelgraph-redis-prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: >
      redis-server
      --requirepass your-secure-redis-password
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data_prod:/data
      - ./infrastructure/redis/backups:/backups
    networks:
      - intelgraph-prod
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "your-secure-redis-password", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backup Service
  backup:
    image: alpine:latest
    container_name: intelgraph-backup-prod
    restart: unless-stopped
    volumes:
      - postgres_data_prod:/postgres-data:ro
      - neo4j_data_prod:/neo4j-data:ro
      - redis_data_prod:/redis-data:ro
      - app_uploads:/app-uploads:ro
      - ./infrastructure/backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    environment:
      - BACKUP_RETENTION_DAYS=30
      - POSTGRES_PASSWORD=your-secure-postgres-password
    networks:
      - intelgraph-prod
    command: >
      sh -c "
        apk add --no-cache postgresql-client redis curl &&
        chmod +x /backup.sh &&
        crond -f
      "

volumes:
  neo4j_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/neo4j
  neo4j_logs_prod:
    driver: local
  neo4j_import_prod:
    driver: local
  neo4j_plugins_prod:
    driver: local
  postgres_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  redis_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  app_uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./uploads
  app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs
  nginx_certs:
    driver: local
  nginx_logs:
    driver: local

networks:
  intelgraph-prod:
    driver: bridge
    driver_opts:
      com.docker.network.enable_ipv6: "false"
    ipam:
      config:
        - subnet: 172.20.0.0/16