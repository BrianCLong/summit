type AIJob {
  id: ID!
  kind: String!
  status: String!
  createdAt: String!
  startedAt: String
  finishedAt: String
  error: String
  meta: JSON
}

type Insight {
  id: ID!
  jobId: ID!
  kind: String!
  payload: JSON!
  status: String! # PENDING | APPROVED | REJECTED
  createdAt: String!
  decidedAt: String
  decidedBy: ID
}

type NLPEntity {
  text: String!
  label: String!
  start: Int
  end: Int
  confidence: Float
}
type ERLink {
  a: ID!
  b: ID!
  score: Float!
}
type LinkPrediction {
  u: ID!
  v: ID!
  score: Float!
}
type Community {
  communityId: ID!
  members: [ID!]!
}

type AutoMLJob {
  jobId: ID!
  task: String!
  status: String!
  backend: String!
  metric: String!
  bestScore: Float!
  bestModel: String!
  durationSeconds: Float!
  createdAt: String!
  completedAt: String!
  metrics: JSON
}

input AutoMLEntityExampleInput {
  text: String!
  label: String!
}

input EntityAutoMLInput {
  examples: [AutoMLEntityExampleInput!]!
  metric: String
  backendPreference: String
  maxRuntimeSeconds: Int
  testSize: Float
}

extend type Query {
  aiJob(id: ID!): AIJob
  insights(status: String, kind: String): [Insight!]!
}

extend type Mutation {
  aiExtractEntities(docs: [JSON!]!, jobId: ID): AIJob!
  aiResolveEntities(records: [JSON!]!, threshold: Float, jobId: ID): AIJob!
  aiLinkPredict(graphSnapshotId: ID!, topK: Int, jobId: ID): AIJob!
  aiCommunityDetect(graphSnapshotId: ID!, jobId: ID): AIJob!
  runEntityAutoML(input: EntityAutoMLInput!, authToken: String): AutoMLJob!

  approveInsight(id: ID!): Insight!
  rejectInsight(id: ID!, reason: String): Insight!
}

type Subscription {
  aiJobProgress(jobId: ID!): AIJob!
  insightAdded(status: String, kind: String): Insight!
}
