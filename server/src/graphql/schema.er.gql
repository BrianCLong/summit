"""
Entity Resolution GraphQL Schema - GA Core Implementation
Provides explainable entity resolution and merge decision capabilities with precision gating
"""

# Enums
enum MergeDecisionType {
  MERGE
  NO_MERGE
  UNCERTAIN
}

enum EntityType {
  PERSON
  ORG
  LOCATION
  ARTIFACT
}

enum ERMethod {
  DETERMINISTIC
  ML
  CLUSTERING
  HYBRID
}

# Core Types
type MergeDecision {
  id: ID!
  entityA: String!
  entityB: String!
  decision: MergeDecisionType!
  score: Float!
  confidence: Float
  explanation: JSON!
  featureScores: JSON
  modelVersion: String!
  method: ERMethod!
  riskScore: Float!
  reviewRequired: Boolean!
  entityType: EntityType!
  createdAt: DateTime!
  updatedAt: DateTime
  createdBy: String
}

type ERPrecisionMetrics {
  entityType: EntityType!
  totalDecisions: Int!
  mergeDecisions: Int!
  noMergeDecisions: Int!
  uncertainDecisions: Int!
  precision: Float!
  avgMergeConfidence: Float
  avgRiskScore: Float!
  reviewsRequired: Int!
  modelVersion: String!
  lastUpdated: DateTime!
}

type ERCIMetric {
  id: ID!
  prNumber: Int
  commitSha: String!
  entityType: EntityType!
  precision: Float!
  sampleSize: Int!
  meetsThreshold: Boolean!
  threshold: Float!
  createdAt: DateTime!
}

type ERThresholdCheck {
  entityType: EntityType!
  currentPrecision: Float!
  threshold: Float!
  meetsThreshold: Boolean!
  sampleSize: Int!
  daysEvaluated: Int!
  evaluatedAt: DateTime!
}

# Input Types
input MergeDecisionInput {
  entityA: String!
  entityB: String!
  entityType: EntityType! = PERSON
  forceReview: Boolean = false
}

input ERMetricsFilter {
  entityType: EntityType
  daysBack: Int = 30
  modelVersion: String
}

# Queries
type Query {
  """Get all pending merge decisions requiring human review"""
  pendingMergeDecisions(
    entityType: EntityType
    limit: Int = 50
    offset: Int = 0
  ): [MergeDecision!]!
  
  """Get a specific merge decision by ID"""
  mergeDecision(id: ID!): MergeDecision
  
  """Get Entity Resolution precision metrics for Go/No-Go dashboard"""
  erPrecisionMetrics(filter: ERMetricsFilter): [ERPrecisionMetrics!]!
  
  """Check if current ER precision meets GA Core thresholds"""
  erThresholdCheck(
    entityType: EntityType! = PERSON
    daysBack: Int = 7
  ): ERThresholdCheck!
  
  """Get CI precision metrics for a specific PR or commit"""
  erCIMetrics(
    prNumber: Int
    commitSha: String
    entityType: EntityType
  ): [ERCIMetric!]!
  
  """Resolve two entities and get explainable merge recommendation"""
  resolveEntities(
    entityA: JSON!
    entityB: JSON!
    entityType: EntityType! = PERSON
  ): MergeDecision!
}

# Mutations
type Mutation {
  """Make a merge decision for two entities"""
  decideMerge(input: MergeDecisionInput!): MergeDecision!
  
  """Override a merge decision (requires admin role)"""
  overrideMergeDecision(
    id: ID!
    decision: MergeDecisionType!
    reason: String!
  ): MergeDecision!
  
  """Mark merge decision as reviewed"""
  reviewMergeDecision(
    id: ID!
    approved: Boolean!
    notes: String
  ): MergeDecision!
  
  """Record CI precision metric (used by GitHub Actions)"""
  recordERCIMetric(
    prNumber: Int
    commitSha: String!
    entityType: EntityType!
    precision: Float!
    sampleSize: Int!
    threshold: Float!
  ): ERCIMetric!
}

# Subscriptions
type Subscription {
  """Subscribe to new merge decisions requiring review"""
  mergeDecisionAdded(entityType: EntityType): MergeDecision!
  
  """Subscribe to precision metric updates"""
  erPrecisionUpdated: ERPrecisionMetrics!
}